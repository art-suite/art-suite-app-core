import &StandardImport
IndexedDb = &IndexeddbPromised

globalIndexDb = null

getGlobalIndexDb = ->
  unless globalIndexDb
    dbVersion = 0
    dbName = null
    each pipeline in pipelines when pipeline instanceof IndexedDbPipeline
      dbVersion += pipeline.dbVersion || 1
      dbName ||= pipeline.dbName
    globalIndexDb = new IndexedDb dbName ||= :IndexedDbPipeline
    globalIndexDb.setVersion dbVersion
    each pipeline in pipelines when pipeline instanceof IndexedDbPipeline
      {name} = pipeline
      keyType = keyPath: :id
      # log addObjectStore: {dbVersion, dbName, name, keyType}
      globalIndexDb.addObjectStore {dbVersion, dbName, name, keyType}
    globalIndexDb = globalIndexDb.build()
  globalIndexDb

class IndexedDbPipeline extends KeyFieldsMixin UpdateAfterMixin Pipeline
  @abstractClass()

  @getter
    objectStore: ->
      @_objectStore ||= getGlobalIndexDb()[@pipelineName]

  @handlers
    get: (request) ->
      @objectStore.get request.key

    create: (request) ->
      @objectStore.add request.data
      .then -> request.data

    update: (request) ->
      @objectStore.get request.key
      .then (oldData) ->
        @objectStore.put newData = merge oldData, request.data
        .then -> newData

    delete: (request) ->
      @objectStore.get request.key
      .then (oldData) ->
        @objectStore.delete request.key
        .then -> oldData
