
import &StandardImport, &LinkFieldsFilter2

# run this AFTER LinkFieldsFilter2 to convert dataUpdates to
# The old over-the-while protocol: including linked objects inline in their parent objects.
class LinkFieldsFilter2LegacyApiEncode extends &Filter

  @after
    all: (response) ->
      if response.props extract dataUpdates

        response.withMergedProps
          data: legacyEncode
            response.pipelineName
            dataUpdates
            response.data
          dataUpdates: null

      else
        response

  legacyEncode = (pipelineName, dataUpdates, data) ->
    if getLinkedFieldFilterForPipeline(pipelineName) extract linkFields
      switch
      when data is Array  then array record in data with  legacyEncodeB linkFields, dataUpdates, record
      when data is Object then                            legacyEncodeB linkFields, dataUpdates, data
      else data
    else data

  ## legacyEncodeB
    IN:
      linkFields: <Object> (Example)
        user:
          pipelineName: :user
          idFieldName: :userId
          prefetch: true
          required: true
          autoCreate: true

      dataUpdates: <Object> (Example)
        myPipelineName: recordId: record

      record: <Object>
  legacyEncodeB = (linkFields, dataUpdates, record) ->
    object {idFieldName, pipelineName} in linkFields into merge record
      legacyEncode
        pipelineName
        dataUpdates
        dataUpdates[pipelineName][record[idFieldName]]
