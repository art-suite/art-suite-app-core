import &ArtStandardLib, &ArtCommunicationStatus, &Art/Ery, &ArtErySessionHandler

class ArtEryHandler extends &ExpressPromiseHandlerBase
  # constructor: ->
  #   super
  #   unless 0 < objectKeyCount pipelines
  #     @logError
  #       """
  #         WARNING: there are 0 pipelines loaded; this server won't do much :).

  #         Please require your pipelines before starting the server.

  canHandleRequest: ({url}) ->
    find pipeline, pipelineName in pipelines when pipeline.restPathRegex.test url

  handleApiRequest: (request, requestData) ->
    {pipeline, type, key} = @_findPipelineForRequest request

    processRequest = (session) ->
      pipeline._processRequest Request.createFromRemoteRequestProps {session, pipeline, type, key, requestData}
      .then ({plainObjectsResponse}) -> signSession session, plainObjectsResponse

    verifySession requestData.session
    .then processRequest
    .catch ->
      processRequest {}
      .then (plainObjectsResponseWithSignedSession) ->
        merge plainObjectsResponseWithSignedSession, replaceSession: true

  ######################
  # PRIVATE
  ######################

  httpMethodsToArtEryRequestTypes =
    get:    :get
    post:   :create
    put:    :update
    delete: :delete

  _findPipelineForRequest: ({url, method}) ->
    find pipeline, pipelineName in pipelines
      if match = url.match pipeline.restPathRegex
        [__, type, key] = match
        type ||= httpMethodsToArtEryRequestTypes[method.toLocaleLowerCase()]
        type && {} pipeline, type, key
