import &ArtStandardLib, &ArtCommunicationStatus, &Art/Ery
&colors

PromiseHttp = &PromiseHttp
PromiseJsonWebToken = &PromiseJsonWebToken

class Main extends &ArtClassSystem.BaseClass
  @defaults:
    port: 8085

  @start: (options) =>
    new @(options).start()

  constructor: (@options = {}) ->
    super
    config.location = :server
    @port       = @options.port
    @numWorkers = @options.numWorkers

  @property :port :numWorkers

  start: ->
    unless 0 < objectKeyCount pipelines
      log.error
        """
          WARNING: there are 0 pipelines loaded; this server won't do much :).

          Please require your pipelines before starting the server.

    {numWorkers} = @
    {verbose} = config

    startSingleServer = => @promiseHttp.start {} @options.static

    if verbose
      log Art.Ery.Server:
        env:      object v, k from process.env when k.match /^art/
        versions: Neptune.getVersions()

    if numWorkers > 1
      log Art.Ery.Server: throng: workers: numWorkers
      &throng
        start:    startSingleServer
        workers:  numWorkers
        lifetime: Infinity
    else
      startSingleServer()

  @setter
    port: (port) -> @_port = (port || Main.defaults.port) | 0

  @getter

    promiseHttp: ->
      @_promiseHttp ||= new PromiseHttp merge @options, {}
        config.verbose
        @port
        name: :Art.Ery.Server

        apiHandlers:
          &ArtEryHandler.artEryPipelineApiHandler
          &ArtEryHandler.artEryPipelineDefaultHandler

        ##
          CORS: allow absolutely everything!

          This is ONLY safe because we don't use cookies, ever:
            Our session information is passed as normal data, and is stored in localStorage.

          For more thoughts on moiving beyond the tradgedy that is CORS:
          SEE: http://www.essenceandartifact.com/2017/01/why-cors-why.html

        commonResponseHeaders:  &AllowAllCors.commonResponseHeaders
        handlers:               &AllowAllCors.handler

    # middleware: -> @promiseHttp.middleware
