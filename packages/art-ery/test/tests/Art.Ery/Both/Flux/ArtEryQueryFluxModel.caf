import &StandardImport, require('art-ery').Flux, {} &SimplePipeline

# {Pipeline} = require('art-ery')
Flux = require("@art-suite/art-flux")

suite:
  pre2020Style: ->
    setup ->
      Flux._reset()

      class Post extends Pipeline
        @query postsByUserId: (request) ->
          []
            userId: request.key, message: "Hi!"
            userId: request.key, message: "Really?"

        @publicRequestTypes :postsByUserId

        @filter after: all: (response) ->
          response.withData
            array record in response.data
              merge record, message: "#{record.message} :)"

      ArtEryFluxModel.defineModelsForAllPipelines()

    test "query model defined", ->
      assert.instanceOf Flux.models.postsByUserId, ArtEryQueryFluxModel

    test "query loadData goes through pipeline", ->
      Flux.models.postsByUserId.loadData "abc123"
      .then (res) ->
        assert.eq res, []
          userId: "abc123", message: "Hi! :)"
          userId: "abc123", message: "Really? :)"

  2020Style: ->
    setup ->
      Flux._reset()

      class Message extends Pipeline
        @query byUserId: (request) ->
          []
            userId: request.key, message: "Hi!"
            userId: request.key, message: "Really?"

        @publicRequestTypes :byUserId

        @filter after: all: (response) ->
          response.withData
            array record in response.data
              merge record, message: "#{record.message} :)"

      ArtEryFluxModel.defineModelsForAllPipelines()

    test "query model defined", ->
      assert.instanceOf Flux.models.messagesByUserId, ArtEryQueryFluxModel

    test "query loadData goes through pipeline", ->
      Flux.models.messagesByUserId.loadData "abc123"
      .then (res) ->
        assert.eq res, []
          userId: "abc123", message: "Hi! :)"
          userId: "abc123", message: "Really? :)"
