import
  &StandardImport
  require('art-ery').Flux
  Flux = require "@art-suite/art-flux"
  {} &SimplePipeline

suite:
  pre2020Style: ->
    setup ->
      Flux._reset()

      class Post extends Pipeline
        @query postsByUserId: (request) ->
          []
            userId: request.key, message: "Hi!"
            userId: request.key, message: "Really?"

        @publicRequestTypes :postsByUserId

        @filter after: all: (response) ->
          response.withData
            array record in response.data
              merge record, message: "#{record.message} :)"

      ArtEryFluxModel.defineModelsForAllPipelines()

    test "query model defined", ->
      assert.instanceOf models.postsByUserId, ArtEryQueryFluxModel

    test "query loadData goes through pipeline", ->
      models.postsByUserId.loadData "abc123"
      .then (res) ->
        assert.eq res, []
          userId: "abc123", message: "Hi! :)"
          userId: "abc123", message: "Really? :)"

  2020Style: ->
    setup ->
      Flux._reset()

      class Message extends Pipeline
        @query byUserId: (request) ->
          []
            userId: request.key, message: "Hi!"
            userId: request.key, message: "Really?"

        @publicRequestTypes :byUserId

        @filter after: all: (response) ->
          response.withData
            array record in response.data
              merge record, message: "#{record.message} :)"

      ArtEryFluxModel.defineModelsForAllPipelines()

    test "query model defined", ->
      assert.instanceOf models.messagesByUserId, ArtEryQueryFluxModel

    test "query loadData goes through pipeline", ->
      models.messagesByUserId.loadData "abc123"
      .then (res) ->
        assert.eq res, []
          userId: "abc123", message: "Hi! :)"
          userId: "abc123", message: "Really? :)"

  2020StyleCodeReuse: ->
    setup ->
      Flux._reset()

      class UserOwned extends Pipeline
        @query byUserId: (request) ->
          []
            userId: request.key, message: "Hi!"
            userId: request.key, message: "Really?"

        @publicRequestTypes :byUserId

        @filter after: all: (response) ->
          response.withData
            array record in response.data
              merge record, message: "#{response.pipeline.name}: #{record.message} :)"

      class Email extends UserOwned
      class Photo extends UserOwned

      ArtEryFluxModel.defineModelsForAllPipelines()

    test "query model defined", ->
      assert.instanceOf models.emailsByUserId, ArtEryQueryFluxModel
      assert.instanceOf models.photosByUserId, ArtEryQueryFluxModel

    test "query loadData goes through pipeline", ->
      models.emailsByUserId.loadData "abc123"
      .then (res) ->
        assert.eq res, []
          userId: "abc123", message: "email: Hi! :)"
          userId: "abc123", message: "email: Really? :)"
