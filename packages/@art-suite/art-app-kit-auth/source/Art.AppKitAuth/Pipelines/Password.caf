import &StandardImport

saltRounds = 10
configureEncryption = ->
  # yes for on node AND Test or Production
  if isNode && &ArtConfig.getArtConfigName() != :Development
    bcrypt = eval(:require) :bcrypt
    hashPassword = (password) ->
      bcrypt.hash password, saltRounds
    comparePassword = (password, hashedPassword) ->
      bcrypt.compare password, hashedPassword
  else
    hashPassword = (p) -> Promise.then -> p + :_dev-fake-hash
    comparePassword = (password, hashedPassword) ->
      hashPassword password
      .then (hp) -> hp == hashedPassword

hashPassword = (password) ->
  configureEncryption()
  hashPassword password

comparePassword = (password, hashedPassword) ->
  configureEncryption()
  comparePassword password, hashedPassword

(dbPipeline) -> class Password extends dbPipeline
  @primaryKey :userId

  hashPassword: hashPassword
  comparePassword: comparePassword

  @addDatabaseFilters
    userOwned: true
    fields:
      hashedPassword: :present :trimmedString

  @handler
    compare: (request)->
      pipelines.password.get request
      .then ({hashedPassword}) -> comparePassword request.props.password, hashedPassword

  @filter
    name: "" hash-password
    before:
      create: hashFilter = (request) ->
        if request.props extract password
          hashPassword password
          .then (hashedPassword) -> request.withMergedData {} hashedPassword

        else request

      update: hashFilter
      createOrUpdate: hashFilter

  @filter
    name: "" validate
    before: all: (request) ->
      request.require !present(request.data?.hashedPassword), "" cannot set hashedPassword directly

  oneIfMatch = (string, regexp) ->
    if regexp.test string then 1 else 0

  getPasswordStrength: (password) ->
    bound
      0
      password.length
      / 4
      | 0
      - 1
      + oneIfMatch password, /[a-z]/
      + oneIfMatch password, /[A-Z]/
      + oneIfMatch password, /[0-9]/
      + oneIfMatch password, /[-=_+*@\/!?&$%^()\[\]|:;<>,.]/
      8
    / 3
    | 0
