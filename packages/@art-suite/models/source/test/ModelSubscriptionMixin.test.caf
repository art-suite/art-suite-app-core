import &StandardImport, {} &ApplicationState

describe
  subscribeOnModelRegistered: ->
    beforeEach _reset
    afterEach -> store.onNextReady()

    test "subscribeOnModelRegistered", ->
      new Promise (resolve, reject) ->
        class MyModelB extends Model

        class MyModelA extends ModelSubscriptionsMixin Model
          constructor: ->
            super
            @subscribeOnModelRegistered :mySubscriptionKey :myModelB :myFluxKey updatesCallback: ->
            .then resolve, reject

  "subscribe and initialFluxRecord": ->

    chainedTest "with stateField and initialFluxRecord", ->
      _reset()
      class MyModel extends &ApplicationState

      new class MyObject extends ModelSubscriptionsMixin BaseObject

        constructor: ->
          @subscribe :mySubscriptionKey :myModel :myFluxKey,
            initialFluxRecord: data: :myInitialData
            stateField: :myStateField

      assert.selectedEq
        status:       pending
        data:         :myInitialData
        key:          :myFluxKey
        modelName:    :myModel
        store.get :myModel :myFluxKey

      store.onNextReady()

    # .thenTest "still pending?" ->
    #   assert.selectedEq
    #     status:       success
    #     data:         :myInitialData
    #     key:          :myFluxKey
    #     modelName:    :myModel
    #     store.get :myModel :myFluxKey

    test "with stateField and no initialFluxRecord", ->
      _reset()
      class MyModel extends &ApplicationState

      new class MyObject extends ModelSubscriptionsMixin BaseObject

        constructor: ->
          @subscribe "mySubscriptionKey", "myModel", "myFluxKey",
            stateField: "myStateField"

      assert.selectedEq
        status:     missing
        key:        "myFluxKey"
        modelName:  "myModel"
        store.get "myModel", "myFluxKey"
