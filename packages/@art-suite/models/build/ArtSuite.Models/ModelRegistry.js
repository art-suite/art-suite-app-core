"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["BaseObject", "Promise", "Error", "formattedInspect", "Object"], [global, require('art-standard-lib'), require('art-class-system')], (BaseObject, Promise, Error, formattedInspect, Object) => {let ModelRegistry; return ModelRegistry = Caf.defClass(class ModelRegistry extends BaseObject {}, function(ModelRegistry, classSuper, instanceSuper) {let temp, base; this.models = ((temp = (base = global).artModels) != null ? temp : base.artModels = {}); this._modelRegistrationPromiseResolvers = {}; this._modelRegistrationPromises = {}; this.register = (model) => {this._registerAliases(model); this._registerModel(model.modelName, model); return this._modelRegistered(model);}; this.onModelRegistered = (modelName) => {let temp1, base1; return ((temp1 = (base1 = this._modelRegistrationPromises)[modelName]) != null ? temp1 : base1[modelName] = Promise.then(() => {let temp2; return ((temp2 = this.models[modelName]) != null ? temp2 : new Promise((resolve) => this._modelRegistrationPromiseResolvers[modelName] = resolve));}));}; this._registerModel = (name, model) => {if (this.models[name]) {throw new Error(`${Caf.toString(ModelRegistry.namespacePath)}: model already registered with same name\n${Caf.toString(formattedInspect({name, model, previouslyRegisteredModel: this.models[name]}))}`);}; return this.models[name] = model;}; this._registerAliases = (model) => Caf.each2(model.class._aliases, (alias) => this._registerModel(alias, model)); this._modelRegistered = (model) => {let base1; Caf.isF((base1 = this._modelRegistrationPromiseResolvers)[model.modelName]) && base1[model.modelName](model); return model;}; this._reset = function() {return Caf.each2(Object.keys(this.models), (k) => delete this.models[k]);};});});});
//# sourceMappingURL=ModelRegistry.js.map
