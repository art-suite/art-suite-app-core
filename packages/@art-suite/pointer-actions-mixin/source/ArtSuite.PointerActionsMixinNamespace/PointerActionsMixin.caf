import &ArtStandardLib, &ArtAtomic, touchSupported: &ArtBrowserTools.simpleBrowserInfo.touch

(superClass) -> class PointerActionsMixin extends superClass
  @abstractClass()

  constructor: -> @_pointerDownInParentAt = @_pointerDownAt = point0

  deadZone: 3

  @stateFields
    hover: false
    pointerIsDown:  false
    mouseIsIn:      false
    dragOffset:     point()
    dragging:       false

  @property :pointerDownInParentAt :pointerDownAt

  setHover: (bool) ->
    @hover = bool
    try (@hoverAction || @props.hoverAction)? bool, @props

  _settingHover: (hover, state = @state) ->
    if hover != state.hover
      @onNextReady -> (@hoverAction || @props.hoverAction)? hover, @props

    hover

  @getter
    touchDragTimeoutMs: -> 1000
    pointerDown: -> @pointerIsDown

    hoverHandlers: -> {} @mouseIn, @mouseOut

    buttonHandlers: -> {}
      @mouseIn
      @mouseOut
      pointerDown:      @pointerDownHandler
      pointerIn:        @pointerDownHandler
      pointerUp:        @pointerUpHandler
      pointerCancel:    @pointerUpHandler
      pointerOut:       @pointerUpHandler
      pointerUpInside:  @pointerUpInsideHandler

    pointerHandlers: -> @buttonHandlers

    dragHandlers: -> {}
      @mouseIn
      @mouseOut
      pointerDown:    @dragPointerDownHandler
      pointerMove:    @dragPointerMoveHandler
      pointerUp:      @dragPointerUpHandler

      pointerUpInside: (event) ->
        @dragFinally event, @dragging, false
        unless @dragging
          @pointerUpInsideHandler event

      pointerCancel:  (event) ->
        @pointerUpHandler()

        if @dragging then @dragCanceled event, @dragOffset
        @dragFinally event, @dragging, true
        @dragging = false

  ########################################
    PRIVATE
  ########################################

  @getter
    mouseIn:            -> @_mouseIn            ?= -> @setState (state) -> merge state, mouseIsIn: true  hover: @_settingHover true, state
    mouseOut:           -> @_mouseOut           ?= -> @setState (state) -> merge state, mouseIsIn: false hover: @_settingHover state.pointerIsDown, state
    pointerDownHandler: -> @_pointerDownHandler ?= -> @setState (state) -> merge state, pointerIsDown: true  hover: @_settingHover true, state
    pointerUpHandler:   -> @_pointerUpHandler   ?= -> @setState (state) -> merge state, pointerIsDown: false hover: @_settingHover state.mouseIsIn, state

    pointerUpInsideHandler: -> @_pointerUpInsideHandler ?= (event) ->
      event.target.capturePointerEvents()
      if !@props.disabled
            (@action ? @props.action)? event, @props
      else  (@disabledAction ? @props.disabledAction)? event, @props

    dragPointerDownHandler: -> @_dragPointerDownHandler ?= (event) ->
      @dragPrepare event
      @pointerDownHandler event
      @pointerDownInParentAt = event.parentLocation
      @pointerDownAt = event.location
      @dragOffset       = point()
      @_pointerDownKey  = pdk = (@_pointerDownKey ? 0) + 1
      event = event.clone()

      if touchSupported
        timeout @touchDragTimeoutMs, ->
          @_drag event if !@dragging && @pointerIsDown && @_pointerDownKey == pdk

    dragPointerMoveHandler: -> @_dragPointerMoveHandler ?= (event) ->
      offset = event.parentLocation.sub @pointerDownInParentAt
      if @dragging || (!touchSupported && Math.max(Math.abs(offset.x), Math.abs(offset.y)) > @deadZone)
        @_drag event, offset

    dragPointerUpHandler: -> @_dragPointerUpHandler ?= (event) ->
      @pointerUpHandler event
      if @dragging then @dragEnd event, event.parentLocation.sub @pointerDownInParentAt
      @dragFinally event, @dragging, false
      @dragOffset     = point()
      @dragging       = false

  _drag: (event, offset) ->
    @dragOffset = offset ?= event.parentLocation.sub @pointerDownInParentAt

    unless @dragging
      @dragging = true
      event.target?.capturePointerEvents?()
      @dragStart event, offset

    @dragMove event, offset

  ##########################################
    Overrides

    If present, clicks trigger:
      action: ->
    or
      disabledAction: ->
  ##########################################

  # touch/button just started, may become a drag action
  dragPrepare:  (event) ->

  ###
    IN:
      dragStarted:  T/F: dragStart fired
      dragCanceled: T?F: dragCanceled fired

    EFFECT:
      called after dragEnd and dragCanceled
  dragFinally:  (event, dragStarted, dragCanceled) ->

  dragMove:     (event, dragOffset) ->
  dragStart:    (event, dragOffset) ->
  dragEnd:      (event, dragOffset) ->
  dragCanceled: (event, dragOffset) ->
