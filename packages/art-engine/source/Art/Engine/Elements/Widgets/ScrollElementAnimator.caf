import &StandardImport, &Animation
animatorBreakingFriction = 3
animatorSpringConstant = 200
animatorSpringFriction = 25

class ScrollElementAnimator extends PersistantAnimator

  constructor: (__, options)->
    @_scrollElement = options.scrollElement
    @_velocity  = 0
    @_tracking = true
    @_springConstant = 0
    @_frictionConstant = 0
    ###
      modes:
        friction:     friction only
        spring:       friction + spring attached to targetScrollPosition
        tracking:     direct tracking, no physics

  @property
    :tracking
    :springConstant
    :frictionConstant
    :velocity

  @getter
    :scrollElement
    hasSpring: -> !floatEq0 @_springConstant
    hasVelocity: -> !floatEq0 @velocity
    active: ->
      @hasVelocity
      || @hasSpring &&
        @currentValue != @toValue

    velocityIsSlow: -> absLte @_velocity, 60 # less than 1 pixel per frame @ 60fps
    scrollPosition: ->          @scrollElement.scrollPosition ? 0
    inspectedObjects: ->
      ScrollElementAnimator: {}
        scrollElement: @scrollElement.inspectedName
        @tracking
        @velocity, @springConstant, @frictionConstant
        @scrollPosition

  @setter
    scrollPosition: (v) ->      @scrollElement.scrollPosition = v

  boundSp: (scrollPosition) ->  @scrollElement.boundSp scrollPosition

  addVelocity: (v) ->
    @_velocity += v
    @tracking = false
    @springConstant   = 0
    @frictionConstant = animatorBreakingFriction
    @scrollPosition += 10 # any change just to trigger the animation

  animateToValidScrollPosition: (scrollPosition = @scrollPosition) ->
    # log.warn :animateToValidScrollPosition0
    # log animateToValidScrollPosition1: @
    @tracking         = false
    @springConstant   = animatorSpringConstant
    @frictionConstant = animatorSpringFriction
    # log animateToValidScrollPosition2: @
    #   unbound:  scrollPosition
    #   bound:    @boundSp scrollPosition
    @scrollPosition = @_toValue = @boundSp scrollPosition

  _stop: ->
    @tracking = true
    @velocity = 0
    @springConstant = 0
    @frictionConstant = 0
    super

  animateAbsoluteTime: ->
    super


  animate: ->
    # log {}
    #   @stop()
    #   @toValue
    # @toValue
    # @stop()
    @ extract
      springConstant
      frictionConstant
      tracking
      frameSeconds
      toValue as targetScrollPosition
      currentValue as scrollPosition

    if tracking
      @stop()

    else
      # PHYSICS
      scrollPositionValid = float32Eq
        scrollPosition
        boundScrollPosition = @boundSp scrollPosition

      if !@hasSpring && @hasVelocity && !scrollPositionValid
        # log :hasSpringAndVelocityAndInvalid
        # if 0 < @_velocity *
        #     boundScrollPosition - scrollPosition
        frictionConstant *= 3

      acceleration =
        @_velocity * -frictionConstant +
          targetScrollPosition - scrollPosition
          * springConstant

      @_velocity      += acceleration * frameSeconds
      scrollPosition  += @_velocity   * frameSeconds

      if @velocityIsSlow
        if @hasSpring
          if 1 >= abs scrollPosition - targetScrollPosition
            # stop if slow and within 1 pixel of the targetScrollPosition
            scrollPosition = @stop()
            # log stoppingSpringAt: {}
            #   @currentValue
            #   @toValue
            #   scrollPosition
            #   bound: @boundSp scrollPosition

        else
          if !scrollPositionValid
            # went past the end, attach the spring to the boundScrollPosition and "animate to valid scrollPosition"
            @animateToValidScrollPosition scrollPosition
          else
            # log stoppingFromFriction: {} scrollPosition
            @stop()

      scrollPosition
