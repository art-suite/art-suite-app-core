import &ArtStandardLib, &ArtAtomic, &ArtEngine, &TestHelper
test = (args...) -> global.test args...

renderTest = (name, options) ->
  test name, ->
    options.render()
    .onNextReady (element) ->
      element.toBitmapBasic()
      .then (bitmap) ->
        log bitmap, name
      .then ->
        options.test element

suite:
  mainAxisCircular: ->
      test "circular height - FlexLayout should use grandparent's height", ->
        Element
          size: w: 100, h: 123
          Element
            size: w: 100, hch:1
            childrenLayout: "column"
            RectangleElement color: #eee      inFlow: false
            RectangleElement color: :red     size: 30
            RectangleElement color: :green   size: hph: 1, w: 50
            RectangleElement color: :blue    size: 40

        .onNextReady (element) ->
          assert.eq element.currentSize, point 100, 123

  crossAxisCircular:
    twoPassCircular: ->
      renderTest
        "" first child determines the second's height
        render: -> Element
          size: w: 200, hch: 1
          childrenLayout: :row
          RectangleElement color: #eee inFlow: false
          RectangleElement color: #ff0 size: ww: 1, h: 60
          RectangleElement color: #0ff size: w: 50, hh: 1
        test: (element) ->
          assert.eq element.currentSize, point 200, 60
          assert.eq
            []
              point 200 60
              point 150 60
              point 50 60
            array el from element.children
              el.currentSize

      renderTest
        "" second child determines the first's height"
        render: -> Element
          size: w: 200, hch: 1
          childrenLayout: :row
          RectangleElement color: #eee inFlow: false
          RectangleElement color: #ff0 size: w: 50, hh: 1
          RectangleElement color: #0ff size: ww: 1, h: 60
        test: (element) ->
          assert.eq element.currentSize, point 200, 60
          assert.eq
            []
              point 200 60
              point 50 60
              point 150 60
            array el from element.children
              el.currentSize

      renderTest
        "" first child determines the other two's height
        render: -> Element
          size: w: 200, hch: 1
          childrenLayout: :row
          RectangleElement color: #eee inFlow: false
          RectangleElement color: #ff0 size: ww: 1, h: 60
          RectangleElement color: #0ff size: w: 40, hh: 1
          RectangleElement color: #f0f size: w: 50, hh: 1
        test: (element) ->
          assert.eq element.currentSize, point 200, 60
          assert.eq
            []
              point 200 60
              point 110 60
              point 40 60
              point 50 60
            array el from element.children
              el.currentSize

    threePassCircular: ->
      renderTest
        "" second determines first's position
        render: -> Element
          size: w: 200, hch: 1
          childrenLayout: :row
          childrenAlignment: :centerLeft
          RectangleElement inFlow: false color: #ff7
          RectangleElement color: #7ff size: ww: 1, h: 10
          RectangleElement color: #f77 size: w: 50, h: (ps) -> max 50, ps.y
        test: (element) ->
          assert.eq element.currentSize, point 200, 50
          assert.eq
            []
              point 0 0
              point 0 20
              point 150, 0
            array el from element.children
              el.currentLocation

      renderTest
        "" first determines second's height
        render: -> Element
          size: w: 200, hch: 1
          childrenLayout: :row
          childrenAlignment: :centerLeft
          RectangleElement inFlow: false color: #ff7
          RectangleElement color: #7ff size: ww: 1, h: 75
          RectangleElement color: #f77 size: w: 50, h: (ps) -> max 50, ps.y
        test: (element) ->
          assert.eq element.currentSize, point 200, 75
          assert.eq
            []
              point 0 0
              point 0 0
              point 150, 0
            array el from element.children
              el.currentLocation
