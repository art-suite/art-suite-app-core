import &StandardImport

suite:
  misc: ->
    renderTest
      "elementSpaceDrawArea should include descender"
      render: -> TextElement text: "Descending", layoutMode: "textualBaseline", size: cs: 1
      test: (root) ->
        assert.within root.currentSize, point(75, 12), point(76, 12)
        assert.within
          root.elementSpaceDrawArea
          rect -8, -8, 91, 32
          rect -8, -8, 92, 32

    renderTest
      "change in text size should affect children layout"
      render: -> TextElement
        text: "D"
        fontSize: 60
        size: cs: 1
        RectangleElement color: "red"
        FillElement()

      test: (element, testName) ->
        [__, child] = element.children
        assert.eq
          firstPassSize = element.currentSize
          child.currentSize
          "test 1"
        element.text = "!"
        element.toBitmapBasic()
        .then (bitmap) ->
          log bitmap, testName, {firstPassSize, currentSize: element.currentSize}
          assert.neq element.currentSize, firstPassSize
          assert.eq element.currentSize, child.currentSize, "test 2"

    renderTest
      "tight layoutMode"
      stagingBitmapsCreatedShouldBe: 0
      render: ->
        Element
          size: cs:1
          RectangleElement color:"#ff7"
          TextElement text:"test", layoutMode:"tight", fontSize:50

      test: (element) ->
        assert.within
          element.currentSize
          point 72, 32
          point 72, 33

  drawArea: ->
    renderTest
      "phasor"
      stagingBitmapsCreatedShouldBe: 0
      render: ->
        Element
          size: w: 300, hch:1
          # clip: true
          drawOrder: #aaa
          TextElement
            fontSize: 17.5
            size: ww:1, hch:1
            text: "The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog"
            maxLines: 2

          TextElement
            fontSize: 17.5
            size: ww:1, hch:1
            text: "The quick brown fox jumps over the lazy dog. The quick brown fox jumps"
            maxLines: 2

      test: (element) ->
        log element.currentSize
        assert.eq
          element.children[0].drawArea.h
          element.children[1].drawArea.h
