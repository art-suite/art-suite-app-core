import &StandardImport

suite:
  row: ->
    renderTest
      "" layout second child using max
      render: ->
        Element
          size: w: 200, h: 50
          childrenLayout: :row
          RectangleElement color: :red size: 50
          RectangleElement
            color: :blue
            size: hh: 1, w: 1000, max: ww:1
      test: (element) ->
        assert.eq
          []
            point 50
            point 150, 50
          array child in element.children
            child.currentSize

    renderTest
      "" layout second child using function
      render: ->
        Element
          size: w: 200, h: 50
          childrenLayout: :row
          RectangleElement color: :red size: 50
          RectangleElement
            color: :blue
            size:
              hh: 1
              w: (ps, cs) -> min cs.x, ps.x
            clip: true
            FillElement()
            RectangleElement
              padding: 5
              color: #eee
              size: hh: 1, w: 1000

      test: (element) ->
        assert.eq
          []
            point 50
            point 150, 50
          array child in element.children
            child.currentSize

  competingMaxChildren: ->
    renderTest
      "" both children self-constrained
      render: ->
        Element
          size: w: 40, h: 100
          childrenLayout: :column
          Element
            key: "testChild1"
            size: ww: 1, hch: 1, max: hh: 1
            Element
              size: ww:1, h: 10
              draw: #f0

          Element
            key: "testChild2"
            size: ww: 1, hch: 1, max: hh: 1
            Element
              size: ww:1, h: 10
              draw: #f70

      test: (element) ->
        assert.eq 10 element.find("testChild1")[0].currentSize.y
        assert.eq 10 element.find("testChild2")[0].currentSize.y

    renderTest
      "" first child self-constrained
      render: ->
        Element
          size: w: 40, h: 100
          childrenLayout: :column
          Element
            key: "testChild1"
            size: ww: 1, hch: 1, max: hh: 1
            clip: true
            Element
              size: ww:1, h: 100
              draw: #f0

          Element
            key: "testChild2"
            size: ww: 1, hch: 1, max: hh: 1
            Element
              size: ww:1, h: 10
              draw: #f70

      test: (element) ->
        assert.eq 90 element.find("testChild1")[0].currentSize.y
        assert.eq 10 element.find("testChild2")[0].currentSize.y

    renderTest
      "" second child self-constrained
      render: ->
        Element
          size: w: 40, h: 100
          childrenLayout: :column
          Element
            key: "testChild1"
            size: ww: 1, hch: 1, max: hh: 1
            clip: true
            Element
              size: ww:1, h: 10
              draw: #f0

          Element
            key: "testChild2"
            size: ww: 1, hch: 1, max: hh: 1
            clip: true
            Element
              size: ww:1, h: 100
              draw: #f70

      test: (element) ->
        assert.eq 10 element.find("testChild1")[0].currentSize.y
        assert.eq 90 element.find("testChild2")[0].currentSize.y


    renderTest
      "" both children unconstrained
      render: ->
        Element
          size: w: 40, h: 100
          childrenLayout: :column
          Element
            key: "testChild1"
            size: ww: 1, hch: 1, max: hh: 1
            clip: true
            Element
              size: ww:1, h: 100
              draw: #f0

          Element
            key: "testChild2"
            size: ww: 1, hch: 1, max: hh: 1
            clip: true
            Element
              size: ww:1, h: 100
              draw: #f70

      test: (element) ->
        assert.eq 50 element.find("testChild1")[0].currentSize.y
        assert.eq 50 element.find("testChild2")[0].currentSize.y

    renderTest
      "" both children unconstrained implicit weighting not relevent here
      render: ->
        Element
          size: w: 40, h: 100
          childrenLayout: :column
          Element
            key: "testChild1"
            size: ww: 1, hch: 1, max: hh: 1
            clip: true
            Element
              size: ww:1, h: 300
              draw: #f0

          Element
            key: "testChild2"
            size: ww: 1, hch: 1, max: hh: 1
            clip: true
            Element
              size: ww:1, h: 100
              draw: #f70

      test: (element) ->
        assert.eq 50 element.find("testChild1")[0].currentSize.y
        assert.eq 50 element.find("testChild2")[0].currentSize.y

    renderTest
      "" both children unconstrained explicit layoutWeight works
      render: ->
        Element
          size: w: 40, h: 100
          childrenLayout: :column
          Element
            key: "testChild1"
            layoutWeight: 1/3
            size: ww: 1, hch: 1, max: hh: 1
            clip: true
            Element
              size: ww:1, h: 100
              draw: #f0

          Element
            key: "testChild2"
            size: ww: 1, hch: 1, max: hh: 1
            clip: true
            Element
              size: ww:1, h: 100
              draw: #f70

      test: (element) ->
        assert.eq 25 element.find("testChild1")[0].currentSize.y
        assert.eq 75 element.find("testChild2")[0].currentSize.y
