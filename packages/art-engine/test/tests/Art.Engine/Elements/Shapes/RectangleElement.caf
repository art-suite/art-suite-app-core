import &ArtStandardLib, &ArtAtomic, Neptune.Art.Engine

{drawTest, drawTest2} = &Helper
{drawAndTestElement} = &TestHelper
testSize = point 80 60

test = (a, b) -> global.test a, b

suite:
  basic: ->
    drawTest2 "basic", ->
      new RectangleElement color:"red", size: testSize

    drawTest2 "add compositeMode", ->
      new RectangleElement compositeMode: "add", color: "red", size: testSize

    drawTest2 "with opacity .5", ->
      new RectangleElement opacity: .5, color: "red", size: testSize

  children:
    basic: ->
      drawTest2 "children", ->
        new RectangleElement
          color: "red", size: point(80, 60), radius: 10
          new FillElement

          new RectangleElement
            color: #70F7
            axis: point .5
            location: ps: .5
            size: 80
            angle: Math.PI * .3

    mask: ->
      drawTest2 "children with mask, radius:0", ->
        new RectangleElement
          color:"red"
          size: point(80, 60)
          angle: .1
          new RectangleElement
            color:"#F0F"
            axis: point .5
            location: ps: .5
            size: 80
            angle: Math.PI * .3
          new FillElement isMask:true

      drawTest2 "children with mask, radius:20", ->
        new RectangleElement
          color:"red"
          # clip: true
          size: point(80, 60)
          angle: .1
          radius: 20
          new RectangleElement
            color:"#F0F"
            axis: point .5
            location: ps: .5
            size: 80
            angle: Math.PI * .3
          new FillElement isMask:true

  clipping: ->
    drawTest2 "children with clipping, radius:0", ->
      new RectangleElement
        color:"red"
        clip: true
        size: point(80, 60)
        angle: .1
        new RectangleElement
          color:"#F0F"
          axis: point .5
          location: ps: .5
          size: 80
          angle: Math.PI * .3

    drawTest2 "children with clipping, radius:20", ->
      new RectangleElement
        color:"red"
        clip: true
        size: point(80, 60)
        angle: .1
        radius: 20
        new RectangleElement
          color:"#F0F"
          axis: point .5
          location: ps: .5
          size: 80
          angle: Math.PI * .3

  gradient: ->
    drawTest2 "color: array"  -> new RectangleElement size: testSize, color:  :red :yellow
    drawTest2 "colors: array" -> new RectangleElement size: testSize, colors: :red :yellow


    drawTest2 "gradientRadius: number", ->
      new RectangleElement
        colors:["red", "yellow"]
        from: "centerCenter"
        gradientRadius: 1
        size:testSize

    drawTest2 "gradientRadius: array", ->
      new RectangleElement
        colors:["black", "white", "black", "#777"]
        from: "centerCenter"
        gradientRadius: [.5, 1.5]
        size:testSize

    drawTest2 "gradient with from and to", ->
      new RectangleElement colors:["red", "yellow"], from: "centerCenter", to: "topRight", size:testSize

    drawTest2 "gradient with PointLayout from and tos", ->
      new RectangleElement
        colors: ["red", "yellow"]
        from: hh: 1
        to:   ww: 1
        size: testSize

    drawTest2 "gradient with all options", ->
      new RectangleElement
        colors:["black", "white", "black", "#777"]
        from: .5
        to: 1/4
        gradientRadius: [.5, 2]
        size:testSize

  drawArea:
    basic: ->
      drawAndTestElement "basic", ->
        element: new RectangleElement
          color: "#aaa"

        test: (root) ->
          assert.eq root.drawArea.toArray(), [0, 0, 100, 100]

      drawAndTestElement "offset no blur", ->
        element: new RectangleElement
          color: "#aaa"
          shadow:
            color: "black"
            blur: 0
            offset: x: 5, y: 7

        test: (root) ->
          assert.eq root.drawArea.toArray(), [0, 0, 105, 107]

      drawAndTestElement "blur", ->
        element: new RectangleElement
          color: "#aaa"
          shadow:
            color: "black"
            blur: 10

        test: (root) ->
          assert.eq root.drawArea.toArray(), [] -12.5, -10.5, 125, 125

      drawAndTestElement "offset and blur", ->
        element: new RectangleElement
          color: "#aaa"
          shadow:
            color: "black"
            blur: 10
            offset: x: 5, y: 7

        test: (root) ->
          assert.eq root.drawArea.toArray(), [] -7.5, -5.5, 125, 125

    FillElement: ->
      test "RectangleElement shadow and FillElement", ->
        new Element
          {}
          a = new RectangleElement
            size:   40  shadow: true
          b = new RectangleElement
            size:   40  shadow: true
            new FillElement

        .onNextReady ->
          assert.eq a.elementSpaceDrawArea, b.elementSpaceDrawArea

      drawAndTestElement "FillElement shadow offset and blur", ->
        element: new RectangleElement
          color: "#aaa"
          new FillElement
            shadow:
              color: "black"
              blur: 10
              offset: x: 5, y: 7

        test: (root) ->
          assert.eq root.drawArea.toArray(),  [] -7.5, -5.5, 125, 125

    OutlineElement: ->
      drawAndTestElement "basic", ->
        element: new RectangleElement
          color: "#aaa"
          new OutlineElement
            lineWidth: 10

        test: (root) ->
          assert.eq root.drawArea.toArray(), [-15, -15, 130, 130]

      drawAndTestElement "lineJoin: bevel", ->
        element: new RectangleElement
          color: "#aaa"
          new OutlineElement
            lineWidth: 10
            lineJoin: "bevel"

        test: (root) ->
          assert.eq root.drawArea.toArray(), [-5, -5, 110, 110]

      drawAndTestElement "miterLimit: 3", ->
        element: new RectangleElement
          color: "#aaa"
          new OutlineElement
            lineWidth: 10
            miterLimit: 3

        test: (root) ->
          assert.eq root.drawArea, rect -15, -15, 130, 130


      drawAndTestElement "shadow offset and blur", ->
        element: new RectangleElement
          color: "#aaa"

          new OutlineElement
            lineWidth: 10
            color: "orange"
            lineJoin: "bevel"
            shadow:
              color: "red"
              blur: 10
              offset: x: 5, y: 7

        test: (root) ->
          assert.eq root.drawArea.toArray(), [] -12.5, -10.5, 135, 135

      test "lineWidth: 1", ->
        new RectangleElement
          size:   40
          new OutlineElement lineWidth: 1

        .onNextReady (a)->
          assert.eq a.elementSpaceDrawArea, rect -1.5, -1.5, 43, 43
