# import &ArtStandardLib, &ArtAtomic, &ArtEngine
import &StandardImport

testArtStructure = ->
  Element
    location: x:123, y:456
    size:     w: 80, h:60
    RectangleElement color:"orange"
    Element
      angle: 0 - Math.PI/6
      location: xpw:.25, yph:.5
      size:     wpw:.5,  hph:.25
      name: "child"
      RectangleElement color: "#700"

suite: ->
  {test} = global

  test "toBitmapBasic no options", ->
    o = testArtStructure()

    o.toBitmapBasic()
    .then (bitmap)->
      log bitmap
      assert.eq bitmap.pixelsPerPoint, 1
      assert.eq bitmap.size, o.currentSize

  test "toBitmapBasic translated", ->
    (o = testArtStructure()).toBitmapBasic elementToDrawAreaMatrix:Matrix.translate(point(123,456))
    .then (bitmap)->
      log bitmap
      assert.eq bitmap.size, o.currentSize

  test "toBitmapBasic pixelsPerPoint:2 - 'retina'", ->
    o = testArtStructure()
    o.toBitmapBasic pixelsPerPoint:2
    .then (bitmap)->

      log bitmap
      assert.eq bitmap.pixelsPerPoint, 2
      assert.eq bitmap.size, o.currentSize.mul 2

  test "toBitmapBasic rotated", ->
    (o = testArtStructure()).toBitmapBasic elementToDrawAreaMatrix:Matrix.rotate(Math.PI/6), area:"targetDrawArea"
    .then (bitmap)->
      log bitmap
      assert.eq bitmap.size, point 100, 92

  test "toBitmapBasic with blur", ->
    o = testArtStructure()
    o.addChild BlurElement radius:10
    o.toBitmapBasic {}
    .then (bitmap)->

      log bitmap
      assert.eq bitmap.size, o.currentSize.add 20
      assert.eq bitmap.size, o.elementSpaceDrawArea.size

  test "toBitmapBasic with out of bounds child and backgroundColor", ->
    o = testArtStructure()
    o.addChild RectangleElement
      color:  "#700"
      location: xpw:-.25, yph:.75
      size: ps: .5
    o.toBitmapBasic backgroundColor:"#ff7"
    .then (bitmap)->

      log bitmap
      assert.eq bitmap.size, point 100, 75
      assert.eq bitmap.size, o.elementSpaceDrawArea.size

  areaOptions =
    logicalArea:       expectedSize: point(40, 15), expectedDrawMatrix: Matrix.translate -5
    paddedArea:        expectedSize: point(50, 25), expectedDrawMatrix: matrix()
    drawArea:          expectedSize: point(50, 35), expectedDrawMatrix: matrix()
    parentLogicalArea: expectedSize: point 100, 80
    parentPaddedArea:  expectedSize: point 80, 60
    parentDrawArea:    expectedSize: point 61, 56
    targetDrawArea:    expectedSize: point(121, 61), elementToDrawAreaMatrix: Matrix.rotate(Math.PI / 4).scaleXY 2, 1

  each v, k from areaOptions
    {expectedDrawMatrix, expectedSize} = v
    test "toBitmapWithInfo area: #{k} size should == #{expectedSize}", ->
      Element
        size: w: 100, h: 80
        padding: 10
        child = Element
          angle: 0 - Math.PI/6
          axis: .5
          location: ps: .5
          size: w:40, h:15
          padding: -5
          RectangleElement color: "#f00"
          RectangleElement color: "#0f0", compositeMode: "add", location:10, size: w:30, h:25

      child.toBitmapWithInfo (merge v, area:k, backgroundColor:"#ddd")
      .then ({bitmap, elementToBitmapMatrix})->
        log area:k, bitmap:bitmap
        assert.eq bitmap.size, expectedSize
        assert.eq elementToBitmapMatrix, expectedDrawMatrix if expectedDrawMatrix

  each expectedSize, mode from a =
      fit: point 100, 50
      zoom: point 100

    test "toBitmapWithInfo mode: #{inspect mode}", ->
      element = Element
        size: w: 200, h:100
        RectangleElement color: "orange"

      element.toBitmapWithInfo size:100, mode: mode, backgroundColor:"#ddd"
      .then ({bitmap, elementToBitmapMatrix})->

        log mode: mode, bitmap:bitmap
        assert.eq bitmap.size, expectedSize

  test "toBitmapBasic elementToDrawAreaMatrix: Matrix.scale 5", ->
    element = # Element
      # size: w: 200, h:100
      # RectangleElement color: "orange"
      # RectangleElement color: "back", radius: 1000

      TextElement
        color:      :red
        text:       :Test
        fontSize:   32
        fontFamily: "Arial Black"
        layoutMode: :tight0
        align:      :center
        FillElement()
        OutlineElement
          color: :black
          compositeMode: :destOver
          lineWidth: 4
          lineJoin: :miter
          miterLimit: 3


    element.toBitmapBasic elementToDrawAreaMatrix: Matrix.scale 1
    .then (bitmap1) ->
      bitmap1StagingStats = merge &ArtEngine.Element.stats
      element.toBitmapBasic elementToDrawAreaMatrix: Matrix.scale 5
      .then (bitmap2) ->
        bitmap2StagingStats = merge &ArtEngine.Element.stats
        log {bitmap1, bitmap2, bitmap1StagingStats}
        assert.eq 1, bitmap2StagingStats.stagingBitmapsCreated - bitmap1StagingStats.stagingBitmapsCreated
        assert.eq point(5), bitmap2StagingStats.lastStagingBitmapSize.div bitmap1StagingStats.lastStagingBitmapSize
