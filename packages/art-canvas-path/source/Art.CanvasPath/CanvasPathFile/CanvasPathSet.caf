import &StandardImport

class CanvasPathSet extends BaseClass
  constructor: (a)->
    @paths = if a instanceof XbdTag
      @_initFromXbd a
    else
      if isArray a
        a
      else if a?
        throw new Error "unsupported type constructing CanvasPathSet: #{formattedInspect a}"
      else
        []

  @property :aspectRatio :name

  @getter
    aspectRatio: -> @_aspectRatio ? 1

  applyPath: (context, where)->
    log.warn "" DEPRICATED: Art.CanvasPath.applyPath - use applyRawPath
    @applyRawPath context, where

  applyRawPath: (context, size) ->
    each path in @paths
      path.applyRawPath context, size

  @getter
    xbd: ->
      CanvasPathSetTag
        merge
          aspectRatio:  if @aspectRatio != 1 then @aspectRatio
          name:         @name
        array path in @paths with path.xbd

    inspectedObjects: ->
      CanvasPathSet: toInspectedObjects @paths

    drawArea: ->
      reduce area, p in @paths inject rect()
        p.drawArea.unionInto area

    flattened: ->
      totalCommands = totalPointValues = totalRadii = 0
      each {commands, radii, points, normalized}, i in @paths
        throw new Error "Path not normalized (i=#{i})" unless normalized
        totalCommands += commands.length if commands
        totalPointValues += points.length if points
        totalRadii += radii.length if radii

      _commands     = new commandArrayType totalCommands if totalCommands > 0
      _points       = new valueArrayType totalPointValues if totalPointValues > 0
      _radii        = new valueArrayType totalRadii if totalRadii > 0

      ci = pi = ri = 0
      each {commands, radii, points}, i in @paths
        each v in commands  with _commands[ci++] = v
        each v in points    with _points[pi++]   = v
        each v in radii     with _radii[ri++]    = v

      new &CanvasPath
        commands:     _commands
        points:       _points
        radii:        _radii
        name:         @name
        aspectRatio:  @aspectRatio

  normalize: (drawArea = @drawArea) ->
    each path in @paths
      path.normalize drawArea

    @aspectRatio = drawArea.aspectRatio
    @

  removeStyles: ->
    each path in @paths
      path.removeStyles()

  _initFromXbd: (xbdTag) ->
    @aspectRatio = parseFloat xbdTag.attrs.aspectRatio.toString() ? 1
    @name = xbdTag.attrs.name?.toString()
    array pathTag in xbdTag.tags
      new &CanvasPath pathTag
