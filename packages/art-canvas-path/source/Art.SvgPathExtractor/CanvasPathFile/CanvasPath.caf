import &StandardImport

class CanvasPath extends BaseClass

  constructor: (a)->
    if a instanceof XbdTag
      @_initFromXbd a
    else
      @_initFromProps a

  @property :styleProps :points :radii :commands :x :y :aspectRatio :scale :name

  @getter
    normalized: ->
      float32Eq @aspectRatio, 1
      && float32Eq @scale, 1
      && float32Eq0 @x
      && float32Eq0 @y

    props: ->
      merge
        @styleProps
        {}
          @name
          @commands
          @points
          @radii
          x:            unless float32Eq0 @x then @x
          y:            unless float32Eq0 @y then @y
          scale:        unless float32Eq 1, @scale then @scale
          aspectRatio:  unless float32Eq 1, @aspectRatio then @aspectRatio

    inspectedObjects: -> CanvasPath: @props

    xbd: ->
      CanvasPathTag @props

    drawArea: ->
      @_reset()
      {x, y} = @nextPoint
      maxX = minX = x
      maxY = minY = y

      while p = @nextPoint
        {x, y} = p
        maxX = max maxX, x
        maxY = max maxY, y
        minX = min minX, x
        minY = min minY, y

      rect
        minX
        minY
        maxX - minX
        maxY - minY

    nextPoint: ->
      {points, _scaleY, _scaleX, _addX, _addY} = @
      if @_pointIndex < points.length
        x = points[@_pointIndex++]
        y = points[@_pointIndex++]
        x: x * _scaleX + _addX
        y: y * _scaleY + _addY

    nextRadii: -> @radii[@_radiiIndex++]

  fixedPointScaler = 1 / maxFixedPointValue

  getNextSizeScaledX: (size) -> size.x * @points[@_pointIndex++] * fixedPointScaler
  getNextSizeScaledY: (size) -> size.y * @points[@_pointIndex++] * fixedPointScaler

  removeStyles: ->
    @styleProps = null

  normalize: (drawArea = @drawArea)->
    if @x != 0 || @y != 0 || @scale != 1 || @aspectRatio != 1 || drawArea.area != 1
      @_reset()
      @ extract points
      writeIndex = 0

      writeXScaler = maxFixedPointValue / drawArea.w
      subX = drawArea.x
      writeYScaler = maxFixedPointValue / drawArea.h
      subY = drawArea.y
      while p = @nextPoint
        {x, y} = p
        points[writeIndex++] = wx = (x - subX) * writeXScaler + .5 | 0
        points[writeIndex++] = wy = (y - subY) * writeYScaler + .5 | 0

      @x = @y = 0
      @scale = 1
      @aspectRatio = 1 # Normalized aspectRatio is the same for all CanvasPaths in a CanvasPathSet. Therefor CanvasPathSet will store the aspectRatio once.

    @

  applyPath: (context, size)->
    # log applyPath: size
    @_reset()
    each i til @commands.length
      commandPair = @commands[i]
      @_applyCommand commandPair >> 4, context, size
      @_applyCommand commandPair & 0xf, context, size

  ################
      PRIVATE
  ################
  _applyCommand: (command, context, size) ->

    # log commandIdsToNames[command]

    switch command
      when noopCommand             then null
      when beginPathCommand        then null;# context.beginPath()
      when closePathCommand        then null;# context.closePath()
      when moveToCommand           then context.moveTo            @getNextSizeScaledX(size), @getNextSizeScaledY(size)
      when lineToCommand           then context.lineTo            @getNextSizeScaledX(size), @getNextSizeScaledY(size)
      when quadraticCurveToCommand then context.quadraticCurveTo  @getNextSizeScaledX(size), @getNextSizeScaledY(size), @getNextSizeScaledX(size), @getNextSizeScaledY(size)
      when bezierCurveToCommand    then context.bezierCurveTo     @getNextSizeScaledX(size), @getNextSizeScaledY(size), @getNextSizeScaledX(size), @getNextSizeScaledY(size), @getNextSizeScaledX(size), @getNextSizeScaledY(size)
      when arcCommand              then context.arc               @getNextSizeScaledX(size), @getNextSizeScaledY(size), @nextRadii, @nextRadii, @nextRadii
      when antiArcCommand          then context.antiArc           @getNextSizeScaledX(size), @getNextSizeScaledY(size), @nextRadii, @nextRadii, @nextRadii, true

  _reset: ->
    @_pointIndex =
    @_radiiIndex =
    @_commandIndex = 0

    @ extract x, y, aspectRatio, scale

    @_scaleX =
    @_scaleY = scale

    if aspectRatio > 1
      @_scaleY /= aspectRatio
    else
      @_scaleX *= aspectRatio

    @_addX = x ? 0
    @_addY = y ? 0

    @_scaleX /= maxFixedPointValue
    @_scaleY /= maxFixedPointValue

  _initFromProps: (props) ->
    @styleProps = extractStyleProps props

    @points   = props.points
    @radii    = props.radii
    @commands = props.commands
    @x            = parseFloat props.x ? 0
    @y            = parseFloat props.y ? 0
    @aspectRatio  = parseFloat props.aspectRatio ? 1
    @scale        = parseFloat props.scale ? 1
    @name         = props.name

    @_reset()

  _initFromXbd: (xbdTag) ->
    xbdTag.attrs extract commands, radii, points, x, y, scale, aspectRatio, name
    @commands     = new commandArrayType commands.binaryString.buffer if commands?
    @points       = new valueArrayType points.binaryString.buffer if points?
    @radii        = new valueArrayType radii.binaryString.buffer if radii?
    @x            = parseFloat x?.toString()           ? 0
    @y            = parseFloat y?.toString()           ? 0
    @scale        = parseFloat scale?.toString()       ? 1
    @aspectRatio  = parseFloat aspectRatio?.toString() ? 1
    @name         = name?.toString()
    @styleProps   = object v, k from extractStyleProps xbdTag.attrs with v.toString()

  extractStyleProps = (props) ->
    merge {fillStyle, strokeStyle, lineWidth, miterLimit, lineCap, lineJoin} = props
