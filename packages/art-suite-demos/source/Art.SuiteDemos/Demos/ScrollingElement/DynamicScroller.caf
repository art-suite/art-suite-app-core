import &StandardImport
Button = &Button

class LineItem extends FluxComponent

  @stateFields
    height: 50

  expand: -> @height *= 2
  collapse: -> @height = max @height / 2, 50

  removeItem: ->
    log remove: @props.text
    @props.removeItem @props.text

  render: ->
    {text} = @props
    Element
      size: cs: 1
      margin: 5
      animators:
        size:   toFrom: wcw:1, h: 0
        margin: toFrom: 0
      clip: true
      drawOrder: vibrant
      Element
        size: wcw:1, h: @height
        animators: :size
        childrenLayout: :row
        childrenAlignment: :centerLeft
        childrenMargins: 15
        padding: 20
        TextElement
          mediumText
          text: text
          color: lightMuted
        Button text: "delete", action: @removeItem
        Button text: "add", action: @expand
        Button text: "sub", action: @collapse

class PseDemo extends FluxComponent

  render: ->
    {alignment, items, tight, track, removeItem} = @props

    Element
      drawOrder:
        color: veryDarkMuted
      padding: 10
      childrenLayout: :column
      childrenMargins: 10
      size: if tight then ww:1, hch:1, max: hh: 1 else ps: 1
      animators: :size
      TextElement
        mediumText
        text: "" Containing Element
        color: lightMuted
      ScrollElement
        clip:               true
        track:              track
        location:           alignment
        axis:               alignment
        size:               hch: 1, max: hh: 1
        childrenAlignment:  alignment
        animators:          :childrenAlignment :axis :location
        drawOrder:          darkMuted
        # padding: 10
        TextElement
          mediumText
          text: "ScrollElement"
          padding: 10
          color: lightMuted
        array item in items
          LineItem removeItem: removeItem, key: "Item:#{item}", text: item

class DynamicScroller extends FluxComponent

  @stateFields
    alignment:  :bottomLeft
    track:      :bottom
    tight:      false
    items:
      "" Line 1
      "" Line 2

  count = 3
  addItem:             -> @items = arrayWith @items, "Line #{count++}"
  removeItem: (string) -> @items = arrayWithoutValue @items, string

  render: ->
    Element
      childrenLayout: :row
      childrenMargins: 10
      padding: 10
      drawOrder: darkBackground
      PseDemo @state, removeItem: @removeItem
      Element
        size: wcw:1
        childrenMargins: 10
        childrenLayout: "column"
        Button text: "add element",         action: @addItem
        array alignment in :topLeft :topRight :bottomLeft :bottomRight
          Button
            selected: @alignment == alignment
            action:   -> @alignment = alignment
            text:     "align #{alignment}"

        array track in :top :bottom
          Button
            selected: @track == track
            action:   -> @track = track
            text:     "track #{track}"

        Button
          selected: @tight
          action:   @toggleTight
          text:     "" size: #{if @tight then "hch: 1 max: hh: 1" else "hh: 1"}
