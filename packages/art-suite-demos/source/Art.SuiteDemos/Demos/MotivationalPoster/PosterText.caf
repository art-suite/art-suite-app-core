import &StandardImport

{getTextLines} = &ArtPostertext.Tools

class PosterText extends Component

  render: ->
    {text, seed, options = {}} = @props

    random = &createRandomGenerator seed = 1

    {allCaps,
    looseness = 1,
    aspectRatio = .5,
    invertProbability = .5,
    borderStyle = :square,
    lineEndDashProbability = .5,
    lineDividerProbability = .2,
    lineWidth = 30,
    baseMargins = 20,
    borderPadding = 40,
    skew} = options

    lines = getTextLines {text, aspectRatio: 1, random}

    looseness = max 1, looseness if invertProbability > 0

    fontFamily =
      # "Arial Black, sans-serif"
      "Times New Roman, serif"

    lastLineInverted = false
    lastLineHadEndDashes = false

    # baseMargins = 20
    margins = looseness * if invertProbability >= .99 then baseMargins / 2 else baseMargins

    Element
      childrenLayout: "column"
      childrenMargins: margins
      size: w: 400, hch: 1
      elementToParentMatrix: if skew
        matrix 1, 1, 0 -skew, 0 0
      padding:
        switch borderStyle
          when :squareRounded, :square then baseMargins + borderPadding
          when :horizontal then v: baseMargins + borderPadding

      draw:
        switch borderStyle
          when "squareRounded"
            radius: lineWidth
            outline: lineWidth: lineWidth

          when "square"         then {} outline: lineWidth: lineWidth
          when "horizontal"
            {}
              shape:
                path: (context, area) ->
                  context.moveTo 0, 0
                  context.lineTo area.w, 0
                  context.moveTo 0, area.h
                  context.lineTo area.w, area.h
              outline: lineWidth: lineWidth

        "rectangle"
        # {} fill: "white"

      array line, i in lines
        invert = random() < invertProbability
        lastWasInverted = lastLineInverted
        invert = false if lastLineInverted && invertProbability <= .5
        lastLineInverted = invert
        text = line
        if present text
          lineEnds = random() < lineEndDashProbability && text.length < 10 && !invert && !lastLineHadEndDashes
          lastLineHadEndDashes = lineEnds
          color = if invert then "white" else "black"
          if allCaps == true || text.length <= allCaps
            text = upperCase text

          []
            if i > 0 && random() < lineDividerProbability
              Element
                size: ww:1, h: lineWidth
                draw: "black"

            Element
              size: "childrenSize"
              draw: if invert then "black" # else "orange"
              padding: if invert then baseMargins
              margin: if invert && lastWasInverted then bottom: baseMargins
              Element
                size: :childrenSize
                childrenLayout: "row"
                childrenAlignment: :centerCenter
                childrenMargins: baseMargins * 2
                scale: (ps, cs) -> ps.x / cs.x

                lineEnds && Element
                  size: w: 128, h: lineWidth
                  draw: color
                TextElement {}
                  size: "childrenSize"
                  layoutMode: "tight0"
                  fontSize: 128

                  color
                  fontFamily
                  text

                lineEnds && Element
                  size: w: 128, h: lineWidth
                  draw: color
