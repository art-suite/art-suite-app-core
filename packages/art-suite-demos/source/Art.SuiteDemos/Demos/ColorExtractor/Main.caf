import &ArtSuite, &ArtColorExtractor

shadowProps =
  color:    #0007
  blur:     20
  offset:   y: 5

layoutWeight = 15

class MyComponent extends PointerActionsMixin Component

  @stateFields bitmap: null, colorInfo: null, previewBitmap: null, selectedColor: null

  requestImage: ->
    Bitmap.requestImage()
    .then ({bitmap}) =>

      @previewBitmap = generatePreviewBitmap @colorInfo = ci = extractColors
        @bitmap = bitmap
        verbose: true
      {darkMuted, muted, lightMuted, darkVibrant, vibrant, lightVibrant} = ci.colors
      @selectedColor = darkMuted || muted || lightMuted || darkVibrant || vibrant || lightVibrant

  action: -> @requestImage()

  render: ->
    {bitmap, colorInfo, previewBitmap, hover, selectedColor} = @state

    Element
      childrenLayout: "column"
      padding: layoutWeight
      draw:
        if colorInfo
          selectedColor
        else
          "white"

      animators: :draw

      if bitmap
        Element
          size: ps: 1
          Element
            size: hh: 1, wph: bitmap.aspectRatio, max: ww:1, hpw: 1 / bitmap.aspectRatio
            cursor: "pointer"
            on: @buttonHandlers
            location: "centerCenter"
            axis: "centerCenter"

            BitmapElement
              bitmap: bitmap
              shadow: shadowProps
            hover && BitmapElement
              bitmap: previewBitmap
              animators: opacity: toFrom: 0

      colorInfo && Element
        size: ww:1, hch:1
        margin: layoutWeight
        childrenAlignment: "center"
        childrenLayout: "flow"
        array v, k from colorInfo.colors
          Element
            cursor: :pointer
            padding: layoutWeight
            margin: layoutWeight
            size: cs: 1
            on: pointerClick: =>
              log v
              @selectedColor = v

            RectangleElement
              color: v
              padding: -layoutWeight
              if v.eq @selectedColor
                FillElement()
              else
                shadow: shadowProps

            TextElement
              size: cs: 1
              color: if v.perceptualLightness < .75 then :white else :black
              text: k
              fontFamily: :AvenirNext-Regular

      Element
        size: :childrenSize
        inFlow: false
        &Button
          text: "pick photo"
          action: @requestImage
