&tracking/tracking-min
&tracking/data/faceMin
&tracking/data/eyeMin
&tracking/data/mouthMin
{tracking} = global
import &ArtSuite, &ArtColorExtractor, tracking


shadowProps =
  color:    #0007
  blur:     20
  offset:   y: 5

layoutWeight = 15

class MyComponent extends Component

  @stateFields
    bitmap: null
    faces: []
    eyes: []
    mouths: []

  requestImage: ->
    log "requestImage"
    Bitmap.requestImage()
    .then ({bitmap}) =>
      targetSize = point 600
      while bitmap.size.gt targetSize
        bitmap = bitmap.mipmap

      @setState {} bitmap, faces: [], eyes: [], mouths: []
      bitmap.toImage()
    .then (image) ->
      @findFaces image

  findFaces: (image) ->
    log findFaces: image, trackers: trackers = [] :face :eye :mouth
    tracker = new tracking.ObjectTracker :face
    mouthTracker = new tracking.ObjectTracker :mouth
    eyeTracker = new tracking.ObjectTracker :eye
    tracker.setStepSize 1.7
    tracking.track image, tracker
    tracking.track image, mouthTracker
    tracking.track image, eyeTracker
    new Promise (resolve, reject) ->
      tracker.on :track (event) ->
        log faces: {event.data}
        @setState faces: array entry from event.data
          {width, height, x, y} = entry
          rect x, y, width, height

      eyeTracker.on :track (event) ->
        log eyes: {event.data}
        @setState eyes: array entry from event.data
          {width, height, x, y} = entry
          rect x, y, width, height

      mouthTracker.on :track (event) ->
        log mouths: {event.data}
        @setState mouths: array entry from event.data
          {width, height, x, y} = entry
          rect x, y, width, height

  render: ->
    {bitmap, faces, eyes, mouths} = @state

    Element
      childrenLayout: "column"
      padding: layoutWeight
      cursor: "pointer"
      on: pointerClick: @requestImage
      RectangleElement
        padding: -layoutWeight
        inFlow: false
        animators: "color"
        color: "white"

      if bitmap
        Element
          size: ps: 1
          Element
            size: cs: 1
            location: "centerCenter"
            axis: "centerCenter"

            BitmapElement
              size: cs: 1
              bitmap: bitmap
              shadow: shadowProps

            array face in faces
              RectangleElement
                color: #ff05
                location: face.location
                size: face.size
            array mouth in mouths
              RectangleElement
                color: #f005
                location: mouth.location
                size: mouth.size
            array eye in eyes
              RectangleElement
                color: #00f5
                location: eye.location
                size: eye.size
      else
        TextElement
          text: "pick photo"
          location: ps: .5
          axis: .5
          fontFamily: "AvenirNext-Regular"
          color:    "gray"
