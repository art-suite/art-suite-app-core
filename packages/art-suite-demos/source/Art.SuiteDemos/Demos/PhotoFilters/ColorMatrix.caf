import &ArtStandardLib, &ArtClassSystem

contrastLookupTable = []
  0,    0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1,  0.11,
  0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.20, 0.21, 0.22, 0.24,
  0.25, 0.27, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38, 0.40, 0.42,
  0.44, 0.46, 0.48, 0.5,  0.53, 0.56, 0.59, 0.62, 0.65, 0.68,
  0.71, 0.74, 0.77, 0.80, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98,
  1.0,  1.06, 1.12, 1.18, 1.24, 1.30, 1.36, 1.42, 1.48, 1.54,
  1.60, 1.66, 1.72, 1.78, 1.84, 1.90, 1.96, 2.0,  2.12, 2.25,
  2.37, 2.50, 2.62, 2.75, 2.87, 3.0,  3.2,  3.4,  3.6,  3.8,
  4.0,  4.3,  4.7,  4.9,  5.0,  5.5,  6.0,  6.5,  6.8,  7.0,
  7.3,  7.5,  7.8,  8.0,  8.4,  8.7,  9.0,  9.4,  9.6,  9.8,
  10.0

class ColorMatrix extends BaseClass

  constructor: (@matrix)->
    @reset() unless @matrix

  @getter
    inspectedObjects: ->
      "colorMatrix(#{@matrix.join ', '})"

  reset: ->
    @matrix =
      1 0 0 0 0,
      0 1 0 0 0,
      0 0 1 0 0,
      0 0 0 1 0,
      0 0 0 0 1

  mul: ({matrix:b}) ->
    a = @matrix

    o =
      out = new ColorMatrix
      .matrix

    row = 0
    rowEnd = 5 * 5

    while row < rowEnd
      j = 0
      while j < 5
        sum = 0

        k = 0
        while k < 5
          sum += b[k * 5 + j] * a[k + row]
          k++

        o[j + row] = sum
        j++

      row += 5

    out

  @brightnessMatrix: (brightness) ->
    brightness *= 255

    new ColorMatrix []
      1 0 0 0 brightness,
      0 1 0 0 brightness,
      0 0 1 0 brightness,
      0 0 0 1 0,
      0 0 0 0 1

  # IN: contrast: -1 <= contrast <= 1
  @contrastMatrix: (contrast) ->

    m = 1 + if contrast < 0
      contrast

    else
      contrast = bound 0, contrast * 100, 100
      fPart = contrast % 1
      iPart = contrast | 0

      if float32Eq0 fPart
        contrastLookupTable[iPart]

      else
        # fractional contrast, use linear interpolation
        contrastLookupTable[iPart]    * (1 - fPart) +
        contrastLookupTable[iPart+1]  * fPart

    a = .5 - m * .5

    new ColorMatrix []
      m,  0,  0,  0,  a,
      0,  m,  0,  0,  a,
      0,  0,  m,  0,  a,
      0,  0,  0,  1,  0,
      0,  0,  0,  0,  1

  filter: (imageData) ->
    imageData extract data
    l = data.length
    [m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17, m18, m19] = @matrix

    i = 0
    while i < l
      r = data[i]
      g = data[i + 1]
      b = data[i + 2]
      a = data[i + 3]
      data[i]   = r * m0  + g * m1  + b * m2  + a * m3  + m4
      data[i+1] = r * m5  + g * m6  + b * m7  + a * m8  + m9
      data[i+2] = r * m10 + g * m11 + b * m12 + a * m13 + m14
      data[i+3] = r * m15 + g * m16 + b * m17 + a * m18 + m19

      i += 4

    imageData

  # mul: ({matrix:b}) ->
  #   a = @matrix

  #   o =
  #     out = new ColorMatrix
  #     .matrix

  #   each row til 5 * 5 by 5
  #     each j til 5
  #       o[j + row] = reduce sum, b til 5 inject 0
  #         sum + b[j + k * 5] * a[k + row]

  #   out
