import &StandardImport
Button = &Button

class DemoElement extends Component

  @stateFields
    axis: :centerCenter

  render: ->
    {hh} = @props
    AxisButton = (axis, text) ->
      Button size: 50, selected: axis == @axis, text: "axis:\n#{text}" || axis, action: -> @axis = axis

    Element
      animators: :axis :location
      axis: @axis
      location: ps: @props.location || :centerCenter

      size: 190
      clip: true

      RectangleElement
        inFlow: false
        color: vibrant

      RectangleElement
        inFlow: false
        location: ps: @axis
        size: 80
        radius: 40
        axis: .5
        animators: :location
        color: darkVibrant

      Element
        padding: 10
        childrenLayout: :flow

        AxisButton :topLeft         :TL
        AxisButton :topCenter       :TC
        AxisButton :topRight        :TR
        AxisButton :centerLeft      :CL
        AxisButton :centerCenter    :CC
        AxisButton :centerRight     :CR
        AxisButton :bottomLeft      :BL
        AxisButton :bottomCenter    :BC
        AxisButton :bottomRight     :BR

class BasicLayoutDemo extends Component
  @stateFields
    demoLocation: :centerCenter

  render: ->
    Element
      childrenLayout: :column
      TextElement
        mediumText
        size: ww: 1 hch: 1
        text:
          """
            Location
            If the parent element does not have childrenLayout set, then the Element's location is based on its `axis` and `location` properties.
        color: muted
        margin: 10

      &LayoutDemoContainer
        buttonProps: (location) ->
          text: "location: ps:\n:#{location}"
          action: -> @demoLocation = location

        renderChildren: (location) ->
          DemoElement {location}
