import &ArtSuite

class Paginator extends FluxSubscriptionsMixin ApplicationState
  slotsPerPage = 5
  @stateFields
    slotIds:                  [] null null null null null
    loadedSlots:              [] null null null null null
    pageUpEnabled:            false
    pageDownEnabled:          false

  constructor: ->
    super
    @onModelRegistered :darkJedi
    .then -> @updateSubscriptions [] 3616 null null null null

  getLoadedSlots: (slotIds) ->
    array key, index in slotIds
      @models.darkJedi.fluxStoreGet(key)?.data if key?

  updateSubscriptions: (slotIds)->
    loadedSlots = @getLoadedSlots slotIds ||= @slotIds
    @slotIds = slotIds = array slotId, index from slotIds
      slotId
      ? loadedSlots[index - 1]?.apprentice
      ? loadedSlots[index + 1]?.master

    @unsubscribeAll()

    each key, index in slotIds when key?
      @subscribe {}
        subscriptionKey: "darkJedi-#{key}"
        modelName: :darkJedi
        key
        updatesCallback: ({data:darkJedi}) -> darkJedi && @updateSubscriptions()

    @updatePageUpDownEnabled @loadedSlots = @getLoadedSlots slotIds

  updatePageUpDownEnabled: (newSlotsLoaded)->
    first = last = null
    middle = !!newSlotsLoaded[slotsPerPage / 2 | 0]
    each v in newSlotsLoaded
      first ||= v
      last = v if v?
    @pageUpEnabled   = middle && !!first?.master?
    @pageDownEnabled = middle && !!last?.apprentice?

  pageUp:   -> @pageUpEnabled   && @updateSubscriptions flatten null null @slotIds.slice 0, slotsPerPage - 2
  pageDown: -> @pageDownEnabled && @updateSubscriptions flatten (@slotIds.slice 2, slotsPerPage), null null
