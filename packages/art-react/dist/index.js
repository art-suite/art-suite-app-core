/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var React;

	module.exports = React = __webpack_require__(3);

	React.Aim = __webpack_require__(7);

	React.All = __webpack_require__(289);

	React.Component = __webpack_require__(290);

	React.ReactArtEngineEpoch = __webpack_require__(81);

	React.VirtualElement = __webpack_require__(79);

	React.VirtualNode = __webpack_require__(80);

	React.finishLoad(["Aim", "All", "Component", "ReactArtEngineEpoch", "VirtualElement", "VirtualNode"]);


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(4);

	module.exports = Art.React || (Art.React = (function(superClass) {
	  extend(React, superClass);

	  function React() {
	    return React.__super__.constructor.apply(this, arguments);
	  }

	  React.namespace = Art;

	  React.namespacePath = "Neptune.Art.React";

	  return React;

	})(Neptune.Base));

	Art.addNamespace(Art.React);


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(6);


/***/ },
/* 6 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {var Base, Neptune,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	if (typeof global === 'object') {
	  global.self = global;
	}

	Base = (function() {
	  function Base() {}

	  Base.namespacePath = "Neptune.Base";

	  Base.namespace = null;

	  Base.allNamespaces = {};

	  Base.classes = [];

	  Base.namespaces = [];

	  Base.addNamespace = function(namespace) {
	    var base, base1, name1, name2;
	    (base = this.allNamespaces)[name1 = namespace.namespacePath] || (base[name1] = []);
	    this.namespaces = (base1 = this.allNamespaces)[name2 = this.namespacePath] || (base1[name2] = []);
	    return this.namespaces.push(namespace);
	  };

	  Base.finishLoad = function(classes) {
	    var klass, name, newClasses;
	    newClasses = (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = classes.length; i < len; i++) {
	        name = classes[i];
	        if (!(typeof (klass = this[name]) === "function")) {
	          continue;
	        }
	        klass.namespace = this;
	        klass.namespacePath = this.namespacePath + "." + klass.name;
	        results.push(klass);
	      }
	      return results;
	    }).call(this);
	    return this.classes = this.classes.concat(newClasses);
	  };

	  return Base;

	})();

	module.exports = self.Neptune = Neptune = (function(superClass) {
	  extend(Neptune, superClass);

	  function Neptune() {
	    return Neptune.__super__.constructor.apply(this, arguments);
	  }

	  Neptune.Base = Base;

	  Neptune.namespacePath = "Neptune";

	  Neptune.namespace = null;

	  return Neptune;

	})(Base);

	console.log("neptune-namespaces global defined: self.Neptune");

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(79), !self.isWebWorker ? __webpack_require__(82) : __webpack_require__(288)(void 0)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, VirtualElement, Engine) {
	  var Aim, bound, classForElement, createVirtualElementFactory, elementClassName, elementClassNames, elementFactory, i, len, log, max, min, ref;
	  log = Foundation.log;
	  createVirtualElementFactory = VirtualElement.createVirtualElementFactory;
	  classForElement = Engine ? ((ref = Engine.Core.ElementFactory, elementFactory = ref.elementFactory, ref), function(e) {
	    var klass;
	    if (!(klass = elementFactory.classForElement(e))) {
	      console.error("Could not find Class for Element: " + e);
	    }
	    return klass;
	  }) : function(e) {
	    return e;
	  };
	  elementClassNames = "Element CanvasElement Outline Blur Shadow ScrollElement Bitmap Fill CustomShapeElement Rectangle TextElement TextInput PagingScrollElement".split(/\s+/);
	  Aim = (function() {
	    function Aim() {}

	    Aim.addElement = function(elementClassName) {
	      return Aim[elementClassName] || (Aim[elementClassName] = createVirtualElementFactory(classForElement(elementClassName)));
	    };

	    return Aim;

	  })();
	  for (i = 0, len = elementClassNames.length; i < len; i++) {
	    elementClassName = elementClassNames[i];
	    Aim.addElement(elementClassName);
	  }

	  /*
	  SBD: I'm not sure where best to put getNextPageIndexes, so I'm putting it here for now.
	  It is potentially needed by any react component using PagingScrollElement. I'd put it on the
	  actual PagingScrollElement Element class, but that class isn't loaded when doing React in
	  a web-worker.
	  
	  getNextPageIndexes could be reusable with any PagingScrollElement where pages are indexed
	  and the maxPageIndex and minPageIndex are known. It's even OK if maxPageIndex and
	  minPageIndex change - as long as they don't change too much per frame.
	  
	  IN:
	    lastPageIndexes =
	        firstPageIndex: 0
	        lastPageIndex:  2
	  
	      essentially, this is the output from last call. For the first call, do 0 and 2
	  
	    currentGeometry =
	        suggestedPagesBeforeFocusedPage: 1
	        suggestedPagesAfterFocusedPage:  1
	  
	      set from currentGeometry from the last onScollChange event
	  
	    focusedPageIndex = integer;       the current focused page index
	    maxKeep =          integer >= 0;  see below
	    maxPrerender =     integer >= 0;  see below
	    maxPageIndex =     integer;       see below
	    minPageIndex =     0 (integer);   see below
	  
	  OUT:
	    null if nothing changed, else, returns the next range of pages to render for PagingScrollElement:
	      firstPageIndex: integer
	      lastPageIndex:  integer
	  
	  Supports:
	    minPageIndex / maxPageIndex: output page indexes will be: minPageIndex <= output page index <= maxPageIndex
	    maxKeep: maximum number of already rendered pages to keep even though they are no longer
	      in the suggested + prerender window
	    maxPrerender: in addition to the suggestedPages from PagingScrollElement, render this many extra pages.
	      This is useful if the pages trigger external network requests which ideally would be complete before
	      the page is displayed on screen. If pages are showing up that are not fully loaded, increase this
	      value.
	  
	      Down-sides:
	        increased initial render time
	        increased memory use
	  
	      Up-sides:
	        should not significantly effect performance after initial render, even during scrolling
	        gives external data requests triggered by page renders more time to complete before the page is onscreen
	   */
	  max = Foundation.max, min = Foundation.min, bound = Foundation.bound;
	  Aim.PagingScrollElement.getNextPageIndexes = function(lastPageIndexes, suggestedPageSpread, focusedPageIndex, maxKeep, maxPrerender, maxPageIndex, minPageIndex) {
	    var firstPageIndex, lastPageIndex, newFirstPageIndex, newLastPageIndex;
	    if (minPageIndex == null) {
	      minPageIndex = 0;
	    }
	    firstPageIndex = lastPageIndexes.firstPageIndex, lastPageIndex = lastPageIndexes.lastPageIndex;
	    newFirstPageIndex = focusedPageIndex - suggestedPageSpread - maxPrerender;
	    newLastPageIndex = focusedPageIndex + suggestedPageSpread + maxPrerender;
	    firstPageIndex = max(minPageIndex, bound(newFirstPageIndex - maxKeep, firstPageIndex, newFirstPageIndex));
	    lastPageIndex = min(maxPageIndex, bound(newLastPageIndex, lastPageIndex, newLastPageIndex + maxKeep));
	    if (firstPageIndex === lastPageIndexes.firstPageIndex && lastPageIndex === lastPageIndexes.lastPageIndex) {
	      return null;
	    } else {
	      return {
	        firstPageIndex: firstPageIndex,
	        lastPageIndex: lastPageIndex
	      };
	    }
	  };
	  return Aim;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(9);


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation;

	module.exports = Foundation = __webpack_require__(10);

	Foundation.Async = __webpack_require__(12);

	Foundation.Binary = __webpack_require__(28);

	Foundation.Browser = __webpack_require__(47);

	Foundation.Inspect = __webpack_require__(31);

	Foundation.All = __webpack_require__(54);

	Foundation.Analytics = __webpack_require__(69);

	Foundation.Array = __webpack_require__(55);

	Foundation.BaseModule = __webpack_require__(70);

	Foundation.BaseObject = __webpack_require__(18);

	Foundation.BatchLoader = __webpack_require__(71);

	Foundation.CallStack = __webpack_require__(19);

	Foundation.Clone = __webpack_require__(56);

	Foundation.Epoch = __webpack_require__(72);

	Foundation.Eq = __webpack_require__(57);

	Foundation.Function = __webpack_require__(59);

	Foundation.Hash = __webpack_require__(58);

	Foundation.JsonStore = __webpack_require__(73);

	Foundation.Log = __webpack_require__(16);

	Foundation.Map = __webpack_require__(40);

	Foundation.Math = __webpack_require__(24);

	Foundation.Promise = __webpack_require__(60);

	Foundation.Regexp = __webpack_require__(25);

	Foundation.Ruby = __webpack_require__(66);

	Foundation.SequencedEventManager = __webpack_require__(74);

	Foundation.ShallowClone = __webpack_require__(26);

	Foundation.SingleObjectTransaction = __webpack_require__(75);

	Foundation.Stat = __webpack_require__(76);

	Foundation.String = __webpack_require__(23);

	Foundation.Time = __webpack_require__(67);

	Foundation.Transaction = __webpack_require__(77);

	Foundation.Types = __webpack_require__(21);

	Foundation.Unique = __webpack_require__(22);

	Foundation.WebWorker = __webpack_require__(68);

	Foundation.WorkerRpc = __webpack_require__(78);

	Foundation.finishLoad(["All", "Analytics", "Array", "BaseModule", "BaseObject", "BatchLoader", "CallStack", "Clone", "Epoch", "Eq", "Function", "Hash", "JsonStore", "Log", "Map", "Math", "Promise", "Regexp", "Ruby", "SequencedEventManager", "ShallowClone", "SingleObjectTransaction", "Stat", "String", "Time", "Transaction", "Types", "Unique", "WebWorker", "WorkerRpc"]);


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(11);

	module.exports = Art.Foundation || (Art.Foundation = (function(superClass) {
	  extend(Foundation, superClass);

	  function Foundation() {
	    return Foundation.__super__.constructor.apply(this, arguments);
	  }

	  Foundation.namespace = Art;

	  Foundation.namespacePath = "Neptune.Art.Foundation";

	  return Foundation;

	})(Neptune.Base));

	Art.addNamespace(Art.Foundation);


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var Async;

	module.exports = Async = __webpack_require__(13);

	Async.All = __webpack_require__(14);

	Async.Basic = __webpack_require__(15);

	Async.Join = __webpack_require__(17);

	Async.Sequence = __webpack_require__(27);

	Async.finishLoad(["All", "Basic", "Join", "Sequence"]);


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(10);

	module.exports = Foundation.Async || (Foundation.Async = (function(superClass) {
	  extend(Async, superClass);

	  function Async() {
	    return Async.__super__.constructor.apply(this, arguments);
	  }

	  Async.namespace = Foundation;

	  Async.namespacePath = "Neptune.Art.Foundation.Async";

	  return Async;

	})(Neptune.Base));

	Foundation.addNamespace(Foundation.Async);


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var Async, Basic, addAll;

	Async = __webpack_require__(13);

	Basic = __webpack_require__(15);

	addAll = function(klass) {
	  var k, results, v;
	  results = [];
	  for (k in klass) {
	    v = klass[k];
	    if (Async[k]) {
	      console.log("addAll to Foundation: conflict on " + k + " from " + klass.name);
	    }
	    results.push(Async[k] = v);
	  }
	  return results;
	};

	addAll(Basic);


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var Basic, log;

	log = __webpack_require__(16).log;

	module.exports = Basic = (function() {
	  var timeout;

	  function Basic() {}

	  Basic.timeout = timeout = function(ms, f) {
	    return setTimeout(f, ms);
	  };

	  Basic.requestAnimationFrame = self.requestAnimationFrame || self.webkitRequestAnimationFrame || self.mozRequestAnimationFrame || self.oRequestAnimationFrame || self.msRequestAnimationFrame || function(f) {
	    return setTimeout(f, 1000 / 60);
	  };

	  Basic.nextTick = function(f) {
	    return timeout(0, f);
	  };

	  Basic.throwErrorOutOfStack = function(e) {
	    return timeout(0, function() {
	      throw e;
	    });
	  };

	  Basic.evalAndThrowErrorsOutOfStack = function(f) {
	    var e, error;
	    try {
	      return f();
	    } catch (error) {
	      e = error;
	      console.error(e.stack);
	      return Basic.throwErrorOutOfStack(e);
	    }
	  };

	  return Basic;

	})();


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation, Log, log,
	  slice = [].slice;

	Foundation = __webpack_require__(10);

	module.exports = Log = (function() {
	  function Log() {}

	  Log.contextString = function(stack, defaultContext) {
	    var caller, context;
	    if (stack && (caller = stack[1])) {
	      context = caller["function"] ? caller["class"] ? caller["class"] + "::" + caller["function"] + "()" : caller["function"] + "()" : defaultContext ? defaultContext + ":" : "";
	      if (caller.sourceFileName) {
	        return caller.sourceFileName + ("-" + caller.sourceLine + ": ") + context;
	      }
	    } else {
	      return "()";
	    }
	  };

	  Log.autoSizedIndepect = function(toInspect, maxLength, maxDepth) {
	    var depth, inspected;
	    if (maxLength == null) {
	      maxLength = 512;
	    }
	    if (maxDepth == null) {
	      maxDepth = 10;
	    }
	    inspected = null;
	    depth = maxDepth;
	    while ((inspected = Foundation.Inspect.inspectLean(toInspect, {
	        maxDepth: depth,
	        maxLength: maxLength
	      })).match(/\.\.\.$/)) {
	      depth--;
	    }
	    return inspected;
	  };

	  Log.loggedParamsString = function(params) {
	    if (typeof params === "string") {
	      return params;
	    } else {
	      return this.autoSizedIndepect(params);
	    }
	  };

	  Log.hideLogging = function() {
	    return this.loggingHidden = true;
	  };

	  Log.showLogging = function() {
	    return this.loggingHidden = false;
	  };

	  Log.rawLog = function() {
	    if (!this.loggingHidden) {
	      return console.log.apply(console, arguments);
	    }
	  };

	  Log.rawErrorLog = function() {
	    if (!this.loggingHidden) {
	      return console.error.apply(console, arguments);
	    }
	  };

	  Log.logCore = function(m, stack, className) {
	    if (this.alternativeLogger) {
	      return this.alternativeLogger.logCore(m, stack, className);
	    } else {
	      return this.rawLog(((this.contextString(stack, className)) + " ") + this.loggedParamsString(m));
	    }
	  };

	  return Log;

	})();

	Log.log = log = function() {
	  var args, m, stack;
	  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	  m = args.length === 1 ? args[0] : args;
	  stack = Foundation.callStack();
	  Log.logCore(m, stack, this.name);
	  return args[args.length - 1];
	};

	Log.logL = function(obj) {
	  var k, ret, v;
	  ret = null;
	  for (k in obj) {
	    v = obj[k];
	    ret = v;
	  }
	  log(obj);
	  return ret;
	};


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Basic, Join, nextTick,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(18);

	Basic = __webpack_require__(15);

	nextTick = Basic.nextTick;

	console.log("Foundation.Async.Join is depricated. Use Promises.");

	module.exports = Join = (function(superClass) {
	  extend(Join, superClass);

	  function Join(onJoin) {
	    Join.__super__.constructor.apply(this, arguments);
	    this.onJoin = onJoin;
	    this.results = [];
	    this.functions = [];
	    this.resultsPending = 0;
	  }

	  Join.prototype.join = function(onJoin) {
	    this.onJoin = onJoin;
	    if (!this.startQueued) {
	      return this.queueStart();
	    }
	  };

	  Join.prototype["do"] = function() {
	    var f, i, len;
	    if (this.started) {
	      throw new Error("already started");
	    }
	    for (i = 0, len = arguments.length; i < len; i++) {
	      f = arguments[i];
	      this.functions.push(f);
	    }
	    if (!this.startQueued) {
	      return this.queueStart();
	    }
	  };

	  Join.prototype.queueStart = function() {
	    this.startQueued = true;
	    return nextTick((function(_this) {
	      return function() {
	        return _this.start();
	      };
	    })(this));
	  };

	  Join.prototype.start = function() {
	    var f, i, len, ref, resultIndex, results;
	    if (this.functions.length === 0) {
	      return this.onJoin(this.results);
	    }
	    this.started = true;
	    this.results = new Array(this.functions.length);
	    this.resultsPending = this.functions.length;
	    ref = this.functions;
	    results = [];
	    for (resultIndex = i = 0, len = ref.length; i < len; resultIndex = ++i) {
	      f = ref[resultIndex];
	      results.push((function(_this) {
	        return function(f, resultIndex) {
	          if (f.length > 0) {
	            return f(function(result) {
	              return _this.jobDone(resultIndex, result);
	            });
	          } else {
	            return _this.jobDone(resultIndex, f());
	          }
	        };
	      })(this)(f, resultIndex));
	    }
	    return results;
	  };

	  Join.prototype.jobDone = function(resultIndex, result) {
	    this.results[resultIndex] = result;
	    this.resultsPending--;
	    if (this.resultsPending === 0) {
	      return this.onJoin(this.results);
	    }
	  };

	  return Join;

	})(BaseObject);


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, CallStack, Log, ShallowClone, String, Types, Unique, callStack, capitalize, decapitalize, extendClone, functionName, isFunction, isPlainObject, log, nextUniqueObjectId, objectName,
	  slice = [].slice,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	CallStack = __webpack_require__(19);

	Log = __webpack_require__(16);

	Types = __webpack_require__(21);

	Unique = __webpack_require__(22);

	String = __webpack_require__(23);

	ShallowClone = __webpack_require__(26);

	capitalize = String.capitalize, decapitalize = String.decapitalize;

	log = Log.log;

	callStack = CallStack.callStack;

	extendClone = ShallowClone.extendClone;

	isFunction = Types.isFunction, objectName = Types.objectName, isPlainObject = Types.isPlainObject, functionName = Types.functionName;

	nextUniqueObjectId = Unique.nextUniqueObjectId;

	module.exports = BaseObject = (function() {
	  var addGetter, addGetters, addSetter, addSetters, defProperties, defProperty, excludedKeys, mixInto, propGetterName, propInternalName, propSetterName;

	  BaseObject.objectsCreated = 0;

	  BaseObject.objectsCreatedByType = {};

	  BaseObject.resetStats = function() {
	    BaseObject.objectsCreated = 0;
	    return BaseObject.objectsCreatedByType = {};
	  };

	  BaseObject.inspect = function() {
	    return this.getClassPathName();
	  };


	  /*
	  TODO: consolidated on one inspector system
	  NOTE: "inspector" parameter is part of the old inspect system
	    The purpose was to resolve recurson on recursive structures.
	    But it ended up being ungainly most the time.
	   */

	  BaseObject.createWithPostCreate = function(klass) {
	    return (klass != null ? klass.postCreate() : void 0) || klass;
	  };

	  BaseObject.postCreate = function() {
	    return this;
	  };

	  excludedKeys = ["__super__", "namespace", "namespacePath"].concat(Object.keys(Neptune.Base));

	  BaseObject.mixInto = mixInto = function() {
	    var i, intoClass, k, keys, klass, len, v;
	    intoClass = arguments[0], klass = arguments[1], keys = 3 <= arguments.length ? slice.call(arguments, 2) : [];
	    if (keys.length === 0) {
	      keys = Object.keys(klass);
	    }
	    for (i = 0, len = keys.length; i < len; i++) {
	      k = keys[i];
	      if (!(indexOf.call(excludedKeys, k) < 0)) {
	        continue;
	      }
	      v = klass[k];
	      if (intoClass[k]) {
	        console.error("Foundation.mixInto - mix " + klass.name + " into " + intoClass.name + ": " + k + " already exists.");
	      }
	      intoClass[k] = v;
	    }
	    return intoClass;
	  };

	  BaseObject.createAllClass = function() {
	    var All, arg, args, i, len, namespace;
	    namespace = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    for (i = 0, len = args.length; i < len; i++) {
	      arg = args[i];
	      if (arg.prototype instanceof BaseObject) {
	        console.error("createAllClass arguments cannot be subclasses of BaseObject: " + namespace.name + ":" + arg.name);
	      }
	      mixInto(namespace, arg);
	    }
	    return All = (function(superClass) {
	      extend(All, superClass);

	      function All() {
	        return All.__super__.constructor.apply(this, arguments);
	      }

	      return All;

	    })(namespace);
	  };

	  function BaseObject() {
	    this.__uniqueId = null;
	  }

	  BaseObject.implementsInterface = function(object, methods) {
	    var i, len, method;
	    for (i = 0, len = methods.length; i < len; i++) {
	      method = methods[i];
	      if (typeof object[method] !== "function") {
	        return false;
	      }
	    }
	    return true;
	  };


	  /*
	  mix-in class methods
	  Define getters/setters example:
	    class MyMixin
	      included: ->
	        @getter foo: -> @_foo
	        @setter foo: (v) -> @_foo = v
	  
	  NOTE! This will NOT include any properties you defined with getter or setter!
	  NOTE! This only copies over values if there aren't already values in the included-into class
	    This somewhat mirrors Ruby's include where the included-into-class's methods take precidence.
	    However, if you include two modules in a row, the first module gets priority here.
	    In ruby the second module gets priority (I believe).
	   */

	  BaseObject.include = function(obj) {
	    var key, ref, value;
	    for (key in obj) {
	      value = obj[key];
	      if (key !== 'included') {
	        if (!this[key]) {
	          this[key] = value;
	        }
	      }
	    }
	    ref = obj.prototype;
	    for (key in ref) {
	      value = ref[key];
	      if (key) {
	        if (!this.prototype[key]) {
	          this.prototype[key] = value;
	        }
	      }
	    }
	    if (typeof obj.included === "function") {
	      obj.included(this);
	    }
	    return this;
	  };

	  BaseObject.getPrototypePropertyExtendedByInheritance = function(propertyName, defaultStructure) {
	    if (this.prototype.hasOwnProperty(propertyName)) {
	      return this.prototype[propertyName];
	    } else {
	      return this.prototype[propertyName] = extendClone(this.__super__[propertyName] || defaultStructure);
	    }
	  };

	  BaseObject._propInternalName = propInternalName = function(prop) {
	    return "_" + prop;
	  };

	  BaseObject._propGetterName = propGetterName = function(prop) {
	    return "get" + capitalize(prop);
	  };

	  BaseObject._propSetterName = propSetterName = function(prop) {
	    return "set" + capitalize(prop);
	  };

	  BaseObject._addGetter = addGetter = function(obj, prop, getter) {
	    obj[propGetterName(prop)] = getter;
	    Object.defineProperty(obj, prop, {
	      get: getter,
	      configurable: true
	    });
	    return prop;
	  };

	  BaseObject._addGetters = addGetters = function(obj, a, b) {
	    var getter, map, prop;
	    if (isPlainObject(map = a)) {
	      for (prop in map) {
	        getter = map[prop];
	        addGetter(obj, prop, getter);
	      }
	      return map;
	    } else {
	      return addGetter(obj, a, b);
	    }
	  };

	  BaseObject._addSetter = addSetter = function(obj, prop, setter) {
	    obj[propSetterName(prop)] = setter;
	    Object.defineProperty(obj, prop, {
	      set: setter,
	      configurable: true
	    });
	    return prop;
	  };

	  BaseObject._addSetters = addSetters = function(obj, a, b) {
	    var map, prop, setter;
	    if (isPlainObject(map = a)) {
	      for (prop in map) {
	        setter = map[prop];
	        addSetter(obj, prop, setter);
	      }
	      return map;
	    } else {
	      return addSetter(obj, a, b);
	    }
	  };

	  BaseObject._defProperty = defProperty = function(obj, prop, defineGetter, defineSetter, initializer) {
	    var propName;
	    propName = propInternalName(prop);
	    if (defineGetter) {
	      addGetter(obj, prop, obj[propGetterName(prop)] = isFunction(initializer) ? function() {
	        if (this[propName] != null) {
	          return this[propName];
	        } else {
	          return this[propName] = initializer();
	        }
	      } : initializer ? function() {
	        if (this[propName] != null) {
	          return this[propName];
	        } else {
	          return this[propName] = initializer;
	        }
	      } : function() {
	        return this[propName];
	      });
	    }
	    if (defineSetter) {
	      return addSetter(obj, prop, function(v) {
	        return this[propName] = v;
	      });
	    }
	  };

	  BaseObject._defProperties = defProperties = function(obj, props, defineGetter, defineSetter) {
	    var i, initializer, len, prop, propMap, results;
	    results = [];
	    for (i = 0, len = props.length; i < len; i++) {
	      prop = props[i];
	      if (isPlainObject(propMap = prop)) {
	        results.push((function() {
	          var results1;
	          results1 = [];
	          for (prop in propMap) {
	            initializer = propMap[prop];
	            results1.push(defProperty(obj, prop, defineGetter, defineSetter, initializer));
	          }
	          return results1;
	        })());
	      } else {
	        results.push(defProperty(obj, prop, defineGetter, defineSetter, null));
	      }
	    }
	    return results;
	  };

	  BaseObject.property = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return defProperties(this.prototype, props, true, true);
	  };

	  BaseObject.propGetter = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return defProperties(this.prototype, props, true, false);
	  };

	  BaseObject.propSetter = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return defProperties(this.prototype, props, false, true);
	  };

	  BaseObject.getter = function(a, b) {
	    return addGetters(this.prototype, a, b);
	  };

	  BaseObject.setter = function(a, b) {
	    return addSetters(this.prototype, a, b);
	  };

	  BaseObject.classGetter = function(a, b) {
	    return addGetters(this, a, b);
	  };

	  BaseObject.classSetter = function(a, b) {
	    return addSetters(this, a, b);
	  };

	  BaseObject.classProperty = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return defProperties(this.prototype, props, true, true);
	  };

	  BaseObject.classPropGetter = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return defProperties(this.prototype, props, true, false);
	  };

	  BaseObject.classPropSetter = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return defProperties(this.prototype, props, false, true);
	  };

	  BaseObject.classGetter({
	    classPath: function() {
	      return this.namespace.namespacePath;
	    },
	    classPathArray: function() {
	      return this.namespacePathArray || (this.namespacePathArray = this.getClassPath().split("."));
	    },
	    classPathName: function() {
	      var p, ref;
	      if (p = (ref = this.namespace) != null ? ref.namespacePath : void 0) {
	        return p + "." + this.name;
	      } else {
	        return this.name;
	      }
	    },
	    className: function() {
	      return this.prototype.constructor.name;
	    }
	  });


	  /*
	  creates the classGetter "singleton" which returns a single instance of the current class.
	  
	  IN: args are passed to the singleton constructor
	  OUT: null
	  
	  The singleton instance is created on demand the first time it is accessed.
	   */

	  BaseObject.singletonClass = function() {
	    var args, map;
	    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    map = {
	      singleton: (function(_this) {
	        return function() {
	          return _this._singleton || (_this._singleton = (function(func, args, ctor) {
	            ctor.prototype = func.prototype;
	            var child = new ctor, result = func.apply(child, args);
	            return Object(result) === result ? result : child;
	          })(_this, args, function(){}));
	        };
	      })(this)
	    };
	    map[decapitalize(functionName(this))] = (function(_this) {
	      return function() {
	        return _this.getSingleton();
	      };
	    })(this);
	    this.classGetter(map);
	    return null;
	  };

	  BaseObject.getter({
	    className: function() {
	      return this["class"].name;
	    },
	    "class": function() {
	      return this.constructor;
	    },
	    keys: function() {
	      return Object.keys(this);
	    },
	    classPathArray: function() {
	      return this["class"].getClassPathArray();
	    },
	    classPath: function() {
	      return this["class"].getClassPath();
	    },
	    classPathName: function() {
	      return this["class"].getClassPathName();
	    },
	    classPathNameAndId: function() {
	      return this.classPathName + ":" + this.objectId;
	    },
	    uniqueId: function() {
	      return this.__uniqueId || (this.__uniqueId = nextUniqueObjectId());
	    },
	    objectId: function() {
	      return this.__uniqueId || (this.__uniqueId = nextUniqueObjectId());
	    }
	  });

	  BaseObject.prototype.implementsInterface = function(methods) {
	    return Function.BaseObject.implementsInterface(this, methods);
	  };

	  BaseObject.prototype.tap = function(f) {
	    f(this);
	    return this;
	  };

	  BaseObject.rawLog = function() {
	    return Log.rawLog.apply(Log, arguments);
	  };

	  BaseObject.log = function() {
	    var a, stack, toLog;
	    stack = callStack();
	    toLog = (function() {
	      var i, len, results;
	      if (arguments.length > 1) {
	        results = [];
	        for (i = 0, len = arguments.length; i < len; i++) {
	          a = arguments[i];
	          results.push(a);
	        }
	        return results;
	      } else {
	        return arguments[0];
	      }
	    }).apply(this, arguments);
	    Log.logCore(toLog, stack, this.className);
	    return arguments[arguments.length - 1];
	  };

	  BaseObject.prototype.log = BaseObject.log;

	  BaseObject.prototype.rawLog = BaseObject.rawLog;

	  return BaseObject;

	})();


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var CallStack, Parse, parseURL;

	Parse = __webpack_require__(20);

	parseURL = Parse.url;

	module.exports = CallStack = (function() {
	  var CallStackLine;

	  function CallStack() {}

	  CallStack.CallStackLine = CallStackLine = (function() {
	    CallStackLine.getter = function(map) {
	      var getter, prop, results;
	      results = [];
	      for (prop in map) {
	        getter = map[prop];
	        results.push(Object.defineProperty(this.prototype, prop, {
	          get: getter,
	          configurable: true
	        }));
	      }
	      return results;
	    };

	    CallStackLine.setter = function(map) {
	      var prop, results, setter;
	      results = [];
	      for (prop in map) {
	        setter = map[prop];
	        results.push(Object.defineProperty(this.prototype, prop, {
	          set: setter,
	          configurable: true
	        }));
	      }
	      return results;
	    };

	    function CallStackLine(line) {
	      this.original = line;
	      this["function"] = null;
	      this.source = null;
	      this["class"] = null;
	      this.classPath = null;
	      this.sourceFileName = null;
	      this.sourcePath = null;
	      this.sourceHostWithPort = null;
	      this.sourceLine = 0;
	      this.sourceColumn = 0;
	      if (this.parseLineWithFunction(line)) {

	      } else {
	        this.parseLineWithoutFunction(line);
	      }
	      this.subParseFunction();
	      this.subParseSource();
	    }

	    CallStackLine.prototype.toString = function() {
	      return this.original;
	    };

	    CallStackLine.getter({
	      fileWithLocation: function() {
	        return this._fileWithLocation || (this._fileWithLocation = this.sourceFileName ? this.sourcePath + "/" + this.sourceFileName + ":" + this.sourceLine + ":" + this.sourceColumn : this.original);
	      }
	    });

	    CallStackLine.prototype.parseLineWithFunction = function(line) {
	      var r;
	      if (r = line.match(/\s*at\s((new\s)?[a-zA-Z0-9_.<>]+)\s\(([^)]*):([0-9]+):([0-9]+)\)/)) {
	        this["function"] = r[1];
	        this.source = r[3];
	        this.sourceLine = r[4] | 0;
	        return this.sourceColumn = r[5] | 0;
	      }
	    };

	    CallStackLine.prototype.parseLineWithoutFunction = function(line) {
	      var r;
	      if (r = line.match(/\s*at\s([^)]*):([0-9]+):([0-9]+)/)) {
	        this.source = r[1];
	        this.sourceLine = r[2] | 0;
	        return this.sourceColumn = r[3] | 0;
	      }
	    };

	    CallStackLine.prototype.subParseSource = function() {
	      var url;
	      if (this.source) {
	        url = parseURL(this.source);
	        this.sourceFileName = url.fileName;
	        this.sourcePath = url.path;
	        return this.sourceHostWithPort = url.hostWithPort;
	      }
	    };

	    CallStackLine.prototype.subParseFunction = function() {
	      var f;
	      if (this["function"]) {
	        f = this["function"].split(".");
	        this["function"] = f[f.length - 1];
	        if (this["function"] === "<anonymous>") {
	          this["function"] = void 0;
	        }
	        this["class"] = f[f.length - 2];
	        return this.classPath = f.slice(0, f.length - 2);
	      }
	    };

	    return CallStackLine;

	  })();

	  CallStack.rawCallStack = (new Error).stack ? function(ignoreTop) {
	    if (ignoreTop == null) {
	      ignoreTop = 0;
	    }
	    return (new Error).stack.split(/\n  */).slice(ignoreTop + 2);
	  } : function(ignoreTop) {
	    var e, error;
	    if (ignoreTop == null) {
	      ignoreTop = 0;
	    }
	    try {
	      throw new Error;
	    } catch (error) {
	      e = error;
	      return e.stack.split(/\n  */).slice(ignoreTop + 2);
	    }
	  };

	  CallStack.callStack = function(ignoreTop) {
	    var i, len, line, ref, results;
	    if (ignoreTop == null) {
	      ignoreTop = 0;
	    }
	    ref = CallStack.rawCallStack(ignoreTop + 1);
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      line = ref[i];
	      results.push(new CallStackLine(line));
	    }
	    return results;
	  };

	  return CallStack;

	})();


/***/ },
/* 20 */
/***/ function(module, exports) {

	var Parse;

	module.exports = Parse = (function() {
	  function Parse() {}

	  Parse.query = function(qs) {
	    var i, j, key, len, obj, pair, ref, val;
	    if (qs == null) {
	      qs = self.location.search;
	    }
	    obj = {};
	    ref = qs.replace('?', '').split('&');
	    for (j = 0, len = ref.length; j < len; j++) {
	      pair = ref[j];
	      i = pair.indexOf('=');
	      key = pair.slice(0, i);
	      val = pair.slice(i + 1);
	      if (key.length > 0) {
	        obj[key] = decodeURIComponent(val);
	      }
	    }
	    return obj;
	  };

	  Parse.url = function(url) {
	    var _, a, anchor, fileName, host, hostWithPort, m, password, path, pathName, port, protocol, query, username;
	    m = url.match(/(([A-Za-z]+):(\/\/)?)?(([\-;&=\+\$,\w]+)(:([\-;:&=\+\$,\w]+))?@)?([A-Za-z0-9\.\-]+)(:([0-9]+))?(\/[\+~%\/\.\w\-]*)?(\?([\-\+=&;%@\.\w,]*))?(\#([\.\!\/\\\w]*))?/);
	    if (!m) {
	      return void 0;
	    }
	    _ = m[0], _ = m[1], protocol = m[2], _ = m[3], _ = m[4], username = m[5], _ = m[6], password = m[7], host = m[8], _ = m[9], port = m[10], pathName = m[11], _ = m[12], query = m[13], _ = m[14], anchor = m[15];
	    if (pathName) {
	      a = pathName.split("/");
	      fileName = a[a.length - 1];
	      path = (a.slice(0, a.length - 1)).join("/");
	    }
	    host = host.toLowerCase();
	    hostWithPort = host;
	    if (port) {
	      hostWithPort += ":" + port;
	    }
	    return {
	      protocol: protocol,
	      username: username,
	      password: password,
	      hostWithPort: hostWithPort,
	      host: host,
	      port: port,
	      pathName: pathName,
	      path: path,
	      fileName: fileName,
	      query: query && Parse.query(query),
	      anchor: anchor
	    };
	  };

	  return Parse;

	})();


/***/ },
/* 21 */
/***/ function(module, exports) {

	
	/*
	Maybe we should just the API for array compatibility rather than specific types.
	  typeof obj == "object" &&
	    && isFunction obj.forEach
	    && isFunction obj.indexOf
	    && isNumber obj.length
	 */
	var Types, isArray;

	isArray = self.Uint8ClampedArray ? function(obj) {
	  return !!obj && (obj.constructor === Array || obj instanceof Uint8ClampedArray || obj instanceof Int8Array || obj instanceof Uint8Array || obj instanceof Int16Array || obj instanceof Uint16Array || obj instanceof Int32Array || obj instanceof Uint32Array || obj instanceof Float32Array || obj instanceof Float64Array);
	} : function(obj) {
	  return !!obj && (obj.constructor === Array || obj instanceof Int8Array || obj instanceof Uint8Array || obj instanceof Int16Array || obj instanceof Uint16Array || obj instanceof Int32Array || obj instanceof Uint32Array || obj instanceof Float32Array || obj instanceof Float64Array);
	};

	module.exports = Types = (function() {
	  var cloneObjectUpToKey, deepEach, deepMap, deepMapArray, deepMapObject, functionName, hasKeys, isClass, isFunction, isObject, isPlainArray, isPlainObject, isString, noopMapper, objectName;

	  function Types() {}

	  Types.isRegExp = function(obj) {
	    return obj instanceof RegExp;
	  };

	  Types.isNumber = function(obj) {
	    return typeof obj === "number";
	  };

	  Types.isArray = isArray;

	  Types.isDate = function(obj) {
	    return obj && obj.constructor === Date;
	  };

	  Types.isString = isString = function(obj) {
	    return typeof obj === "string";
	  };

	  Types.isFunction = isFunction = function(obj) {
	    return typeof obj === "function";
	  };

	  Types.isEmptyObject = function(obj) {
	    return Object.keys(obj).length === 0;
	  };

	  Types.isClass = isClass = function(obj) {
	    return !!(typeof obj === "function" && ((typeof obj.__super__ === "object") || (obj.prototype && hasKeys(obj.prototype))));
	  };


	  /*
	  like RubyOnRails#present:
	    "An object is present if it's not blank."
	  
	  Examples:
	    "", undefined, null => false
	    0 => true
	  
	  If 'obj' has method: obj.present() => !!obj.present()
	   */

	  Types.present = function(obj) {
	    if (isFunction(obj != null ? obj.present : void 0)) {
	      return !!obj.present();
	    } else {
	      return obj !== "" && obj !== void 0 && obj !== null;
	    }
	  };

	  Types.isObject = isObject = function(obj) {
	    return !!obj && typeof obj === "object" && !isArray(obj);
	  };

	  Types.functionName = functionName = function(f) {
	    var matched;
	    return f.name || ((matched = ("" + f).match(/function ([a-zA-Z]+)\(/)) && matched[1]) || "function";
	  };

	  Types.objectName = objectName = function(obj) {
	    var a, name, ref;
	    if (!obj) {
	      return "" + obj;
	    } else if (a = typeof obj.getClassPathName === "function" ? obj.getClassPathName() : void 0) {
	      return a;
	    } else if (a = obj.classPathName) {
	      return a;
	    } else if (obj.constructor === Object) {
	      return "Object";
	    } else if (isFunction(obj)) {
	      return functionName(obj);
	    } else if (isString(name = (ref = obj.constructor) != null ? ref.name : void 0) && name.length > 0) {
	      return name;
	    } else if (obj instanceof Object) {
	      return "(anonymous instanceof Object)";
	    } else {
	      return "(objectName unknown)";
	    }
	  };

	  Types.isBrowserObject = function(obj) {
	    var name;
	    if (!Types.isObject(obj)) {
	      return false;
	    }
	    name = Types.objectName(obj);
	    return name.slice(0, 4) === "HTML" || name.slice(0, 22) === "CanvasRenderingContext";
	  };

	  Types.isPlainArray = isPlainArray = function(v) {
	    if (v) {
	      return v.constructor === Array;
	    } else {
	      return false;
	    }
	  };

	  Types.isPlainObject = isPlainObject = function(v) {
	    if (v) {
	      return v.constructor === Object;
	    } else {
	      return false;
	    }
	  };

	  Types.hasKeys = hasKeys = function(o) {
	    var k;
	    for (k in o) {
	      return true;
	    }
	    return false;
	  };

	  Types.deepEach = deepEach = function(v, f) {
	    var j, k, len, subV;
	    if (isPlainArray(v)) {
	      for (j = 0, len = v.length; j < len; j++) {
	        subV = v[j];
	        deepEach(subV, f);
	      }
	    } else if (isPlainObject(v)) {
	      for (k in v) {
	        subV = v[k];
	        deepEach(subV, f);
	      }
	    } else {
	      f(v);
	    }
	    return v;
	  };


	  /*
	  only creates a new array if the children changed
	   */

	  deepMapArray = function(array, mapper, options) {
	    var i, j, len, r, res, v;
	    res = null;
	    for (i = j = 0, len = array.length; j < len; i = ++j) {
	      v = array[i];
	      r = deepMap(v, mapper, options);
	      if (r !== v) {
	        res || (res = array.slice());
	        res[i] = r;
	      }
	    }
	    return res || array;
	  };

	  cloneObjectUpToKey = function(obj, k) {
	    var k2, res, v;
	    res = {};
	    for (k2 in obj) {
	      v = obj[k2];
	      if (k2 === k) {
	        break;
	      }
	      res[k2] = v;
	    }
	    return res;
	  };

	  deepMapObject = function(obj, mapper, options) {
	    var k, r, res, v;
	    res = null;
	    for (k in obj) {
	      v = obj[k];
	      r = deepMap(v, mapper, options);
	      if (r !== v || res) {
	        res || (res = cloneObjectUpToKey(obj, k));
	        res[k] = r;
	      }
	    }
	    return res || obj;
	  };


	  /*
	  Applies "f" to every -value- in a nested structure of plain arrays and objects.
	  Pure functional efficient:
	    If an array or object, and all its sub values, didn't change, the original array/object is reused.
	   */

	  noopMapper = function(v) {
	    return v;
	  };

	  Types.deepMap = deepMap = function(v, mapper, options) {
	    var arrayMapper, objectMapper;
	    arrayMapper = (options != null ? options.arrays : void 0) || noopMapper;
	    objectMapper = (options != null ? options.objects : void 0) || noopMapper;
	    mapper || (mapper = noopMapper);
	    if (isPlainArray(v)) {
	      return deepMapArray(arrayMapper(v), mapper, options);
	    } else if (isPlainObject(v)) {
	      return deepMapObject(objectMapper(v), mapper, options);
	    } else {
	      return mapper(v);
	    }
	  };

	  Types.toPlainStructure = function(o) {
	    return deepMap(o, function(o) {
	      if (isObject(o) && !isPlainObject(o)) {
	        if (o.toPlainStructure) {
	          return o.toPlainStructure();
	        } else {
	          return objectName(o);
	        }
	      } else {
	        return o;
	      }
	    });
	  };

	  return Types;

	})();


/***/ },
/* 22 */
/***/ function(module, exports) {

	var Unique, nextId;

	nextId = 1;

	module.exports = Unique = (function() {
	  var nextUniqueObjectId, objectId;

	  function Unique() {}

	  Unique.nextUniqueObjectId = nextUniqueObjectId = function() {
	    return "object_" + nextId++;
	  };

	  Unique.objectId = objectId = function(o) {
	    if (o.hasOwnProperty("__uniqueId")) {
	      return o.__uniqueId || (o.__uniqueId = nextUniqueObjectId());
	    } else {
	      Object.defineProperty(o, "__uniqueId", {
	        enumerable: false,
	        value: nextUniqueObjectId()
	      });
	      return o.__uniqueId;
	    }
	  };

	  Unique.id = function(key) {
	    if (typeof key === "object") {
	      if (key) {
	        if (typeof key.getUniqueId === "function") {
	          return key.getUniqueId();
	        } else {
	          return objectId(key);
	        }
	      } else {
	        return "null";
	      }
	    } else if (typeof key === "number") {
	      return "" + key;
	    } else if (typeof key === "string") {
	      return "string_" + key;
	    } else if (typeof key === "boolean") {
	      if (key) {
	        return "true";
	      } else {
	        return "false";
	      }
	    } else if (key === void 0) {
	      return "undefined";
	    } else {
	      return (typeof key) + "_" + key;
	    }
	  };

	  return Unique;

	})();


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var FoundationMath, String, Types, escapedNonQuoteRegex, escapedQuoteRegex, floor, intRand, isArray, isNumber, isPlainObject, isString, jString;

	FoundationMath = __webpack_require__(24);

	Types = __webpack_require__(21);

	intRand = FoundationMath.intRand;

	isString = Types.isString, isNumber = Types.isNumber, isPlainObject = Types.isPlainObject, isArray = Types.isArray;

	jString = self.String;

	escapedQuoteRegex = /[\\]["]/;

	escapedNonQuoteRegex = /[\\][^"]/;

	floor = Math.floor;

	module.exports = String = (function() {
	  var consistentJsonStringify, escapeDoubleQuoteJavascriptString, escapeJavascriptString, pluralize, repeat;

	  function String() {}

	  String.randomString = function(length, chars) {
	    var charsLength, i, result;
	    if (length == null) {
	      length = 32;
	    }
	    if (chars == null) {
	      chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	    }
	    result = '';
	    charsLength = chars.length;
	    return ((function() {
	      var j, ref, results;
	      results = [];
	      for (i = j = 0, ref = length; j < ref; i = j += 1) {
	        results.push(chars[intRand(charsLength)]);
	      }
	      return results;
	    })()).join('');
	  };

	  String.pluralize = pluralize = function(a, b, pluralForm) {
	    if (typeof a === "number") {
	      return a + " " + (a === 1 ? b : pluralForm || pluralize(b));
	    } else {
	      return a + "s";
	    }
	  };

	  String.replaceLast = function(str, find, replaceWith) {
	    var index;
	    index = str.lastIndexOf(find);
	    if (index >= 0) {
	      return str.substring(0, index) + replaceWith + str.substring(index + find.length);
	    } else {
	      return str.toString();
	    }
	  };

	  String.pad = function(str, length, padding) {
	    if (padding == null) {
	      padding = "0";
	    }
	    str = jString(str);
	    return Array(Math.max(length - str.length + 1, 0)).join(padding) + str;
	  };

	  String.capitalize = function(str) {
	    return str.charAt(0).toUpperCase() + str.slice(1);
	  };

	  String.decapitalize = function(str) {
	    return str.charAt(0).toLowerCase() + str.slice(1);
	  };

	  String.upperCamelCase = function(str) {
	    var capWords, word, words;
	    words = str.split('_');
	    capWords = (function() {
	      var j, len, results;
	      results = [];
	      for (j = 0, len = words.length; j < len; j++) {
	        word = words[j];
	        results.push(this.capitalize(word));
	      }
	      return results;
	    }).call(String);
	    return capWords.join("");
	  };

	  String.lowerCamelCase = function(str) {
	    var capWords, word, words;
	    words = str.split('_');
	    capWords = [words[0]].concat((function() {
	      var j, len, ref, results;
	      ref = words.slice(1, words.length);
	      results = [];
	      for (j = 0, len = ref.length; j < len; j++) {
	        word = ref[j];
	        results.push(this.capitalize(word));
	      }
	      return results;
	    }).call(String));
	    return capWords.join("");
	  };

	  String.snakeCase = function(str) {
	    var word;
	    return ((function() {
	      var j, len, ref, results;
	      ref = str.split(/(?=[A-Z])/);
	      results = [];
	      for (j = 0, len = ref.length; j < len; j++) {
	        word = ref[j];
	        results.push(word.toLowerCase());
	      }
	      return results;
	    })()).join("_");
	  };

	  String.escapeDoubleQuoteJavascriptString = escapeDoubleQuoteJavascriptString = function(str) {
	    var s;
	    s = jString(str).replace(/[\\"]/g, "\\$&").replace(/[\0\b\f\n\r\t\v\u2028\u2029]/g, function(x) {
	      switch (x) {
	        case '\0':
	          return "\\0";
	        case '\b':
	          return "\\b";
	        case '\f':
	          return "\\f";
	        case '\n':
	          return "\\n";
	        case '\r':
	          return "\\r";
	        case '\t':
	          return "\\t";
	        case '\v':
	          return "\\v";
	        case '\u2028':
	          return "\\u2028";
	        case '\u2029':
	          return "\\u2029";
	      }
	    });
	    return s = '"' + s + '"';
	  };

	  String.escapeJavascriptString = escapeJavascriptString = function(str) {
	    return JSON.stringify(str);
	  };

	  String.allIndexes = function(str, regex) {
	    var indexes, lastIndex, result;
	    indexes = [];
	    if (!((regex instanceof RegExp) && regex.global)) {
	      throw new Error("regex must be a global RegExp");
	    }
	    regex.lastIndex = 0;
	    while (result = regex.exec(str)) {
	      indexes.push(result.index);
	      lastIndex = result;
	    }
	    return indexes;
	  };

	  String.repeat = repeat = " ".repeat ? function(str, times) {
	    return str.repeat(times);
	  } : function(str, count) {
	    var result;
	    count === floor(count);
	    result = '';
	    if (count > 0 && str.length > 0) {
	      while (true) {
	        if ((count & 1) === 1) {
	          result += str;
	        }
	        count >>>= 1;
	        if (count === 0) {
	          break;
	        }
	        str += str;
	      }
	    }
	    return result;
	  };

	  String.rightAlign = function(str, width) {
	    if (str.length >= width) {
	      return str;
	    } else {
	      return repeat(" ", width - str.length) + str;
	    }
	  };

	  String.eachMatch = function(str, regex, f) {
	    var result;
	    regex.lastIndex = 0;
	    while (result = regex.exec(str)) {
	      f(result);
	    }
	    return null;
	  };

	  String.consistentJsonStringify = consistentJsonStringify = function(object) {
	    var error, k, v;
	    if (object === false || object === true || object === null || isNumber(object)) {
	      return "" + object;
	    } else if (isString(object)) {
	      return escapeJavascriptString(object);
	    } else if (isPlainObject(object)) {
	      return "{" + ((function() {
	        var j, len, ref, results;
	        ref = (Object.keys(object)).sort();
	        results = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          k = ref[j];
	          if (object[k] !== void 0) {
	            results.push(escapeJavascriptString(k) + ": " + consistentJsonStringify(object[k]));
	          }
	        }
	        return results;
	      })()).join(', ') + "}";
	    } else if (isArray(object)) {
	      return "[" + ((function() {
	        var j, len, results;
	        results = [];
	        for (j = 0, len = object.length; j < len; j++) {
	          v = object[j];
	          results.push(consistentJsonStringify(v));
	        }
	        return results;
	      })()).join(', ') + "]";
	    } else {
	      console.error(error = "invalid object type for Json. Expecting: null, false, true, number, string, plain-object or array", object);
	      throw new Error(error);
	    }
	  };

	  String.splitRuns = function(str) {
	    var ch, chCount, i, j, lastCh, ref, result;
	    if (str.length === 0) {
	      return [];
	    }
	    lastCh = str[0];
	    chCount = 1;
	    result = [];
	    for (i = j = 1, ref = str.length; j < ref; i = j += 1) {
	      ch = str[i];
	      if (ch === lastCh) {
	        chCount++;
	      } else {
	        result.push([lastCh, chCount]);
	        chCount = 1;
	      }
	      lastCh = ch;
	    }
	    result.push([lastCh, chCount]);
	    return result;
	  };

	  String.eachRunAsCharCodes = function(str, f) {
	    var ch, chCount, i, j, lastCh, ref;
	    lastCh = str.charCodeAt(0);
	    chCount = 1;
	    for (i = j = 1, ref = str.length; j < ref; i = j += 1) {
	      ch = str.charCodeAt(i);
	      if (ch === lastCh) {
	        chCount++;
	      } else {
	        f(lastCh, chCount);
	        chCount = 1;
	      }
	      lastCh = ch;
	    }
	    f(lastCh, chCount);
	    return null;
	  };


	  /*
	  TODO: I think this can be generalized to cover most all ellipsies and word-wrap scenarios:
	    a) have an options object with options:
	      maxLength: number         # similar to current maxLength
	      minLength: number         # currently implied to be maxLength / 2, in additional customizable, it would also be optional
	      brokenWordEllipsis: "…"   # used when only part of a word is included
	      moreWordsEllipsis: "…"    # used when there are more words, but the last word is whole
	      wordLengthFunction: (string) -> string.length
	         * can be replaced with, say, the font pixel-width for a string
	         * in this way, this function can be used by text-layout
	         * minLength and maxLength would then be in pixels
	      breakWords: false         # currently, this is effectively true - will break the last word on line in most situations
	      breakOnlyWord: true       # even if breakWords is false, if this is the only word on the line and it doesn't fit, should we break it?
	                                 * should this even be an option?
	       * future:
	      wordBreakFunction: (word, maxLength) -> shorterWord
	         * given a word and the maximum length of that word, returns
	         * a word <= maxLength according to wordLengthFunction
	  
	    b) Use cases
	      - TextLayout - uses pixels for length rather than characters
	      - Art.Engine.Element 'flow' layout
	        - if the input was an array of "words" and
	        - wordLengthFunction returns the Element's width...
	        I think this works. We'd need a way to handle margins though. I think this works:
	          spaceLength: (leftWord, rightWord) -> 1
	      - Shortend user display names:
	        Options:
	          wordBreakFunction: (word, maxLength) -> word[0]
	          brokenWordEllipsis: "." or ""
	        Example Output:
	          "Shane Delamore", 10 > "Shane D." or
	          "Shane Delamore", 10 > "Shane D"
	        Or, just leave breakwords: false and get:
	          "Shane Delamore", 10 > "Shane"
	  
	    c) returns both the output string and the "string remaining" - everything not included
	    d) alternate input: an array of strings already broken up by words - the "remainging" return value would then also be an array of "words"
	      (this would be for efficiency when doing multi-line layout)
	  
	  Right now, it works as follows:
	  The output string is guaranteed to be:
	    <= maxLength
	    >= maxLength / 2 in almost all secenarios as long as inputString is >= maxLength / 2
	   */

	  String.humanFriendlyShorten = function(inputString, maxLength) {
	    var j, len, minLength, part, string, stringParts;
	    if (!(maxLength > 0)) {
	      throw new error("maxLength must be > 0");
	    }
	    inputString = inputString.trim();
	    if (!(inputString.length > maxLength)) {
	      return inputString;
	    }
	    minLength = maxLength / 2;
	    stringParts = inputString.split(/\s+/);
	    string = "";
	    for (j = 0, len = stringParts.length; j < len; j++) {
	      part = stringParts[j];
	      if (string.length === 0) {
	        string = part;
	      } else if ((string.length < minLength) || string.length + part.length + 2 <= maxLength) {
	        string += " " + part;
	      } else {
	        break;
	      }
	    }
	    if (string.length > maxLength) {
	      string = string.slice(0, maxLength - 1).trim();
	    }
	    return string + "…";
	  };

	  return String;

	})();


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation, Math, Regexp, abs, ceil, float32Precision, float64Precision, floor, inverseFloat64Precision, inverstFlaot32Precision, max, min, numberRegexp, pow, random, ref, round;

	Foundation = __webpack_require__(10);

	Regexp = __webpack_require__(25);

	numberRegexp = Regexp.numberRegexp;

	float64Precision = 0.0000000001;

	float32Precision = 0.0000001;

	inverseFloat64Precision = 1 / float64Precision;

	inverstFlaot32Precision = 1 / float32Precision;

	ref = self.Math, abs = ref.abs, min = ref.min, max = ref.max, ceil = ref.ceil, floor = ref.floor, round = ref.round, random = ref.random, pow = ref.pow;

	module.exports = Math = (function() {
	  var bound;

	  function Math() {}

	  Math.nearInfinity = pow(10, 100);

	  Math.nearInfinityResult = pow(10, 50);

	  Math.float32Precision = float32Precision;

	  Math.float64Precision = float64Precision;

	  Math.modulo = function(a, b) {
	    var r;
	    r = a % b;
	    if (r < 0) {
	      return r + b;
	    } else {
	      return r;
	    }
	  };

	  Math.stringToNumberArray = function(string) {
	    var a, i, j, len, match, v;
	    a = string.split(",");
	    for (i = j = 0, len = a.length; j < len; i = ++j) {
	      v = a[i];
	      match = v.match(numberRegexp);
	      a[i] = match != null ? match[0] - 0 : 0;
	    }
	    return a;
	  };

	  Math.minMagnitude = function(a, magnitude) {
	    if (a < 0) {
	      return min(a, -magnitude);
	    } else {
	      return max(a, magnitude);
	    }
	  };

	  Math.maxMagnitude = function(a, magnitude) {
	    return bound(-magnitude, a, magnitude);
	  };

	  Math.maxChange = function(newValue, oldValue, maxChangeV) {
	    return bound(oldValue - maxChangeV, newValue, oldValue + maxChangeV);
	  };

	  Math.bound = bound = function(a, b, c) {
	    if (isNaN(b)) {
	      return a;
	    }
	    if (b < a) {
	      return a;
	    } else if (b > c) {
	      return c;
	    } else {
	      return b;
	    }
	  };

	  Math.absGt = function(a, b) {
	    return abs(a) > abs(b);
	  };

	  Math.absLt = function(a, b) {
	    return abs(a) < abs(b);
	  };

	  Math.absGte = function(a, b) {
	    return abs(a) >= abs(b);
	  };

	  Math.absLte = function(a, b) {
	    return abs(a) <= abs(b);
	  };

	  Math.abs = abs;

	  Math.min = min;

	  Math.max = max;

	  Math.round = round;

	  Math.ceil = function(v, m) {
	    if (m == null) {
	      m = 1;
	    }
	    return ceil(v / m) * m;
	  };

	  Math.floor = function(v, m) {
	    if (m == null) {
	      m = 1;
	    }
	    return floor(v / m) * m;
	  };

	  Math.round = function(v, m) {
	    if (m == null) {
	      m = 1;
	    }
	    return round(v / m) * m;
	  };

	  Math.simplifyNum = function(num) {
	    return round(num * inverseFloat64Precision) * float64Precision;
	  };

	  Math.floatEq = function(n1, n2) {
	    return n1 === n2 || float64Precision > abs(n1 - n2);
	  };

	  Math.float32Eq = function(n1, n2) {
	    return n1 === n2 || float32Precision > abs(n1 - n2);
	  };

	  Math.floatEq0 = function(n1) {
	    return n1 === 0 || float64Precision > abs(n1);
	  };

	  Math.float32Eq0 = function(n1) {
	    return n1 === 0 || float32Precision > abs(n1);
	  };

	  Math.random = random;

	  Math.intRand = function(max) {
	    return random() * max | 0;
	  };

	  Math.iPart = function(v) {
	    return v - (v % 1);
	  };

	  Math.fPart = function(v) {
	    return v % 1;
	  };

	  Math.commaize = function(x) {
	    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
	  };

	  Math.cyclingSequenceFunction = function(sequence) {
	    var sequencePos;
	    sequencePos = sequence.length;
	    return function() {
	      sequencePos++;
	      if (sequencePos >= sequence.length) {
	        sequencePos = 0;
	      }
	      return sequence[sequencePos];
	    };
	  };

	  return Math;

	})();


/***/ },
/* 25 */
/***/ function(module, exports) {

	var Regexp;

	module.exports = Regexp = (function() {
	  var urlQueryRegexp;

	  function Regexp() {}

	  Regexp.findUrlProtocolRegexp = /[\w-]+:\/\//;

	  Regexp.findDomainRegexp = /[\w]+(?:-[\w]+)*(?:\.[\w]+(?:-[\w]+)*)*(?:\.[a-z]{2,20})?/;

	  urlQueryRegexp = '(?:[-=+*._\\w]|%[a-f\\d]{2})*';

	  Regexp.findUrlPathRegexp = /(?:\/~?(?:[-+*._\w]|%[a-f\d]{2})*)*/;

	  Regexp.findUrlPortRegexp = /\:(\d+)/;

	  Regexp.emailRegexp = RegExp("^([_\\w-]+(?:\\.[_\\w]+)*)@(" + Regexp.findDomainRegexp.source + ")$", "i");

	  Regexp.numberRegexp = /([-]?\.[0-9]+)|([-]?[0-9]+(\.[0-9]+)?)/;

	  Regexp.urlProtocolRegexp = RegExp("^" + Regexp.findUrlProtocolRegexp.source + "$", "i");

	  Regexp.domainRegexp = RegExp("^" + Regexp.findDomainRegexp.source + "$", "i");

	  Regexp.urlPathRegexp = RegExp("^" + Regexp.findUrlPathRegexp.source + "$", "i");

	  Regexp.urlQueryRegexp = RegExp("^" + urlQueryRegexp + "$", "i");

	  Regexp.isoDateRegexp = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;

	  Regexp.hex16ColorRegex = /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?$/i;

	  Regexp.hex256ColorRegex = /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?$/i;

	  Regexp.rgbColorRegex = /rgb *\( *(\d+%?) *, *(\d+%?) *, *(\d+%?) *\)/;

	  Regexp.rgbaColorRegex = /rgba *\( *(\d+%?) *, *(\d+%?) *, *(\d+%?) *, *(\d*\.?\d*)\)/;

	  Regexp.colorRegex = new RegExp("(" + Regexp.hex16ColorRegex.source + ")|(" + Regexp.hex256ColorRegex.source + ")|(" + Regexp.rgbColorRegex.source + ")|(" + Regexp.rgbaColorRegex.source + ")");

	  Regexp.findUrlRegexp = RegExp("(" + Regexp.findUrlProtocolRegexp.source + ")(" + Regexp.findDomainRegexp.source + ")(?:" + Regexp.findUrlPortRegexp.source + ")?(" + Regexp.findUrlPathRegexp.source + ")?(?:\\?(" + urlQueryRegexp + "))?", "i");

	  Regexp.findSourceReferenceUrlRegexp = RegExp("(" + Regexp.findUrlProtocolRegexp.source + ")(" + Regexp.findDomainRegexp.source + ")?(?:" + Regexp.findUrlPortRegexp.source + ")?(" + Regexp.findUrlPathRegexp.source + ")?(?:\\?(" + urlQueryRegexp + "))?(?:\\:(\\d+))?(?:\\:(\\d+))?", "i");

	  Regexp.urlRegexp = RegExp("^" + Regexp.findUrlRegexp.source + "$", "i");

	  return Regexp;

	})();


/***/ },
/* 26 */
/***/ function(module, exports) {

	
	/*
	This current iteration of clone relies on some singleton variables shared across all invocations of clone.
	This is fine as long as javascript stays single-threaded.
	It also introduces a little bit of uglyness initializing clonedMap necessitating the "top" variable.

	FUTURE
	A potentially better solution would be to create a new closer each time clone is called at the top-most level,
	but when recursing, pass in a new function bound to that closure which is different from the global clone function.

	populateClone would need to take an additional argument - the clone function to use for recursive cloning.
	 */
	var ShallowClone;

	module.exports = ShallowClone = (function() {
	  function ShallowClone() {}

	  ShallowClone.extendClone = function(obj) {
	    if (obj.constructor === Array) {
	      return obj.slice();
	    } else {
	      return Object.create(obj);
	    }
	  };

	  ShallowClone.shallowClone = function(obj) {
	    var k, ret, v;
	    if (!obj) {
	      return obj;
	    }
	    if (obj.constructor === Array) {
	      return obj.slice();
	    } else {
	      ret = {};
	      for (k in obj) {
	        v = obj[k];
	        ret[k] = v;
	      }
	      return ret;
	    }
	  };

	  return ShallowClone;

	})();


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Basic, Sequence, nextTick,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(18);

	Basic = __webpack_require__(15);

	nextTick = Basic.nextTick;

	console.log("Foundation.Async.Sequence is depricated. Use Promises.");

	module.exports = Sequence = (function(superClass) {
	  extend(Sequence, superClass);

	  function Sequence() {
	    Sequence.__super__.constructor.apply(this, arguments);
	    this.toExecute = [];
	    this.resultIndex = 0;
	    this.results = [];
	    this.nextQueued = false;
	  }

	  Sequence.prototype["do"] = function() {
	    var f, j, len;
	    for (j = 0, len = arguments.length; j < len; j++) {
	      f = arguments[j];
	      if (f.length > 0) {
	        this.addAsyncFunction(f);
	      } else {
	        this.addSyncFunction(f);
	      }
	    }
	    return this.executeNext();
	  };

	  Sequence.prototype.join = function(f) {
	    var j, len;
	    for (j = 0, len = arguments.length; j < len; j++) {
	      f = arguments[j];
	      if (f.length > 0) {
	        this.addAsyncJoinFunction(f);
	      } else {
	        this.addJoinFunction(f);
	      }
	    }
	    return this.executeNext();
	  };

	  Sequence.prototype.addAsyncFunction = function(f) {
	    var i;
	    i = this.resultIndex++;
	    return this.toExecute.push((function(_this) {
	      return function() {
	        return f(function(result) {
	          _this.results[i] = result;
	          _this.executeNext();
	          return result;
	        });
	      };
	    })(this));
	  };

	  Sequence.prototype.addSyncFunction = function(f) {
	    var i;
	    i = this.resultIndex++;
	    return this.toExecute.push((function(_this) {
	      return function() {
	        _this.results[i] = f();
	        return _this.executeNext();
	      };
	    })(this));
	  };

	  Sequence.prototype.addJoinFunction = function(f) {
	    return this.toExecute.push((function(_this) {
	      return function() {
	        f(_this.results);
	        return _this.executeNext();
	      };
	    })(this));
	  };

	  Sequence.prototype.addAsyncJoinFunction = function(f) {
	    return this.toExecute.push((function(_this) {
	      return function() {
	        return f(_this.results, function() {
	          return _this.executeNext();
	        });
	      };
	    })(this));
	  };

	  Sequence.prototype.executeNext = function() {
	    if (this.nextQueued) {
	      return;
	    }
	    this.nextQueued = true;
	    return nextTick((function(_this) {
	      return function() {
	        var next;
	        _this.nextQueued = false;
	        if (_this.toExecute.length > 0) {
	          next = _this.toExecute[0];
	          _this.toExecute = _this.toExecute.slice(1);
	          return next();
	        }
	      };
	    })(this));
	  };

	  return Sequence;

	})(BaseObject);


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var Binary;

	module.exports = Binary = __webpack_require__(29);

	Binary.EncodedImage = __webpack_require__(30);

	Binary.RestClient = __webpack_require__(43);

	Binary.Stream = __webpack_require__(46);

	Binary.String = __webpack_require__(44);

	Binary.Utf8 = __webpack_require__(45);

	Binary.finishLoad(["EncodedImage", "RestClient", "Stream", "String", "Utf8"]);


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(10);

	module.exports = Foundation.Binary || (Foundation.Binary = (function(superClass) {
	  extend(Binary, superClass);

	  function Binary() {
	    return Binary.__super__.constructor.apply(this, arguments);
	  }

	  Binary.namespace = Foundation;

	  Binary.namespacePath = "Neptune.Art.Foundation.Binary";

	  return Binary;

	})(Neptune.Base));

	Foundation.addNamespace(Foundation.Binary);


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var EncodedImage, Inspect, Log, RestClient, binary, inspect, log;

	Inspect = __webpack_require__(31);

	Log = __webpack_require__(16);

	RestClient = __webpack_require__(43);

	binary = __webpack_require__(44).binary;

	inspect = Inspect.inspect;

	log = Log.log;

	module.exports = EncodedImage = (function() {
	  function EncodedImage() {}

	  EncodedImage.get = function(url, callBack, errorBack) {
	    var image;
	    if (errorBack == null) {
	      errorBack = null;
	    }
	    image = new Image;

	    /*
	    NOTE: This crossOrigin setting makes file:// urls not work with WkWebKit
	    image.crossOrigin = "Anonymous"
	    
	    Odly, everything currently seems to work without it. I thought it was required to request
	    remote images. I'm leaving it commented out here in case we have future problems. It is
	    possible we could included it only if the url is not a file:// url.
	     */
	    image.onload = function() {
	      return callBack(image);
	    };
	    image.onerror = function(e) {
	      self.encodedImageErrorEvent = e;
	      console.log("EncodedImage.get error START");
	      console.log("self.encodedImageErrorEvent = e");
	      console.log(e);
	      console.log(e.currentTarget);
	      console.log(e.target);
	      console.log(image);
	      console.log("image status");
	      console.log(image.status);
	      console.log("EncodedImage.get error END");
	      return errorBack(e);
	    };
	    return image.src = url;
	  };

	  EncodedImage.toDataURI = function(data, callBack, errorBack) {
	    var dataURI, reader;
	    if (data instanceof self.File) {
	      reader = new FileReader;
	      reader.readAsDataURL(data);
	      reader.onerror = errorBack;
	      reader.onload = (function(_this) {
	        return function(e) {
	          var dataURI;
	          dataURI = e.target.result;
	          return _this.toDataURI(dataURI, callBack, errorBack);
	        };
	      })(this);
	      return;
	    }
	    dataURI = (function() {
	      if ((typeof data) === "string" && data.slice(0, 5) === "data:") {
	        return data;
	      } else {
	        if (!data) {
	          throw new Error("data must be set");
	        }
	        return "data:image/png;base64," + binary(data).toBase64();
	      }
	    })();
	    errorBack || (errorBack = function(error) {
	      return log("WARNING - Image loading failed. Error was not handled.\nbuffer: " + (inspect(data)));
	    });
	    return callBack(dataURI);
	  };

	  EncodedImage.toImage = function(data, callBack, errorBack) {
	    return this.toDataURI(data, function(dataURI) {
	      var image;
	      image = new Image;
	      image.src = dataURI;
	      image.onload = function() {
	        return callBack(image, dataURI);
	      };
	      return image.onerror = errorBack;
	    }, errorBack);
	  };

	  return EncodedImage;

	})();


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var Inspect;

	module.exports = Inspect = __webpack_require__(32);

	Inspect.Inspected = __webpack_require__(33);

	Inspect.Inspector = __webpack_require__(39);

	Inspect.Inspector2 = __webpack_require__(41);

	Inspect.Main = __webpack_require__(42);

	Inspect.finishLoad(["Inspector", "Inspector2", "Main"]);


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(10);

	module.exports = Foundation.Inspect || (Foundation.Inspect = (function(superClass) {
	  extend(Inspect, superClass);

	  function Inspect() {
	    return Inspect.__super__.constructor.apply(this, arguments);
	  }

	  Inspect.namespace = Foundation;

	  Inspect.namespacePath = "Neptune.Art.Foundation.Inspect";

	  return Inspect;

	})(Neptune.Base));

	Foundation.addNamespace(Foundation.Inspect);


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var Inspected;

	module.exports = Inspected = __webpack_require__(34);

	Inspected.Array = __webpack_require__(35);

	Inspected.Core = __webpack_require__(36);

	Inspected.Object = __webpack_require__(37);

	Inspected.String = __webpack_require__(38);

	Inspected.finishLoad(["Array", "Core", "Object", "String"]);


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var Inspect,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Inspect = __webpack_require__(32);

	module.exports = Inspect.Inspected || (Inspect.Inspected = (function(superClass) {
	  extend(Inspected, superClass);

	  function Inspected() {
	    return Inspected.__super__.constructor.apply(this, arguments);
	  }

	  Inspected.namespace = Inspect;

	  Inspected.namespacePath = "Neptune.Art.Foundation.Inspect.Inspected";

	  return Inspected;

	})(Neptune.Base));

	Inspect.addNamespace(Inspect.Inspected);


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var Array, BaseObject,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(18);

	module.exports = Array = (function(superClass) {
	  extend(Array, superClass);

	  function Array(inspectedArray) {
	    Array.__super__.constructor.apply(this, arguments);
	    this.array = inspectedArray;
	  }

	  Array.getter({
	    arrayOfStrings: function() {
	      var i, len, ref, results, v;
	      ref = this.array;
	      results = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        v = ref[i];
	        results.push(v.toString());
	      }
	      return results;
	    },
	    children: function() {
	      return this.array.slice();
	    }
	  });

	  Array.prototype.delimitedString = function(delimiter) {
	    if (delimiter == null) {
	      delimiter = ", ";
	    }
	    return this.arrayOfStrings.join(", ");
	  };

	  Array.prototype.toString = function() {
	    return "[" + (this.delimitedString()) + "]";
	  };

	  return Array;

	})(BaseObject);


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Core,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(18);

	module.exports = Core = (function(superClass) {
	  extend(Core, superClass);

	  function Core(value) {
	    Core.__super__.constructor.apply(this, arguments);
	    this.value = value;
	    if (value && value.constructor.name === "HTMLImageElement") {
	      this.image = value;
	    }
	  }

	  Core.getter({
	    children: function() {
	      return null;
	    }
	  });

	  Core.prototype.toString = function() {
	    return "" + this.value;
	  };

	  return Core;

	})(BaseObject);


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Object,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(18);

	module.exports = Object = (function(superClass) {
	  extend(Object, superClass);

	  function Object(properties, instanceOf, originalObject) {
	    this.properties = properties;
	    this.instanceOf = instanceOf;
	    this.originalObject = originalObject;
	    Object.__super__.constructor.apply(this, arguments);
	    this.length = this.properties ? self.Object.keys(this.properties).length : 0;
	  }

	  Object.getter({
	    arrayOfStrings: function() {
	      var k, ref, results, v;
	      ref = this.properties;
	      results = [];
	      for (k in ref) {
	        v = ref[k];
	        results.push(k + ": " + v);
	      }
	      return results;
	    },
	    children: function() {
	      var k, ref, ret, v;
	      ret = {};
	      ref = this.properties;
	      for (k in ref) {
	        v = ref[k];
	        ret[k] = v;
	      }
	      return ret;
	    }
	  });

	  Object.prototype.delimitedString = function(delimiter) {
	    if (delimiter == null) {
	      delimiter = ", ";
	    }
	    return this.arrayOfStrings.join(", ");
	  };

	  Object.prototype.toString = function() {
	    if (this.inspected) {
	      return this.inspected;
	    } else if (this.instanceOf) {
	      return "{" + this.instanceOf + " " + (this.delimitedString()) + "}";
	    } else {
	      return "{" + (this.delimitedString()) + "}";
	    }
	  };

	  return Object;

	})(BaseObject);


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Foundation, String,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(18);

	Foundation = __webpack_require__(10);

	module.exports = String = (function(superClass) {
	  extend(String, superClass);

	  function String(clonedString) {
	    String.__super__.constructor.apply(this, arguments);
	    this.string = clonedString;
	  }

	  String.prototype.toString = function() {
	    return Foundation.String.escapeJavascriptString(this.string);
	  };

	  return String;

	})(BaseObject);


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Inspect, Inspector, Map, StringExtensions, Types, escapeJavascriptString, isArray, isBrowserObject, isClass, isFunction, isObject, isString, objectName,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(18);

	Types = __webpack_require__(21);

	StringExtensions = __webpack_require__(23);

	Map = __webpack_require__(40);

	Inspect = __webpack_require__(32);

	escapeJavascriptString = StringExtensions.escapeJavascriptString;

	isString = Types.isString, isArray = Types.isArray, isFunction = Types.isFunction, isObject = Types.isObject, isClass = Types.isClass, objectName = Types.objectName, isBrowserObject = Types.isBrowserObject;

	module.exports = Inspector = (function(superClass) {
	  extend(Inspector, superClass);

	  Inspector.unquotablePropertyRegex = /^([0-9]+|[_a-zA-Z][_0-9a-zA-Z]*)$/;

	  Inspector.customInspectable = function(obj) {
	    return obj.inspect && !(typeof obj === "function");
	  };

	  Inspector.parentString = function(distance) {
	    switch (distance) {
	      case 0:
	        return "parent";
	      case 1:
	        return "grandparent";
	      case 2:
	        return "great grandparent";
	      default:
	        return "great^" + (distance - 1) + " grandparent";
	    }
	  };

	  function Inspector(options) {
	    if (options == null) {
	      options = {};
	    }
	    this.inspect = bind(this.inspect, this);
	    this.inspectInternal = bind(this.inspectInternal, this);
	    this.inspectObject = bind(this.inspectObject, this);
	    this.inspectArray = bind(this.inspectArray, this);
	    this.maxLength = options.maxLength || 1000;
	    this.allowCustomInspectors = !options.noCustomInspectors;
	    this.maxDepth = options.maxDepth != null ? options.maxDepth : 10;
	    this.outArray = [];
	    this.length = 0;
	    this.depth = 0;
	    this.inspectingMap = new Map;
	    this.done = false;
	  }

	  Inspector.prototype.put = function(s) {
	    if (this.done) {
	      return;
	    }
	    this.outArray.push(this.length + s.length > this.maxLength ? (this.done = true, "...") : (this.length += s.length, s));
	    return s;
	  };

	  Inspector.getter({
	    result: function() {
	      return this.outArray.join("");
	    }
	  });

	  Inspector.prototype.maxDepthOutput = function(obj) {
	    var keys, name;
	    switch (typeof obj) {
	      case "string":
	      case "number":
	      case "boolean":
	      case "undefined":
	        return this.inspectInternal(obj);
	      case "function":
	        return this.put(objectName(obj));
	      case "object":
	        return this.put(obj === null ? "null" : isArray(obj) ? "[" + obj.length + " elements]" : (keys = Object.keys(obj), name = objectName(obj), name === "Object" ? "{" + keys.length + " keys}" : keys.length > 0 ? "{" + name + " " + keys.length + " keys}" : name));
	    }
	  };

	  Inspector.prototype.inspectArray = function(array) {
	    var first, i, len, obj;
	    this.put("[");
	    first = true;
	    for (i = 0, len = array.length; i < len; i++) {
	      obj = array[i];
	      if (!first) {
	        this.put(", ");
	      }
	      this.inspect(obj);
	      first = false;
	    }
	    return this.put("]");
	  };

	  Inspector.prototype.inspectObject = function(obj) {
	    var attributes, first, i, k, keys, len, name, v;
	    attributes = [];
	    keys = Object.keys(obj);
	    name = objectName(obj);
	    if (isFunction(obj) && keys.length === 0) {
	      return this.put(name + "()");
	    } else if (isBrowserObject(obj)) {
	      return this.put("{" + name + "}");
	    } else {
	      this.put("{");
	      if (obj.constructor !== Object) {
	        this.put(name + " ");
	      }
	      first = true;
	      for (i = 0, len = keys.length; i < len; i++) {
	        k = keys[i];
	        if (!(k !== "__uniqueId")) {
	          continue;
	        }
	        if (!first) {
	          this.put(", ");
	        }
	        v = obj[k];
	        if (Inspector.unquotablePropertyRegex.test(k)) {
	          this.put(k);
	        } else {
	          this.inspect(k);
	        }
	        this.put(": ");
	        this.inspect(v);
	        first = false;
	      }
	      return this.put("}");
	    }
	  };

	  Inspector.prototype.inspectInternal = function(obj) {
	    if (obj == null) {
	      return this.put("" + obj);
	    } else if (isString(obj)) {
	      return this.put(escapeJavascriptString(obj));
	    } else if (isArray(obj)) {
	      return this.inspectArray(obj);
	    } else if (isClass(obj)) {
	      return this.put(objectName(obj));
	    } else if (this.allowCustomInspectors && Inspector.customInspectable(obj)) {
	      return obj.inspect(this);
	    } else if (isObject(obj) || isFunction(obj)) {
	      return this.inspectObject(obj);
	    } else {
	      return this.put("" + obj);
	    }
	  };

	  Inspector.prototype.inspect = function(obj) {
	    var objDepth;
	    if (this.done) {
	      return;
	    }
	    if (objDepth = this.inspectingMap.get(obj)) {
	      this.put("<" + (Inspector.parentString(this.depth - objDepth)) + ">");
	      return null;
	    }
	    if (this.depth >= this.maxDepth) {
	      this.maxDepthOutput(obj);
	    } else {
	      this.depth++;
	      this.inspectingMap.set(obj, this.depth);
	      this.inspectInternal(obj);
	      this.inspectingMap["delete"](obj);
	      this.depth--;
	    }
	    return null;
	  };

	  return Inspector;

	})(BaseObject);


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	
	/*
	Map is a Key-Value map which preserves order.

	Unlike Javascript objects, you can use any object or value as keys. This includes:

	  Strings
	  Numbers
	  null
	  undefined
	  Arrays
	  Objects

	Arrays and Objects are assigned a unique id using the Foundation.Unique library.
	"0", "", null, undefined and 0 are all different unique keys and can each have unique values.
	 */
	var BaseObject, Foundation, Map, Node, Unique,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(10);

	Unique = __webpack_require__(22);

	BaseObject = __webpack_require__(18);

	Node = (function() {
	  function Node(key, value, prev, next) {
	    this.key = key;
	    this.value = value;
	    this.prev = prev || null;
	    this.next = next || null;
	    if (prev) {
	      prev.next = this;
	    }
	    if (next) {
	      next.prev = this;
	    }
	  }

	  Node.prototype.remove = function() {
	    var n, p;
	    n = this.next;
	    p = this.prev;
	    if (p) {
	      p.next = n;
	      this.prev = null;
	    }
	    if (n) {
	      n.prev = p;
	      return this.next = null;
	    }
	  };

	  return Node;

	})();

	module.exports = Map = (function(superClass) {
	  extend(Map, superClass);

	  Map.inverseMap = function(array) {
	    var i, k, len, result, v;
	    result = new Map;
	    for (k = i = 0, len = array.length; i < len; k = ++i) {
	      v = array[k];
	      result.set(v, k);
	    }
	    return result;
	  };

	  function Map() {
	    this._length = 0;
	    this._map = {};
	    this._first = this._last = null;
	  }

	  Map.getter({
	    length: function() {
	      return this._length;
	    },
	    nodes: function() {
	      var n, result;
	      result = [];
	      n = this._first;
	      while (n) {
	        result.push(n);
	        n = n.next;
	      }
	      return result;
	    },
	    keys: function() {
	      var i, len, node, ref, results;
	      ref = this.nodes;
	      results = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        node = ref[i];
	        results.push(node.key);
	      }
	      return results;
	    },
	    values: function() {
	      var i, len, node, ref, results;
	      ref = this.nodes;
	      results = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        node = ref[i];
	        results.push(node.value);
	      }
	      return results;
	    }
	  });

	  Map.prototype.get = function(key) {
	    var node;
	    node = this._map[Unique.id(key)];
	    return node && node.value;
	  };

	  Map.prototype.set = function(key, value) {
	    var id;
	    id = Unique.id(key);
	    if (this._map[id]) {
	      this._map[id].value = value;
	    } else {
	      this._length++;
	      this._last = this._map[id] = new Node(key, value, this._last);
	      if (!this._first) {
	        this._first = this._last;
	      }
	    }
	    return value;
	  };

	  Map.prototype._remove = function(key) {
	    var id, n;
	    id = Unique.id(key);
	    if (n = this._map[id]) {
	      this._length--;
	      delete this._map[id];
	      if (this._first === n) {
	        this._first = n.next;
	      }
	      if (this._last === n) {
	        this._last = n.prev;
	      }
	      n.remove();
	      return n;
	    } else {
	      return void 0;
	    }
	  };

	  Map.prototype.remove = function(key) {
	    var n;
	    if (n = this._remove(key)) {
	      return n.value;
	    } else {
	      return void 0;
	    }
	  };

	  Map.prototype["delete"] = function(key) {
	    return !!this._remove(key);
	  };

	  Map.prototype.exists = function(key) {
	    return this._map[Unique.id(key)];
	  };

	  Map.prototype.forEach = function(f) {
	    var i, len, node, ref;
	    ref = this.nodes;
	    for (i = 0, len = ref.length; i < len; i++) {
	      node = ref[i];
	      f(node.value);
	    }
	    return this;
	  };

	  Map.prototype.findFirst = function(testF) {
	    var i, len, node, ref;
	    ref = this.nodes;
	    for (i = 0, len = ref.length; i < len; i++) {
	      node = ref[i];
	      if (testF(node.value)) {
	        return node.value;
	      }
	    }
	    return void 0;
	  };

	  Map.prototype.each = function(f) {
	    var i, len, node, ref;
	    ref = this.nodes;
	    for (i = 0, len = ref.length; i < len; i++) {
	      node = ref[i];
	      f(node.key, node.value);
	    }
	    return this;
	  };

	  Map.prototype.map = function(f) {
	    var i, len, node, ref, results;
	    ref = this.nodes;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      node = ref[i];
	      results.push(f(node.key, node.value));
	    }
	    return results;
	  };

	  Map.prototype.inspect = function(inspector) {
	    var _inspect, first;
	    _inspect = function(o) {
	      if (typeof o === "string" && o.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {
	        return inspector.put(o);
	      } else {
	        return inspector.inspect(o);
	      }
	    };
	    inspector.put("{Map ");
	    first = true;
	    this.map(function(k, v) {
	      if (!first) {
	        inspector.put(", ");
	      }
	      _inspect(k);
	      inspector.put(": ");
	      inspector.inspect(v);
	      return first = false;
	    });
	    return inspector.put("}");
	  };

	  Map.prototype.verifyNodes = function() {
	    var inspect, length, node, prev;
	    inspect = Foundation.Inspect.inspect;
	    if ((this._first == null) && (this._last == null) && this._length === 0) {
	      return;
	    }
	    if (this._length === 0 && this._first) {
	      throw new Error("length == " + this.length + " but @_first is not null");
	    }
	    if (this._length === 0 && this._last) {
	      throw new Error("length == " + this.length + " but @_last is not null");
	    }
	    if (!this._first) {
	      throw new Error("length == " + this.length + " and @_first is null");
	    }
	    if (!this._last) {
	      throw new Error("length == " + this.length + " and @_last is null");
	    }
	    if (this._first.prev) {
	      throw new Error("@_first has prev");
	    }
	    if (this._last.next) {
	      throw new Error("@_last has next");
	    }
	    length = 0;
	    prev = null;
	    node = this._first;
	    while (node) {
	      length++;
	      if (node.prev !== prev) {
	        throw new Error("node.prev != prev. " + (inspect({
	          lenght: length,
	          nodePrev: node.prev,
	          prev: prev
	        }, 1)));
	      }
	      prev = node;
	      node = node.next;
	    }
	    if (this.length !== length) {
	      throw new Error("@length is " + this.length + ", but it should be " + length);
	    }
	  };

	  return Map;

	})(BaseObject);


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Inspected, Inspector2, Map, StringExtensions, Types, escapeJavascriptString, isArray, isBrowserObject, isClass, isDate, isFunction, isHTMLImageElement, isObject, isPlainObject, isRegExp, isString, objectName, parentString,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(18);

	Types = __webpack_require__(21);

	StringExtensions = __webpack_require__(23);

	Map = __webpack_require__(40);

	Inspected = __webpack_require__(33);

	escapeJavascriptString = StringExtensions.escapeJavascriptString;

	isString = Types.isString, isArray = Types.isArray, isFunction = Types.isFunction, isObject = Types.isObject, isPlainObject = Types.isPlainObject, isClass = Types.isClass, isDate = Types.isDate, isRegExp = Types.isRegExp, objectName = Types.objectName, isBrowserObject = Types.isBrowserObject;

	isHTMLImageElement = self.HTMLImageElement ? function(obj) {
	  return obj instanceof HTMLImageElement;
	} : function() {
	  return false;
	};

	parentString = (function(_this) {
	  return function(distance) {
	    switch (distance) {
	      case 0:
	        return "parent";
	      case 1:
	        return "grandparent";
	      case 2:
	        return "great grandparent";
	      default:
	        return "great^" + (distance - 1) + " grandparent";
	    }
	  };
	})(this);

	module.exports = Inspector2 = (function(superClass) {
	  extend(Inspector2, superClass);

	  function Inspector2(options) {
	    if (options == null) {
	      options = {};
	    }
	    this.inspectObject = bind(this.inspectObject, this);
	    this.inspectWithToImage = bind(this.inspectWithToImage, this);
	    this.inspectHTMLImageElement = bind(this.inspectHTMLImageElement, this);
	    this.inspectArray = bind(this.inspectArray, this);
	    this.withImages = options.withImages;
	    this.maxLength = options.maxLength || 1000;
	    this.allowCustomInspectors = !options.noCustomInspectors;
	    this.maxDepth = options.maxDepth != null ? options.maxDepth : 10;
	    this.outArray = [];
	    this.length = 0;
	    this.depth = 0;
	    this.inspectingMap = new Map;
	  }

	  Inspector2.prototype.inspectArray = function(array) {
	    var a;
	    return new Inspected.Array((function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = array.length; i < len; i++) {
	        a = array[i];
	        results.push(this.inspectInternal(a));
	      }
	      return results;
	    }).call(this));
	  };

	  Inspector2.prototype.inspectHTMLImageElement = function(obj) {
	    var res;
	    res = new Inspected.Object({}, "HTMLImageElement", obj);
	    if (!(res.image = obj).complete) {
	      this.addPendingTask();
	      obj.onload = (function(_this) {
	        return function() {
	          return _this.completePendingTask();
	        };
	      })(this);
	    }
	    return res;
	  };

	  Inspector2.prototype.inspectWithToImage = function(obj) {
	    var name, res;
	    name = objectName(obj);
	    if (typeof obj.classPathName === "string") {
	      name = obj.classPathName;
	    }
	    if (name === "Object") {
	      name = null;
	    }
	    res = new Inspected.Object({}, name, obj);
	    this.addPendingTask();
	    obj.toImage((function(_this) {
	      return function(image) {
	        res.image = image;
	        return _this.completePendingTask();
	      };
	    })(this));
	    return res;
	  };

	  Inspector2.prototype.inspectObject = function(obj, recurse) {
	    var attributes, i, k, keys, len, name, res, result;
	    if (recurse == null) {
	      recurse = true;
	    }
	    attributes = [];
	    keys = Object.keys(obj);
	    name = objectName(obj);
	    if (isFunction(obj) && keys.length === 0) {
	      return new Inspected.Core(name + "()");
	    } else {
	      if (typeof obj.classPathName === "string") {
	        name = obj.classPathName;
	      }
	      if (name === "Object") {
	        name = null;
	      }
	      result = {};
	      if (recurse) {
	        for (i = 0, len = keys.length; i < len; i++) {
	          k = keys[i];
	          result[k] = this.inspectInternal(obj[k]);
	        }
	      }
	      res = new Inspected.Object(result, name, obj);
	      if (typeof obj.getInspectedString === "function") {
	        res.inspected = obj.getInspectedString();
	      }
	      return res;
	    }
	  };

	  Inspector2.prototype.addPendingTask = function() {
	    return this.pendingTasks++;
	  };

	  Inspector2.prototype.completePendingTask = function() {
	    this.pendingTasks--;
	    if (this.pendingTasks === 0) {
	      return this.completionCallBack();
	    }
	  };

	  Inspector2.prototype.inspectByType = function(obj) {
	    if (isFunction(obj != null ? obj.inspectStructure : void 0)) {
	      obj = obj.inspectStructure();
	    }
	    if (obj === null || obj === void 0 || obj === true || obj === false || typeof obj === "number") {
	      return new Inspected.Core(obj);
	    } else if (obj === self) {
	      return new Inspected.Core("self");
	    } else if (isRegExp(obj)) {
	      return new Inspected.Core(obj.toString());
	    } else if (isString(obj)) {
	      return new Inspected.String(obj);
	    } else if (isArray(obj)) {
	      return this.inspectArray(obj);
	    } else if (isClass(obj)) {
	      return new Inspected.Core(objectName(obj));
	    } else if (isHTMLImageElement(obj)) {
	      return this.inspectHTMLImageElement(obj);
	    } else if (isDate(obj)) {
	      return new Inspected.Core(obj.toString());
	    } else if (isBrowserObject(obj)) {
	      return new Inspected.Core(objectName(obj));
	    } else if (this.withImages && typeof obj.toImage === "function" && !isFunction(obj)) {
	      return this.inspectWithToImage(obj);
	    } else if (isPlainObject(obj) || isFunction(obj)) {
	      return this.inspectObject(obj);
	    } else if (isObject(obj)) {
	      return this.inspectObject(obj, false);
	    } else {
	      return new Inspected.Core(objectName(obj));
	    }
	  };

	  Inspector2.prototype.inspectInternal = function(obj) {
	    var objDepth, res;
	    if (objDepth = this.inspectingMap.get(obj)) {
	      return new Inspected.Core("<" + (parentString(this.depth - objDepth)) + ">");
	    } else if (this.depth >= this.maxDepth) {
	      return new Inspected.Core("<maxDepth reached: " + this.maxDepth + ">");
	    } else {
	      this.depth++;
	      this.inspectingMap.set(obj, this.depth);
	      res = this.inspectByType(obj);
	      this.inspectingMap["delete"](obj);
	      this.depth--;
	      return res;
	    }
	  };

	  Inspector2.prototype.inspect = function(obj, callBack) {
	    var res;
	    this.pendingTasks = 0;
	    if (this.withImages && typeof callBack !== "function") {
	      throw new Error("callBack required if withImages requested");
	    }
	    this.completionCallBack = (function(_this) {
	      return function() {
	        return callBack && callBack(res);
	      };
	    })(this);
	    res = this.inspectInternal(obj);
	    if (this.pendingTasks === 0) {
	      this.completionCallBack();
	    }
	    return res;
	  };

	  return Inspector2;

	})(BaseObject);


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation, Inspect, Inspector, Types, customInspectable, inspect, inspectLean, isArray, isFunction, isObject, isString;

	Foundation = __webpack_require__(10);

	Inspect = __webpack_require__(32);

	Types = __webpack_require__(21);

	Inspector = __webpack_require__(39);

	isString = Types.isString, isArray = Types.isArray, isFunction = Types.isFunction, isObject = Types.isObject;

	customInspectable = (function(_this) {
	  return function(obj) {
	    return obj && obj.getInspectedString && !(typeof obj === "function");
	  };
	})(this);

	Inspect.miniInspect = (function(_this) {
	  return function(obj) {
	    if (obj == null) {
	      return "" + obj;
	    } else if (customInspectable(obj)) {
	      return inspect(obj);
	    } else if (isString(obj)) {
	      return Foundation.String.escapeJavascriptString(obj);
	    } else if (isArray(obj)) {
	      return "<<Array length: " + obj.length + ">>";
	    } else if (isFunction(obj) && obj.name === "") {
	      return "<<function args: " + obj.length + ">>";
	    } else {
	      return ("<<" + (typeof obj) + ": ") + (obj.name ? obj.name : obj) + ">>";
	    }
	  };
	})(this);

	Inspect.inspectLean = inspectLean = (function(_this) {
	  return function(obj, options) {
	    var i, inspected, k, keys, last, v;
	    if (customInspectable(obj)) {
	      return obj.getInspectedString();
	    } else if (isObject(obj)) {
	      keys = Object.keys(obj);
	      last = keys.length - 1;
	      inspected = (function() {
	        var j, len, results;
	        results = [];
	        for (i = j = 0, len = keys.length; j < len; i = ++j) {
	          k = keys[i];
	          v = obj[k];
	          v = i === last ? inspectLean(v, options) : inspect(v, options);
	          if (!Inspector.unquotablePropertyRegex.test(k)) {
	            k = inspect(k);
	          }
	          results.push(k + ": " + v);
	        }
	        return results;
	      })();
	      return inspected.join(', ');
	    } else {
	      return inspect(obj, options);
	    }
	  };
	})(this);

	Inspect.inspect = inspect = (function(_this) {
	  return function(obj, options) {
	    var inspector;
	    if (options == null) {
	      options = {};
	    }
	    inspector = new Inspector(options);
	    inspector.inspect(obj);
	    return inspector.result;
	  };
	})(this);


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, RestClient, binary,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	binary = __webpack_require__(44).binary;

	BaseObject = __webpack_require__(18);

	module.exports = RestClient = (function(superClass) {
	  extend(RestClient, superClass);

	  function RestClient() {
	    return RestClient.__super__.constructor.apply(this, arguments);
	  }

	  RestClient.get = function(url, onSuccess, onError, onProgress) {
	    var request;
	    request = new XMLHttpRequest;
	    request.open("GET", url, true);
	    request.responseType = "arraybuffer";
	    request.onload = function(rawEvent) {
	      var arrayBuffer;
	      arrayBuffer = request.response;
	      if (arrayBuffer && arrayBuffer.byteLength > 0 && (request.status === 200 || request.status === 0)) {
	        return onSuccess(binary(arrayBuffer), url, request);
	      } else {
	        if (onError) {
	          return onError(rawEvent, url, request);
	        }
	      }
	    };
	    if (onProgress) {
	      request.onprogress = function(rawEvent) {
	        return onProgress(rawEvent, url, request);
	      };
	    }
	    if (onError) {
	      request.onerror = function(rawEvent) {
	        return onError(rawEvent, url, request);
	      };
	    }
	    return request.send(null);
	  };

	  RestClient.multipartPost = function(url, parts, onSuccess, onError, onProgress) {
	    var formData, k, request, v;
	    formData = new FormData;
	    for (k in parts) {
	      v = parts[k];
	      this.log({
	        k: k,
	        v: v
	      });
	      formData.append(k, v);
	    }
	    request = new XMLHttpRequest;
	    request.open("POST", url, true);
	    request.onload = function(rawEvent) {
	      if (request.status === 200) {
	        return onSuccess(request.response, url, request);
	      } else if (onError) {
	        return onError(rawEvent, url, parts, request);
	      }
	    };
	    if (onProgress) {
	      request.upload.onprogress = function(rawEvent) {
	        return onProgress(rawEvent, url, parts, request);
	      };
	    }
	    if (onError) {
	      request.onerror = (function(_this) {
	        return function(rawEvent) {
	          return onError(rawEvent, url, parts, request);
	        };
	      })(this);
	    }
	    return request.send(formData);
	  };

	  return RestClient;

	})(BaseObject);


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var Binary, BinaryString, Types, Utf8, encodings, isFunction, isString;

	Binary = __webpack_require__(29);

	Utf8 = __webpack_require__(45);

	Types = __webpack_require__(21);

	isString = Types.isString, isFunction = Types.isFunction;

	encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	Binary.binary = function(arg) {
	  if (arg instanceof BinaryString) {
	    return arg;
	  } else {
	    return new BinaryString(arg);
	  }
	};

	module.exports = BinaryString = (function() {
	  BinaryString.binary = Binary.binary;

	  BinaryString.cloneUint8Array = function(srcU8A) {
	    var dstU8A;
	    dstU8A = new Uint8Array(new ArrayBuffer(src.length));
	    dstU8A.set(srcU8A);
	    return dstU8A;
	  };

	  function BinaryString(arg) {
	    this.bytes = (function() {
	      if (arg instanceof BinaryString) {
	        return BinaryString.cloneUint8Array(arg.bytes);
	      } else if (isFunction(arg.uint8Array)) {
	        return arg.uint8Array();
	      } else if (arg instanceof ArrayBuffer) {
	        return new Uint8Array(arg);
	      } else if (arg instanceof Uint8Array) {
	        return arg;
	      } else if (isString(arg)) {
	        return Utf8.toBuffer(arg);
	      } else {
	        throw new Error("invalid argument: " + arg);
	      }
	    })();
	    this.length = this.bytes.length;
	  }

	  BinaryString.fromBase64 = function(base64encoding) {
	    var byteString, i, j, len, ref, uInt8Array;
	    byteString = atob(base64encoding);
	    len = byteString.length;
	    uInt8Array = new Uint8Array(new ArrayBuffer(len));
	    for (i = j = 0, ref = len; j < ref; i = j += 1) {
	      uInt8Array[i] = byteString.charCodeAt(i);
	    }
	    return new BinaryString(uInt8Array);
	  };

	  BinaryString.prototype.toDataURI = function(callback) {
	    var blob, reader;
	    blob = new Blob([this.bytes]);
	    reader = new FileReader;
	    reader.readAsDataURL(blob);
	    return reader.onloadend = function() {
	      return callback(reader.result);
	    };
	  };

	  BinaryString.prototype.toBase64Callback = function(callback) {
	    return this.toDataURI(function(r) {
	      return callback(r.split(',')[1]);
	    });
	  };

	  BinaryString.fromDataURI = function(dataURI) {
	    var base64encoding, splitDataURI;
	    splitDataURI = dataURI.split(',');
	    base64encoding = splitDataURI[1];
	    return this.fromBase64(base64encoding);
	  };

	  BinaryString.prototype.toString = function() {
	    return Utf8.toString(this.bytes);
	  };

	  BinaryString.prototype.toBlob = function() {
	    return new Blob([this.bytes]);
	  };

	  BinaryString.prototype.toBase64 = function() {
	    return btoa(String.fromCharCode.apply(null, Array.prototype.slice.call(this.bytes)));
	  };

	  return BinaryString;

	})();


/***/ },
/* 45 */
/***/ function(module, exports) {

	var Utf8;

	module.exports = Utf8 = (function() {
	  function Utf8() {}

	  Utf8.toBuffer = function(string) {
	    return new Uint8Array(this.toArray(string));
	  };

	  Utf8.toArray = function(string) {
	    var char, i, results, uriEncoded;
	    uriEncoded = encodeURIComponent(string);
	    i = 0;
	    results = [];
	    while (i < uriEncoded.length) {
	      char = uriEncoded.charCodeAt(i++);
	      if (char === 0x25) {
	        i += 2;
	        results.push(parseInt(uriEncoded.substr(i - 2, 2), 16));
	      } else {
	        results.push(char);
	      }
	    }
	    return results;
	  };

	  Utf8.toString = function(a) {
	    var error, error1, x, y;
	    if (a === void 0) {
	      return "<undefined>";
	    }
	    if (a === null) {
	      return "<null>";
	    }
	    try {
	      if (a instanceof ArrayBuffer) {
	        a = new Uint8Array(a);
	      }
	      return decodeURIComponent(((function() {
	        var j, len, results;
	        results = [];
	        for (j = 0, len = a.length; j < len; j++) {
	          x = a[j];
	          y = x.toString(16);
	          if (y.length < 2) {
	            y = "0" + y;
	          }
	          results.push("%" + y);
	        }
	        return results;
	      })()).join(''));
	    } catch (error1) {
	      error = error1;
	      return "<" + a.length + " binary bytes>";
	    }
	  };

	  return Utf8;

	})();


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var Binary, Stream, binary;

	Binary = __webpack_require__(29);

	binary = __webpack_require__(44).binary;

	Binary.stream = function(arg) {
	  if (arg instanceof Binary.Stream) {
	    return arg;
	  } else if (arg instanceof ArrayBuffer) {
	    return Binary.Stream.from_array_buffer(arg);
	  } else if (arg instanceof Uint8Array) {
	    return new Binary.Stream(arg);
	  } else {
	    return new Binary.Stream(binary(arg).bytes);
	  }
	};

	module.exports = Stream = (function() {
	  Stream.from_array_buffer = function(array_buffer) {
	    return new Binary.Stream(new Uint8Array(array_buffer, 0, array_buffer.byteLength));
	  };

	  function Stream(byte_view) {
	    this.byte_view = byte_view;
	    this.pos = 0;
	  }

	  Stream.prototype.read_byte = function() {
	    return this.byte_view[this.pos++];
	  };

	  Stream.prototype.read_asi = function() {
	    var debug, ret, shift, val;
	    debug = this.inspect();
	    ret = 0;
	    shift = 0;
	    val = 128;
	    while (val >= 128) {
	      val = this.read_byte();
	      ret += (val % 128) << shift;
	      shift += 7;
	    }
	    return ret;
	  };

	  Stream.prototype.uint8Array = function() {
	    return this.byte_view;
	  };

	  Stream.prototype.read = function(length) {
	    var begin, end;
	    begin = this.pos;
	    this.pos += length;
	    end = this.pos;
	    return new Binary.Stream(this.byte_view.subarray(begin, end));
	  };

	  Stream.prototype.inspect = function() {
	    return "{Binary.Stream pos=" + this.pos + " byteOffset=" + this.byte_view.byteOffset + " length=" + this.byte_view.length + "}";
	  };

	  Stream.prototype.read_asi_string = function() {
	    return this.read(this.read_asi());
	  };

	  Stream.prototype.done = function() {
	    return this.pos >= this.byte_view.length;
	  };

	  Stream.prototype.toString = function() {
	    return binary(this.byte_view).toString();
	  };

	  return Stream;

	})();


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var Browser;

	module.exports = Browser = __webpack_require__(48);

	Browser.Cookie = __webpack_require__(49);

	Browser.Dom = __webpack_require__(52);

	Browser.File = __webpack_require__(53);

	Browser.Parse = __webpack_require__(20);

	Browser.finishLoad(["Cookie", "Dom", "File", "Parse"]);


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(10);

	module.exports = Foundation.Browser || (Foundation.Browser = (function(superClass) {
	  extend(Browser, superClass);

	  function Browser() {
	    return Browser.__super__.constructor.apply(this, arguments);
	  }

	  Browser.namespace = Foundation;

	  Browser.namespacePath = "Neptune.Art.Foundation.Browser";

	  return Browser;

	})(Neptune.Base));

	Foundation.addNamespace(Foundation.Browser);


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var $, BaseObject, Browser, log,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Browser = __webpack_require__(48);

	log = __webpack_require__(16).log;

	BaseObject = __webpack_require__(18);

	$ = __webpack_require__(50);

	__webpack_require__(51);

	$.cookie.json = true;

	Browser.Cookie = (function(superClass) {
	  extend(Cookie, superClass);

	  function Cookie() {
	    return Cookie.__super__.constructor.apply(this, arguments);
	  }

	  Cookie.set = function(name, value, options) {
	    return $.cookie(name, value, options);
	  };

	  Cookie.get = function(name) {
	    return $.cookie(name);
	  };

	  Cookie.remove = function(name, options) {
	    return $.removeCookie(name, options);
	  };

	  Cookie.classGetter({
	    all: function() {
	      return $.cookie();
	    },
	    json: function() {
	      return $.cookie.json;
	    },
	    raw: function() {
	      return $.cookie.raw;
	    }
	  });

	  Cookie.classSetter({
	    json: function(v) {
	      return $.cookie.json = v;
	    },
	    raw: function(v) {
	      return $.cookie.raw = v;
	    }
	  });

	  return Cookie;

	})(BaseObject);


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.0
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-01-08T20:02Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "2.2.0",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isPlainObject: function( obj ) {

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			if ( obj.constructor &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}

			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function( owner, initial ) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;

			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key === undefined ) {
				this.register( owner );

			} else {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );

					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;

				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

					if ( data !== undefined ) {
						return data;
					}

					camelKey = jQuery.camelCase( key );

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );
		}

		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

				documentElement.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;

				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace( rreturn, "" ) :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					// Support: IE<11
					// option.value not trimmed (#14858)
					return jQuery.trim( elem.value );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
								jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the compat branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);

			jQuery.event.trigger( e, null, elem );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8+
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		context = context || ( support.createHTMLDocument ?
			document.implementation.createHTMLDocument( "" ) :
			document );

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				// Subtract offsetParent scroll positions
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ) -
					offsetParent.scrollTop();
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true ) -
					offsetParent.scrollLeft();
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery Cookie Plugin v1.4.1
	 * https://github.com/carhartl/jquery-cookie
	 *
	 * Copyright 2013 Klaus Hartl
	 * Released under the MIT license
	 */
	(function (factory) {
		if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(50)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof exports === 'object') {
			// CommonJS
			factory(require('jquery'));
		} else {
			// Browser globals
			factory(jQuery);
		}
	}(function ($) {

		var pluses = /\+/g;

		function encode(s) {
			return config.raw ? s : encodeURIComponent(s);
		}

		function decode(s) {
			return config.raw ? s : decodeURIComponent(s);
		}

		function stringifyCookieValue(value) {
			return encode(config.json ? JSON.stringify(value) : String(value));
		}

		function parseCookieValue(s) {
			if (s.indexOf('"') === 0) {
				// This is a quoted cookie as according to RFC2068, unescape...
				s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
			}

			try {
				// Replace server-side written pluses with spaces.
				// If we can't decode the cookie, ignore it, it's unusable.
				// If we can't parse the cookie, ignore it, it's unusable.
				s = decodeURIComponent(s.replace(pluses, ' '));
				return config.json ? JSON.parse(s) : s;
			} catch(e) {}
		}

		function read(s, converter) {
			var value = config.raw ? s : parseCookieValue(s);
			return $.isFunction(converter) ? converter(value) : value;
		}

		var config = $.cookie = function (key, value, options) {

			// Write

			if (value !== undefined && !$.isFunction(value)) {
				options = $.extend({}, config.defaults, options);

				if (typeof options.expires === 'number') {
					var days = options.expires, t = options.expires = new Date();
					t.setTime(+t + days * 864e+5);
				}

				return (document.cookie = [
					encode(key), '=', stringifyCookieValue(value),
					options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
					options.path    ? '; path=' + options.path : '',
					options.domain  ? '; domain=' + options.domain : '',
					options.secure  ? '; secure' : ''
				].join(''));
			}

			// Read

			var result = key ? undefined : {};

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling $.cookie().
			var cookies = document.cookie ? document.cookie.split('; ') : [];

			for (var i = 0, l = cookies.length; i < l; i++) {
				var parts = cookies[i].split('=');
				var name = decode(parts.shift());
				var cookie = parts.join('=');

				if (key && key === name) {
					// If second argument (value) is a function it's a converter...
					result = read(cookie, value);
					break;
				}

				// Prevent storing a cookie that we couldn't decode.
				if (!key && (cookie = read(cookie)) !== undefined) {
					result[name] = cookie;
				}
			}

			return result;
		};

		config.defaults = {};

		$.removeCookie = function (key, options) {
			if ($.cookie(key) === undefined) {
				return false;
			}

			// Must not alter options, thus extending a fresh object...
			$.cookie(key, '', $.extend({}, options, { expires: -1 }));
			return !$.cookie(key);
		};

	}));


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var $, Dom;

	$ = __webpack_require__(50);

	module.exports = Dom = (function() {
	  function Dom() {}

	  Dom.getDevicePixelRatio = function() {
	    return ((self.devicePixelRatio != null) && self.devicePixelRatio) || 1;
	  };

	  Dom.zIndex = function(target, setZIndex) {
	    var elem, value;
	    target = $(target);
	    if (setZIndex !== void 0) {
	      return target.css("zIndex", setZIndex);
	    }
	    elem = $(target[0]);
	    while (elem.length && elem[0] !== document) {
	      switch (elem.css("position")) {
	        case "absolute":
	        case "relative":
	        case "fixed":
	          value = parseInt(elem.css("zIndex"));
	          if (!isNaN(value) && value !== 0) {
	            return value;
	          }
	      }
	      elem = elem.parent();
	    }
	    return 0;
	  };

	  Dom.domElementOffset = function(elem) {
	    var body, box, clientLeft, clientTop, docEl, left, scrollLeft, scrollTop, top;
	    box = elem.getBoundingClientRect();
	    body = document.body;
	    docEl = document.documentElement;
	    scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
	    scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
	    clientTop = docEl.clientTop || body.clientTop || 0;
	    clientLeft = docEl.clientLeft || body.clientLeft || 0;
	    top = box.top + scrollTop - clientTop;
	    left = box.left + scrollLeft - clientLeft;
	    return {
	      top: Math.round(top),
	      left: Math.round(left)
	    };
	  };

	  return Dom;

	})();


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var $, File;

	$ = __webpack_require__(50);

	module.exports = File = (function() {
	  function File() {}

	  File.request = function(options) {
	    var body, fileInput;
	    if (options == null) {
	      options = {};
	    }
	    if (this.hiddenDivForFileInput) {
	      this.hiddenDivForFileInput.detach();
	    }
	    this.hiddenDivForFileInput = $("<div style='height: 0px;width: 0px; overflow:hidden; position:absolute;'/>");
	    body = $("body");
	    fileInput = $("<input type='file' " + (options.accept ? 'accept=' + options.accept : void 0) + " " + (options.multiple ? 'multiple=true' : void 0) + "/>");
	    fileInput.appendTo(this.hiddenDivForFileInput);
	    this.hiddenDivForFileInput.appendTo(body);
	    fileInput.change(function(e) {
	      var file, fileList, fileSizes, fileTypes;
	      fileList = (function() {
	        var i, len, ref, results;
	        ref = fileInput[0].files;
	        results = [];
	        for (i = 0, len = ref.length; i < len; i++) {
	          file = ref[i];
	          results.push(file);
	        }
	        return results;
	      })();
	      fileTypes = (function() {
	        var i, len, results;
	        results = [];
	        for (i = 0, len = fileList.length; i < len; i++) {
	          file = fileList[i];
	          results.push(file.type);
	        }
	        return results;
	      })();
	      fileSizes = (function() {
	        var i, len, results;
	        results = [];
	        for (i = 0, len = fileList.length; i < len; i++) {
	          file = fileList[i];
	          results.push(file.size);
	        }
	        return results;
	      })();
	      return options.onChange && options.onChange(fileList);
	    });
	    return fileInput.click();
	  };

	  return File;

	})();


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var Array, Async, BaseObject, CallStack, Clone, Eq, Foundation, Function, GlobalCounts, Hash, Inspect, Log, Map, Math, Promise, Regexp, Ruby, ShallowClone, String, Time, Types, WebWorker, createAllClass, select;

	Array = __webpack_require__(55);

	Async = __webpack_require__(12);

	BaseObject = __webpack_require__(18);

	CallStack = __webpack_require__(19);

	Clone = __webpack_require__(56);

	Eq = __webpack_require__(57);

	Foundation = __webpack_require__(10);

	Function = __webpack_require__(59);

	Hash = __webpack_require__(58);

	Inspect = __webpack_require__(31);

	Log = __webpack_require__(16);

	Map = __webpack_require__(40);

	Math = __webpack_require__(24);

	Promise = __webpack_require__(60);

	Regexp = __webpack_require__(25);

	Ruby = __webpack_require__(66);

	ShallowClone = __webpack_require__(26);

	String = __webpack_require__(23);

	Time = __webpack_require__(67);

	Types = __webpack_require__(21);

	WebWorker = __webpack_require__(68);

	createAllClass = BaseObject.createAllClass;

	select = Hash.select;

	GlobalCounts = (function() {
	  var currentSecond, globalCounts, globalTime, isPlainObject;

	  function GlobalCounts() {}

	  isPlainObject = Types.isPlainObject;

	  currentSecond = Time.currentSecond;

	  Foundation.globalCounts = globalCounts = {};

	  globalTime = null;

	  GlobalCounts.resetGlobalCounts = function() {
	    globalTime = currentSecond();
	    return Foundation.globalCounts = globalCounts = {};
	  };

	  GlobalCounts.globalCount = function(name, amount) {
	    var k, last, results, v;
	    if (amount == null) {
	      amount = 1;
	    }
	    if (isPlainObject(amount)) {
	      if (last = globalCounts[name]) {
	        results = [];
	        for (k in amount) {
	          v = amount[k];
	          results.push(last[k] += v);
	        }
	        return results;
	      } else {
	        return globalCounts[name] = amount;
	      }
	    } else {
	      return globalCounts[name] = (globalCounts[name] || 0) + amount;
	    }
	  };

	  GlobalCounts.countStep = function() {
	    var globalCount, nextTime;
	    nextTime = currentSecond();
	    if (nextTime - globalCount > .002) {
	      console.error("gap");
	    }
	    globalCount = nextTime;
	    return Foundation.globalCount("step");
	  };

	  return GlobalCounts;

	})();

	createAllClass(Foundation, select(BaseObject, "createWithPostCreate", "mixInto", "createAllClass"), select(Inspect, "inspect", "inspectLean", "miniInspect"), GlobalCounts, Array, Ruby, CallStack, Clone, ShallowClone, Eq, Hash, Log, Math, Regexp, String, Time, Types, Function, Async, WebWorker);


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var ArrayExtensions, arraySlice, bound, doFlattenInternal, flattenIfNeeded, intRand, isArguments, isArray, isArrayOrArguments, keepAll, log, max, moveArrayElement1, moveArrayElement2, needsFlatteningOrCompacting, ref,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	ref = __webpack_require__(24), bound = ref.bound, max = ref.max, intRand = ref.intRand;

	log = __webpack_require__(16).log;

	arraySlice = Array.prototype.slice;

	isArguments = function(o) {
	  return o.constructor === Object && (typeof o.callee === "function") && (typeof o.length === "number");
	};

	isArrayOrArguments = function(o) {
	  return o && (o.constructor === Array || isArguments(o));
	};

	isArray = function(o) {
	  return o && o.constructor === Array;
	};

	doFlattenInternal = function(array, keepTester, output) {
	  var a, len1, p;
	  output || (output = []);
	  for (p = 0, len1 = array.length; p < len1; p++) {
	    a = array[p];
	    if (isArrayOrArguments(a)) {
	      flattenIfNeeded(a, keepTester, output);
	    } else if (keepTester(a)) {
	      output.push(a);
	    }
	  }
	  return output;
	};

	needsFlatteningOrCompacting = function(array, keepTester) {
	  var a, len1, p;
	  for (p = 0, len1 = array.length; p < len1; p++) {
	    a = array[p];
	    if (isArrayOrArguments(a) || !keepTester(a)) {
	      return true;
	    }
	  }
	  return false;
	};

	keepAll = function() {
	  return true;
	};

	flattenIfNeeded = function(array, keepTester, output) {
	  var len1, p, v;
	  if (keepTester == null) {
	    keepTester = keepAll;
	  }
	  if (needsFlatteningOrCompacting(array, keepTester)) {
	    return doFlattenInternal(array, keepTester, output);
	  } else if (output) {
	    for (p = 0, len1 = array.length; p < len1; p++) {
	      v = array[p];
	      output.push(v);
	    }
	    return output;
	  } else if (array.constructor !== Array) {
	    return arraySlice.call(array);
	  } else {
	    return array;
	  }
	};

	moveArrayElement1 = function(array, from, to) {
	  array.splice(to, 0, array[from]);
	  return array;
	};

	moveArrayElement2 = function(array, from, to) {
	  var i, p, q, ref1, ref2, ref3, ref4, tmp;
	  tmp = array[from];
	  if (from < to) {
	    for (i = p = ref1 = from, ref2 = to - 1; p <= ref2; i = p += 1) {
	      array[i] = array[i + 1];
	    }
	  } else {
	    for (i = q = ref3 = from, ref4 = to + 1; q <= ref4; i = q += 1) {
	      array[i] = array[i - 1];
	    }
	  }
	  array[to] = tmp;
	  return array;
	};

	module.exports = ArrayExtensions = (function() {
	  var basicCompareFunction, compact, discardNullAndUndefined, flatten, keepIfRubyTrue, longestCommonSubsequence, randomElement;

	  function ArrayExtensions() {}


	  /*
	  Useful compact and compactFlatten keepTester functions
	   */

	  ArrayExtensions.keepAll = keepAll = function() {
	    return true;
	  };

	  ArrayExtensions.discardNullAndUndefined = discardNullAndUndefined = function(a) {
	    return a !== void 0 && a !== null;
	  };

	  ArrayExtensions.keepIfRubyTrue = keepIfRubyTrue = function(a) {
	    return a !== void 0 && a !== null && a !== false;
	  };

	  ArrayExtensions.peek = function(array, offset) {
	    if (offset == null) {
	      offset = -1;
	    }
	    if (array) {
	      return array[array.length + offset];
	    } else {
	      return void 0;
	    }
	  };

	  basicCompareFunction = function(a, b) {
	    return a - b;
	  };


	  /*
	  findSortedFirst
	  
	  Acts as-if it sorted the array and returned the first element.
	  
	  Details:
	    tests each element in the array againts the current "smallest"
	    returns the element for which tests "smaller" than every other
	    element a is "smaller" than b if compareFunction(a, b) returns >0 value
	  
	  IN:
	    array - the array to search or null
	    compareFunction - (a, b) -> # standard compare function
	      returns:
	        0: if a and b are equal
	        <0: if b is greater than a
	        >0: if a is greater than b
	      default: (a, b) -> a - b
	  
	  OUT:
	    largest value in array or undefined if array is null or length 0
	   */

	  ArrayExtensions.findSortedFirst = function(array, compareFunction) {
	    var element, i, p, ref1, returnElement;
	    if (compareFunction == null) {
	      compareFunction = basicCompareFunction;
	    }
	    if (!((array != null ? array.length : void 0) > 0)) {
	      return void 0;
	    }
	    returnElement = array[0];
	    for (i = p = 1, ref1 = array.length; p < ref1; i = p += 1) {
	      if (0 < compareFunction(returnElement, element = array[i])) {
	        returnElement = element;
	      }
	    }
	    return returnElement;
	  };

	  ArrayExtensions.first = function(array) {
	    return array[0];
	  };

	  ArrayExtensions.second = function(array) {
	    return array[1];
	  };

	  ArrayExtensions.third = function(array) {
	    return array[2];
	  };

	  ArrayExtensions.forth = function(array) {
	    return array[3];
	  };

	  ArrayExtensions.fifth = function(array) {
	    return array[4];
	  };

	  ArrayExtensions.last = function(array) {
	    if (array) {
	      return array[array.length - 1];
	    } else {
	      return void 0;
	    }
	  };

	  ArrayExtensions.compact = compact = function(array, keepTester) {
	    var a, len1, p;
	    if (keepTester == null) {
	      keepTester = discardNullAndUndefined;
	    }
	    for (p = 0, len1 = array.length; p < len1; p++) {
	      a = array[p];
	      if (!keepTester(a)) {
	        return (function() {
	          var len2, q, results;
	          results = [];
	          for (q = 0, len2 = array.length; q < len2; q++) {
	            a = array[q];
	            if (keepTester(a)) {
	              results.push(a);
	            }
	          }
	          return results;
	        })();
	      }
	    }
	    return array;
	  };

	  ArrayExtensions.pushIfNotPresent = function(array, item) {
	    if (indexOf.call(array, item) >= 0) {
	      return false;
	    } else {
	      array.push(item);
	      return true;
	    }
	  };

	  ArrayExtensions.randomElement = randomElement = function(array, fromFirstN) {
	    if (fromFirstN == null) {
	      fromFirstN = array.length;
	    }
	    return array[Math.random() * fromFirstN | 0];
	  };

	  ArrayExtensions.randomSort = function(array) {
	    var a, i, j, len, p, ref1;
	    len = array.length;
	    for (i = p = ref1 = len - 1; p >= 0; i = p += -1) {
	      j = intRand(i);
	      a = array[i];
	      array[i] = array[j];
	      array[j] = a;
	    }
	    return array;
	  };

	  ArrayExtensions.flatten = flatten = function(firstArg) {
	    return flattenIfNeeded(arguments.length === 1 ? isArrayOrArguments(firstArg) ? firstArg : [firstArg] : arguments);
	  };

	  ArrayExtensions.compactFlatten = function(array, keepTester) {
	    if (keepTester == null) {
	      keepTester = discardNullAndUndefined;
	    }
	    return flattenIfNeeded(array, keepTester);
	  };

	  ArrayExtensions.insert = function(array, index, item) {
	    if (index < 0) {
	      index = array.length + index + 1;
	    }
	    array.splice(index, 0, item);
	    array;
	    return array;
	  };

	  ArrayExtensions.withInserted = function(array, index, item) {
	    return ArrayExtensions.insert(array.slice(), index, item);
	  };

	  ArrayExtensions.remove = function(array, index, amount) {
	    if (amount == null) {
	      amount = 1;
	    }
	    if (index < 0) {
	      index = array.length + index + 1;
	    }
	    array.splice(index, amount);
	    return array;
	  };

	  ArrayExtensions.removeFirstMatch = function(array, toMatchValue) {
	    var index;
	    index = array.indexOf(toMatchValue);
	    if (index >= 0) {
	      return ArrayExtensions.remove(array, index);
	    } else {
	      return array;
	    }
	  };

	  ArrayExtensions.arrayWithout = function(array, index, amount) {
	    if (amount == null) {
	      amount = 1;
	    }
	    return ArrayExtensions.remove(array.slice(), index, amount);
	  };

	  ArrayExtensions.arrayWithoutValue = function(array, value) {
	    return ArrayExtensions.remove(array.slice(), array.indexOf(value), 1);
	  };

	  ArrayExtensions.arrayWith = function(array, value) {
	    if (!array) {
	      return [value];
	    }
	    array = array.slice();
	    array.push(value);
	    return array;
	  };

	  ArrayExtensions.truncatedArrayWith = function(array, length, value) {
	    if (!array) {
	      return [value];
	    }
	    array = array.slice(0, length);
	    array.push(value);
	    return array;
	  };

	  ArrayExtensions.poppedArray = function(array) {
	    return array.slice(0, array.length - 1);
	  };

	  ArrayExtensions.arrayWithOne = function(array, value) {
	    if (!array) {
	      return [value];
	    }
	    array = array.slice();
	    if (indexOf.call(array, value) < 0) {
	      array.push(value);
	    }
	    return array;
	  };

	  ArrayExtensions.slice = function(a, b, c) {
	    return arraySlice.call(a, b, c);
	  };

	  ArrayExtensions.shuffleArray = function(a) {
	    var i, j, t;
	    i = a.length;
	    while (--i > 0) {
	      j = ~~(Math.random() * (i + 1));
	      t = a[j];
	      a[j] = a[i];
	      a[i] = t;
	    }
	    return a;
	  };

	  ArrayExtensions.moveArrayElement1 = moveArrayElement1;

	  ArrayExtensions.moveArrayElement2 = moveArrayElement2;

	  ArrayExtensions.moveArrayElement = function(array, from, to) {
	    from = bound(0, from | 0, array.length(-1));
	    to = bound(0, to | 0, array.length(-1));
	    if (Math.abs(from - to) > 300) {
	      return moveArrayElement1(array, from, to);
	    } else {
	      return moveArrayElement2(array, from, to);
	    }
	  };

	  ArrayExtensions.stableSort = function(array, compare) {
	    var a, b, i, length, notSorted, p, ref1;
	    compare || (compare = function(a, b) {
	      return a - b;
	    });
	    notSorted = true;
	    length = array.length;
	    while (notSorted) {
	      notSorted = false;
	      for (i = p = 1, ref1 = length; p < ref1; i = p += 1) {
	        if (compare(a = array[i - 1], b = array[i]) > 0) {
	          array[i - 1] = b;
	          array[i] = a;
	          notSorted = true;
	        }
	      }
	    }
	    return array;
	  };

	  ArrayExtensions.longestCommonSubsequence = longestCommonSubsequence = function(a, b) {
	    var c, diag, i, j, latch, lcs, left, m, n, p, q, r, ref1, ref2, ref3, row, s;
	    lcs = [];
	    row = [];
	    c = [];
	    if (m < n) {
	      s = a;
	      a = b;
	      b = s;
	    }
	    m = a.length;
	    n = b.length;
	    for (j = p = 0, ref1 = n; p < ref1; j = p += 1) {
	      row[j] = 0;
	    }
	    for (i = q = 0, ref2 = m; q < ref2; i = q += 1) {
	      c[i] = row = row.slice();
	      diag = 0;
	      for (j = r = 0, ref3 = n - 1; r <= ref3; j = r += 1) {
	        latch = row[j];
	        if (a[i] === b[j]) {
	          row[j] = diag + 1;
	        } else {
	          left = row[j - 1] || 0;
	          if (left > row[j]) {
	            row[j] = left;
	          }
	        }
	        diag = latch;
	      }
	    }
	    i--;
	    j--;
	    while (i > -1 && j > -1) {
	      switch (c[i][j]) {
	        case i && c[i - 1][j]:
	          i--;
	          continue;
	        case j && c[i][j - 1]:
	          j--;
	          break;
	        default:
	          j--;
	          lcs.unshift(a[i]);
	          i--;
	          continue;
	      }
	    }
	    return lcs;
	  };

	  ArrayExtensions.minimumOrderedOverlappingMerge = function(a, b) {
	    var ai, bj, c, ck, i, j, k, l, m, n, o, out;
	    c = longestCommonSubsequence(a, b);
	    m = a.length;
	    n = b.length;
	    o = c.length;
	    out = new Array(n);
	    i = 0;
	    j = 0;
	    k = 0;
	    l = 0;
	    while (i < m && j < n && k < o) {
	      ai = a[i];
	      bj = b[j];
	      ck = c[k];
	      if (ai === ck && bj === ck) {
	        i++;
	        j++;
	        k++;
	        out[l++] = ai;
	      } else if (ai !== ck) {
	        i++;
	        if (indexOf.call(b, ai) < 0) {
	          out[l++] = ai;
	        }
	      } else {
	        j++;
	        out[l++] = bj;
	      }
	    }
	    while (i < m) {
	      ai = a[i++];
	      if (indexOf.call(b, ai) < 0) {
	        out[l++] = ai;
	      }
	    }
	    while (j < n) {
	      out[l++] = b[j++];
	    }
	    return out;
	  };

	  return ArrayExtensions;

	})();


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	
	/*
	This current iteration of clone relies on some singleton variables shared across all invocations of clone.
	This is fine as long as javascript stays single-threaded.
	It also introduces a little bit of uglyness initializing clonedMap necessitating the "top" variable.

	FUTURE
	A potentially better solution would be to create a new closer each time clone is called at the top-most level,
	but when recursing, pass in a new function bound to that closure which is different from the global clone function.

	populateClone would need to take an additional argument - the clone function to use for recursive cloning.
	 */
	var Clone, Foundation, Inspect, Map, Unique, byProperties, byStructure, clonedMap, inspect, topObject, uniquePropertyName;

	Foundation = __webpack_require__(10);

	Map = __webpack_require__(40);

	Unique = __webpack_require__(22);

	Inspect = __webpack_require__(31);

	uniquePropertyName = Unique.PropertyName;

	inspect = Inspect.inspect;

	clonedMap = null;

	byStructure = false;

	byProperties = false;

	topObject = null;

	module.exports = Clone = (function() {
	  var clone, cloneArray, cloneByProperties, cloneByStructure, cloneObject, emptyClone;

	  function Clone() {}

	  cloneArray = function(array) {
	    var clonedArray, i, index, len, value;
	    clonedArray = clonedMap.set(array, array.slice());
	    for (index = i = 0, len = clonedArray.length; i < len; index = ++i) {
	      value = clonedArray[index];
	      clonedArray[index] = clone(value);
	    }
	    return clonedArray;
	  };

	  cloneObject = function(obj) {
	    var clonedObject, k, v;
	    clonedObject = clonedMap.set(obj, emptyClone(obj));
	    if ((obj !== topObject || !byProperties) && obj.populateClone) {
	      obj.populateClone(clonedObject);
	    } else {
	      for (k in obj) {
	        v = obj[k];
	        clonedObject[k] = clone(v);
	      }
	    }
	    return clonedObject;
	  };

	  Clone.emptyClone = emptyClone = function(obj) {
	    if (obj.constructor === Array) {
	      return [];
	    } else {
	      return Object.create(Object.getPrototypeOf(obj));
	    }
	  };

	  Clone.clone = clone = function(obj, mode) {
	    var clonedObject, got;
	    switch (mode) {
	      case "byStructure":
	        byStructure = true;
	        break;
	      case "byProperties":
	        byProperties = true;
	    }
	    if (obj === null || obj === void 0 || typeof obj !== "object") {
	      return obj;
	    }
	    if (byStructure && (obj.constructor !== Array && obj.constructor !== Object)) {
	      return obj;
	    }
	    if (clonedMap) {
	      if (got = clonedMap.get(obj)) {
	        return got;
	      }
	    } else {
	      topObject = obj;
	      clonedMap = new Map;
	    }
	    clonedObject = obj.constructor === Array ? cloneArray(obj) : cloneObject(obj);
	    if (topObject === obj) {
	      byStructure = false;
	      byProperties = false;
	      topObject = null;
	      clonedMap = null;
	    }
	    return clonedObject;
	  };

	  Clone.cloneByProperties = cloneByProperties = function(obj) {
	    return clone(obj, "byProperties");
	  };

	  Clone.cloneByStructure = cloneByStructure = function(obj) {
	    return clone(obj, "byStructure");
	  };

	  return Clone;

	})();


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var Eq, inspect, isNumber, isString, min, objectKeyCount, ref, remove,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	inspect = __webpack_require__(31).inspect;

	remove = __webpack_require__(55).remove;

	objectKeyCount = __webpack_require__(58).objectKeyCount;

	ref = __webpack_require__(21), isString = ref.isString, isNumber = ref.isNumber;

	min = Math.min;

	module.exports = Eq = (function() {
	  var plainObjectsDeepDiff, plainObjectsDeepEq;

	  function Eq() {}


	  /*
	  IN: see @compare
	  OUT:
	    true: if a and b are structurally equal
	    false: otherwise
	   */

	  Eq.eq = function(a, b, recursionBlockEnabled) {
	    return 0 === Eq.compare(a, b, recursionBlockEnabled);
	  };

	  Eq._compareArray = function(a, b, recursionBlockArray) {
	    var aLength, av, bLength, bv, i, j, ref1, val;
	    aLength = a.length;
	    bLength = b.length;
	    for (i = j = 0, ref1 = Math.min(aLength, bLength); j < ref1; i = j += 1) {
	      av = a[i];
	      bv = b[i];
	      if (0 !== (val = Eq._compare(av, bv, recursionBlockArray))) {
	        return val;
	      }
	    }
	    return aLength - bLength;
	  };

	  Eq._compareObject = function(a, b, recursionBlockArray) {
	    var aLength, av, bv, compared, k, val;
	    aLength = 0;
	    compared = 0;
	    for (k in a) {
	      av = a[k];
	      aLength++;
	      av = a[k];
	      bv = b[k];
	      if (bv !== void 0 || b.hasOwnProperty(k)) {
	        compared++;
	        if (0 !== (val = Eq._compare(av, bv, recursionBlockArray))) {
	          return val;
	        }
	      }
	    }
	    if (aLength === compared && compared === objectKeyCount(b)) {
	      return 0;
	    } else {
	      return NaN;
	    }
	  };


	  /*
	  compare is recursive. However, it only recurses for 'plain' objects and arrays.
	  
	  If you want to compare custom objects deeply, you must add an .eq or .compare function to your custom objects.
	    signature: a.eq b, recursionBlockArray => truthy if a equals b
	    signature: a.compare b, recursionBlockArray => NaN / <0 / 0 / >0 for incomparable / a<b / a==b / a>b respectively
	    IN:
	      a: => this/@
	      b: compared with a
	      recursionBlockArray: an array of objects already on the stack being tested, pass this to
	    It is an array of every object recursively currently being tested - don't test an object in this array
	    recursionBlockArray can be altered, but should be returned in its original state. It may be null.
	  
	  IN:
	    a and b: compare a and b
	    recursionBlockEnabled:
	      truthy: recursive structures will be handled correctly
	      falsey: (default) faster, but recursive structures result in infinite recursion
	  OUT:
	    NaN:
	      a and b are different types
	      a and b are otherwise not comparable
	  
	    <0: a < b
	    0:  a == b
	    >0: a > b
	   */

	  Eq.compare = function(a, b, recursionBlockEnabled) {
	    var error, error1, info;
	    try {
	      return Eq._compare(a, b, recursionBlockEnabled && []);
	    } catch (error1) {
	      error = error1;
	      info = "compare(a, b, " + recursionBlockEnabled + ") threw error: ";
	      console.error(info, error);
	      throw new Error(info + error);
	    }
	  };

	  Eq._compare = function(a, b, recursionBlockArray) {
	    var _constructor;
	    if (a === b) {
	      return 0;
	    }
	    if (a && b && a.constructor === (_constructor = b.constructor)) {
	      if (isString(a)) {
	        return a.localeCompare(b);
	      }
	      if (isNumber(a)) {
	        return a - b;
	      }
	      if (recursionBlockArray) {
	        if (indexOf.call(recursionBlockArray, a) >= 0 || indexOf.call(recursionBlockArray, b) >= 0) {
	          return 0;
	        }
	        recursionBlockArray.push(a);
	        recursionBlockArray.push(b);
	      }
	      if (a.compare) {
	        return a.compare(b, recursionBlockArray);
	      }
	      if (_constructor === Array) {
	        return Eq._compareArray(a, b, recursionBlockArray);
	      }
	      if (_constructor === Object) {
	        return Eq._compareObject(a, b, recursionBlockArray);
	      }
	      if (a.eq && a.eq(b, recursionBlockArray)) {
	        return 0;
	      }
	      if (recursionBlockArray) {
	        remove(recursionBlockArray, recursionBlockArray.length - 2, 2);
	      }
	    }
	    return NaN;
	  };

	  Eq.plainObjectsDeepEqArray = function(a, b) {
	    var av, i, j, len1;
	    if (a.length !== b.length) {
	      return false;
	    }
	    for (i = j = 0, len1 = a.length; j < len1; i = ++j) {
	      av = a[i];
	      if (!Eq.plainObjectsDeepEq(av, b[i])) {
	        return false;
	      }
	    }
	    return true;
	  };

	  Eq.plainObjectsDeepEqObject = function(a, b) {
	    var aLength, av, bv, k;
	    aLength = 0;
	    for (k in a) {
	      av = a[k];
	      aLength++;
	      bv = b[k];
	      if (!((bv !== void 0 || b.hasOwnProperty(k)) && Eq.plainObjectsDeepEq(av, bv))) {
	        return false;
	      }
	    }
	    return aLength === objectKeyCount(b);
	  };

	  Eq.plainObjectsDeepEq = plainObjectsDeepEq = function(a, b) {
	    var _constructor;
	    if (a === b) {
	      return true;
	    } else if (a && b && a.constructor === (_constructor = b.constructor)) {
	      if (a.eq) {
	        return a.eq(b);
	      } else if (_constructor === Array) {
	        return Eq.plainObjectsDeepEqArray(a, b);
	      } else if (_constructor === Object) {
	        return Eq.plainObjectsDeepEqObject(a, b);
	      } else {
	        return false;
	      }
	    } else {
	      return false;
	    }
	  };

	  Eq.plainObjectsDeepDiffArray = function(before, after) {
	    var diff, i, j, l, len, m, ref1, ref2, ref3, ref4, ref5, res;
	    res = null;
	    len = min(before.length, after.length);
	    for (i = j = 0, ref1 = len; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
	      if (!(diff = plainObjectsDeepDiff(before[i], after[i]))) {
	        continue;
	      }
	      res || (res = {});
	      res[i] = diff;
	    }
	    if (len < before.length) {
	      for (i = l = ref2 = len, ref3 = before.length; ref2 <= ref3 ? l < ref3 : l > ref3; i = ref2 <= ref3 ? ++l : --l) {
	        res || (res = {});
	        res[i] = {
	          removed: before[i]
	        };
	      }
	    }
	    if (len < after.length) {
	      for (i = m = ref4 = len, ref5 = after.length; ref4 <= ref5 ? m < ref5 : m > ref5; i = ref4 <= ref5 ? ++m : --m) {
	        res || (res = {});
	        res[i] = {
	          added: after[i]
	        };
	      }
	    }
	    return res;
	  };

	  Eq.plainObjectsDeepDiffObject = function(before, after) {
	    var afterV, beforeV, diff, k, res;
	    res = null;
	    for (k in before) {
	      beforeV = before[k];
	      if (after.hasOwnProperty(k)) {
	        if (diff = plainObjectsDeepDiff(beforeV, after[k])) {
	          res || (res = {});
	          res[k] = diff;
	        }
	      } else {
	        res || (res = {});
	        res[k] = {
	          removed: beforeV
	        };
	      }
	    }
	    for (k in after) {
	      afterV = after[k];
	      if (!(!before.hasOwnProperty(k))) {
	        continue;
	      }
	      res || (res = {});
	      res[k] = {
	        added: afterV
	      };
	    }
	    return res;
	  };

	  Eq.plainObjectsDeepDiff = plainObjectsDeepDiff = function(before, after) {
	    var _constructor;
	    if (before === after) {
	      return null;
	    } else if (before && after && before.constructor === (_constructor = after.constructor)) {
	      if (before.eq) {
	        if (before.eq(after)) {
	          return null;
	        } else {
	          return {
	            before: before,
	            after: after
	          };
	        }
	      } else if (_constructor === Array) {
	        return Eq.plainObjectsDeepDiffArray(before, after);
	      } else if (_constructor === Object) {
	        return Eq.plainObjectsDeepDiffObject(before, after);
	      } else {
	        return {
	          before: before,
	          after: after
	        };
	      }
	    } else {
	      return {
	        before: before,
	        after: after
	      };
	    }
	  };

	  Eq.shallowEq = function(a, b) {
	    return a === b || (a && b && a.eq && a.eq(b));
	  };

	  return Eq;

	})();


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var Hash, compactFlatten,
	  slice = [].slice,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	compactFlatten = __webpack_require__(55).compactFlatten;

	module.exports = Hash = (function() {
	  var defaultEq, mergeInto;

	  function Hash() {}

	  Hash.countKeys = function(o) {
	    return Object.keys(o).length;
	  };

	  defaultEq = function(a, b) {
	    return a === b;
	  };

	  Hash.objectDiff = function(o1, o2, added, removed, changed, nochange, eq, o2KeyCount) {
	    var k, o1KeyCount, o2KeyCountIsAtLeast, v1, v2;
	    if (eq == null) {
	      eq = defaultEq;
	    }
	    o2KeyCountIsAtLeast = 0;
	    o1KeyCount = 0;
	    for (k in o1) {
	      v1 = o1[k];
	      o1KeyCount++;
	      if (typeof (v2 = o2[k]) !== "undefined" || o2.hasOwnProperty(k)) {
	        o2KeyCountIsAtLeast++;
	        if (!eq(v1, v2)) {
	          changed(k, v1, v2);
	        } else {
	          if (typeof nochange === "function") {
	            nochange(k, v1);
	          }
	        }
	      } else {
	        added(k, v1);
	      }
	    }
	    if (!(o2KeyCount != null) || o2KeyCountIsAtLeast !== o2KeyCount) {
	      for (k in o2) {
	        if (!(typeof o1[k] !== "undefined" || o1.hasOwnProperty(k))) {
	          removed(k, o2[k]);
	        }
	      }
	    }
	    return o1KeyCount;
	  };

	  Hash.objectWithout = function() {
	    var fields, k, o, result, v;
	    o = arguments[0], fields = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    result = {};
	    for (k in o) {
	      v = o[k];
	      if (indexOf.call(compactFlatten(fields), k) < 0) {
	        result[k] = v;
	      }
	    }
	    return result;
	  };

	  Hash.objectKeyCount = function(o) {
	    var count, k, v;
	    count = 0;
	    for (k in o) {
	      v = o[k];
	      count++;
	    }
	    return count;
	  };


	  /*
	  
	  merge "flattens" its arguments and then adds all keys from all objects in
	  the list into a new object which is returned.
	  
	  return: new object
	  
	  The first object's keys are added first. If two or more objects have the same
	  keys, the value set in the result is the last object's in the list with that key.
	   */

	  Hash.merge = function() {
	    return mergeInto({}, arguments);
	  };


	  /*
	  The same as 'merge' with one difference:
	  
	  Instead of a new object, all objects are merged into the first object in the list.
	  
	  return: first object in the flattened list
	  return: null if no source objects
	   */

	  Hash.mergeInto = mergeInto = function() {
	    var i, j, k, ref, result, source, sources, v;
	    sources = compactFlatten(arguments);
	    if (sources.length === 0) {
	      return null;
	    }
	    result = sources[0] || {};
	    for (i = j = 1, ref = sources.length; j < ref; i = j += 1) {
	      source = sources[i];
	      for (k in source) {
	        v = source[k];
	        result[k] = v;
	      }
	    }
	    return result;
	  };

	  Hash.hasAllProps = function(o1, o2) {
	    var k, v;
	    for (k in o1) {
	      v = o1[k];
	      if (!o2.hasOwnProperty(k)) {
	        return false;
	      }
	    }
	    return true;
	  };

	  Hash.pureMerge = function() {
	    var j, last, len, source, sources;
	    sources = compactFlatten(arguments);
	    if (sources.length === 0) {
	      return null;
	    }
	    if (sources.length === 1) {
	      return sources[0];
	    }
	    last = sources[sources.length - 1];
	    for (j = 0, len = sources.length; j < len; j++) {
	      source = sources[j];
	      if (source !== last) {
	        if (!Hash.hasAllProps(source, last)) {
	          return Hash.merge(sources);
	        }
	      }
	    }
	    return last;
	  };

	  Hash.select = function() {
	    var j, len, obj, prop, properties, ref, result, v;
	    obj = arguments[0], properties = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    result = {};
	    ref = compactFlatten(properties);
	    for (j = 0, len = ref.length; j < len; j++) {
	      prop = ref[j];
	      if (v = obj[prop] || obj.hasOwnProperty(prop)) {
	        result[prop] = v;
	      }
	    }
	    return result;
	  };

	  Hash.selectAll = function() {
	    var j, len, obj, prop, properties, ref, result;
	    obj = arguments[0], properties = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    result = {};
	    ref = compactFlatten(properties);
	    for (j = 0, len = ref.length; j < len; j++) {
	      prop = ref[j];
	      result[prop] = obj[prop];
	    }
	    return result;
	  };

	  Hash.objectWithout = function() {
	    var anythingToDo, j, len, obj, prop, properties, result, v;
	    obj = arguments[0], properties = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    if (properties.length === 1 && !(typeof properties[0] === "string")) {
	      properties = properties[0];
	    }
	    anythingToDo = false;
	    for (j = 0, len = properties.length; j < len; j++) {
	      prop = properties[j];
	      if (obj.hasOwnProperty(prop)) {
	        anythingToDo = true;
	        break;
	      }
	    }
	    if (anythingToDo) {
	      result = {};
	      for (prop in obj) {
	        v = obj[prop];
	        if (indexOf.call(properties, prop) < 0) {
	          result[prop] = v;
	        }
	      }
	      return result;
	    } else {
	      return obj;
	    }
	  };

	  return Hash;

	})();


/***/ },
/* 59 */
/***/ function(module, exports) {

	var Function;

	module.exports = Function = (function() {
	  function Function() {}

	  Function.fastBind = function(fn, _this) {
	    switch (fn.length) {
	      case 0:
	        return function() {
	          return fn.call(_this);
	        };
	      case 1:
	        return function(a) {
	          return fn.call(_this, a);
	        };
	      case 2:
	        return function(a, b) {
	          return fn.call(_this, a, b);
	        };
	      case 3:
	        return function(a, b, c) {
	          return fn.call(_this, a, b, c);
	        };
	      case 4:
	        return function(a, b, c, d) {
	          return fn.call(_this, a, b, c, d);
	        };
	      case 5:
	        return function(a, b, c, d, e) {
	          return fn.call(_this, a, b, c, d, e);
	        };
	      case 6:
	        return function(a, b, c, d, e, f) {
	          return fn.call(_this, a, b, c, d, e, f);
	        };
	      case 7:
	        return function(a, b, c, d, e, f, g) {
	          return fn.call(_this, a, b, c, d, e, f, g);
	        };
	      case 8:
	        return function(a, b, c, d, e, f, g, h) {
	          return fn.call(_this, a, b, c, d, e, f, g, h);
	        };
	      case 9:
	        return function(a, b, c, d, e, f, g, h, i) {
	          return fn.call(_this, a, b, c, d, e, f, g, h, i);
	        };
	      case 10:
	        return function(a, b, c, d, e, f, g, h, i, j) {
	          return fn.call(_this, a, b, c, d, e, f, g, h, i, j);
	        };
	      default:
	        return function() {
	          return fn.apply(_this, arguments);
	        };
	    }
	  };

	  return Function;

	})();


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var ArtPromise, Promise;

	Promise = self.Promise || __webpack_require__(61);


	/*
	ArtPromise extends ES6 Promises in the following ways:

	- constructing a promise with no parameters is allowed
	- promise.resolve and promise.reject are supported as
	  alternative ways to resolve or reject a promise

	If native promises are supported, they are used,
	otherwise a polyfill is used.
	 */

	module.exports = ArtPromise = (function() {
	  ArtPromise.all = Promise.all;

	  ArtPromise.race = Promise.race;

	  ArtPromise.reject = Promise.reject;

	  ArtPromise.resolve = Promise.resolve;

	  function ArtPromise(_function) {
	    this.resolve = this.reject = null;
	    this._nativePromise = null;
	    this._nativePromise = new Promise((function(_this) {
	      return function(resolve, reject) {
	        _this.resolve = resolve;
	        _this.reject = reject;
	        return typeof _function === "function" ? _function(_this.resolve, _this.reject) : void 0;
	      };
	    })(this));
	  }

	  ArtPromise.prototype.then = function(a, b) {
	    return this._nativePromise.then(a, b);
	  };

	  ArtPromise.prototype["catch"] = function(a) {
	    return this._nativePromise["catch"](a);
	  };

	  return ArtPromise;

	})();


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var require;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, global, module) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
	 * @version   3.0.2
	 */

	(function() {
	    "use strict";
	    function lib$es6$promise$utils$$objectOrFunction(x) {
	      return typeof x === 'function' || (typeof x === 'object' && x !== null);
	    }

	    function lib$es6$promise$utils$$isFunction(x) {
	      return typeof x === 'function';
	    }

	    function lib$es6$promise$utils$$isMaybeThenable(x) {
	      return typeof x === 'object' && x !== null;
	    }

	    var lib$es6$promise$utils$$_isArray;
	    if (!Array.isArray) {
	      lib$es6$promise$utils$$_isArray = function (x) {
	        return Object.prototype.toString.call(x) === '[object Array]';
	      };
	    } else {
	      lib$es6$promise$utils$$_isArray = Array.isArray;
	    }

	    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
	    var lib$es6$promise$asap$$len = 0;
	    var lib$es6$promise$asap$$toString = {}.toString;
	    var lib$es6$promise$asap$$vertxNext;
	    var lib$es6$promise$asap$$customSchedulerFn;

	    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
	      lib$es6$promise$asap$$len += 2;
	      if (lib$es6$promise$asap$$len === 2) {
	        // If len is 2, that means that we need to schedule an async flush.
	        // If additional callbacks are queued before the queue is flushed, they
	        // will be processed by this flush that we are scheduling.
	        if (lib$es6$promise$asap$$customSchedulerFn) {
	          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
	        } else {
	          lib$es6$promise$asap$$scheduleFlush();
	        }
	      }
	    }

	    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
	      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
	    }

	    function lib$es6$promise$asap$$setAsap(asapFn) {
	      lib$es6$promise$asap$$asap = asapFn;
	    }

	    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
	    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
	    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
	    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

	    // test for web worker but not in IE10
	    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
	      typeof importScripts !== 'undefined' &&
	      typeof MessageChannel !== 'undefined';

	    // node
	    function lib$es6$promise$asap$$useNextTick() {
	      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	      // see https://github.com/cujojs/when/issues/410 for details
	      return function() {
	        process.nextTick(lib$es6$promise$asap$$flush);
	      };
	    }

	    // vertx
	    function lib$es6$promise$asap$$useVertxTimer() {
	      return function() {
	        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
	      };
	    }

	    function lib$es6$promise$asap$$useMutationObserver() {
	      var iterations = 0;
	      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
	      var node = document.createTextNode('');
	      observer.observe(node, { characterData: true });

	      return function() {
	        node.data = (iterations = ++iterations % 2);
	      };
	    }

	    // web worker
	    function lib$es6$promise$asap$$useMessageChannel() {
	      var channel = new MessageChannel();
	      channel.port1.onmessage = lib$es6$promise$asap$$flush;
	      return function () {
	        channel.port2.postMessage(0);
	      };
	    }

	    function lib$es6$promise$asap$$useSetTimeout() {
	      return function() {
	        setTimeout(lib$es6$promise$asap$$flush, 1);
	      };
	    }

	    var lib$es6$promise$asap$$queue = new Array(1000);
	    function lib$es6$promise$asap$$flush() {
	      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
	        var callback = lib$es6$promise$asap$$queue[i];
	        var arg = lib$es6$promise$asap$$queue[i+1];

	        callback(arg);

	        lib$es6$promise$asap$$queue[i] = undefined;
	        lib$es6$promise$asap$$queue[i+1] = undefined;
	      }

	      lib$es6$promise$asap$$len = 0;
	    }

	    function lib$es6$promise$asap$$attemptVertx() {
	      try {
	        var r = require;
	        var vertx = __webpack_require__(64);
	        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
	        return lib$es6$promise$asap$$useVertxTimer();
	      } catch(e) {
	        return lib$es6$promise$asap$$useSetTimeout();
	      }
	    }

	    var lib$es6$promise$asap$$scheduleFlush;
	    // Decide what async method to use to triggering processing of queued callbacks:
	    if (lib$es6$promise$asap$$isNode) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
	    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
	    } else if (lib$es6$promise$asap$$isWorker) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
	    } else if (lib$es6$promise$asap$$browserWindow === undefined && "function" === 'function') {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
	    } else {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
	    }

	    function lib$es6$promise$$internal$$noop() {}

	    var lib$es6$promise$$internal$$PENDING   = void 0;
	    var lib$es6$promise$$internal$$FULFILLED = 1;
	    var lib$es6$promise$$internal$$REJECTED  = 2;

	    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

	    function lib$es6$promise$$internal$$selfFulfillment() {
	      return new TypeError("You cannot resolve a promise with itself");
	    }

	    function lib$es6$promise$$internal$$cannotReturnOwn() {
	      return new TypeError('A promises callback cannot return that same promise.');
	    }

	    function lib$es6$promise$$internal$$getThen(promise) {
	      try {
	        return promise.then;
	      } catch(error) {
	        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
	        return lib$es6$promise$$internal$$GET_THEN_ERROR;
	      }
	    }

	    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	      try {
	        then.call(value, fulfillmentHandler, rejectionHandler);
	      } catch(e) {
	        return e;
	      }
	    }

	    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
	       lib$es6$promise$asap$$asap(function(promise) {
	        var sealed = false;
	        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
	          if (sealed) { return; }
	          sealed = true;
	          if (thenable !== value) {
	            lib$es6$promise$$internal$$resolve(promise, value);
	          } else {
	            lib$es6$promise$$internal$$fulfill(promise, value);
	          }
	        }, function(reason) {
	          if (sealed) { return; }
	          sealed = true;

	          lib$es6$promise$$internal$$reject(promise, reason);
	        }, 'Settle: ' + (promise._label || ' unknown promise'));

	        if (!sealed && error) {
	          sealed = true;
	          lib$es6$promise$$internal$$reject(promise, error);
	        }
	      }, promise);
	    }

	    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
	      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
	      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, thenable._result);
	      } else {
	        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      }
	    }

	    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
	      if (maybeThenable.constructor === promise.constructor) {
	        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
	      } else {
	        var then = lib$es6$promise$$internal$$getThen(maybeThenable);

	        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
	        } else if (then === undefined) {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        } else if (lib$es6$promise$utils$$isFunction(then)) {
	          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
	        } else {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        }
	      }
	    }

	    function lib$es6$promise$$internal$$resolve(promise, value) {
	      if (promise === value) {
	        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
	      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
	        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
	      } else {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      }
	    }

	    function lib$es6$promise$$internal$$publishRejection(promise) {
	      if (promise._onerror) {
	        promise._onerror(promise._result);
	      }

	      lib$es6$promise$$internal$$publish(promise);
	    }

	    function lib$es6$promise$$internal$$fulfill(promise, value) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

	      promise._result = value;
	      promise._state = lib$es6$promise$$internal$$FULFILLED;

	      if (promise._subscribers.length !== 0) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
	      }
	    }

	    function lib$es6$promise$$internal$$reject(promise, reason) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	      promise._state = lib$es6$promise$$internal$$REJECTED;
	      promise._result = reason;

	      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
	    }

	    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
	      var subscribers = parent._subscribers;
	      var length = subscribers.length;

	      parent._onerror = null;

	      subscribers[length] = child;
	      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
	      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

	      if (length === 0 && parent._state) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
	      }
	    }

	    function lib$es6$promise$$internal$$publish(promise) {
	      var subscribers = promise._subscribers;
	      var settled = promise._state;

	      if (subscribers.length === 0) { return; }

	      var child, callback, detail = promise._result;

	      for (var i = 0; i < subscribers.length; i += 3) {
	        child = subscribers[i];
	        callback = subscribers[i + settled];

	        if (child) {
	          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
	        } else {
	          callback(detail);
	        }
	      }

	      promise._subscribers.length = 0;
	    }

	    function lib$es6$promise$$internal$$ErrorObject() {
	      this.error = null;
	    }

	    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

	    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
	      try {
	        return callback(detail);
	      } catch(e) {
	        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
	        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
	      }
	    }

	    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
	      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
	          value, error, succeeded, failed;

	      if (hasCallback) {
	        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

	        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
	          failed = true;
	          error = value.error;
	          value = null;
	        } else {
	          succeeded = true;
	        }

	        if (promise === value) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
	          return;
	        }

	      } else {
	        value = detail;
	        succeeded = true;
	      }

	      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
	        // noop
	      } else if (hasCallback && succeeded) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      } else if (failed) {
	        lib$es6$promise$$internal$$reject(promise, error);
	      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, value);
	      }
	    }

	    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
	      try {
	        resolver(function resolvePromise(value){
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function rejectPromise(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      } catch(e) {
	        lib$es6$promise$$internal$$reject(promise, e);
	      }
	    }

	    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
	      var enumerator = this;

	      enumerator._instanceConstructor = Constructor;
	      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

	      if (enumerator._validateInput(input)) {
	        enumerator._input     = input;
	        enumerator.length     = input.length;
	        enumerator._remaining = input.length;

	        enumerator._init();

	        if (enumerator.length === 0) {
	          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	        } else {
	          enumerator.length = enumerator.length || 0;
	          enumerator._enumerate();
	          if (enumerator._remaining === 0) {
	            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	          }
	        }
	      } else {
	        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
	      }
	    }

	    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
	      return lib$es6$promise$utils$$isArray(input);
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
	      return new Error('Array Methods must be provided an Array');
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
	      this._result = new Array(this.length);
	    };

	    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

	    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
	      var enumerator = this;

	      var length  = enumerator.length;
	      var promise = enumerator.promise;
	      var input   = enumerator._input;

	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        enumerator._eachEntry(input[i], i);
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
	      var enumerator = this;
	      var c = enumerator._instanceConstructor;

	      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
	        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
	          entry._onerror = null;
	          enumerator._settledAt(entry._state, i, entry._result);
	        } else {
	          enumerator._willSettleAt(c.resolve(entry), i);
	        }
	      } else {
	        enumerator._remaining--;
	        enumerator._result[i] = entry;
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
	      var enumerator = this;
	      var promise = enumerator.promise;

	      if (promise._state === lib$es6$promise$$internal$$PENDING) {
	        enumerator._remaining--;

	        if (state === lib$es6$promise$$internal$$REJECTED) {
	          lib$es6$promise$$internal$$reject(promise, value);
	        } else {
	          enumerator._result[i] = value;
	        }
	      }

	      if (enumerator._remaining === 0) {
	        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
	      var enumerator = this;

	      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
	        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
	      }, function(reason) {
	        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
	      });
	    };
	    function lib$es6$promise$promise$all$$all(entries) {
	      return new lib$es6$promise$enumerator$$default(this, entries).promise;
	    }
	    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
	    function lib$es6$promise$promise$race$$race(entries) {
	      /*jshint validthis:true */
	      var Constructor = this;

	      var promise = new Constructor(lib$es6$promise$$internal$$noop);

	      if (!lib$es6$promise$utils$$isArray(entries)) {
	        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
	        return promise;
	      }

	      var length = entries.length;

	      function onFulfillment(value) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      }

	      function onRejection(reason) {
	        lib$es6$promise$$internal$$reject(promise, reason);
	      }

	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
	      }

	      return promise;
	    }
	    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
	    function lib$es6$promise$promise$resolve$$resolve(object) {
	      /*jshint validthis:true */
	      var Constructor = this;

	      if (object && typeof object === 'object' && object.constructor === Constructor) {
	        return object;
	      }

	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$resolve(promise, object);
	      return promise;
	    }
	    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
	    function lib$es6$promise$promise$reject$$reject(reason) {
	      /*jshint validthis:true */
	      var Constructor = this;
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$reject(promise, reason);
	      return promise;
	    }
	    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;

	    var lib$es6$promise$promise$$counter = 0;

	    function lib$es6$promise$promise$$needsResolver() {
	      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	    }

	    function lib$es6$promise$promise$$needsNew() {
	      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	    }

	    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
	    /**
	      Promise objects represent the eventual result of an asynchronous operation. The
	      primary way of interacting with a promise is through its `then` method, which
	      registers callbacks to receive either a promise's eventual value or the reason
	      why the promise cannot be fulfilled.

	      Terminology
	      -----------

	      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	      - `thenable` is an object or function that defines a `then` method.
	      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	      - `exception` is a value that is thrown using the throw statement.
	      - `reason` is a value that indicates why a promise was rejected.
	      - `settled` the final resting state of a promise, fulfilled or rejected.

	      A promise can be in one of three states: pending, fulfilled, or rejected.

	      Promises that are fulfilled have a fulfillment value and are in the fulfilled
	      state.  Promises that are rejected have a rejection reason and are in the
	      rejected state.  A fulfillment value is never a thenable.

	      Promises can also be said to *resolve* a value.  If this value is also a
	      promise, then the original promise's settled state will match the value's
	      settled state.  So a promise that *resolves* a promise that rejects will
	      itself reject, and a promise that *resolves* a promise that fulfills will
	      itself fulfill.


	      Basic Usage:
	      ------------

	      ```js
	      var promise = new Promise(function(resolve, reject) {
	        // on success
	        resolve(value);

	        // on failure
	        reject(reason);
	      });

	      promise.then(function(value) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```

	      Advanced Usage:
	      ---------------

	      Promises shine when abstracting away asynchronous interactions such as
	      `XMLHttpRequest`s.

	      ```js
	      function getJSON(url) {
	        return new Promise(function(resolve, reject){
	          var xhr = new XMLHttpRequest();

	          xhr.open('GET', url);
	          xhr.onreadystatechange = handler;
	          xhr.responseType = 'json';
	          xhr.setRequestHeader('Accept', 'application/json');
	          xhr.send();

	          function handler() {
	            if (this.readyState === this.DONE) {
	              if (this.status === 200) {
	                resolve(this.response);
	              } else {
	                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	              }
	            }
	          };
	        });
	      }

	      getJSON('/posts.json').then(function(json) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```

	      Unlike callbacks, promises are great composable primitives.

	      ```js
	      Promise.all([
	        getJSON('/posts'),
	        getJSON('/comments')
	      ]).then(function(values){
	        values[0] // => postsJSON
	        values[1] // => commentsJSON

	        return values;
	      });
	      ```

	      @class Promise
	      @param {function} resolver
	      Useful for tooling.
	      @constructor
	    */
	    function lib$es6$promise$promise$$Promise(resolver) {
	      this._id = lib$es6$promise$promise$$counter++;
	      this._state = undefined;
	      this._result = undefined;
	      this._subscribers = [];

	      if (lib$es6$promise$$internal$$noop !== resolver) {
	        if (!lib$es6$promise$utils$$isFunction(resolver)) {
	          lib$es6$promise$promise$$needsResolver();
	        }

	        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
	          lib$es6$promise$promise$$needsNew();
	        }

	        lib$es6$promise$$internal$$initializePromise(this, resolver);
	      }
	    }

	    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
	    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
	    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
	    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
	    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
	    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
	    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

	    lib$es6$promise$promise$$Promise.prototype = {
	      constructor: lib$es6$promise$promise$$Promise,

	    /**
	      The primary way of interacting with a promise is through its `then` method,
	      which registers callbacks to receive either a promise's eventual value or the
	      reason why the promise cannot be fulfilled.

	      ```js
	      findUser().then(function(user){
	        // user is available
	      }, function(reason){
	        // user is unavailable, and you are given the reason why
	      });
	      ```

	      Chaining
	      --------

	      The return value of `then` is itself a promise.  This second, 'downstream'
	      promise is resolved with the return value of the first promise's fulfillment
	      or rejection handler, or rejected if the handler throws an exception.

	      ```js
	      findUser().then(function (user) {
	        return user.name;
	      }, function (reason) {
	        return 'default name';
	      }).then(function (userName) {
	        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	        // will be `'default name'`
	      });

	      findUser().then(function (user) {
	        throw new Error('Found user, but still unhappy');
	      }, function (reason) {
	        throw new Error('`findUser` rejected and we're unhappy');
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	      });
	      ```
	      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

	      ```js
	      findUser().then(function (user) {
	        throw new PedagogicalException('Upstream error');
	      }).then(function (value) {
	        // never reached
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // The `PedgagocialException` is propagated all the way down to here
	      });
	      ```

	      Assimilation
	      ------------

	      Sometimes the value you want to propagate to a downstream promise can only be
	      retrieved asynchronously. This can be achieved by returning a promise in the
	      fulfillment or rejection handler. The downstream promise will then be pending
	      until the returned promise is settled. This is called *assimilation*.

	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // The user's comments are now available
	      });
	      ```

	      If the assimliated promise rejects, then the downstream promise will also reject.

	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // If `findCommentsByAuthor` fulfills, we'll have the value here
	      }, function (reason) {
	        // If `findCommentsByAuthor` rejects, we'll have the reason here
	      });
	      ```

	      Simple Example
	      --------------

	      Synchronous Example

	      ```javascript
	      var result;

	      try {
	        result = findResult();
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```

	      Errback Example

	      ```js
	      findResult(function(result, err){
	        if (err) {
	          // failure
	        } else {
	          // success
	        }
	      });
	      ```

	      Promise Example;

	      ```javascript
	      findResult().then(function(result){
	        // success
	      }, function(reason){
	        // failure
	      });
	      ```

	      Advanced Example
	      --------------

	      Synchronous Example

	      ```javascript
	      var author, books;

	      try {
	        author = findAuthor();
	        books  = findBooksByAuthor(author);
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```

	      Errback Example

	      ```js

	      function foundBooks(books) {

	      }

	      function failure(reason) {

	      }

	      findAuthor(function(author, err){
	        if (err) {
	          failure(err);
	          // failure
	        } else {
	          try {
	            findBoooksByAuthor(author, function(books, err) {
	              if (err) {
	                failure(err);
	              } else {
	                try {
	                  foundBooks(books);
	                } catch(reason) {
	                  failure(reason);
	                }
	              }
	            });
	          } catch(error) {
	            failure(err);
	          }
	          // success
	        }
	      });
	      ```

	      Promise Example;

	      ```javascript
	      findAuthor().
	        then(findBooksByAuthor).
	        then(function(books){
	          // found books
	      }).catch(function(reason){
	        // something went wrong
	      });
	      ```

	      @method then
	      @param {Function} onFulfilled
	      @param {Function} onRejected
	      Useful for tooling.
	      @return {Promise}
	    */
	      then: function(onFulfillment, onRejection) {
	        var parent = this;
	        var state = parent._state;

	        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
	          return this;
	        }

	        var child = new this.constructor(lib$es6$promise$$internal$$noop);
	        var result = parent._result;

	        if (state) {
	          var callback = arguments[state - 1];
	          lib$es6$promise$asap$$asap(function(){
	            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
	          });
	        } else {
	          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
	        }

	        return child;
	      },

	    /**
	      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	      as the catch block of a try/catch statement.

	      ```js
	      function findAuthor(){
	        throw new Error('couldn't find that author');
	      }

	      // synchronous
	      try {
	        findAuthor();
	      } catch(reason) {
	        // something went wrong
	      }

	      // async with promises
	      findAuthor().catch(function(reason){
	        // something went wrong
	      });
	      ```

	      @method catch
	      @param {Function} onRejection
	      Useful for tooling.
	      @return {Promise}
	    */
	      'catch': function(onRejection) {
	        return this.then(null, onRejection);
	      }
	    };
	    function lib$es6$promise$polyfill$$polyfill() {
	      var local;

	      if (typeof global !== 'undefined') {
	          local = global;
	      } else if (typeof self !== 'undefined') {
	          local = self;
	      } else {
	          try {
	              local = Function('return this')();
	          } catch (e) {
	              throw new Error('polyfill failed because global object is unavailable in this environment');
	          }
	      }

	      var P = local.Promise;

	      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
	        return;
	      }

	      local.Promise = lib$es6$promise$promise$$default;
	    }
	    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

	    var lib$es6$promise$umd$$ES6Promise = {
	      'Promise': lib$es6$promise$promise$$default,
	      'polyfill': lib$es6$promise$polyfill$$default
	    };

	    /* global define:true module:true window: true */
	    if ("function" === 'function' && __webpack_require__(65)['amd']) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return lib$es6$promise$umd$$ES6Promise; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module !== 'undefined' && module['exports']) {
	      module['exports'] = lib$es6$promise$umd$$ES6Promise;
	    } else if (typeof this !== 'undefined') {
	      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
	    }

	    lib$es6$promise$polyfill$$default();
	}).call(this);


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62), (function() { return this; }()), __webpack_require__(63)(module)))

/***/ },
/* 62 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 63 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 64 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 65 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 66 */
/***/ function(module, exports) {

	var Ruby,
	  hasProp = {}.hasOwnProperty;

	module.exports = Ruby = (function() {
	  function Ruby() {}

	  Ruby.rubyTrue = function(a) {
	    return a !== void 0 && a !== null && a !== false;
	  };

	  Ruby.rubyFalse = function(a) {
	    return a === void 0 || a === null || a === false;
	  };

	  Ruby.rubyOr = function(a, b) {
	    if (a != null) {
	      return a;
	    } else {
	      return b;
	    }
	  };

	  Ruby.rubyAnd = function(a, b) {
	    if (a != null) {
	      return b;
	    } else {
	      return a;
	    }
	  };

	  Ruby.reopenInstanceProps = function(klass, instanceProps) {
	    var k, results, v;
	    results = [];
	    for (k in instanceProps) {
	      if (!hasProp.call(instanceProps, k)) continue;
	      v = instanceProps[k];
	      results.push(klass.prototype[k] = v);
	    }
	    return results;
	  };

	  Ruby.reopenClassProps = function(klass, classProps) {
	    var k, results, v;
	    results = [];
	    for (k in classProps) {
	      if (!hasProp.call(classProps, k)) continue;
	      v = classProps[k];
	      results.push(klass[k] = v);
	    }
	    return results;
	  };

	  return Ruby;

	})();


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var Time, base, commaize, dateSecondMinusPerformanceSecond, initDateSecond, initPerformanceSecond, log;

	log = __webpack_require__(16).log;

	commaize = __webpack_require__(24).commaize;

	self.performance || (self.performance = {});

	(base = self.performance).now || (base.now = self.performance.mozNow || self.performance.msNow || self.performance.oNow || self.performance.webkitNow || function() {
	  return new Date().getTime();
	});

	initPerformanceSecond = self.performance.now() / 1000;

	initDateSecond = new Date().getTime() / 1000;

	dateSecondMinusPerformanceSecond = initDateSecond - initPerformanceSecond;

	module.exports = Time = (function() {
	  var currentSecond, multiples, timerStack;

	  function Time() {}

	  multiples = [["mo", 30 * 24 * 60 * 60], ["d", 24 * 60 * 60], ["h", 60 * 60], ["m", 60], ["s", 1], ["ms", .001], ["μs", .000001], ["ns", .000000001]];

	  Time.dateSecondToPerformanceSecond = function(dateSecond) {
	    return dateSecond - dateSecondMinusPerformanceSecond;
	  };

	  Time.performanceSecondToDateSecond = function(performanceSecond) {
	    return performanceSecond + dateSecondMinusPerformanceSecond;
	  };

	  Time.timeStampToPerformanceSecond = function(htmlEventTimeStamp) {
	    return htmlEventTimeStamp / 1000 - dateSecondMinusPerformanceSecond;
	  };

	  Time.durationString = function(seconds) {
	    var i, len, multiplier, name, ref;
	    for (i = 0, len = multiples.length; i < len; i++) {
	      ref = multiples[i], name = ref[0], multiplier = ref[1];
	      if (seconds >= multiplier) {
	        return "" + ((seconds / multiplier) | 0) + name;
	      }
	    }
	    return "0";
	  };

	  Time.dateAgeInSeconds = function(date) {
	    return ((new Date) - date) * .001;
	  };

	  Time.dateToSeconds = function(date) {
	    return post.getTime() * .001;
	  };

	  Time.perTimeString = function(secondsPerRun) {
	    var perTime;
	    perTime = 1 / secondsPerRun;
	    if (perTime > 100) {
	      return (commaize(perTime | 0)) + "/s";
	    } else if (perTime * 60 > 100) {
	      return (commaize(perTime * 60 | 0)) + "/m";
	    } else {
	      return (commaize(perTime * 3600 | 0)) + "/h";
	    }
	  };

	  Time.currentMillisecond = function() {
	    return self.performance.now();
	  };

	  Time.currentSecond = currentSecond = function() {
	    return self.performance.now() / 1000;
	  };

	  Time.currentDateSecond = function() {
	    return new Date().getTime() / 1000;
	  };

	  Time.time = function(a, b) {
	    var f, fResult, start, timeResult;
	    f = b || a;
	    start = currentSecond();
	    fResult = f();
	    timeResult = currentSecond() - start;
	    if (b) {
	      log("time: " + a + " took " + (Time.durationString(timeResult)));
	      return fResult;
	    } else {
	      return timeResult;
	    }
	  };

	  timerStack = [];

	  Time.stackTime = function(f) {
	    var start, subTimeTotal, timeResult, tsl;
	    start = currentSecond();
	    timerStack.push(0);
	    f();
	    subTimeTotal = timerStack.pop();
	    timeResult = currentSecond() - start;
	    if ((tsl = timerStack.length) > 0) {
	      timerStack[tsl - 1] += timeResult;
	    }
	    return {
	      count: 1,
	      total: timeResult,
	      subTimeTotal: subTimeTotal,
	      remainder: timeResult - subTimeTotal
	    };
	  };

	  Time.logTimeSinceLast = function(a) {
	    var time;
	    time = Time.currentSecond();
	    log(a + " (" + (Time.lastTime ? Time.durationString(time - Time.lastTime) : void 0) + ")");
	    return Time.lastTime = time;
	  };

	  return Time;

	})();


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var WebWorker, log;

	log = __webpack_require__(16).log;


	/*
	SRC:
	  http://jsfiddle.net/uqcFM/49/
	  http://stackoverflow.com/a/10372280/2121000
	 */

	module.exports = WebWorker = (function() {
	  var startWorkerFromJsString;

	  function WebWorker() {}

	  WebWorker.echoWebWorker = "self.onmessage=function(e){postMessage('Worker: '+e.data);}";

	  WebWorker.isBrowser = !!(self.window && self.navigator && self.document);

	  WebWorker.isWebWorker = !WebWorker.isBrowser && self.importScripts;

	  WebWorker.startWorkerFromJsString = startWorkerFromJsString = function(workerSource) {
	    return new Worker(URL.createObjectURL(new Blob([workerSource], {
	      type: 'application/javascript'
	    })));
	  };

	  WebWorker.startWorkerFromFunction = function(workerFunction) {
	    return startWorkerFromJsString("(" + workerFunction + ")();");
	  };

	  return WebWorker;

	})();


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	var Analytics, BaseObject, inspectLean,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(18);

	inspectLean = __webpack_require__(31).inspectLean;

	Analytics = (function(superClass) {
	  extend(Analytics, superClass);

	  function Analytics() {
	    return Analytics.__super__.constructor.apply(this, arguments);
	  }

	  Analytics.defaultCategory = "Foundation.Analytics";

	  Analytics.event = function(options) {
	    var action, category, label, noninteraction, value;
	    if (options == null) {
	      options = {};
	    }
	    category = options.category || this.defaultCategory;
	    action = options.action;
	    label = options.label;
	    value = options.value;
	    noninteraction = !!options.noninteraction;
	    if (self._gaq) {
	      self._gaq.push(['_trackEvent', category, action, label, value, noninteraction]);
	      return this.rawLog("ANALYTICS-EVENT: " + (inspectLean(options)));
	    } else {
	      return this.rawLog("(no)ANALYTICS-EVENT: " + (inspectLean(options)));
	    }
	  };

	  return Analytics;

	})(BaseObject);


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var BaseModule, log, mergeInto;

	log = __webpack_require__(16).log;

	mergeInto = __webpack_require__(58).mergeInto;


	/*
	TODO:
	  BaseModule should be with BaseObject
	  BaseObject should be renamed BaseClass

	  Some of BaseObject's code should be shared with BaseModule via a common extended parent class.
	    - getPrototypePropertyExtendedByInheritance

	  BaseObject should maintain a list of all included modules:
	    - should prevent including a module twice
	    - should call each module's constructor from BaseObject's constructor
	    -
	 */

	module.exports = BaseModule = (function() {
	  function BaseModule() {}


	  /*
	  TODO: @_getters should work with inheritance. Right now, an inheriting class's @getter
	  declarations will add to the top-mose inheriting from class with getters!
	   */

	  BaseModule.getter = function(getters) {
	    return this._getters = mergeInto(this._getters, getters);
	  };

	  BaseModule.setter = function(setters) {
	    return this._setters = mergeInto(this._setters, setters);
	  };


	  /*
	  this/@: the module
	  IN:
	    includedInto: the BaseObject-extending-class this module was included into
	   */

	  BaseModule.included = function(includedInto) {
	    if (this._getters) {
	      includedInto.getter(this._getters);
	    }
	    if (this._setters) {
	      return includedInto.setter(this._setters);
	    }
	  };

	  return BaseModule;

	})();


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, BatchLoader, inspect, log, nextTick, ref, timeout,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(18);

	log = __webpack_require__(16).log;

	inspect = __webpack_require__(31).inspect;

	ref = __webpack_require__(12), nextTick = ref.nextTick, timeout = ref.timeout;

	module.exports = BatchLoader = (function(superClass) {
	  extend(BatchLoader, superClass);

	  function BatchLoader(loadFunction) {
	    this.assets = {};
	    this.loadingAssets = {};
	    this.loadFunction = loadFunction;
	  }

	  BatchLoader.prototype.load = function(sources, onLoad) {
	    if (typeof sources === "string") {
	      sources = [sources];
	    }
	    return this.loadAssets(sources, onLoad);
	  };

	  BatchLoader.prototype.addAsset = function(source, asset) {
	    var base;
	    if (asset == null) {
	      throw new Error("not a valid asset: " + (inspect(asset)));
	    }
	    delete this.loadingAssets[source];
	    (base = this.assets)[source] || (base[source] = asset);
	    return this.notifyListeners();
	  };

	  BatchLoader.getter({
	    blankInfo: function() {
	      return {
	        loadedFromCache: 0,
	        loadedAsynchronously: 0,
	        alreadyLoadingAsynchronously: 0
	      };
	    }
	  });

	  BatchLoader.prototype.loadAssets = function(sources, onLoad) {
	    var info;
	    info = this.blankInfo;
	    sources.forEach((function(_this) {
	      return function(src) {
	        if (_this.assets[src] != null) {
	          return info.loadedFromCache++;
	        } else if (_this.loadingAssets[src]) {
	          info.loadedAsynchronously++;
	          return info.alreadyLoadingAsynchronously++;
	        } else {
	          info.loadedAsynchronously++;
	          _this.loadingAssets[src] = true;
	          return _this.loadFunction(src, function(src, asset) {
	            return _this.addAsset(src, asset);
	          });
	        }
	      };
	    })(this));
	    this.addLoaderListener(sources, onLoad, info);
	    return nextTick((function(_this) {
	      return function() {
	        return _this.notifyListeners();
	      };
	    })(this));
	  };

	  BatchLoader.prototype.addLoaderListener = function(sources, onLoad, info) {
	    this.loadingListeners || (this.loadingListeners = []);
	    return this.loadingListeners.push({
	      sources: sources,
	      onLoad: onLoad,
	      info: info
	    });
	  };

	  BatchLoader.prototype.notifyListeners = function() {
	    var allLoaded, i, j, len, len1, listener, oldloadingListeners, ref1, source;
	    if (!this.loadingListeners) {
	      return;
	    }
	    oldloadingListeners = this.loadingListeners;
	    this.loadingListeners = [];
	    for (i = 0, len = oldloadingListeners.length; i < len; i++) {
	      listener = oldloadingListeners[i];
	      allLoaded = true;
	      ref1 = listener.sources;
	      for (j = 0, len1 = ref1.length; j < len1; j++) {
	        source = ref1[j];
	        if (!this.assets[source]) {
	          allLoaded = false;
	        }
	      }
	      if (allLoaded) {
	        listener.onLoad(this.assets, listener.sources, listener.info);
	      } else {
	        this.loadingListeners.push(listener);
	      }
	    }
	    return this.loadingListeners;
	  };

	  return BatchLoader;

	})(BaseObject);


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var Async, BaseObject, Epoch, Foundation, Inspect, Promise, evalAndThrowErrorsOutOfStack, inspect, requestAnimationFrame,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	Foundation = __webpack_require__(10);

	BaseObject = __webpack_require__(18);

	Async = __webpack_require__(12);

	Inspect = __webpack_require__(31);

	Promise = __webpack_require__(60);

	requestAnimationFrame = Async.requestAnimationFrame, evalAndThrowErrorsOutOfStack = Async.evalAndThrowErrorsOutOfStack;

	inspect = Inspect.inspect;

	module.exports = Epoch = (function(superClass) {
	  extend(Epoch, superClass);

	  function Epoch(options) {
	    if (options == null) {
	      options = {};
	    }
	    Epoch.__super__.constructor.apply(this, arguments);
	    this._emptyQueueAfterProcessing = !!options.emptyQueueAfterProcessing;
	    this._queuedItems = [];
	    this._nextReadyQueue = [];
	    this._epochQueued = false;
	    this._processingEpoch = false;
	    this._epochCount = 0;
	  }

	  Epoch.propGetter("processingEpoch", "epochQueued", "epochCount", "emptyQueueAfterProcessing");

	  Epoch.getter({
	    epochLength: function() {
	      return this._queuedItems.length + this._nextReadyQueue.length;
	    }
	  });

	  Epoch.prototype.updateGlobalCounts = function() {
	    Foundation.globalCount(this["class"].name + "_queuedItems", this._queuedItems.length);
	    return Foundation.globalCount(this["class"].name + "_nextReadyQueue", this._nextReadyQueue.length);
	  };

	  Epoch.prototype.onNextReady = function(f) {
	    if (f) {
	      if (typeof f !== "function") {
	        throw new Error("not a function: " + (inspect(f)));
	      }
	      if (!this._processingEpoch) {
	        this.queueNextEpoch();
	      }
	      return this._nextReadyQueue.push(f);
	    } else {
	      return new Promise((function(_this) {
	        return function(resolve) {
	          return _this._nextReadyQueue.push(function() {
	            return resolve();
	          });
	        };
	      })(this));
	    }
	  };

	  Epoch.prototype._ready = function() {
	    var f, i, len, nrq, results;
	    if (!((nrq = this._nextReadyQueue).length > 0)) {
	      return;
	    }
	    this._nextReadyQueue = [];
	    results = [];
	    for (i = 0, len = nrq.length; i < len; i++) {
	      f = nrq[i];
	      results.push(evalAndThrowErrorsOutOfStack((function(_this) {
	        return function() {
	          return f();
	        };
	      })(this)));
	    }
	    return results;
	  };

	  Epoch.prototype.queueItem = function(item) {
	    if (item) {
	      this._queuedItems.push(item);
	      this.queueNextEpoch();
	    }
	    return item;
	  };

	  Epoch.prototype.isItemQueued = function(item) {
	    return indexOf.call(this._queuedItems, item) >= 0;
	  };

	  Epoch.prototype.queueNextEpoch = function() {
	    if (!this._epochQueued) {
	      this._epochQueued = true;
	      return requestAnimationFrame((function(_this) {
	        return function() {
	          _this._epochQueued = false;
	          return _this.processEpoch();
	        };
	      })(this));
	    }
	  };

	  Epoch.prototype.flushEpochNow = function() {
	    return this.processEpoch();
	  };

	  Epoch.prototype.processEpoch = function() {
	    var items;
	    this._processingEpoch = true;
	    items = this._queuedItems;
	    if (this._emptyQueueAfterProcessing) {
	      this.processEpochItemsWithErrorHandling(items);
	      this._queuedItems = [];
	    } else {
	      this._queuedItems = [];
	      this.processEpochItemsWithErrorHandling(items);
	    }
	    this._processingEpoch = false;
	    this._epochCount++;
	    return this._ready();
	  };

	  Epoch.prototype.processEpochItemsWithErrorHandling = function(items) {
	    return evalAndThrowErrorsOutOfStack((function(_this) {
	      return function() {
	        return _this.processEpochItems(items);
	      };
	    })(this));
	  };

	  Epoch.prototype.processEpochItems = function(items) {
	    var i, item, len, results;
	    results = [];
	    for (i = 0, len = items.length; i < len; i++) {
	      item = items[i];
	      results.push(item());
	    }
	    return results;
	  };

	  return Epoch;

	})(BaseObject);


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, JsonStore,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(18);

	module.exports = JsonStore = (function(superClass) {
	  extend(JsonStore, superClass);

	  function JsonStore(store) {
	    if (store == null) {
	      store = localStorage;
	    }
	    this.store = store;
	  }

	  JsonStore.prototype.setItem = function(k, v) {
	    return this.store.setItem(k, JSON.stringify(v));
	  };

	  JsonStore.prototype.getItem = function(k) {
	    return JSON.parse(this.store.getItem(k));
	  };

	  JsonStore.prototype.removeItem = function(k) {
	    return this.store.removeItem(k);
	  };

	  JsonStore.prototype.clear = function() {
	    return this.store.clear();
	  };

	  JsonStore.prototype.key = function(k) {
	    return this.store.key(k);
	  };

	  JsonStore.getter({
	    length: function() {
	      return this.store.length;
	    }
	  });

	  return JsonStore;

	})(BaseObject);


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var EventStackNode, SequencedEventManager, nextTick, rawLog;

	rawLog = __webpack_require__(16).rawLog;

	nextTick = __webpack_require__(12).nextTick;

	console.log("SequencedEventManager is depricated.");

	EventStackNode = (function() {
	  function EventStackNode(eventFunction, options, parent) {
	    this["catch"] = options != null ? options["catch"] : void 0;
	    this.parent = parent;
	    this.eventFunction = eventFunction;
	    this.nextSubNode = null;
	    this.lastSubNode = null;
	    this.nextPeer = null;
	    this.done = false;
	    this.started = false;
	  }

	  EventStackNode.prototype.addSubNode = function(node) {
	    node.parent = this;
	    if (!this.lastSubNode) {
	      return this.lastSubNode = this.nextSubNode = node;
	    } else {
	      this.lastSubNode.nextPeer = node;
	      return this.lastSubNode = node;
	    }
	  };

	  EventStackNode.prototype.queue = function(eventFunction, options) {
	    return this.addSubNode(new EventStackNode(eventFunction, options));
	  };

	  EventStackNode.prototype.evaluateFunction = function() {
	    var error, error1;
	    try {
	      SequencedEventManager.currentNode = this;
	      return this.eventFunction();
	    } catch (error1) {
	      error = error1;
	      return SequencedEventManager["throw"](error);
	    }
	  };

	  EventStackNode.prototype.topmostParent = function() {
	    var parent;
	    parent = this;
	    while (parent.parent) {
	      parent = parent.parent;
	    }
	    return parent;
	  };

	  EventStackNode.prototype.notDoneParent = function() {
	    var parent;
	    parent = this.parent;
	    while (parent && parent.done) {
	      parent = parent.parent;
	    }
	    return parent;
	  };

	  EventStackNode.prototype.unstartedSelfOrChild = function() {
	    var result;
	    if (!this.started) {
	      return this;
	    }
	    if (this.done) {
	      return null;
	    }
	    while (this.nextSubNode && !(result = this.nextSubNode.unstartedSelfOrChild())) {
	      this.nextSubNode = this.nextSubNode.nextPeer;
	    }
	    if (result) {
	      return result;
	    } else {
	      this.done = true;
	      return null;
	    }
	  };

	  EventStackNode.prototype.unstartedParentOrChild = function() {
	    var notDoneParent, result;
	    result = null;
	    while (!result && (notDoneParent = this.notDoneParent())) {
	      result = notDoneParent.unstartedSelfOrChild();
	    }
	    return result;
	  };

	  EventStackNode.prototype.nextUnstartedNode = function() {
	    return this.unstartedSelfOrChild() || this.unstartedParentOrChild();
	  };

	  EventStackNode.prototype.next = function() {
	    var ref;
	    return (ref = this.nextUnstartedNode()) != null ? ref.start() : void 0;
	  };

	  EventStackNode.prototype.start = function() {
	    this.started = true;
	    this.done = false;
	    this.evaluateFunction();
	    return true;
	  };

	  EventStackNode.prototype.inspectStructure = function() {
	    var node, result;
	    result = !this.eventFunction ? "" : this.done ? "d" : this.started ? "s" : "p";
	    if (this.nextSubNode) {
	      node = this.nextSubNode;
	      result += "(" + (node.inspectStructure());
	      while (node = node.nextPeer) {
	        result += ", " + (node.inspectStructure());
	      }
	      return result + ")";
	    } else {
	      return result;
	    }
	  };

	  return EventStackNode;

	})();

	module.exports = SequencedEventManager = (function() {
	  function SequencedEventManager() {}

	  SequencedEventManager.currentNode = null;

	  SequencedEventManager.resetIds = function() {
	    return EventStackNode.resetIds();
	  };

	  SequencedEventManager.queue = function(eventFunction, options) {
	    if (options == null) {
	      options = {};
	    }
	    this.scheduleNextTick();
	    if (!this.currentNode) {
	      this.currentNode = new EventStackNode;
	      this.currentNode.started = true;
	    }
	    return this.currentNode.queue(eventFunction, options);
	  };

	  SequencedEventManager.inspectStructure = function() {
	    return this.currentNode && this.currentNode.topmostParent().inspectStructure();
	  };


	  /*
	  User should not call methods below directly
	  private:
	   */

	  SequencedEventManager["throw"] = function(error) {
	    while (this.currentNode) {
	      if (this.currentNode["catch"]) {
	        this.currentNode.done = true;
	        this.currentNode["catch"](error);
	        return;
	      } else {
	        this.currentNode = this.currentNode.parent;
	      }
	    }
	    rawLog("SequencedEventManager. Uncaught exception: " + error.name);
	    rawLog(error);
	    throw error;
	  };

	  SequencedEventManager.next = function() {
	    var ref;
	    while ((ref = this.currentNode) != null ? ref.done : void 0) {
	      this.currentNode = this.currentNode.parent;
	    }
	    if (this.currentNode) {
	      return this.currentNode.next();
	    } else {
	      this.rootNode = this.currentNode = null;
	      rawLog("SequencedEventManager.next: everything is already done!");
	      return false;
	    }
	  };

	  SequencedEventManager.scheduleNextTick = function() {
	    if (!this.nextTickScheduled) {
	      this.nextTickScheduled = true;
	      return nextTick((function(_this) {
	        return function() {
	          var ref;
	          _this.nextTickScheduled = false;
	          _this.next();
	          if ((ref = _this.currentNode) != null ? ref.nextUnstartedNode() : void 0) {
	            return _this.scheduleNextTick();
	          } else {
	            return _this.currentNode = null;
	          }
	        };
	      })(this));
	    }
	  };

	  return SequencedEventManager;

	})();


	/*
	each time we execute a user eventFunction, we push an item onto the stack
	each time we finish a eventFunction we execute the next eventFunction - which is always the next eventFunction of the most recent stack-node
	we only pop stack nodes when all eventFunctions have been executed
	 */


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Map, SingleObjectTransaction, cloneByStructure, eq, inspect, removeFirstMatch, rubyTrue,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	BaseObject = __webpack_require__(18);

	Map = __webpack_require__(40);

	removeFirstMatch = __webpack_require__(55).removeFirstMatch;

	rubyTrue = __webpack_require__(66).rubyTrue;

	eq = __webpack_require__(57).eq;

	inspect = __webpack_require__(31).inspect;

	cloneByStructure = __webpack_require__(56).cloneByStructure;

	module.exports = SingleObjectTransaction = (function(superClass) {
	  var setValues;

	  extend(SingleObjectTransaction, superClass);

	  function SingleObjectTransaction(a) {
	    var options;
	    SingleObjectTransaction.__super__.constructor.apply(this, arguments);
	    this.object = (function() {
	      if (a.constructor === Array) {
	        if (a.length !== 2) {
	          throw new Error("new SingleObjectTransaction: expected length-2 array like: [obj, optionsMap]");
	        }
	        this.options = a[1];
	        return a[0];
	      } else {
	        this.options = {};
	        return a;
	      }
	    }).call(this);
	    if (this.object == null) {
	      throw new Error("object must not be null or undefined");
	    }
	    this.props = [];
	    this.from = {};
	    options = this.options;
	    if (options.properties) {
	      this.addProperties(options.properties);
	    }
	    if (options.property) {
	      this.addProp(options.property);
	    }
	    if (options.from) {
	      this.addFromValues(options.from);
	    }
	    if (options.to) {
	      this.addToValues(options.to);
	    }
	  }

	  SingleObjectTransaction.prototype.toString = function() {
	    return (inspect(this.object, 0)) + " from:" + (inspect(this.from, 1)) + " to:" + (inspect(this.to, 1));
	  };

	  SingleObjectTransaction.prototype.inspect = function(inspector) {
	    var i, k, len, ref, results;
	    inspector.put(this.object.classPathName + ":");
	    ref = this.props;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      k = ref[i];
	      inspector.put("\n    " + k + ": ");
	      if (rubyTrue(this.from && this.from[k])) {
	        inspector.inspect(this.from[k], 1);
	      }
	      inspector.put(" ... ");
	      if (rubyTrue(this.to && this.to[k])) {
	        results.push(inspector.inspect(this.to[k], 1));
	      } else {
	        results.push(void 0);
	      }
	    }
	    return results;
	  };

	  SingleObjectTransaction.getter({
	    properties: function() {
	      return this.props;
	    },
	    hasToValues: function() {
	      return !!this.to;
	    },
	    valuesChanged: function() {
	      var fromValue, k, ref, toValue;
	      ref = this.from;
	      for (k in ref) {
	        fromValue = ref[k];
	        toValue = this.to[k];
	        if (!eq(fromValue, toValue)) {
	          return true;
	        }
	      }
	      return false;
	    }
	  });

	  SingleObjectTransaction.prototype.addFromValues = function(from) {
	    var base, k, v;
	    for (k in from) {
	      v = from[k];
	      this.addProp(k);
	      this.from[k] = v;
	    }
	    return typeof (base = this.object).preprocessProperties === "function" ? base.preprocessProperties(this.from) : void 0;
	  };

	  SingleObjectTransaction.prototype.addToValues = function(to) {
	    var base, k, v;
	    this.to || (this.to = {});
	    for (k in to) {
	      v = to[k];
	      this.addProp(k);
	      this.to[k] = v;
	    }
	    return typeof (base = this.object).preprocessProperties === "function" ? base.preprocessProperties(this.to) : void 0;
	  };

	  SingleObjectTransaction.prototype.addProperties = function(props) {
	    var i, len, prop, results, results1, v;
	    if (props.constructor === Array) {
	      results = [];
	      for (i = 0, len = props.length; i < len; i++) {
	        prop = props[i];
	        results.push(this.addProp(prop));
	      }
	      return results;
	    } else {
	      results1 = [];
	      for (prop in props) {
	        v = props[prop];
	        results1.push(this.addProp(prop));
	      }
	      return results1;
	    }
	  };

	  SingleObjectTransaction.prototype.addProp = function(propName) {
	    if (indexOf.call(this.props, propName) < 0) {
	      return this.props.push(propName);
	    }
	  };

	  SingleObjectTransaction.prototype.deleteProp = function(propName) {
	    removeFirstMatch(this.props, propName);
	    delete this.from[propName];
	    return delete this.to[propName];
	  };

	  SingleObjectTransaction.prototype.saveValues = function(saveTo) {
	    var getterName, i, len, metaProperties, prop, ref, ref1, value;
	    this.clearOptimizations();
	    metaProperties = this.object.metaProperties;
	    ref = this.props;
	    for (i = 0, len = ref.length; i < len; i++) {
	      prop = ref[i];
	      if (!saveTo.hasOwnProperty(prop)) {
	        value = saveTo[prop] = cloneByStructure((getterName = metaProperties != null ? (ref1 = metaProperties[prop]) != null ? ref1.getterName : void 0 : void 0) ? this.object[getterName]() : this.object[prop]);
	      }
	    }
	    return null;
	  };

	  SingleObjectTransaction.prototype.saveFromValues = function() {
	    return this.saveValues(this.from || (this.from = {}));
	  };

	  SingleObjectTransaction.prototype.saveToValues = function() {
	    return this.saveValues(this.to || (this.to = {}));
	  };

	  SingleObjectTransaction._setValues = setValues = function(o, values, f) {
	    var metaProperties, prop, ref, setterName, v;
	    metaProperties = o.metaProperties;
	    for (prop in values) {
	      v = values[prop];
	      if (f) {
	        v = f(prop, v);
	      }
	      if (setterName = metaProperties != null ? (ref = metaProperties[prop]) != null ? ref.setterName : void 0 : void 0) {
	        o[setterName](v);
	      } else {
	        o[prop] = v;
	      }
	    }
	    return null;
	  };

	  SingleObjectTransaction.prototype.rollBack = function() {
	    return setValues(this.object, this.from);
	  };

	  SingleObjectTransaction.prototype.rollForward = function() {
	    return setValues(this.object, this.to);
	  };

	  SingleObjectTransaction.prototype.clearOptimizations = function() {
	    return this.numberDeltas = this.interpolateToObjects = null;
	  };

	  SingleObjectTransaction.prototype.optimizeInterpolation = function() {
	    var field, from, ref, results, to;
	    this.numberDeltas = {};
	    this.interpolateToObjects = {};
	    this.nonInterpolatingFields = {
	      to: {},
	      from: {}
	    };
	    ref = this.from;
	    results = [];
	    for (field in ref) {
	      from = ref[field];
	      to = this.to[field];
	      if (typeof from === "number") {
	        results.push(this.numberDeltas[field] = to - from);
	      } else if (typeof (from != null ? from.interpolate : void 0) === "function") {
	        results.push(this.interpolateToObjects[field] = to);
	      } else {
	        this.nonInterpolatingFields.from[field] = from;
	        results.push(this.nonInterpolatingFields.to[field] = to);
	      }
	    }
	    return results;
	  };

	  SingleObjectTransaction.prototype.interpolateNumberFields = function(p) {
	    return setValues(this.object, this.numberDeltas, (function(_this) {
	      return function(field, delta) {
	        return _this.from[field] + delta * p;
	      };
	    })(this));
	  };

	  SingleObjectTransaction.prototype.interpolateObjectFields = function(p) {
	    var e, error;
	    try {
	      return setValues(this.object, this.interpolateToObjects, (function(_this) {
	        return function(field, toObject) {
	          return _this.from[field].interpolate(toObject, p);
	        };
	      })(this));
	    } catch (error) {
	      e = error;
	      this.log("Art.Foundation.Transaction#interpolateObjectFields(p=" + p + "): error " + e + " deltas: " + (inspect(this.interpolateToObjects)) + " from:   " + (inspect(this.from)) + " to:     " + (inspect(this.to)));
	      throw e;
	    }
	  };

	  SingleObjectTransaction.prototype.setNonInterpolatingFields = function(p) {
	    return setValues(this.object, this.nonInterpolatingFields[p >= 1 ? "to" : "from"]);
	  };

	  SingleObjectTransaction.prototype.interpolate = function(p) {
	    if (!this.numberDeltas) {
	      this.optimizeInterpolation();
	    }
	    this.interpolateNumberFields(p);
	    this.interpolateObjectFields(p);
	    return this.setNonInterpolatingFields(p);
	  };

	  SingleObjectTransaction.getter({
	    noChanges: function() {
	      return this.props.length === 0;
	    }
	  });

	  SingleObjectTransaction.prototype.optimizeProperties = function() {
	    var i, len, prop, ref, results;
	    this.clearOptimizations();
	    ref = this.props;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      prop = ref[i];
	      if (!this.from.hasOwnProperty(prop) || !this.to.hasOwnProperty(prop) || eq(this.from[prop], this.to[prop])) {
	        results.push(this.deleteProp(prop));
	      } else {
	        results.push(void 0);
	      }
	    }
	    return results;
	  };

	  return SingleObjectTransaction;

	})(BaseObject);


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Stat, inspect, max, min, ref, round,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(24), min = ref.min, max = ref.max, round = ref.round;

	BaseObject = __webpack_require__(18);

	inspect = __webpack_require__(31).inspect;

	module.exports = Stat = (function(superClass) {
	  extend(Stat, superClass);

	  function Stat() {
	    this.reset();
	  }

	  Stat.prototype.reset = function() {
	    this.values = [];
	    this.sum = 0;
	    return this.max = this.min = null;
	  };

	  Stat.getter({
	    length: function() {
	      return this.values.length;
	    },
	    average: function() {
	      return this.sum / this.values.length;
	    },
	    median: function() {
	      return this.values.slice().sort()[this.length / 2 | 0];
	    }
	  });

	  Stat.prototype.percential = function(zeroToOneHundred) {
	    var i, sorted;
	    i = ((this.length - 1) * zeroToOneHundred / 100) | 0;
	    sorted = this.values.slice().sort(function(v1, v2) {
	      return v2 - v1;
	    });
	    return sorted[i];
	  };

	  Stat.prototype.histogram = function(divisions, min, max) {
	    var bin, delta, hist, j, k, len, mul, ref1, ref2, v;
	    if (min == null) {
	      min = this.min;
	    }
	    if (max == null) {
	      max = this.max;
	    }
	    delta = max - min;
	    mul = divisions / delta;
	    hist = {};
	    for (v = j = 0, ref1 = divisions; j < ref1; v = j += 1) {
	      hist[min + v / mul] = 0;
	    }
	    ref2 = this.values;
	    for (k = 0, len = ref2.length; k < len; k++) {
	      v = ref2[k];
	      bin = (v - min) * mul | 0;
	      if (bin < 0) {
	        bin = 0;
	      }
	      if (bin >= divisions) {
	        bin = divisions - 1;
	      }
	      hist[min + bin / mul]++;
	    }
	    return hist;
	  };

	  Stat.prototype.toString = function() {
	    return inspect({
	      length: this.length,
	      average: this.average,
	      median: this.median,
	      min: this.min,
	      max: this.max
	    });
	  };

	  Stat.prototype.toInfoMap = function() {
	    return {
	      length: this.length,
	      average: this.average,
	      median: this.median,
	      min: this.min,
	      max: this.max,
	      p90: this.percential(90),
	      p95: this.percential(95),
	      p99: this.percential(99)
	    };
	  };

	  Stat.prototype.toIntInfoMap = function() {
	    return {
	      length: this.length,
	      average: round(this.average),
	      median: round(this.median),
	      min: round(this.min),
	      max: round(this.max),
	      p90: round(this.percential(90)),
	      p95: round(this.percential(95)),
	      p99: round(this.percential(99))
	    };
	  };

	  Stat.prototype.toIntString = function() {
	    return inspect(this.toIntInfoMap());
	  };

	  Stat.prototype.add = function(v) {
	    this.values.push(v);
	    this.sum += v;
	    if (this.values.length === 1) {
	      return this.max = this.min = v;
	    } else {
	      this.max = max(this.max, v);
	      return this.min = min(this.min, v);
	    }
	  };

	  return Stat;

	})(BaseObject);


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	
	/*
	Transaction provides a manual, yet easy way to log the before and after values
	of fields over many objects.

	It is "manual" in that you must:

	  Pre-specify all objects you wish to track.
	  Specify the properties you wish to track for all objects and/or uniquely for each object.
	  Pass in the "from" values or call saveFromValues
	  Pass in the "to" values or call saveToValues

	Once you have capture the "from" and "to" values of the transaction, you can:

	  rollBack and set all properties to their "from" values
	  rollForward and set all properties to their "to" values
	  interpolate(p) and set all properties to their linearly interpolated value
	    between their saved "from" (p=0) and "to" (p=1) values.
	    If you use interpolate:
	      to/from values should be pair-wise the same type
	      only to/from values of the following types will be interpolated:
	        numbers
	        objects implementing: a.add(b), a.sub(b) and a.mul(number)
	      Non-interpolatable types are handled as follows:
	        switch p
	          when 0 then set to "from" values
	          when 1 then set to "to" values
	          else left unchanged

	Example initializers:

	   * example-a: track obj's "foo" and "bar" properties
	  new Transaction obj, properties: ["foo", "bar"]

	   * same as example-a, but also initialize obj's from-values as obj.foo=1 and obj.bar=2
	  new Transaction obj, from: foo:1, bar:2

	   * same as example-a, but also initialize obj's to-values as obj.foo=1 and obj.bar=2
	  new Transaction obj, to: foo:1, bar:2

	   * track obj1 and obj2's "foo" and "bar" properties
	  new Transaction [obj1, obj2], properties: ["foo", "bar"]

	   * track:
	   *   obj1's foo, bar, noo and mar properties, with both from and to values initialized
	   *   obj2's goo, har, noo and mar properties, with both from and to values initialized
	  new Transaction [
	      [obj1,
	        from: foo:1, bar:2
	        to:   foo:2, bar:3
	      ],
	      [obj2,
	        from: goo:1, har:2
	        to:   goo:2, har:3
	      ]
	    ],
	    from: noo:4, mar:5
	    to:   noo:4, mar:5
	 */
	var BaseObject, Map, SingleObjectTransaction, Transaction, cloneByStructure, eq, inspect, rubyTrue,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	SingleObjectTransaction = __webpack_require__(75);

	Map = __webpack_require__(40);

	BaseObject = __webpack_require__(18);

	rubyTrue = __webpack_require__(66).rubyTrue;

	eq = __webpack_require__(57).eq;

	inspect = __webpack_require__(31).inspect;

	cloneByStructure = __webpack_require__(56).cloneByStructure;

	module.exports = Transaction = (function(superClass) {
	  extend(Transaction, superClass);

	  Transaction.SingleObjectTransaction = SingleObjectTransaction;

	  function Transaction(objects, options) {
	    if (options == null) {
	      options = {};
	    }
	    Transaction.__super__.constructor.apply(this, arguments);
	    this._objects = new Map;
	    if (objects.constructor === Array) {
	      this.addObjects(objects);
	    } else {
	      this.addObject(objects);
	    }
	    if (options.properties) {
	      this.addProperties(options.properties);
	    }
	    if (options.property) {
	      this.addProperties([options.property]);
	    }
	    if (options.from) {
	      this.addFromValues(options.from);
	    }
	    if (options.to) {
	      this.addToValues(options.to);
	    }
	    this.saveFromValues();
	  }

	  Transaction.prototype.inspect = function(inspector) {
	    inspector.put(this.classPathName + ":");
	    return this.inspectParts(inspector);
	  };

	  Transaction.prototype.inspectParts = function(inspector) {
	    return this._objects.each((function(_this) {
	      return function(k, v) {
	        inspector.put("\n  ");
	        return inspector.inspect(v);
	      };
	    })(this));
	  };

	  Transaction.getter({
	    objects: function() {
	      return this._objects.keys;
	    }
	  });

	  Transaction.prototype.properties = function(obj) {
	    return this._objects.get(obj).properties;
	  };

	  Transaction.prototype.from = function(obj) {
	    return this._objects.get(obj).from;
	  };

	  Transaction.prototype.to = function(obj) {
	    return this._objects.get(obj).to;
	  };

	  Transaction.prototype.rollBack = function() {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.rollBack();
	      };
	    })(this));
	  };

	  Transaction.prototype.rollForward = function() {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.rollForward();
	      };
	    })(this));
	  };

	  Transaction.prototype.interpolate = function(p) {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.interpolate(p);
	      };
	    })(this));
	  };

	  Transaction.prototype.optimize = function() {
	    this.optimizeProperties();
	    return this.optimizeObjects();
	  };

	  Transaction.getter({
	    hasToValues: function() {
	      var result;
	      result = false;
	      this._objects.forEach((function(_this) {
	        return function(oi) {
	          if (oi.hasToValues) {
	            return result = true;
	          }
	        };
	      })(this));
	      return result;
	    },
	    valuesChanged: function() {
	      var result;
	      result = false;
	      this._objects.forEach((function(_this) {
	        return function(object) {
	          if (object.valuesChanged) {
	            return result = true;
	          }
	        };
	      })(this));
	      return result;
	    }
	  });

	  Transaction.prototype.toString = function() {
	    return (this.className + "\n  ") + (this._objects.map(function(obj, single) {
	      return single.toString();
	    })).join("  \n");
	  };

	  Transaction.prototype.addFromValues = function(from) {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.addFromValues(from);
	      };
	    })(this));
	  };

	  Transaction.prototype.addToValues = function(to) {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.addToValues(to);
	      };
	    })(this));
	  };

	  Transaction.prototype.addProperties = function(properties) {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.addProperties(properties);
	      };
	    })(this));
	  };

	  Transaction.prototype.addObject = function(obj) {
	    var oi;
	    oi = new SingleObjectTransaction(obj);
	    return this._objects.set(oi.object, oi);
	  };

	  Transaction.prototype.addObjects = function(objects) {
	    var i, len, obj, results;
	    results = [];
	    for (i = 0, len = objects.length; i < len; i++) {
	      obj = objects[i];
	      results.push(this.addObject(obj));
	    }
	    return results;
	  };

	  Transaction.prototype.saveFromValues = function() {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.saveFromValues();
	      };
	    })(this));
	  };

	  Transaction.prototype.saveToValues = function() {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.saveToValues();
	      };
	    })(this));
	  };

	  Transaction.prototype.optimizeProperties = function() {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.optimizeProperties();
	      };
	    })(this));
	  };

	  Transaction.prototype.optimizeObjects = function() {
	    var objs;
	    objs = this._objects;
	    this._objects = new Map;
	    return objs.forEach((function(_this) {
	      return function(oi) {
	        if (!oi.noChanges) {
	          return _this._objects.set(oi.object, oi);
	        }
	      };
	    })(this));
	  };

	  return Transaction;

	})(BaseObject);


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Promise, WorkerRpc, debugPrefix, isFunction, isPlainArray, isString, isWebWorker, log, mergeInto, ref,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  slice = [].slice;

	BaseObject = __webpack_require__(18);

	Promise = __webpack_require__(60);

	log = __webpack_require__(16).log;

	ref = __webpack_require__(21), isPlainArray = ref.isPlainArray, isFunction = ref.isFunction, isString = ref.isString;

	mergeInto = __webpack_require__(58).mergeInto;

	isWebWorker = __webpack_require__(68).isWebWorker;


	/*
	WorkerRPC has two modes: singleton and instanced.

	SINGLETON:
	  Including WorkerRPC automatically creates the singleton instance.
	  In a worker, the singleton automatically binds to the worker's self.onmessage and starts listenting.
	  In workers or the browser, any handler registered with the singleton will be available to respond
	  to any message received by the singleton OR ANY OTHER INSTANCE of WorkerRPC in that thread.
	  You can think of the singleton as the global registry for handlers.

	In practice:
	  In browser:
	     * to register all your handlers, call this one or more times:
	    WorkerRpc.register ...

	     * call for each each worker you want to listen for RPC calls from,
	     * and bind any remote procedures you want to be able to invoke on that specific worker-thread
	    aBoundWorker = new WorkerRpc worker,
	      bind: ...
	      bindWithPromises: ...

	     * to make remote-procedure-calls to the worker:
	     * NOTE: if registered with bindWithPromises, will return a promise for the RPC's result.
	    aBoundWorker.MyWorkerNamespace.myWorkerFunction ...

	  In worker:
	     * to register all your handlers, call this one or more times:
	    WorkerRpc.register ...

	     * bind any remote procedures you want to be able to invoke on the browser-thread
	    WorkerRpc.bind ...
	    WorkerRpc.bindWithPromises ...

	NOTES:
	  registered functions are invoked with @/this set to the namespace. That way you can invoke
	  callback functions you previously bound back to the specific worker that invoked the
	  function with: @MyWorkerNamespace.myWorkerFunction()

	Real world example:

	  Suppose you want to access the localStorage object on the browser thread from your worker.
	  The 6 lines of code below create the 'self.asyncLocalStorage' object which works just like
	  'localStorage' except it returns Art.Foundation.Promises for the function results.

	  browser: (before starting the worker)
	    {WorkerRpc} = Art.Foundation
	    WorkerRpc.register localStorage: localStorage
	    new WorkerRpc workerSourcePath

	  worker:
	    {workerRpc} = Art.Foundation.WorkerRpc
	    workerRpc.bindWithPromises localStorage: ["getItem", "setItem", "removeItem", "clear"]
	    self.asyncLocalStorage = workerRpc.localStorage

	  SBD: Isn't that nice! So streamlined!

	General examples:

	Usage with no return value expected:
	  browser thread:

	    new WorkerRpc (new Worker workerUrl),
	      register:
	        MyMainNamespace:
	          doWork: (a) -> ...

	  worker thread:

	    {MyMainNamespace} = new WorkerRpc self,
	      bind:
	        MyMainNamespace: ["doWork"]

	    MyMainNamespace.doWork myStructuredData

	Usage with promises:

	  browser thread:

	    new WorkerRpc (new Worker workerUrl),
	      register:
	        MyMainNamespace:
	          concatStrings: (a, b) ->
	            a + b
	             * equivelent to: Promise.resolve a + b
	             * if the result is not a Promse, Promise.resolve(result) is automatically applied

	  worker thread:

	    {MyMainNamespace} = new WorkerRpc self,
	      bindWithPromises:
	        MyMainNamespace: ["concatStrings"]

	    MyMainNamespace.concatStrings "hi ", "Shane"
	    .then (result) ->
	       * result == "hi Shane"

	Usage with arbitrary response messages:

	  Sometimes you want a handle to the workerRpc instance for the thread that just send
	  you the message inside your registered response functions. You can access that
	  via the global: WorkerRpc.lastMessageReceivedFrom.

	  browser thread:

	    new WorkerRpc (new Worker workerUrl),
	      register:
	        MyMainNamespace:
	          doWorkAndRespond: (key) ->
	            count == 0
	            invokeThreeTimes =>
	              count++
	              WorkerRpc.lastMessageReceivedFrom.MyWorkerNamespace.respond key, count

	  worker thread:

	    {MyMainNamespace} = new WorkerRpc self,
	      register:
	        MyWorkerNamespace:
	          respond: (key, count) -> console.log "MyWorkerNamespace#respond: #{key} #{count}"
	      bind:
	        MyMainNamespace: ["doWorkAndRespond"]

	    MyMainNamespace.doWorkAndRespond "myKey"

	Usage - add to global registery:

	  WorkerRpc.register
	    MyGlobalClass:
	      doSomethingNoMatterWhoCalls: ->
	        ...
	 */

	debugPrefix = isWebWorker ? "WorkerRpc(worker)" : "WorkerRpc(browser)";

	module.exports = WorkerRpc = (function(superClass) {
	  extend(WorkerRpc, superClass);

	  WorkerRpc.singletonClass();

	  WorkerRpc.register = function(toRegister) {
	    return WorkerRpc.singleton.register(toRegister);
	  };

	  WorkerRpc.bind = function(toBind) {
	    return WorkerRpc.singleton._bind(toBind, false);
	  };

	  WorkerRpc.bindWithPromises = function(toBind) {
	    return WorkerRpc.singleton._bind(toBind, true);
	  };


	  /*
	  INPUT:
	    thread:
	      must implement onmessage= and postMessage or be null
	      In a webworker, this gets set to self if it is null.
	    options:
	      bind: map # invokes: @bind map
	      bindWithPromises: map # invokes: @bindWithPromises map
	   */

	  function WorkerRpc(thread, options) {
	    if (isString(thread)) {
	      log("WorkerRpc starting worker: " + thread);
	      thread = new Worker(thread);
	      log("WorkerRpc starting worker: " + thread + ", started?:", thread);
	    }
	    if (!(thread || self === self.window)) {
	      thread = self;
	    }
	    this._reset();
	    this._bindOnmessage(this._thread = thread);
	    if (options) {
	      this._applyOptions(options);
	    }
	  }

	  WorkerRpc.prototype.register = function(toRegister) {
	    var functionMap, namespaceName;
	    if (!toRegister) {
	      return;
	    }
	    for (namespaceName in toRegister) {
	      functionMap = toRegister[namespaceName];
	      if (this._registry.hasOwnProperty(namespaceName)) {
	        mergeInto(this._registry[namespaceName], functionMap);
	      } else {
	        this._registry[namespaceName] = functionMap;
	      }
	    }
	    return this._registry;
	  };


	  /*
	  Creates functions to make specific remote-procedure-calls.
	  
	  IN:
	    toBind: map to arrays of strings
	      Each key in the map specifies a namespace.
	      The array of strings specify the names of each RPC you want to be able to invoke.
	  
	  For a given namespaceName and functionName, this binds the function so you can
	  invoke it as follows:
	    @myNamespaceName.myFunctionName()
	  
	  The created functions are one-way. They return null as soon as the message has been sent
	  to the remote thread. If you want the results, see @bindWithPromises
	   */

	  WorkerRpc.prototype.bind = function(toBind) {
	    return this._bind(toBind, false);
	  };


	  /*
	  Same as @bind except each function created will return a promise which will return
	  the results return from the remote procedure call when they are ready.
	   */

	  WorkerRpc.prototype.bindWithPromises = function(toBind) {
	    return this._bind(toBind, true);
	  };

	  WorkerRpc.prototype._bind = function(toBind, withPromises) {
	    var functionName, functionNames, i, len, namespace, namespaceName, ref1;
	    if (!isFunction((ref1 = this._thread) != null ? ref1.postMessage : void 0)) {
	      throw new Error("@_thread.postMessage required for remote requests");
	    }
	    if (!toBind) {
	      return;
	    }
	    for (namespaceName in toBind) {
	      functionNames = toBind[namespaceName];
	      if (!this.hasOwnProperty(namespaceName)) {
	        this[namespaceName] = {};
	      }
	      namespace = this[namespaceName];
	      for (i = 0, len = functionNames.length; i < len; i++) {
	        functionName = functionNames[i];
	        namespace[functionName] = withPromises ? this._newRemoteRequestFunctionWithPromise(namespaceName, functionName) : this._newRemoteRequestFunction(namespaceName, functionName);
	      }
	    }
	    return null;
	  };

	  WorkerRpc.prototype._reset = function() {
	    return this._registry = {
	      promiseCallback: {
	        success: (function(_this) {
	          return function(promiseId, result) {
	            return WorkerRpc._resolvePromise(promiseId, result);
	          };
	        })(this),
	        error: (function(_this) {
	          return function(promiseId, error) {
	            return WorkerRpc._rejectPromise(promiseId, error);
	          };
	        })(this)
	      }
	    };
	  };

	  WorkerRpc.prototype._applyOptions = function(arg) {
	    var bind, bindWithPromises, register;
	    register = arg.register, bind = arg.bind, bindWithPromises = arg.bindWithPromises;
	    this.register(register);
	    this.bind(bind);
	    this.bindWithPromises(bindWithPromises);
	    return this;
	  };

	  WorkerRpc.prototype._send = function(namespaceName, functionName, promiseId, args) {
	    return this._thread.postMessage([namespaceName, functionName, promiseId, args]);
	  };

	  WorkerRpc.prototype._newRemoteRequestFunctionWithPromise = function(namespaceName, functionName) {
	    return (function(_this) {
	      return function() {
	        var args;
	        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	        return WorkerRpc._bindPromise(function(promiseId) {
	          return _this._send(namespaceName, functionName, promiseId, args);
	        });
	      };
	    })(this);
	  };

	  WorkerRpc.prototype._newRemoteRequestFunction = function(namespaceName, functionName) {
	    return (function(_this) {
	      return function() {
	        var args;
	        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	        return _this._send(namespaceName, functionName, null, args);
	      };
	    })(this);
	  };

	  WorkerRpc.prototype._bindOnmessage = function(thread) {
	    return thread != null ? thread.onmessage = (function(_this) {
	      return function(arg) {
	        var args, data, functionName, namespaceName, promiseId;
	        data = arg.data;
	        if (!isPlainArray(data)) {
	          return console.warn(debugPrefix + ": data was not an array", data);
	        }
	        namespaceName = data[0], functionName = data[1], promiseId = data[2], args = data[3];
	        return _this._invokeLocalFunction(namespaceName, functionName, promiseId, args);
	      };
	    })(this) : void 0;
	  };

	  WorkerRpc.prototype._invokeLocalFunction = function(namespaceName, functionName, promiseId, args) {
	    var localFunction, namespace, singleton;
	    if ((namespace = this._registry[namespaceName]) && (localFunction = namespace[functionName])) {
	      localFunction;
	    } else {
	      singleton = WorkerRpc.singleton;
	      if (this !== singleton && (namespace = singleton._registry[namespaceName]) && (localFunction = namespace[functionName])) {
	        localFunction;
	      }
	    }
	    if (!localFunction) {
	      console.warn(debugPrefix + "_onmessage: could not find: '" + namespaceName + "." + functionName + "'\n\nnamespaces: " + (Object.keys(this._registry).join(', ')) + "\nglobal namespaces: " + (singleton === this ? "(same)" : Object.keys(singleton._registry).join(', ')));
	    }
	    if (localFunction) {
	      WorkerRpc.lastMessageReceivedFrom = this;
	      return this._resolveOrRejectRemotePromise(promiseId, localFunction.apply(namespace, args));
	    }
	  };

	  WorkerRpc.prototype._resolveOrRejectRemotePromise = function(promiseId, result) {
	    if (promiseId == null) {
	      return;
	    }
	    return Promise.resolve(result).then((function(_this) {
	      return function(result) {
	        return _this._send("promiseCallback", "success", null, [promiseId, result], function(error) {
	          return _this._send("promiseCallback", "error", null, [promiseId, error]);
	        });
	      };
	    })(this));
	  };


	  /*
	  IN:   f: (promiseId) -> ignored
	  OUT:  promise
	  
	  Creates a new promise, addes it to @_promises with a unique id, and invokes f, passing in
	  the promise's id.
	   */

	  WorkerRpc._promises = {};

	  WorkerRpc._nextPromiseId = 0;

	  WorkerRpc._bindPromise = function(f) {
	    var promise, promiseId;
	    this._promises[promiseId = this._nextPromiseId++] = promise = new Promise;
	    f(promiseId);
	    return promise;
	  };

	  WorkerRpc._resolvePromise = function(promiseId, result) {
	    var ref1;
	    if ((ref1 = this._promises[promiseId]) != null) {
	      ref1.resolve(result);
	    }
	    return delete this._promises[promiseId];
	  };

	  WorkerRpc._rejectPromise = function(promiseId, error) {
	    var ref1;
	    if ((ref1 = this._promises[promiseId]) != null) {
	      ref1.reject(error);
	    }
	    return delete this._promises[promiseId];
	  };

	  return WorkerRpc;

	})(BaseObject);


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(80)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, VirtualNode) {
	  var BaseObject, Browser, CanvasElement, Element, Rectangle, VirtualElement, VirtualElementLocalBase, VirtualElementRemoteBase, compactFlatten, errorElementProps, globalCount, inspect, isPlainObject, isWebWorker, keepIfRubyTrue, log, merge, objectDiff, propsEq, shallowClone, stackTime, time;
	  log = Foundation.log, compactFlatten = Foundation.compactFlatten, globalCount = Foundation.globalCount, time = Foundation.time, stackTime = Foundation.stackTime, BaseObject = Foundation.BaseObject, shallowClone = Foundation.shallowClone, inspect = Foundation.inspect, keepIfRubyTrue = Foundation.keepIfRubyTrue, stackTime = Foundation.stackTime, isPlainObject = Foundation.isPlainObject, compactFlatten = Foundation.compactFlatten, isWebWorker = Foundation.isWebWorker, objectDiff = Foundation.objectDiff, Browser = Foundation.Browser, merge = Foundation.merge;
	  propsEq = VirtualNode.propsEq;
	  CanvasElement = null;
	  Element = null;
	  Rectangle = "Rectangle";
	  if (!isWebWorker) {
	    !/* require */(/* empty */function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [!(function webpackMissingModule() { var e = new Error("Cannot find module \"lib/art/engine/elements/shapes\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()), !(function webpackMissingModule() { var e = new Error("Cannot find module \"lib/art/engine/core\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())]; (function(EngineShapes, EngineCore) {
	      Rectangle = EngineShapes.Rectangle;
	      return CanvasElement = EngineCore.CanvasElement, Element = EngineCore.Element, EngineCore;
	    }.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}());
	  }
	  errorElementProps = {
	    key: "ART_REACT_ERROR_CREATING_CHILD_PLACEHOLDER",
	    color: "orange"
	  };
	  VirtualElementLocalBase = (function(superClass) {
	    extend(VirtualElementLocalBase, superClass);

	    function VirtualElementLocalBase() {
	      return VirtualElementLocalBase.__super__.constructor.apply(this, arguments);
	    }

	    VirtualElementLocalBase.getter({
	      elementClassName: function() {
	        return this.elementClass.name;
	      }
	    });

	    VirtualElementLocalBase.prototype._updateElementProps = function(newProps) {
	      var addedOrChanged, removed;
	      addedOrChanged = (function(_this) {
	        return function(k, v) {
	          return _this.element.setProperty(k, v);
	        };
	      })(this);
	      removed = (function(_this) {
	        return function(k, v) {
	          return _this.element.resetProperty(k);
	        };
	      })(this);
	      return this._updateElementPropsHelper(newProps, addedOrChanged, removed);
	    };

	    VirtualElementLocalBase.prototype._setElementChildren = function(childElements) {
	      return this.element.setChildren(childElements);
	    };

	    VirtualElementLocalBase.prototype._newElement = function(elementClass, props, childElements, bindToElementOrNewCanvasElementProps) {
	      var element;
	      element = new elementClass(props, childElements);
	      if (bindToElementOrNewCanvasElementProps) {
	        if (bindToElementOrNewCanvasElementProps instanceof Element) {
	          bindToElementOrNewCanvasElementProps.addChild(element);
	        } else {
	          props = merge(bindToElementOrNewCanvasElementProps, {
	            webgl: Browser.Parse.query().webgl === "true",
	            children: [element]
	          });
	          new CanvasElement(props);
	        }
	      }
	      element.creator = this;
	      return element;
	    };

	    return VirtualElementLocalBase;

	  })(VirtualNode);
	  VirtualElementRemoteBase = (function(superClass) {
	    extend(VirtualElementRemoteBase, superClass);

	    function VirtualElementRemoteBase() {
	      VirtualElementRemoteBase.__super__.constructor.apply(this, arguments);
	      this._sendRemoteQueuePending = false;
	    }

	    VirtualElementRemoteBase.getter({
	      elementClassName: function() {
	        return this.elementClass;
	      }
	    });

	    VirtualElementRemoteBase.prototype._setElementChildren = function(childElements) {
	      remote.updateElement(this.element, {
	        children: childElements
	      });
	      return this._sendRemoteQueue();
	    };

	    VirtualElementRemoteBase.prototype._newElement = function(elementClass, props, childElements, newCanvasElementProps) {
	      var remoteId;
	      remoteId = remote.newElement(this.elementClass, merge(props, {
	        children: childElements
	      }), newCanvasElementProps);
	      this._sendRemoteQueue();
	      return remoteId;
	    };

	    VirtualElementRemoteBase.prototype._updateElementProps = function(newProps) {
	      var addedOrChanged, changed, removed, resetProps, setProps;
	      setProps = {};
	      resetProps = [];
	      addedOrChanged = (function(_this) {
	        return function(k, v) {
	          return setProps[k] = v;
	        };
	      })(this);
	      removed = (function(_this) {
	        return function(k, v) {
	          return resetProps.push(k);
	        };
	      })(this);
	      if (changed = this._updateElementPropsHelper(newProps, addedOrChanged, removed)) {
	        remote.updateElement(this.element, setProps, resetProps);
	        this._sendRemoteQueue();
	      }
	      return changed;
	    };

	    VirtualElementRemoteBase.prototype._sendRemoteQueue = function() {
	      if (!this._sendRemoteQueuePending) {
	        this._sendRemoteQueuePending = true;
	        return this.onNextReady((function(_this) {
	          return function() {
	            remote.sendRemoteQueue();
	            return _this._sendRemoteQueuePending = false;
	          };
	        })(this));
	      }
	    };

	    return VirtualElementRemoteBase;

	  })(VirtualNode);
	  return VirtualElement = (function(superClass) {
	    var emptyProps;

	    extend(VirtualElement, superClass);

	    VirtualElement.created = 0;

	    VirtualElement.instantiated = 0;

	    VirtualElement.createVirtualElementFactory = function(elementClass) {
	      return VirtualNode.factoryFactory(function(props, children) {
	        return new VirtualElement(elementClass, props, children);
	      });
	    };

	    emptyProps = {};

	    function VirtualElement(elementClass, props, children) {
	      VirtualElement.created++;
	      this.elementClass = elementClass;
	      VirtualElement.__super__.constructor.call(this, props || emptyProps);
	      this.children = this._validateChildren(compactFlatten(children, keepIfRubyTrue));
	    }

	    VirtualElement.getter({
	      inspectedName: function() {
	        return "<React.VirtualElement:" + this.uniqueId + " elementClass: " + this.elementClassName + ", props: " + (inspect(this.props)) + ">";
	      }
	    });

	    VirtualElement.prototype.toCoffeescript = function(indent) {
	      var child, k, subIndent, v;
	      if (indent == null) {
	        indent = "";
	      }
	      return compactFlatten([
	        "" + indent + this.elementClassName, (function() {
	          var ref, results;
	          if (Object.keys(this.props).length === 0) {
	            return "{}";
	          } else {
	            ref = this.props;
	            results = [];
	            for (k in ref) {
	              v = ref[k];
	              results.push("\n  " + indent + k + ": " + (inspect(v)));
	            }
	            return results;
	          }
	        }).call(this), (function() {
	          var j, len, ref, ref1, results;
	          if (((ref = this.children) != null ? ref.length : void 0) > 0) {
	            subIndent = indent + "  ";
	            ref1 = this.children;
	            results = [];
	            for (j = 0, len = ref1.length; j < len; j++) {
	              child = ref1[j];
	              results.push("\n" + (child.toCoffeescript(subIndent)));
	            }
	            return results;
	          }
	        }).call(this)
	      ]).join('');
	    };

	    VirtualElement.prototype._findOldChildToUpdate = function(child) {
	      var i, j, len, oldChild, oldChildren;
	      oldChildren = this.children;
	      for (i = j = 0, len = oldChildren.length; j < len; i = ++j) {
	        oldChild = oldChildren[i];
	        if (oldChild) {
	          if (oldChild._canUpdateFrom(child)) {
	            oldChildren[i] = null;
	            return oldChild;
	          }
	        }
	      }
	      return null;
	    };

	    VirtualElement.prototype._canUpdateFrom = function(b) {
	      return this.elementClass === b.elementClass && this.key === b.key;
	    };


	    /*
	    _fastUpdateChildren
	      if no Nodes were added, removed or changed "types"
	        _updateFrom newChild for all oldChildren
	        return true
	      else
	         * use _slowUpdateChildren instead
	        return false
	     */

	    VirtualElement.prototype._fastUpdateChildren = function(newChildren) {
	      var i, j, l, len, len1, oldChild, oldChildren;
	      oldChildren = this.children;
	      if (oldChildren.length !== newChildren.length) {
	        return false;
	      }
	      for (i = j = 0, len = oldChildren.length; j < len; i = ++j) {
	        oldChild = oldChildren[i];
	        if (!oldChild._canUpdateFrom(newChildren[i])) {
	          return false;
	        }
	      }
	      for (i = l = 0, len1 = oldChildren.length; l < len1; i = ++l) {
	        oldChild = oldChildren[i];
	        oldChild._updateFrom(newChildren[i]);
	      }
	      return true;
	    };

	    VirtualElement.prototype._slowUpdateChildren = function(newChildren) {
	      var child, childElements, finalChild, i, j, len, newChild, oldChild, oldChildren;
	      oldChildren = this.children;
	      childElements = (function() {
	        var j, len, results;
	        results = [];
	        for (i = j = 0, len = newChildren.length; j < len; i = ++j) {
	          newChild = newChildren[i];
	          finalChild = (oldChild = this._findOldChildToUpdate(newChild)) ? newChildren[i] = oldChild._updateFrom(newChild) : newChild._instantiate(this._parentComponent);
	          results.push(finalChild.element);
	        }
	        return results;
	      }).call(this);
	      for (j = 0, len = oldChildren.length; j < len; j++) {
	        child = oldChildren[j];
	        if (child) {
	          child._unmount();
	        }
	      }
	      this._setElementChildren(childElements);
	      return this.children = newChildren;
	    };


	    /*
	    returns true if children changed
	      if true, element.setChildren was called
	      if false, the children individually may change, but
	        this element's children are the same set
	     */

	    VirtualElement.prototype._updateChildren = function(newChildren) {
	      if (this._fastUpdateChildren(newChildren)) {
	        return false;
	      } else {
	        this._slowUpdateChildren(newChildren);
	        return true;
	      }
	    };

	    VirtualElement.prototype._unmount = function() {
	      var child, j, len, ref, results;
	      ref = this.children;
	      results = [];
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        results.push(child._unmount());
	      }
	      return results;
	    };

	    VirtualElement.prototype._updateFrom = function(newNode) {
	      var childrenChanged, propsChanged;
	      VirtualElement.__super__._updateFrom.apply(this, arguments);
	      if (!this.element) {
	        return;
	      }
	      propsChanged = this._updateElementProps(newNode.props);
	      childrenChanged = this._updateChildren(newNode.children);
	      return this;
	    };


	    /*
	    create element or componentInstance
	    fully generate Virtual-AIM subbranch
	    fully create all AIM elements
	    returns this
	     */

	    VirtualElement.prototype._instantiate = function(parentComponent, bindToElementOrNewCanvasElementProps) {
	      var c, childElements, e, i;
	      VirtualElement.__super__._instantiate.apply(this, arguments);
	      VirtualElement.instantiated++;
	      childElements = (function() {
	        var error, j, len, ref, results;
	        ref = this.children;
	        results = [];
	        for (i = j = 0, len = ref.length; j < len; i = ++j) {
	          c = ref[i];
	          try {
	            c._instantiate(parentComponent);
	            results.push(c.element);
	          } catch (error) {
	            e = error;
	            console.error(e.stack);
	            console.error("Error instantiating child:\n  childIndex " + i + "\n  error: " + e + "\n  child: " + c + "\n  elementClass: " + this.elementClassName + "\n  props: " + (inspect(this.props)));
	            results.push(this._newErrorElement());
	          }
	        }
	        return results;
	      }).call(this);
	      this.element = this._newElement(this.elementClass, this.props, childElements, bindToElementOrNewCanvasElementProps);
	      return this;
	    };

	    VirtualElement.prototype._newErrorElement = function() {
	      return this._newElement(Rectangle, errorElementProps);
	    };

	    VirtualElement.prototype._updateElementPropsHelper = function(newProps, addedOrChanged, removed) {
	      var newPropsLength, noChange, noChangeCount, oldProps, oldPropsLength;
	      oldPropsLength = this.getPropsLength();
	      oldProps = this.props;
	      noChangeCount = 0;
	      noChange = function() {
	        return noChangeCount++;
	      };
	      newPropsLength = this.setPropsLength(objectDiff(newProps, oldProps, addedOrChanged, removed, addedOrChanged, noChange, propsEq));
	      if (newPropsLength === noChangeCount && oldPropsLength === newPropsLength) {
	        return false;
	      } else {
	        this.props = newProps;
	        return true;
	      }
	    };

	    return VirtualElement;

	  })((isWebWorker ? VirtualElementRemoteBase : VirtualElementLocalBase));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  slice = [].slice;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(81)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, ReactArtEngineEpoch) {
	  var BaseObject, VirtualNode, compact, deepEach, emptyObject, flatten, globalCount, inspect, isObject, isPlainObject, keepIfRubyTrue, log, objectKeyCount, plainObjectsDeepEq, reactArtEngineEpoch, shallowClone;
	  log = Foundation.log, compact = Foundation.compact, globalCount = Foundation.globalCount, flatten = Foundation.flatten, BaseObject = Foundation.BaseObject, shallowClone = Foundation.shallowClone, inspect = Foundation.inspect, objectKeyCount = Foundation.objectKeyCount, isObject = Foundation.isObject, deepEach = Foundation.deepEach, isPlainObject = Foundation.isPlainObject, keepIfRubyTrue = Foundation.keepIfRubyTrue, plainObjectsDeepEq = Foundation.plainObjectsDeepEq;
	  reactArtEngineEpoch = ReactArtEngineEpoch.reactArtEngineEpoch;
	  emptyObject = {};
	  return VirtualNode = (function(superClass) {
	    var deepArgsProcessing, propsEq;

	    extend(VirtualNode, superClass);

	    VirtualNode.propsEq = propsEq = plainObjectsDeepEq;

	    VirtualNode.prototype.onNextReady = function(f) {
	      return reactArtEngineEpoch.onNextReady(f);
	    };

	    deepArgsProcessing = function(array, children) {
	      var el, i, len;
	      for (i = 0, len = array.length; i < len; i++) {
	        el = array[i];
	        if (el) {
	          if (el.constructor === Array) {
	            deepArgsProcessing(el, children);
	          } else {
	            children.push(el);
	          }
	        }
	      }
	      return null;
	    };

	    VirtualNode.factoryFactory = function(factory) {
	      var ret;
	      ret = function() {
	        var children, el, i, k, len, oneProps, props, v;
	        oneProps = null;
	        props = null;
	        children = [];
	        for (i = 0, len = arguments.length; i < len; i++) {
	          el = arguments[i];
	          if (el) {
	            switch (el.constructor) {
	              case Object:
	                if (oneProps) {
	                  props = {};
	                  for (k in oneProps) {
	                    v = oneProps[k];
	                    props[k] = v;
	                  }
	                  oneProps = null;
	                }
	                if (props) {
	                  for (k in el) {
	                    v = el[k];
	                    props[k] = v;
	                  }
	                } else {
	                  oneProps = el;
	                }
	                break;
	              case Array:
	                deepArgsProcessing(el, children);
	                break;
	              default:
	                children.push(el);
	            }
	          }
	        }
	        props || (props = oneProps || {});
	        return factory(props, children);
	      };
	      ret.instantiateAsTopComponent = function(spec, options) {
	        return ret(spec).instantiateAsTopComponent(options);
	      };
	      return ret;
	    };

	    VirtualNode.assignRefsTo = null;

	    function VirtualNode(props) {
	      if (props == null) {
	        props = emptyObject;
	      }
	      this._updateTarget = null;
	      this._parentComponent = null;
	      this.key = props.key;
	      this.props = props;
	      this._propsLength = -1;
	      this.element = null;
	      VirtualNode._assignRefs(this);
	    }

	    VirtualNode.getter({
	      propsLength: function() {
	        if (this._propsLength >= 0) {
	          return this._propsLength;
	        } else {
	          return this._propsLength = objectKeyCount(this.props);
	        }
	      }
	    });

	    VirtualNode.setter({
	      propsLength: function(v) {
	        return this._propsLength = v;
	      }
	    });


	    /*
	    Evaluate "f" in the thread the Element exists in.
	    
	    IN: (element) -> plainObjects
	    OUT: promise returning function's plain-object-result
	    
	     * TODO: add worker support
	     */

	    VirtualNode.prototype.withElement = function(f) {
	      return new Promise((function(_this) {
	        return function(resolve) {
	          return resolve(f(_this.element));
	        };
	      })(this));
	    };


	    /*
	    Lighter-weight than "withElement"
	    
	    IN:
	      method: string
	      args: 0 or more additional arguments
	    OUT: promise returning function's plain-object-result
	    
	    Equivelent to:
	      @withElement (element) -> element[method] args...
	     */

	    VirtualNode.prototype.sendToElement = function() {
	      var args, method;
	      method = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	      return new Promise((function(_this) {
	        return function(resolve) {
	          var ref;
	          return resolve((ref = _this.element)[method].apply(ref, args));
	        };
	      })(this));
	    };

	    VirtualNode._separateConstructionParams = function(args, propsOut, childrenOut) {
	      return deepEach(args, function(obj) {
	        var k, results, v;
	        if (isPlainObject(obj)) {
	          results = [];
	          for (k in obj) {
	            v = obj[k];
	            results.push(propsOut[k] = v);
	          }
	          return results;
	        } else if (keepIfRubyTrue(obj)) {
	          return childrenOut.push(obj);
	        }
	      });
	    };

	    VirtualNode._assignRefs = function(node) {
	      var key;
	      if ((key = node.key) && this.assignRefsTo) {
	        if (this.assignRefsTo[key]) {
	          return console.warn("WARNING: Duplicate key found. This MUST be fixed for correct operation.\n  key: " + (inspect(key)) + "\n  VirtualNode: " + node.inspectedName);
	        } else {
	          return this.assignRefsTo[key] = node;
	        }
	      }
	    };

	    VirtualNode.prototype._validateChildren = function(children) {
	      var child, i, len;
	      if (!children) {
	        return children;
	      }
	      for (i = 0, len = children.length; i < len; i++) {
	        child = children[i];
	        if (!(child instanceof VirtualNode)) {
	          console.warn({
	            "invalid VirtualNode child": child,
	            parent: this
	          });
	          if (isObject(child)) {
	            console.warn("Hint: Did you place properties AFTER a child element?");
	          }
	          throw new Error("VirtualNode child is not a VirtualNode.\ninvalid child: " + (inspect(child)) + "\nparent: " + this.inspectedName);
	        }
	      }
	      return children;
	    };

	    VirtualNode.prototype._propsChanged = function(virtualNode) {
	      var _propsLength, k, newProps, ref, v;
	      newProps = virtualNode.props;
	      _propsLength = 0;
	      ref = this.props;
	      for (k in ref) {
	        v = ref[k];
	        _propsLength++;
	        if (!propsEq(v, newProps[k])) {
	          return true;
	        }
	      }
	      this._propsLength = _propsLength;
	      return _propsLength !== virtualNode.getPropsLength();
	    };

	    VirtualNode.prototype._updateFrom = function(sourceNode) {
	      return sourceNode._updateTarget = this;
	    };

	    VirtualNode.prototype._canUpdateFrom = function(sourceNode) {
	      return false;
	    };

	    VirtualNode.prototype._instantiate = function(parentComponent, bindToElementOrNewCanvasElementProps) {
	      this._parentComponent = parentComponent;
	      return this;
	    };

	    return VirtualNode;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var BaseObject, Epoch, ReactArtEngineEpoch, clone, globalCount, inspect, isWebWorker, log, merge, peek, stackTime, timeout;
	  log = Foundation.log, merge = Foundation.merge, clone = Foundation.clone, peek = Foundation.peek, inspect = Foundation.inspect, timeout = Foundation.timeout, BaseObject = Foundation.BaseObject, Epoch = Foundation.Epoch, globalCount = Foundation.globalCount, stackTime = Foundation.stackTime, isWebWorker = Foundation.isWebWorker, timeout = Foundation.timeout;
	  if (!isWebWorker) {
	    timeout(0, function() {
	      return !/* require */(/* empty */function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [!(function webpackMissingModule() { var e = new Error("Cannot find module \"lib/art/engine/core/global_epoch_cycle\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())]; (function(GlobalEpochCycle) {
	        return GlobalEpochCycle.singleton.includeReact(ReactArtEngineEpoch.singleton);
	      }.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}());
	    });
	  }
	  return ReactArtEngineEpoch = (function(superClass) {
	    extend(ReactArtEngineEpoch, superClass);

	    function ReactArtEngineEpoch() {
	      return ReactArtEngineEpoch.__super__.constructor.apply(this, arguments);
	    }

	    ReactArtEngineEpoch.singletonClass();

	    ReactArtEngineEpoch.prototype.addChangingComponent = function(component) {
	      return this.queueItem(component);
	    };

	    ReactArtEngineEpoch.prototype.processEpochItems = function(changingComponents) {
	      return globalCount("ReactArtEngineEpoch processEpochItems", stackTime((function(_this) {
	        return function() {
	          var component, i, len, results;
	          results = [];
	          for (i = 0, len = changingComponents.length; i < len; i++) {
	            component = changingComponents[i];
	            results.push(component._applyPendingState());
	          }
	          return results;
	        };
	      })(this)));
	    };

	    return ReactArtEngineEpoch;

	  })(Epoch);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(83);


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var Engine;

	module.exports = Engine = __webpack_require__(84);

	Engine.Animation = __webpack_require__(86);

	Engine.Core = __webpack_require__(113);

	Engine.DevTools = __webpack_require__(168);

	Engine.Elements = __webpack_require__(245);

	Engine.Events = __webpack_require__(143);

	Engine.File = __webpack_require__(273);

	Engine.Forms = __webpack_require__(284);

	Engine.Layout = __webpack_require__(156);

	Engine.finishLoad([]);


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(85);

	module.exports = Art.Engine || (Art.Engine = (function(superClass) {
	  extend(Engine, superClass);

	  function Engine() {
	    return Engine.__super__.constructor.apply(this, arguments);
	  }

	  Engine.namespace = Art;

	  Engine.namespacePath = "Neptune.Art.Engine";

	  return Engine;

	})(Neptune.Base));

	Art.addNamespace(Art.Engine);


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var Animation;

	module.exports = Animation = __webpack_require__(87);

	Animation.Animator = __webpack_require__(88);

	Animation.Animator2 = __webpack_require__(112);

	Animation.EasingFunctions = __webpack_require__(111);

	Animation.finishLoad(["Animator", "Animator2", "EasingFunctions"]);


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Animation || (Engine.Animation = (function(superClass) {
	  extend(Animation, superClass);

	  function Animation() {
	    return Animation.__super__.constructor.apply(this, arguments);
	  }

	  Animation.namespace = Engine;

	  Animation.namespacePath = "Neptune.Art.Engine.Animation";

	  return Animation;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Animation);


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	
	/*
	Useful ideas about optimizing animations and garbage collection: http://blog.artillery.com/2012/10/browser-garbage-collection-and-framerate.html

	See Foundation.Transaction for most constructor options.

	from-values are either explicitly specified in the constructor, or any other properties defined
	  in the constructor will have their from-values saved during construction.

	The animation is automatically started on construction UNLESS there are no to-values.
	If there are no to-values specified, then you must manually, later, call "start". At that point, all to-values
	are set to the current values.
	 */
	var Animator, BaseObject, Color, EasingFunctions, Event, EventEpoch, EventedObject, Matrix, Point, Rectangle, Transaction, color, currentSecond, eventEpoch, inspect, inspectLean, log, matrix, max, min, point, rect, ref, ref1, ref2,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(8), currentSecond = ref.currentSecond, min = ref.min, max = ref.max, Transaction = ref.Transaction, inspect = ref.inspect, inspectLean = ref.inspectLean, log = ref.log, BaseObject = ref.BaseObject;

	ref1 = __webpack_require__(89), color = ref1.color, Color = ref1.Color, point = ref1.point, Point = ref1.Point, rect = ref1.rect, Rectangle = ref1.Rectangle, matrix = ref1.matrix, Matrix = ref1.Matrix;

	ref2 = __webpack_require__(100), Event = ref2.Event, EventEpoch = ref2.EventEpoch, EventedObject = ref2.EventedObject;

	EasingFunctions = __webpack_require__(111);

	eventEpoch = EventEpoch.eventEpoch;

	module.exports = Animator = (function(superClass) {
	  extend(Animator, superClass);

	  Animator.include(EventedObject);

	  Animator.animate = function(objects, options) {
	    return new Animator(objects, options);
	  };

	  function Animator(objects, options) {
	    if (options == null) {
	      options = {};
	    }
	    Animator.__super__.constructor.apply(this, arguments);
	    this.transaction = new Transaction(objects, options);
	    this.fixedStep = options.fixedStep;
	    if (this.fixedStep && this.fixedStep <= 0) {
	      throw new Error("fixedStep must be > 0");
	    }
	    this.duration = options.duration || 0.25;
	    this.f = options.f;
	    if (!this.f) {
	      this.f = EasingFunctions[this.fName = "easeInQuad"];
	    } else if (typeof this.f === "string") {
	      this.fName = this.f;
	      this.f = EasingFunctions[this.f];
	    } else {
	      this.fName = "custom";
	    }
	    if (options.on) {
	      this.on(options.on);
	    }
	    this.then = options.then;
	    this.start();
	  }

	  Animator.prototype.inspect = function(inspector) {
	    inspector.put(this.classPathName);
	    inspector.put(" duration: " + this.duration + ", function: " + this.fName);
	    if (this.activated) {
	      inspector.put(", activated, frames: " + this.frames + ", pos: " + this.pos);
	    }
	    if (this.aborted) {
	      inspector.put(", aborted");
	    }
	    if (this.deactivated) {
	      inspector.put(", deactivated");
	    }
	    return this.transaction.inspectParts(inspector);
	  };

	  Animator.prototype.abort = function() {
	    if (!this.aborted) {
	      eventEpoch.logEvent("animationAborted", this.getObjectId());
	      this.aborted = true;
	      this.deactivateAnimation();
	      return this.queueEvent("abort");
	    }
	  };

	  Animator.prototype.start = function() {
	    this.transaction.saveFromValues();
	    this.transaction.saveToValues();
	    this.transaction.optimize();
	    this.updateValues(0);
	    this.activateAnimation();
	    this.frames = 0;
	    return eventEpoch.queue((function(_this) {
	      return function() {
	        _this.updateValues(0);
	        eventEpoch.logEvent("animation", _this.getObjectId());
	        _this.startTime = currentSecond();
	        _this.queueEvent("start");
	        return eventEpoch.queue(function() {
	          return _this.advance();
	        });
	      };
	    })(this));
	  };

	  Animator.prototype.finish = function() {
	    this.updateValues(1);
	    return this.done();
	  };

	  Animator.getter({
	    pos: function() {
	      if (this.fixedStep) {
	        return this.frames * this.fixedStep;
	      } else {
	        return (this.now - this.startTime) / this.duration;
	      }
	    },
	    objects: function() {
	      return this.transaction.objects;
	    }
	  });

	  Animator.prototype.activateAnimation = function() {
	    var animatedObject, i, len, ref3, results;
	    if (this.activated) {
	      return;
	    }
	    this.activated = true;
	    ref3 = this.objects;
	    results = [];
	    for (i = 0, len = ref3.length; i < len; i++) {
	      animatedObject = ref3[i];
	      if (animatedObject._activeAnimator) {
	        animatedObject._activeAnimator.abort();
	      }
	      results.push(animatedObject._activeAnimator = this);
	    }
	    return results;
	  };

	  Animator.prototype.deactivateAnimation = function() {
	    var animatedObject, i, len, ref3, results;
	    if (this.deactivated) {
	      return;
	    }
	    this.deactivated = true;
	    ref3 = this.objects;
	    results = [];
	    for (i = 0, len = ref3.length; i < len; i++) {
	      animatedObject = ref3[i];
	      if (animatedObject._activeAnimator !== this) {
	        this.log("INTERNAL WARNING - animatedObject._activeAnimator should == @");
	        this.log("  animatedObject: (" + (inspect(animatedObject, 1)));
	        this.log("  animatedObject._activeAnimator: (" + (inspect(animatedObject._activeAnimator, 1)));
	        this.log("  @: (" + (inspect(this, 1)));
	      }
	      results.push(delete animatedObject._activeAnimator);
	    }
	    return results;
	  };

	  Animator.prototype.advance = function() {
	    var pos;
	    if (this.aborted || this.deactivated) {
	      return;
	    }
	    this.frames++;
	    this.now = currentSecond();
	    pos = this.pos;
	    if (pos < 1) {
	      this.updateValues(this.f(pos));
	      return eventEpoch.queue((function(_this) {
	        return function() {
	          return _this.advance();
	        };
	      })(this));
	    } else {
	      this.updateValues(1);
	      return this.done();
	    }
	  };

	  Animator.prototype.done = function() {
	    if (this.aborted) {
	      return;
	    }
	    eventEpoch.logEvent("animation", this.getObjectId());
	    this.deactivateAnimation();
	    this.queueEvent("done");
	    return this.nextAnimation();
	  };

	  Animator.prototype.nextAnimation = function() {
	    var objects;
	    if (!this.then) {
	      return;
	    }
	    objects = this.then.objects || this.then.object || this.objects;
	    return new Animator(objects, this.then);
	  };

	  Animator.prototype.updateValues = function(p) {
	    this.transaction.interpolate(p);
	    return this.queueEvent("update", {
	      p: p
	    });
	  };

	  return Animator;

	})(BaseObject);


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(90);


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic;

	module.exports = Atomic = __webpack_require__(91);

	Atomic.All = __webpack_require__(93);

	Atomic.Base = __webpack_require__(95);

	Atomic.Color = __webpack_require__(94);

	Atomic.Matrix = __webpack_require__(96);

	Atomic.Perimeter = __webpack_require__(99);

	Atomic.Point = __webpack_require__(97);

	Atomic.Rectangle = __webpack_require__(98);

	Atomic.finishLoad(["All", "Base", "Color", "Matrix", "Perimeter", "Point", "Rectangle"]);


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(92);

	module.exports = Art.Atomic || (Art.Atomic = (function(superClass) {
	  extend(Atomic, superClass);

	  function Atomic() {
	    return Atomic.__super__.constructor.apply(this, arguments);
	  }

	  Atomic.namespace = Art;

	  Atomic.namespacePath = "Neptune.Art.Atomic";

	  return Atomic;

	})(Neptune.Base));

	Art.addNamespace(Art.Atomic);


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Color, Foundation, Matrix, Perimeter, Point, Rectangle, createAllClass, select;

	Foundation = __webpack_require__(8);

	Atomic = __webpack_require__(91);

	Color = __webpack_require__(94);

	Matrix = __webpack_require__(96);

	Point = __webpack_require__(97);

	Rectangle = __webpack_require__(98);

	Perimeter = __webpack_require__(99);

	createAllClass = Foundation.createAllClass, select = Foundation.select;

	createAllClass(Atomic, select(Perimeter, "perimeter", "perimeter0"), select(Point, "point", "point0", "point1", "isPoint"), select(Color, "color", "hslColor", "colorNames", "colorNamesMap"), select(Matrix, "matrix", "identityMatrix"), select(Rectangle, "rect", "nothing", "everything"));


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var AtomicBase, Color, Foundation, abs, bound, colorFloatEq, float32Eq, hex16ColorRegex, hex256ColorRegex, inspect, isString, log, max, min, modulo, pad, parseRGBColorComponent, rgbColorRegex, rgbaColorRegex,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(8);

	AtomicBase = __webpack_require__(95);

	inspect = Foundation.inspect, bound = Foundation.bound, modulo = Foundation.modulo, pad = Foundation.pad, min = Foundation.min, max = Foundation.max, abs = Foundation.abs, float32Eq = Foundation.float32Eq, isString = Foundation.isString, log = Foundation.log, hex16ColorRegex = Foundation.hex16ColorRegex, hex256ColorRegex = Foundation.hex256ColorRegex, rgbColorRegex = Foundation.rgbColorRegex, rgbaColorRegex = Foundation.rgbaColorRegex;

	colorFloatEq = float32Eq;

	parseRGBColorComponent = function(str) {
	  var percentIndex;
	  if ((percentIndex = str.indexOf('%')) !== -1) {
	    return (str.slice(0, percentIndex) | 0) * .01;
	  } else {
	    return (str | 0) * 1 / 255;
	  }
	};

	module.exports = Color = (function(superClass) {
	  var color, colorNames, colorNamesMap, hslColor, k, parseCache, toArray, v;

	  extend(Color, superClass);

	  function Color() {
	    return Color.__super__.constructor.apply(this, arguments);
	  }

	  Color.colorNames = colorNames = ['AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenRod', 'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'GoldenRod', 'Gray', 'Green', 'GreenYellow', 'HoneyDew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenRodYellow', 'LightGray', 'LightGreen', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquaMarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenRod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen'];

	  Color.colorNamesMap = colorNamesMap = {
	    transparent: "rgba(0,0,0,0)",
	    aliceblue: "#f0f8ff",
	    antiquewhite: "#faebd7",
	    aqua: "#00ffff",
	    aquamarine: "#7fffd4",
	    azure: "#f0ffff",
	    beige: "#f5f5dc",
	    bisque: "#ffe4c4",
	    black: "#000000",
	    blanchedalmond: "#ffebcd",
	    blue: "#0000ff",
	    blueviolet: "#8a2be2",
	    brown: "#a52a2a",
	    burlywood: "#deb887",
	    cadetblue: "#5f9ea0",
	    chartreuse: "#7fff00",
	    chocolate: "#d2691e",
	    coral: "#ff7f50",
	    cornflowerblue: "#6495ed",
	    cornsilk: "#fff8dc",
	    crimson: "#dc143c",
	    cyan: "#00ffff",
	    darkblue: "#00008b",
	    darkcyan: "#008b8b",
	    darkgoldenrod: "#b8860b",
	    darkgrey: "#a9a9a9",
	    darkgray: "#a9a9a9",
	    darkgreen: "#006400",
	    darkkhaki: "#bdb76b",
	    darkmagenta: "#8b008b",
	    darkolivegreen: "#556b2f",
	    darkorange: "#ff8c00",
	    darkorchid: "#9932cc",
	    darkred: "#8b0000",
	    darksalmon: "#e9967a",
	    darkseagreen: "#8fbc8f",
	    darkslateblue: "#483d8b",
	    darkslategrey: "#2f4f4f",
	    darkslategray: "#2f4f4f",
	    darkturquoise: "#00ced1",
	    darkviolet: "#9400d3",
	    deeppink: "#ff1493",
	    deepskyblue: "#00bfff",
	    dimgrey: "#696969",
	    dimgray: "#696969",
	    dodgerblue: "#1e90ff",
	    firebrick: "#b22222",
	    floralwhite: "#fffaf0",
	    forestgreen: "#228b22",
	    fuchsia: "#ff00ff",
	    gainsboro: "#dcdcdc",
	    ghostwhite: "#f8f8ff",
	    gold: "#ffd700",
	    goldenrod: "#daa520",
	    grey: "#808080",
	    gray: "#808080",
	    green: "#008000",
	    greenyellow: "#adff2f",
	    honeydew: "#f0fff0",
	    hotpink: "#ff69b4",
	    indianred: "#cd5c5c",
	    indigo: "#4b0082",
	    ivory: "#fffff0",
	    khaki: "#f0e68c",
	    lavender: "#e6e6fa",
	    lavenderblush: "#fff0f5",
	    lawngreen: "#7cfc00",
	    lemonchiffon: "#fffacd",
	    lightblue: "#add8e6",
	    lightcoral: "#f08080",
	    lightcyan: "#e0ffff",
	    lightgoldenrodyellow: "#fafad2",
	    lightgrey: "#d3d3d3",
	    lightgray: "#d3d3d3",
	    lightgreen: "#90ee90",
	    lightpink: "#ffb6c1",
	    lightsalmon: "#ffa07a",
	    lightseagreen: "#20b2aa",
	    lightskyblue: "#87cefa",
	    lightslategrey: "#778899",
	    lightslategray: "#778899",
	    lightsteelblue: "#b0c4de",
	    lightyellow: "#ffffe0",
	    lime: "#00ff00",
	    limegreen: "#32cd32",
	    linen: "#faf0e6",
	    magenta: "#ff00ff",
	    maroon: "#800000",
	    mediumaquamarine: "#66cdaa",
	    mediumblue: "#0000cd",
	    mediumorchid: "#ba55d3",
	    mediumpurple: "#9370db",
	    mediumseagreen: "#3cb371",
	    mediumslateblue: "#7b68ee",
	    mediumspringgreen: "#00fa9a",
	    mediumturquoise: "#48d1cc",
	    mediumvioletred: "#c71585",
	    midnightblue: "#191970",
	    mintcream: "#f5fffa",
	    mistyrose: "#ffe4e1",
	    moccasin: "#ffe4b5",
	    navajowhite: "#ffdead",
	    navy: "#000080",
	    oldlace: "#fdf5e6",
	    olive: "#808000",
	    olivedrab: "#6b8e23",
	    orange: "#ffa500",
	    orangered: "#ff4500",
	    orchid: "#da70d6",
	    palegoldenrod: "#eee8aa",
	    palegreen: "#98fb98",
	    paleturquoise: "#afeeee",
	    palevioletred: "#db7093",
	    papayawhip: "#ffefd5",
	    peachpuff: "#ffdab9",
	    peru: "#cd853f",
	    pink: "#ffc0cb",
	    plum: "#dda0dd",
	    powderblue: "#b0e0e6",
	    purple: "#800080",
	    red: "#ff0000",
	    rosybrown: "#bc8f8f",
	    royalblue: "#4169e1",
	    saddlebrown: "#8b4513",
	    salmon: "#fa8072",
	    sandybrown: "#f4a460",
	    seagreen: "#2e8b57",
	    seashell: "#fff5ee",
	    sienna: "#a0522d",
	    silver: "#c0c0c0",
	    skyblue: "#87ceeb",
	    slateblue: "#6a5acd",
	    slategrey: "#708090",
	    slategray: "#708090",
	    snow: "#fffafa",
	    springgreen: "#00ff7f",
	    steelblue: "#4682b4",
	    tan: "#d2b48c",
	    teal: "#008080",
	    thistle: "#d8bfd8",
	    tomato: "#ff6347",
	    turquoise: "#40e0d0",
	    violet: "#ee82ee",
	    wheat: "#f5deb3",
	    white: "#ffffff",
	    whitesmoke: "#f5f5f5",
	    yellow: "#ffff00",
	    yellowgreen: "#9acd32"
	  };

	  Color.parseCache = parseCache = {};

	  Color.color = color = function(a, b, c, d) {
	    var clr;
	    if ((b == null) && (a instanceof Color)) {
	      return a;
	    }
	    if (isString(a) && (clr = colorNamesMap[a] || parseCache[a])) {
	      return clr;
	    }
	    return new Color(a, b, c, d);
	  };

	  Color.hslColor = hslColor = function(h, s, l, a) {
	    var f, p, phase, q, t;
	    if (a == null) {
	      a = 1;
	    }
	    if (h instanceof Color) {
	      return h;
	    }
	    h = modulo(h, 1);
	    phase = h * 6 | 0;
	    f = h * 6 - phase;
	    p = l * (1 - s);
	    q = l * (1 - f * s);
	    t = l * (1 - (1 - f) * s);
	    h = colorFloatEq(h, 1) ? 1 : h % 1;
	    switch (phase % 6) {
	      case 0:
	        return new Color(l, t, p, a, h, s, l);
	      case 1:
	        return new Color(q, l, p, a, h, s, l);
	      case 2:
	        return new Color(p, l, t, a, h, s, l);
	      case 3:
	        return new Color(p, q, l, a, h, s, l);
	      case 4:
	        return new Color(t, p, l, a, h, s, l);
	      case 5:
	        return new Color(l, p, q, a, h, s, l);
	    }
	  };

	  Color.parse = function(string, existing) {
	    if (existing == null) {
	      existing = null;
	    }
	    if (existing) {
	      throw new Error("existing feature is no longer supported");
	    }
	    return new Artomic.Color(string);
	  };

	  Color.prototype._initFromObject = function(obj) {
	    return this.r = obj.r, this.g = obj.g, this.b = obj.b, this.a = obj.a, obj;
	  };

	  Color.prototype._initFromString = function(string) {
	    var a, b, clr, elements, g, lcString, match, r, x;
	    this.initProperties();
	    parseCache[string] = this;
	    if (match = string.match(hex16ColorRegex)) {
	      x = match[0], r = match[1], g = match[2], b = match[3], a = match[4];
	      if (!a) {
	        this._htmlColorString = string;
	      }
	      a || (a = "f");
	      this.r = parseInt(r, 16) / 15;
	      this.g = parseInt(g, 16) / 15;
	      this.b = parseInt(b, 16) / 15;
	      return this.a = parseInt(a, 16) / 15;
	    } else if (match = string.match(hex256ColorRegex)) {
	      x = match[0], r = match[1], g = match[2], b = match[3], a = match[4];
	      if (!a) {
	        this._htmlColorString = string;
	      }
	      a || (a = "ff");
	      this.r = parseInt(r, 16) / 255;
	      this.g = parseInt(g, 16) / 255;
	      this.b = parseInt(b, 16) / 255;
	      return this.a = parseInt(a, 16) / 255;
	    } else if (elements = string.match(rgbColorRegex)) {
	      this._htmlColorString = string;
	      this.a = 1;
	      this.r = parseRGBColorComponent(elements[1]);
	      this.g = parseRGBColorComponent(elements[2]);
	      return this.b = parseRGBColorComponent(elements[3]);
	    } else if (elements = string.match(rgbaColorRegex)) {
	      this._htmlColorString = string;
	      this.r = parseRGBColorComponent(elements[1]);
	      this.g = parseRGBColorComponent(elements[2]);
	      this.b = parseRGBColorComponent(elements[3]);
	      return this.a = elements[4] - 0;
	    } else if (/^[a-z]+$/i.test(lcString = string.toLowerCase())) {
	      if (!(clr = colorNamesMap[lcString])) {
	        return this.log({
	          parseError: this.parseError = "WARNING: Color.parse failure. Unknown color name: " + (inspect(string))
	        });
	      }
	      this._htmlColorString = clr._htmlColorString;
	      this.r = clr.r;
	      this.g = clr.g;
	      this.b = clr.b;
	      return this.a = clr.a;
	    } else {
	      return this.log({
	        parseError: this.parseError = "WARNING: Color.parse failure for " + (inspect(string))
	      });
	    }
	  };

	  Color.prototype.initProperties = function() {
	    this.r = this.g = this.b = 0;
	    this.a = 1;
	    this._hue = this._saturation = this._lightness = null;
	    this.parseError = null;
	    return this._htmlColorString = null;
	  };

	  Color.prototype._init = function(a, b, c, d, h, s, l) {
	    this.initProperties();
	    if (h != null) {
	      this._hue = h - 0;
	    }
	    if (s != null) {
	      this._saturation = s - 0;
	    }
	    if (l != null) {
	      this._lightness = l - 0;
	    }
	    if (a == null) {
	      this.r = this.g = this.b = 0;
	      return this.a = 1;
	    } else if (b == null) {
	      if (a > 1) {
	        a /= 255;
	      }
	      this.r = this.g = this.b = a - 0;
	      return this.a = 1 - 0;
	    } else if (c != null) {
	      if (a > 1 || b > 1 || c > 1) {
	        a /= 255;
	        b /= 255;
	        c /= 255;
	      }
	      this.r = a - 0;
	      this.g = b - 0;
	      this.b = c - 0;
	      return this.a = d != null ? d - 0 : 1;
	    }
	  };

	  Color.prototype.add = function(r, g, b, a) {
	    if (r instanceof Color) {
	      return color(this.r + r.r, this.g + r.g, this.b + r.b, this.a + r.a);
	    } else if (g != null) {
	      return color(this.r + r, this.g + g, this.b + b, this.a + a);
	    } else {
	      return color(this.r + r, this.g + r, this.b + r, this.a + r);
	    }
	  };

	  Color.prototype.sub = function(r, g, b, a) {
	    if (r instanceof Color) {
	      return color(this.r - r.r, this.g - r.g, this.b - r.b, this.a - r.a);
	    } else if (g != null) {
	      return color(this.r - r, this.g - g, this.b - b, this.a - a);
	    } else {
	      return color(this.r - r, this.g - r, this.b - r, this.a - r);
	    }
	  };

	  Color.prototype.mul = function(r, g, b, a) {
	    if (r instanceof Color) {
	      return color(this.r * r.r, this.g * r.g, this.b * r.b, this.a * r.a);
	    } else if (g != null) {
	      return color(this.r * r, this.g * g, this.b * b, this.a * a);
	    } else {
	      return color(this.r * r, this.g * r, this.b * r, this.a * r);
	    }
	  };

	  Color.prototype.div = function(r, g, b, a) {
	    if (r instanceof Color) {
	      return color(this.r / r.r, this.g / r.g, this.b / r.b, this.a / r.a);
	    } else if (g != null) {
	      return color(this.r / r, this.g / g, this.b / b, this.a / a);
	    } else {
	      return color(this.r / r, this.g / r, this.b / r, this.a / r);
	    }
	  };

	  Color.prototype.interpolate = function(toColor, p) {
	    var oneMinusP;
	    toColor = color(toColor);
	    oneMinusP = 1 - p;
	    return new Color(toColor.r * p + this.r * oneMinusP, toColor.g * p + this.g * oneMinusP, toColor.b * p + this.b * oneMinusP, toColor.a * p + this.a * oneMinusP);
	  };

	  Color.prototype.blend = function(r, amount) {
	    return r.sub(this).mul(amount).add(this);
	  };

	  Color.prototype.withAlpha = function(a) {
	    return new Color(this.r, this.g, this.b, a);
	  };

	  Color.prototype.withLightness = function(v) {
	    return hslColor(this.h, this.s, v, this.a);
	  };

	  Color.prototype.withHue = function(v) {
	    return hslColor(v, this.s, this.l, this.a);
	  };

	  Color.prototype.withSat = function(v) {
	    return hslColor(this.h, v, this.l, this.a);
	  };

	  Color.prototype.withChannel = function(c, v) {
	    switch (c) {
	      case "r":
	        return new Color(v, this.g, this.b, this.a);
	      case "g":
	        return new Color(this.r, v, this.b, this.a);
	      case "b":
	        return new Color(this.r, this.g, v, this.a);
	      case "h":
	        return hslColor(v, this.s, this.l, this.a);
	      case "s":
	        return hslColor(this.h, v, this.l, this.a);
	      case "l":
	        return this.withLightness(v);
	      case "a":
	        return this.withAlpha(v);
	      default:
	        throw new Error("invalid channel: " + (inspect(c)));
	    }
	  };

	  Color.prototype.withChannels = function(c) {
	    var a, b, g, h, l, r, s;
	    if (c.h || c.s || c.l) {
	      h = c.h != null ? c.h : this.h;
	      s = c.s != null ? c.s : this.s;
	      l = c.l != null ? c.l : this.l;
	      a = c.a != null ? c.a : this.a;
	      return hslColor(h, s, l, a);
	    } else {
	      r = c.r != null ? c.r : this.r;
	      g = c.g != null ? c.g : this.g;
	      b = c.b != null ? c.b : this.b;
	      a = c.a != null ? c.a : this.a;
	      return new Color(r, g, b, a);
	    }
	  };

	  Color.getter({
	    array: function() {
	      return [this.r, this.g, this.b, this.a];
	    },
	    arrayRGB: function() {
	      return [this.r, this.g, this.b];
	    },
	    rgbSum: function() {
	      return this.r + this.g + this.b;
	    },
	    rgbSquaredSum: function() {
	      return this.r * this.r + this.g * this.g + this.b * this.b;
	    },
	    clamped: function() {
	      return new Color(bound(0, this.r, 1), bound(0, this.g, 1), bound(0, this.b, 1), bound(0, this.a, 1));
	    },
	    r256: function() {
	      return bound(0, Math.round(this.r * 255), 255);
	    },
	    g256: function() {
	      return bound(0, Math.round(this.g * 255), 255);
	    },
	    b256: function() {
	      return bound(0, Math.round(this.b * 255), 255);
	    },
	    a256: function() {
	      return bound(0, Math.round(this.a * 255), 255);
	    },
	    r16: function() {
	      return bound(0, Math.round(this.r * 15), 15);
	    },
	    g16: function() {
	      return bound(0, Math.round(this.g * 15), 15);
	    },
	    b16: function() {
	      return bound(0, Math.round(this.b * 15), 15);
	    },
	    a16: function() {
	      return bound(0, Math.round(this.a * 15), 15);
	    },
	    h256: function() {
	      return bound(0, Math.round(this.h * 255), 255);
	    },
	    s256: function() {
	      return bound(0, Math.round(this.s * 255), 255);
	    },
	    b256: function() {
	      return bound(0, Math.round(this.b * 255), 255);
	    },
	    rClamped: function() {
	      return bound(0, this.r, 1);
	    },
	    gClamped: function() {
	      return bound(0, this.g, 1);
	    },
	    bClamped: function() {
	      return bound(0, this.b, 1);
	    },
	    aClamped: function() {
	      return bound(0, this.a, 1);
	    },
	    premultiplied: function() {
	      return new Color(this.r * this.a, this.g * this.a, this.b * this.a, this.a);
	    },
	    demultiplied: function() {
	      return new Color(this.r / this.a, this.g / this.a, this.b / this.a, this.a);
	    },
	    cssString: function() {
	      return "rgba(" + [this.r256, this.g256, this.b256, this.aClamped].join(', ') + ")";
	    },
	    rgbaString: function() {
	      return "color(" + [this.r256, this.g256, this.b256, this.a256].join('/255, ') + "/255)";
	    },
	    hexString: function() {
	      return "#" + pad(this.r256.toString(16), 2) + pad(this.g256.toString(16), 2) + pad(this.b256.toString(16), 2);
	    },
	    hex16String: function() {
	      return "#" + pad(this.r16.toString(16), 1) + pad(this.g16.toString(16), 1) + pad(this.b16.toString(16), 1);
	    },
	    hslHexString: function() {
	      return "#" + pad(this.h256.toString(16), 2) + pad(this.s256.toString(16), 2) + pad(this.b256.toString(16), 2);
	    },
	    rgbaHexString: function() {
	      return "#" + pad(this.r256.toString(16), 2) + pad(this.g256.toString(16), 2) + pad(this.b256.toString(16), 2) + pad(this.a256.toString(16), 2);
	    }
	  });

	  Color.prototype.eq = function(r) {
	    if (this === r) {
	      return true;
	    }
	    return r && colorFloatEq(this.r, r.r) && colorFloatEq(this.g, r.g) && colorFloatEq(this.b, r.b) && colorFloatEq(this.a, r.a);
	  };

	  Color.prototype.lt = function(r) {
	    return this.r < r.r && this.b < r.b && this.c < r.c && this.a < r.a;
	  };

	  Color.prototype.gt = function(r) {
	    return this.r > r.r && this.b > r.b && this.c > r.c && this.a > r.a;
	  };

	  Color.prototype.lte = function(r) {
	    return this.r <= r.r && this.b <= r.b && this.c <= r.c && this.a <= r.a;
	  };

	  Color.prototype.gte = function(r) {
	    return this.r >= r.r && this.b >= r.b && this.c >= r.c && this.a >= r.a;
	  };

	  Color.prototype.getInspectedString = function() {
	    var a;
	    a = colorFloatEq(1, this.a) ? this.hexString : this.rgbaHexString;
	    return "color('" + a + "')";
	  };

	  Color.prototype.toString = function() {
	    return this._htmlColorString || (this._htmlColorString = colorFloatEq(1, this.a) ? this.getHexString() : this.getCssString());
	  };

	  Color.prototype.toArray = toArray = function() {
	    return [this.r, this.g, this.b, this.a];
	  };

	  Color.prototype.toPlainStructure = function() {
	    return {
	      r: this.r,
	      g: this.g,
	      b: this.b,
	      a: this.a
	    };
	  };

	  Color.prototype.toPlainEvalString = function() {
	    return "{r:" + this.r + ", g:" + this.g + ", b:" + this.b + ", a:" + this.a + "}";
	  };

	  Color.getter({
	    h: function() {
	      return this._hue != null ? this._hue : this._hue = this.rgbToHsl() && this._hue;
	    },
	    s: function() {
	      return this._saturation != null ? this._saturation : this._saturation = this.rgbToHsl() && this._saturation;
	    },
	    l: function() {
	      return this._lightness != null ? this._lightness : this._lightness = this.rgbToHsl() && this._lightness;
	    },
	    inverseL: function() {
	      return 1 - this.l;
	    },
	    inverseS: function() {
	      return 1 - this.s;
	    },
	    inverseH: function() {
	      return 1 - this.h;
	    },
	    hue: function() {
	      return this._hue != null ? this._hue : this._hue = this.rgbToHsl() && this._hue;
	    },
	    sat: function() {
	      return this._saturation != null ? this._saturation : this._saturation = this.rgbToHsl() && this._saturation;
	    },
	    lit: function() {
	      return this._lightness != null ? this._lightness : this._lightness = this.rgbToHsl() && this._lightness;
	    },
	    saturation: function() {
	      return this._saturation != null ? this._saturation : this._saturation = this.rgbToHsl() && this._saturation;
	    },
	    lightness: function() {
	      return this._lightness != null ? this._lightness : this._lightness = this.rgbToHsl() && this._lightness;
	    },
	    perceptualLightness: function() {
	      return 0.2126 * this.r + 0.7152 * this.g + 0.0722 * this.b;
	    },
	    satLightness: function() {
	      return (2 - this._saturation) * this._lightness * .5;
	    }
	  });

	  Color.perceptualWeights = {
	    r: 0.2126,
	    g: 0.7152,
	    b: 0.0722
	  };

	  Color.prototype.rgbToHsl = function() {
	    var b, delta, g, maxRGB, minRGB, r, sixth;
	    r = this.r;
	    g = this.g;
	    b = this.b;
	    maxRGB = max(r, g, b);
	    minRGB = min(r, g, b);
	    delta = maxRGB - minRGB;
	    sixth = 1.0 / 6.0;
	    this._lightness = maxRGB;
	    if (maxRGB === minRGB) {
	      this._hue = 0;
	      this._saturation = 0;
	      return true;
	    }
	    if (maxRGB === r) {
	      if (g >= b) {
	        this._hue = sixth * ((g - b) / delta);
	      } else {
	        this._hue = sixth * ((g - b) / delta) + 1;
	      }
	    } else if (maxRGB === g) {
	      this._hue = sixth * ((b - r) / delta) + 1 / 3;
	    } else {
	      this._hue = sixth * ((r - g) / delta) + 2 / 3;
	    }
	    this._saturation = 1 - (minRGB / maxRGB);
	    return true;
	  };

	  for (k in colorNamesMap) {
	    v = colorNamesMap[k];
	    colorNamesMap[k] = color(v);
	  }

	  return Color;

	})(AtomicBase);


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	var Base, BaseObject, inspect, isFunction, isNumber, isPlainArray, isPlainObject, isString, log, ref, stringToNumberArray,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(8), inspect = ref.inspect, log = ref.log, isNumber = ref.isNumber, isPlainObject = ref.isPlainObject, isPlainArray = ref.isPlainArray, isString = ref.isString, isFunction = ref.isFunction, stringToNumberArray = ref.stringToNumberArray, BaseObject = ref.BaseObject;

	module.exports = Base = (function(superClass) {
	  extend(Base, superClass);

	  Base.prototype._initFromString = function(string) {
	    return this._init.apply(this, stringToNumberArray(string));
	  };

	  Base.prototype.inspect = function(inspector) {
	    if (inspector.put) {
	      return inspector.put(this.getInspectedString());
	    } else {
	      return this.getInspectedString();
	    }
	  };

	  function Base(a, b, c, d, e, f, g) {
	    Base.__super__.constructor.apply(this, arguments);
	    if (isPlainArray(a)) {
	      this._init.apply(this, a);
	    } else if (isString(a)) {
	      this._initFromString(a);
	    } else if (isPlainObject(a)) {
	      this._initFromObject(a);
	    } else if ((a != null) && !isNumber(a) && !(a instanceof Base) && isFunction(a.toString)) {
	      this._initFromString(a.toString());
	    } else {
	      this._init(a, b, c, d, e, f, g);
	    }
	  }

	  Base.prototype.compare = function(b) {
	    if (this.eq(b)) {
	      return 0;
	    }
	    if (this.lte(b)) {
	      return -1;
	    }
	    if (this.gte(b)) {
	      return 1;
	    }
	    return NaN;
	  };

	  return Base;

	})(BaseObject);


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	
	/*

	With the exception of the setter methods, this is a pure-functional class.
	 */

	/*
	Experiment: Instead of storing the matrix as 6 members, use a Float32Array:

	  Bonus: if we order the 6 elements correctly, we can just pass the Float32Array directly to Webgl uniformMatrix3fv
	  Result:
	    FF is about 2x as fast with this implementation, but Chrome is about 10x slower (see below)
	    Sticking with Members implementation for now.

	On my Macbook pro Retina (2.6 GHz Intel Core i7)

	Chrome 29.0.1547.57 (members)
	  Matrix.translate 14,716,649/s
	  matrix().translate 8,052,404/s
	  transform point 3,922,725/s
	  invert 12,733,472/s
	  mul 16,146,097/s

	Chrome 29.0.1547.57 (float32Array)
	  Matrix.translate 926,402/s
	  matrix().translate 463,791/s
	  transform point 3,684,177/s
	  invert 978,248/s
	  mul 992,078/s

	FF 23.0.1 (members)
	  Matrix.translate 1,281,078/s
	  matrix().translate 534,542/s
	  transform point 768,224/s
	  invert 1,374,788/s
	  mul 1,413,206/s

	FF 23.0.1 (float32Array)
	  Matrix.translate 2,126,281/s
	  matrix().translate 1,013,548/s
	  transform point 832,604/s
	  invert 2,524,903/s
	  mul 2,669,331/s

	NOTE! the order of the fields in the float32array for Webgl uniformMatrix3fv should be:
	  @values[0] = @sx
	  @values[1] = @shy
	  @values[2] = @tx
	  @values[3] = @shx
	  @values[4] = @sy
	  @values[5] = @ty
	 */
	var AtomicBase, Foundation, Matrix, Point, Rectangle, compact, float32Eq, inspect, point, rect, simplifyNum,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(8);

	AtomicBase = __webpack_require__(95);

	Point = __webpack_require__(97);

	Rectangle = __webpack_require__(98);

	point = Point.point;

	rect = Rectangle.rect;

	inspect = Foundation.inspect, simplifyNum = Foundation.simplifyNum, float32Eq = Foundation.float32Eq, compact = Foundation.compact;

	module.exports = Matrix = (function(superClass) {
	  var cleanInspect, identityMatrix, intermediatResultMatrix, matrix, toArray;

	  extend(Matrix, superClass);

	  function Matrix() {
	    return Matrix.__super__.constructor.apply(this, arguments);
	  }

	  Matrix.matrix = matrix = function(a, b, c, d, e, f) {
	    if (a instanceof Matrix) {
	      return a;
	    } else if (a === null || a === void 0) {
	      return identityMatrix;
	    } else {
	      return new Matrix(a, b, c, d, e, f);
	    }
	  };

	  Matrix._cleanInspect = cleanInspect = function(pointName, s) {
	    var out, r;
	    out = pointName ? (r = new RegExp("([0-9])" + pointName, "g"), s.replace(r, "$1 * " + pointName).replace(/-1 \* /g, "-").replace(/\ \+ -/g, " - ").replace(/0\./g, ".")) : s.replace(/-1([A-Za-z]+)/g, "-$1").replace(/\ \+ -/g, " - ").replace(/0\./g, ".");
	    return out;
	  };

	  Matrix.translate = function(x, y) {
	    if (x && (typeof x.x === "number")) {
	      y = x.y;
	      x = x.x;
	    } else {
	      if (typeof x !== "number") {
	        x = 0;
	      }
	      if (typeof y !== "number") {
	        y = x;
	      }
	    }
	    if (x === 0 && y === 0) {
	      return identityMatrix;
	    } else {
	      return new Matrix(1, 1, 0, 0, x, y);
	    }
	  };

	  Matrix.scale = function(a, b) {
	    var s, sx, sy;
	    s = point(a, b);
	    sx = s.x;
	    sy = s.y;
	    if (sx === 1 && sy === 1) {
	      return identityMatrix;
	    } else {
	      return new Matrix(sx, sy, 0, 0, 0, 0);
	    }
	  };

	  Matrix.rotate = function(radians) {
	    var cr, sr;
	    cr = Math.cos(radians);
	    sr = Math.sin(radians);
	    if (cr === 1 && sr === 0) {
	      return identityMatrix;
	    } else {
	      return new Matrix(cr, cr, -sr, sr, 0, 0);
	    }
	  };

	  Matrix.prototype.initDefaults = function() {
	    this.sx = this.sy = 1;
	    this.shy = this.shx = 0;
	    this.tx = this.ty = 0;
	    this._exactScale = this._exactScaler = null;
	    return this;
	  };

	  Matrix.prototype._init = function(a, b, c, d, e, f) {
	    this.initDefaults();
	    if (a == null) {
	      return;
	    }
	    if (a instanceof Point) {
	      return this._initFromPoint(a);
	    } else if (a instanceof Matrix) {
	      return this._initFromMatrix(a);
	    } else {
	      this.sx = a - 0;
	      if (b != null) {
	        this.sy = b - 0;
	      }
	      if (c != null) {
	        this.shx = c - 0;
	      }
	      if (d != null) {
	        this.shy = d - 0;
	      }
	      if (e != null) {
	        this.tx = e - 0;
	      }
	      if (f != null) {
	        return this.ty = f - 0;
	      }
	    }
	  };

	  Matrix.prototype._setAll = function(sx, sy, shx, shy, tx, ty) {
	    this.sx = sx;
	    this.sy = sy;
	    this.shx = shx;
	    this.shy = shy;
	    this.tx = tx;
	    this.ty = ty;
	    return this;
	  };

	  Matrix.getter({
	    t: function() {
	      return point(this.tx, this.ty);
	    },
	    s: function() {
	      return point(this.sx, this.sy);
	    },
	    sh: function() {
	      return point(this.shx, this.shy);
	    },
	    xsv: function() {
	      return point(this.sx, this.shx);
	    },
	    ysv: function() {
	      return point(this.sy, this.shy);
	    },
	    exactScale: function() {
	      return this._exactScale || (this._exactScale = point(this.xsv.magnitude, this.ysv.magnitude));
	    },
	    exactScaler: function() {
	      return this._exactScaler || (this._exactScaler = this.exactScale.average());
	    },
	    inv: function() {
	      return this.invert();
	    },
	    location: function() {
	      return point(this.tx, this.ty);
	    },
	    withRoundedTranslation: function() {
	      if (this.translationIsIntegral) {
	        return this;
	      } else {
	        return new Matrix(this.sx, this.sy, this.shx, this.shy, Math.round(this.tx), Math.round(this.ty));
	      }
	    },
	    angle: function() {
	      var p1, p2;
	      p1 = this.transform(Point.point0);
	      p2 = this.transform(new Point(0, 1));
	      return (p2.sub(p1)).angle - Math.PI * .5;
	    },
	    float32Array: function() {
	      return this.fillFloat32Array(new Float32Array(9));
	    },
	    isIdentity: function() {
	      return float32Eq(this.sx, 1) && float32Eq(this.sy, 1) && float32Eq(this.shx, 0) && float32Eq(this.shy, 0) && float32Eq(this.tx, 0) && float32Eq(this.ty, 0);
	    },
	    isTranslateOnly: function() {
	      return float32Eq(this.sx, 1) && float32Eq(this.sy, 1) && float32Eq(this.shx, 0) && float32Eq(this.shy, 0);
	    },
	    translationIsIntegral: function() {
	      return float32Eq(this.tx, Math.round(this.tx)) && float32Eq(this.ty, Math.round(this.ty));
	    },
	    isIntegerTranslateOnly: function() {
	      return this.isTranslateOnly && float32Eq(this.tx, this.tx | 0) && float32Eq(this.ty, this.ty | 0);
	    },
	    isTranslateAndScaleOnly: function() {
	      return float32Eq(this.shx, 0) && float32Eq(this.shy, 0);
	    }
	  });

	  Matrix.prototype.fillFloat32Array = function(a) {
	    a[0] = this.sx;
	    a[1] = this.shx;
	    a[2] = this.tx;
	    a[3] = this.shy;
	    a[4] = this.sy;
	    a[5] = this.ty;
	    return a;
	  };

	  Matrix.prototype._initFromMatrix = function(m) {
	    this.sx = m.sx;
	    this.sy = m.sy;
	    this.shx = m.shx;
	    this.shy = m.shy;
	    this.tx = m.tx;
	    this.ty = m.ty;
	    return this;
	  };

	  Matrix.prototype._initFromPoint = function(p) {
	    this.tx = p.x;
	    this.ty = p.y;
	    return this;
	  };

	  Matrix.prototype.simplify = function() {
	    return new Matrix(simplifyNum(this.sx), simplifyNum(this.sy), simplifyNum(this.shx), simplifyNum(this.shy), simplifyNum(this.tx), simplifyNum(this.ty));
	  };

	  Matrix.prototype.withAngle = function(a) {
	    return this.rotate(a - this.angle);
	  };

	  Matrix.prototype.withScale = function(x, y) {
	    if (x && (typeof x.x === "number")) {
	      y = x.y;
	      x = x.x;
	    } else {
	      if (typeof x !== "number") {
	        x = 0;
	      }
	      if (typeof y !== "number") {
	        y = x;
	      }
	    }
	    return this.scale(x / this.sx, y / this.sy);
	  };

	  Matrix.prototype.withLocation = function(x, y) {
	    if (x && (typeof x.x === "number")) {
	      y = x.y;
	      x = x.x;
	    } else {
	      if (typeof x !== "number") {
	        x = 0;
	      }
	      if (typeof y !== "number") {
	        y = x;
	      }
	    }
	    if (x === this.tx && y === this.ty) {
	      return this;
	    } else {
	      return new Matrix(this.sx, this.sy, this.shx, this.shy, x, y);
	    }
	  };

	  Matrix.prototype.withLocationXY = function(x, y) {
	    if (x === this.tx && y === this.ty) {
	      return this;
	    } else {
	      return new Matrix(this.sx, this.sy, this.shx, this.shy, x, y);
	    }
	  };

	  Matrix.prototype.translate = function(x, y) {
	    if (x && (typeof x.x === "number")) {
	      y = x.y;
	      x = x.x;
	    } else {
	      if (typeof x !== "number") {
	        x = 0;
	      }
	      if (typeof y !== "number") {
	        y = x;
	      }
	    }
	    return new Matrix(this.sx, this.sy, this.shx, this.shy, this.tx + x, this.ty + y);
	  };

	  Matrix.prototype.rotate = function(radians) {
	    var cr, sr;
	    cr = Math.cos(radians);
	    sr = Math.sin(radians);
	    return new Matrix(this.sx * cr - this.shy * sr, this.shx * sr + this.sy * cr, this.shx * cr - this.sy * sr, this.sx * sr + this.shy * cr, this.tx * cr - this.ty * sr, this.tx * sr + this.ty * cr);
	  };

	  Matrix.prototype.scale = function(x, y) {
	    if (x && (typeof x.x === "number")) {
	      y = x.y;
	      x = x.x;
	    } else {
	      if (typeof x !== "number") {
	        x = 0;
	      }
	      if (typeof y !== "number") {
	        y = x;
	      }
	    }
	    return new Matrix(this.sx * x, this.sy * y, this.shx * x, this.shy * y, this.tx * x, this.ty * y);
	  };

	  Matrix.prototype.determinantReciprocal = function() {
	    return 1.0 / (this.sx * this.sy - this.shy * this.shx);
	  };

	  Matrix.prototype.invert = function(into) {
	    var d;
	    if (!into) {
	      into = new Matrix;
	    }
	    d = this.determinantReciprocal();
	    return into._setAll(d * this.sy, d * this.sx, d * -this.shx, d * -this.shy, d * (-this.tx * this.sy + this.ty * this.shx), d * (this.tx * this.shy - this.ty * this.sx));
	  };

	  Matrix.prototype.eq = function(m) {
	    if (this === m) {
	      return true;
	    }
	    return m && float32Eq(this.sx, m.sx) && float32Eq(this.sy, m.sy) && float32Eq(this.shx, m.shx) && float32Eq(this.shy, m.shy) && float32Eq(this.tx, m.tx) && float32Eq(this.ty, m.ty);
	  };

	  Matrix.prototype.lt = function(m) {
	    return this.sx < m.sx && this.sy < m.sy && this.shx < m.shx && this.shy < m.shy && this.tx < m.tx && this.ty < m.ty;
	  };

	  Matrix.prototype.gt = function(m) {
	    return this.sx > m.sx && this.sy > m.sy && this.shx > m.shx && this.shy > m.shy && this.tx > m.tx && this.ty > m.ty;
	  };

	  Matrix.prototype.lte = function(m) {
	    return this.sx <= m.sx && this.sy <= m.sy && this.shx <= m.shx && this.shy <= m.shy && this.tx <= m.tx && this.ty <= m.ty;
	  };

	  Matrix.prototype.gte = function(m) {
	    return this.sx >= m.sx && this.sy >= m.sy && this.shx >= m.shx && this.shy >= m.shy && this.tx >= m.tx && this.ty >= m.ty;
	  };

	  Matrix.prototype.add = function(m, into) {
	    if (!into) {
	      into = new Matrix;
	    }
	    return into._setAll(this.sx + m.sx, this.sy + m.sy, this.shx + m.shx, this.shy + m.shy, this.tx + m.tx, this.ty + m.ty);
	  };

	  Matrix.prototype.sub = function(m, into) {
	    if (!into) {
	      into = new Matrix;
	    }
	    return into._setAll(this.sx - m.sx, this.sy - m.sy, this.shx - m.shx, this.shy - m.shy, this.tx - m.tx, this.ty - m.ty);
	  };

	  Matrix.prototype.mul = function(m, into) {
	    if (!into) {
	      into = new Matrix;
	    }
	    if (typeof m === "number") {
	      return into._setAll(this.sx * m, this.sy * m, this.shx * m, this.shy * m, this.tx * m, this.ty * m);
	    } else {
	      return into._setAll(this.sx * m.sx + this.shy * m.shx, this.shx * m.shy + this.sy * m.sy, this.shx * m.sx + this.sy * m.shx, this.sx * m.shy + this.shy * m.sy, this.tx * m.sx + this.ty * m.shx + m.tx, this.tx * m.shy + this.ty * m.sy + m.ty);
	    }
	  };

	  Matrix.prototype.div = function(m, into) {
	    if (!into) {
	      into = new Matrix;
	    }
	    m.invert(intermediatResultMatrix);
	    return this.mul(intermediatResultMatrix, into);
	  };

	  Matrix.prototype.interpolate = function(toMatrix, p) {
	    var into, oneMinusP;
	    if (!into) {
	      into = new Matrix;
	    }
	    oneMinusP = 1 - p;
	    return into._setAll(toMatrix.sx * p + this.sx * oneMinusP, toMatrix.sy * p + this.sy * oneMinusP, toMatrix.shx * p + this.shx * oneMinusP, toMatrix.shy * p + this.shy * oneMinusP, toMatrix.tx * p + this.tx * oneMinusP, toMatrix.ty * p + this.ty * oneMinusP);
	  };

	  Matrix.prototype.toArray = toArray = function() {
	    return [this.sx, this.sy, this.shx, this.shy, this.tx, this.ty];
	  };

	  Matrix.prototype.toPlainStructure = {
	    sx: Matrix.sx,
	    sy: Matrix.sy,
	    shx: Matrix.shx,
	    shy: Matrix.shy,
	    tx: Matrix.tx,
	    ty: Matrix.ty
	  };

	  Matrix.prototype.toPlainEvalString = function() {
	    return "{sx:" + this.sx + ", sy:" + this.sy + ", shx:" + this.shx + ", shy:" + this.shy + ", tx:" + this.tx + ", ty:" + this.ty + "}";
	  };

	  Matrix.prototype.toString = function() {
	    return this.toArray().join(", ");
	  };

	  Matrix.prototype.getInspectedString = function() {
	    return "matrix(" + (this.toString()) + ")";
	  };

	  Matrix.prototype.inspectX = function(pointName, nullForZeroString) {
	    var pn;
	    pn = pointName;
	    pointName = pointName ? pointName + "." : "";
	    if (!(this.sx || this.shx || this.tx)) {
	      return (!nullForZeroString ? "0" : void 0);
	    }
	    return cleanInspect(pn, compact([this.sx === 1 ? pointName + "x" : this.sx ? "" + this.sx + pointName + "x" : void 0, this.shx === 1 ? pointName + "y" : this.shx ? "" + this.shx + pointName + "y" : void 0, this.tx ? "" + this.tx : void 0]).join(" + "));
	  };

	  Matrix.prototype.inspectY = function(pointName, nullForZeroString) {
	    var pn;
	    pn = pointName;
	    pointName = pointName ? pointName + "." : "";
	    if (!(this.sy || this.shy || this.ty)) {
	      return (!nullForZeroString ? "0" : void 0);
	    }
	    return cleanInspect(pn, compact([this.sy === 1 ? pointName + "y" : this.sy ? "" + this.sy + pointName + "y" : void 0, this.shy === 1 ? pointName + "x" : this.shy ? "" + this.shy + pointName + "x" : void 0, this.ty ? "" + this.ty : void 0]).join(" + "));
	  };

	  Matrix.prototype.inspectBoth = function(pointName) {
	    return "(" + (this.inspectX(pointName)) + ", " + (this.inspectY(pointName)) + ")";
	  };

	  Matrix.prototype.transform = function(x, y) {
	    if (x && (typeof x.x === "number")) {
	      y = x.y;
	      x = x.x;
	    } else {
	      if (typeof x !== "number") {
	        x = 0;
	      }
	      if (typeof y !== "number") {
	        y = x;
	      }
	    }
	    return new Point(x * this.sx + y * this.shx + this.tx, y * this.sy + x * this.shy + this.ty);
	  };

	  Matrix.prototype.transformX = function(x, y) {
	    return x * this.sx + y * this.shx + this.tx;
	  };

	  Matrix.prototype.transformY = function(x, y) {
	    return y * this.sy + x * this.shy + this.ty;
	  };

	  Matrix.prototype.transformVector = function(a, b) {
	    var dx, dy;
	    switch ((a != null) && a.constructor) {
	      case false:
	        dx = dy = 0;
	        break;
	      case Point:
	        dx = a.x;
	        dy = a.y;
	        break;
	      default:
	        dx = a;
	        dy = b;
	    }
	    return new Point(dx * this.sx + dy * this.shx, dy * this.sy + dx * this.shy);
	  };

	  Matrix.prototype.transformDifference = function(v1, v2) {
	    var dx, dy;
	    dx = v1.x - v2.x;
	    dy = v1.y - v2.y;
	    return new Point(dx * this.sx + dy * this.shx, dy * this.sy + dx * this.shy);
	  };

	  Matrix.prototype.transformBoundingRect = function(r) {
	    var bottom, h, left, right, top, w, x, x1, x2, x3, x4, y, y1, y2, y3, y4;
	    r = rect(r);
	    if (r.infinite) {
	      return r;
	    }
	    if (this.shx === 0 && this.shy === 0) {
	      x = r.x * this.sx + this.tx;
	      y = r.y * this.sy + this.ty;
	      w = r.w * this.sx;
	      h = r.h * this.sy;
	      if (w < 0) {
	        x += w;
	        w = -w;
	      }
	      if (h < 0) {
	        y += h;
	        h = -h;
	      }
	    } else {
	      top = r.x;
	      left = r.y;
	      right = r.x + r.w;
	      bottom = r.y + r.h;
	      x1 = left * this.sx + top * this.shx + this.tx;
	      y1 = top * this.sy + left * this.shy + this.ty;
	      x2 = right * this.sx + top * this.shx + this.tx;
	      y2 = top * this.sy + right * this.shy + this.ty;
	      x3 = right * this.sx + bottom * this.shx + this.tx;
	      y3 = bottom * this.sy + right * this.shy + this.ty;
	      x4 = left * this.sx + bottom * this.shx + this.tx;
	      y4 = bottom * this.sy + left * this.shy + this.ty;
	      x = Math.min(x1, x2, x3, x4);
	      w = Math.max(x1, x2, x3, x4) - x;
	      y = Math.min(y1, y2, y3, y4);
	      h = Math.max(y1, y2, y3, y4) - y;
	    }
	    return new Rectangle(x, y, w, h);
	  };

	  Matrix.identityMatrix = identityMatrix = new Matrix;

	  Matrix.matrix0 = new Matrix(0, 0, 0, 0, 0, 0);

	  intermediatResultMatrix = new Matrix;

	  return Matrix;

	})(AtomicBase);


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var AtomicBase, Foundation, PI, Point, abs, atan, bound, ceil, floatEq, floor, inspect, isArray, isFunction, isNumber, isString, log, max, min, nearInfinity, round, sqrt, stringToNumberArray,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(8);

	AtomicBase = __webpack_require__(95);

	inspect = Foundation.inspect, bound = Foundation.bound, floatEq = Foundation.floatEq, log = Foundation.log, isNumber = Foundation.isNumber, isArray = Foundation.isArray, isString = Foundation.isString, isFunction = Foundation.isFunction, stringToNumberArray = Foundation.stringToNumberArray, nearInfinity = Foundation.nearInfinity;

	abs = Math.abs, sqrt = Math.sqrt, atan = Math.atan, PI = Math.PI, floor = Math.floor, ceil = Math.ceil, round = Math.round, min = Math.min, max = Math.max;

	module.exports = Point = (function(superClass) {
	  var bottomLeft, centerCenter, centerLeft, k, namedPoints, point, point0, point1, ref, toArray, toString, topCenter, topRight, v;

	  extend(Point, superClass);

	  function Point() {
	    return Point.__super__.constructor.apply(this, arguments);
	  }

	  Point.isPoint = function(v) {
	    return v instanceof Point;
	  };

	  Point.point = point = function(a, b) {
	    var p, x, y;
	    if (a instanceof Point) {
	      return a;
	    }
	    if (isString(a) && (p = namedPoints[a])) {
	      return p;
	    }
	    x = a || 0;
	    y = b != null ? b : a;
	    if (x === 0 && y === 0) {
	      return point0;
	    }
	    if (x === 1 && y === 1) {
	      return point1;
	    }
	    return new Point(a, b);
	  };

	  Point.parse = function(string, existing) {
	    if (existing) {
	      throw new Error("existing feature is no longer supported");
	    }
	    return new Point(string);
	  };

	  Point.prototype._init = function(x, y) {
	    x || (x = 0);
	    if (y == null) {
	      y = x;
	    }
	    this.x = x - 0;
	    return this.y = y - 0;
	  };

	  Point.prototype._initFromObject = function(o) {
	    return this.x = o.x, this.y = o.y, o;
	  };

	  Point.getter({
	    top: function() {
	      return 0;
	    },
	    left: function() {
	      return 0;
	    },
	    right: function() {
	      return this.x;
	    },
	    bottom: function() {
	      return this.y;
	    },
	    centerX: function() {
	      return this.x * .5;
	    },
	    centerY: function() {
	      return this.y * .5;
	    },
	    tl: function() {
	      return point0;
	    },
	    tc: function() {
	      return this.mul(0.5, 0);
	    },
	    tr: function() {
	      return this.mul(1, 0);
	    },
	    lc: function() {
	      return this.mul(0, 0.5);
	    },
	    cc: function() {
	      return this.mul(0.5, 0.5);
	    },
	    rc: function() {
	      return this.mul(1, 0.5);
	    },
	    bl: function() {
	      return this.mul(0, 1);
	    },
	    bc: function() {
	      return this.mul(0.5, 1);
	    },
	    br: function() {
	      return this;
	    },
	    ccNeg: function() {
	      return this.mul(-0.5);
	    },
	    topLeft: function() {
	      return point0;
	    },
	    topCenter: function() {
	      return this.mul(0.5, 0);
	    },
	    topRight: function() {
	      return this.mul(1, 0);
	    },
	    centerLeft: function() {
	      return this.mul(0, 0.5);
	    },
	    centerCenter: function() {
	      return this.mul(0.5, 0.5);
	    },
	    centerRight: function() {
	      return this.mul(1, 0.5);
	    },
	    bottomLeft: function() {
	      return this.mul(0, 1);
	    },
	    bottomCenter: function() {
	      return this.mul(0.5, 1);
	    },
	    bottomRight: function() {
	      return this;
	    },
	    w: function() {
	      return this.x;
	    },
	    width: function() {
	      return this.x;
	    },
	    h: function() {
	      return this.y;
	    },
	    height: function() {
	      return this.y;
	    },
	    neg: function() {
	      return new Point(-this.x, -this.y);
	    },
	    inv: function() {
	      return new Point(1.0 / this.x, 1.0 / this.y);
	    },
	    vector: function() {
	      return [this.x, this.y];
	    },
	    magnitudeSquared: function() {
	      return this.x * this.x + this.y * this.y;
	    },
	    magnitude: function() {
	      return sqrt(this.x * this.x + this.y * this.y);
	    },
	    aspectRatio: function() {
	      return this.x / this.y;
	    },
	    absoluteAspectRatio: function() {
	      return abs(this.x / this.y);
	    },
	    swapped: function() {
	      return point(this.y, this.x);
	    },
	    rounded: function() {
	      return this.round();
	    },
	    floored: function() {
	      return this.floor();
	    },
	    ceiled: function() {
	      return this.ceil();
	    },
	    area: function() {
	      return this.x * this.y;
	    },
	    sum: function() {
	      return this.x + this.y;
	    },
	    size: function() {
	      return this;
	    },
	    location: function() {
	      return point0;
	    },
	    abs: function() {
	      return this["with"](abs(this.x), abs(this.y));
	    },
	    unitVector: function() {
	      var m;
	      m = 1 / this.magnitude;
	      return new Point(this.x * m, this.y * m);
	    },
	    perpendicularVector: function() {
	      return new Point(this.y, -this.x);
	    },
	    unitPerpendicularVector: function() {
	      var m;
	      m = 1 / this.magnitude;
	      return new Point(this.y * m, -this.x * m);
	    },
	    angle: function() {
	      if (this.x === 0) {
	        return PI * (this.y > 0 ? .5 : 1.5);
	      } else {
	        if (this.x > 0) {
	          return atan(this.y / this.x);
	        } else {
	          return atan(this.y / this.x) + PI;
	        }
	      }
	    },
	    isInteger: function() {
	      return floatEq(this.x, this.x | 0) && floatEq(this.y, this.y | 0);
	    }
	  });

	  Point.prototype.distance = function(p2) {
	    return sqrt(this.distanceSquared(p2));
	  };

	  Point.prototype.distanceSquared = function(p2) {
	    var x, y;
	    x = this.x - p2.x;
	    y = this.y - p2.y;
	    return x * x + y * y;
	  };

	  Point.prototype.withX = function(x) {
	    if (floatEq(this.x, x)) {
	      return this;
	    } else {
	      return point(x, this.y);
	    }
	  };

	  Point.prototype.withY = function(y) {
	    if (floatEq(this.y, y)) {
	      return this;
	    } else {
	      return point(this.x, y);
	    }
	  };

	  Point.prototype["with"] = function(x, y) {
	    if (this._eqParts(x, y)) {
	      return this;
	    } else {
	      return new Point(x, y);
	    }
	  };

	  Point.prototype.vectorLength = 2;

	  Point.prototype.toIndex = function(lineStride) {
	    return ~~this.y * lineStride + ~~this.x;
	  };

	  Point.prototype.contains = function(p) {
	    return p.x >= 0 && p.y >= 0 && p.x < this.x & p.y < this.y;
	  };

	  Point.prototype.nearestInsidePoint = function(p) {
	    return this["with"](bound(0, p.x, this.x), bound(0, p.y, this.y));
	  };

	  Point.prototype.appendToVector = function(vector) {
	    var l;
	    l = vector.length;
	    vector[l + 1] = this.y;
	    return vector[l] = this.x;
	  };

	  Point.prototype._eqParts = function(x, y) {
	    return floatEq(x, this.x) && floatEq(y, this.y);
	  };

	  Point.prototype.eq = function(b) {
	    return this === b || (b && this._eqParts(b.x, b.y));
	  };

	  Point.prototype.lt = function(b) {
	    return this.x < b.x && this.y < b.y;
	  };

	  Point.prototype.gt = function(b) {
	    return this.x > b.x && this.y > b.y;
	  };

	  Point.prototype.lte = function(b) {
	    return this.x <= b.x && this.y <= b.y;
	  };

	  Point.prototype.gte = function(b) {
	    return this.x >= b.x && this.y >= b.y;
	  };

	  Point.prototype.between = function(a, b) {
	    var x, y;
	    x = this.x, y = this.y;
	    return a.x <= x && a.y <= y && x <= b.x && y <= b.y;
	  };

	  Point.prototype.add = function(b, c) {
	    if (b instanceof Point) {
	      return this["with"](this.x + b.x, this.y + b.y);
	    } else if (c == null) {
	      return this["with"](this.x + b, this.y + b);
	    } else {
	      return this["with"](this.x + b, this.y + c);
	    }
	  };

	  Point.prototype.sub = function(b, c) {
	    if (b instanceof Point) {
	      return this["with"](this.x - b.x, this.y - b.y);
	    } else if (c == null) {
	      return this["with"](this.x - b, this.y - b);
	    } else {
	      return this["with"](this.x - b, this.y - c);
	    }
	  };

	  Point.prototype.mul = function(b, c) {
	    if (b instanceof Point) {
	      return this["with"](this.x * b.x, this.y * b.y);
	    } else if (c == null) {
	      return this["with"](this.x * b, this.y * b);
	    } else {
	      return this["with"](this.x * b, this.y * c);
	    }
	  };

	  Point.prototype.div = function(b, c) {
	    if (b instanceof Point) {
	      return this["with"](this.x / b.x, this.y / b.y);
	    } else if (c == null) {
	      return this["with"](this.x / b, this.y / b);
	    } else {
	      return this["with"](this.x / b, this.y / c);
	    }
	  };

	  Point.prototype.interpolate = function(toPoint, p) {
	    var oneMinusP;
	    oneMinusP = 1 - p;
	    return new Point(toPoint.x * p + this.x * oneMinusP, toPoint.y * p + this.y * oneMinusP);
	  };

	  Point.prototype.dot = function(p) {
	    return this.x * p.x + this.y * p.y;
	  };

	  Point.prototype.cross = function(p) {
	    return this.x * p.y - this.y * p.x;
	  };

	  Point.prototype.toString = toString = function(precision) {
	    if (precision) {
	      return "[" + (this.x.toPrecision(precision)) + ", " + (this.y.toPrecision(precision)) + ")]";
	    } else {
	      return "[" + this.x + ", " + this.y + "]";
	    }
	  };

	  Point.prototype.toJson = toString;

	  Point.prototype.toArray = toArray = function() {
	    return [this.x, this.y];
	  };

	  Point.prototype.toPlainStructure = function() {
	    return {
	      x: this.x,
	      y: this.y
	    };
	  };

	  Point.prototype.toPlainEvalString = function() {
	    return "{x:" + this.x + ", y:" + this.y + "}";
	  };

	  Point.prototype.getInspectedString = function() {
	    return "point(" + this.x + ", " + this.y + ")";
	  };

	  Point.prototype.floor = function() {
	    return this["with"](floor(this.x), floor(this.y));
	  };

	  Point.prototype.ceil = function() {
	    return this["with"](ceil(this.x), ceil(this.y));
	  };

	  Point.prototype.union = function(b) {
	    if (b instanceof Point) {
	      return this.max(b);
	    } else {
	      return b.union(this);
	    }
	  };

	  Point.prototype.intersection = function(b) {
	    if (b instanceof Point) {
	      return this.min(b);
	    } else {
	      return b.intersection(this);
	    }
	  };

	  Point.prototype.min = function(b) {
	    if (b == null) {
	      b = null;
	    }
	    if (b) {
	      return this["with"](min(this.x, b.x), min(this.y, b.y));
	    } else {
	      return min(this.x, this.y);
	    }
	  };

	  Point.prototype.max = function(b) {
	    if (b == null) {
	      b = null;
	    }
	    if (b) {
	      return this["with"](max(this.x, b.x), max(this.y, b.y));
	    } else {
	      return max(this.x, this.y);
	    }
	  };

	  Point.prototype.average = function(b) {
	    if (b == null) {
	      b = null;
	    }
	    if (b) {
	      return this["with"]((this.x + b.x) / 2, (this.y + b.y) / 2);
	    } else {
	      return (this.x + this.y) / 2;
	    }
	  };

	  Point.prototype.bound = function(a, b) {
	    return this["with"](bound(a.x, this.x, b.x), bound(a.y, this.y, b.y));
	  };

	  Point.prototype.round = function(m) {
	    if (m == null) {
	      m = 1;
	    }
	    return this["with"](round(this.x / m) * m, round(this.y / m) * m);
	  };

	  Point.prototype.roundOut = function() {
	    return this.ceil();
	  };

	  point0 = Object.freeze(new Point(0));

	  point1 = Object.freeze(new Point(1));

	  topRight = Object.freeze(new Point(1, 0));

	  topCenter = Object.freeze(new Point(0.5, 0));

	  centerLeft = Object.freeze(new Point(0, 0.5));

	  centerCenter = Object.freeze(new Point(0.5));

	  bottomLeft = Object.freeze(new Point(0, 1));

	  Point.namedPoints = namedPoints = {
	    point0: point0,
	    point1: point1,
	    topLeft: point0,
	    topCenter: topCenter,
	    topRight: topRight,
	    centerLeft: centerLeft,
	    centerCenter: centerCenter,
	    centerRight: Object.freeze(new Point(1, 0.5)),
	    bottomLeft: bottomLeft,
	    bottomCenter: Object.freeze(new Point(0.5, 1)),
	    bottomRight: point1,
	    pointNearInfinity: Object.freeze(new Point(nearInfinity)),
	    left: point0,
	    center: topCenter,
	    right: topRight,
	    top: point0,
	    bottom: bottomLeft
	  };

	  ref = Point.namedPoints;
	  for (k in ref) {
	    v = ref[k];
	    Point[k] = v;
	  }

	  return Point;

	})(AtomicBase);


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, AtomicBase, Foundation, Point, Rectangle, bound, ceil, floatEq, floor, isArray, isFunction, isNumber, isString, log, max, min, point, round, stringToNumberArray,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(8);

	Atomic = __webpack_require__(91);

	AtomicBase = __webpack_require__(95);

	Point = __webpack_require__(97);

	max = Foundation.max, min = Foundation.min, bound = Foundation.bound, round = Foundation.round, floatEq = Foundation.floatEq, floor = Foundation.floor, ceil = Foundation.ceil, round = Foundation.round, log = Foundation.log, isNumber = Foundation.isNumber, isArray = Foundation.isArray, isString = Foundation.isString, isFunction = Foundation.isFunction, stringToNumberArray = Foundation.stringToNumberArray;

	point = Point.point;

	module.exports = Rectangle = (function(superClass) {
	  var rect, toArray;

	  extend(Rectangle, superClass);

	  function Rectangle() {
	    return Rectangle.__super__.constructor.apply(this, arguments);
	  }

	  Rectangle.rect = rect = function(a, b, c, d) {
	    if (a instanceof Rectangle) {
	      return a;
	    }
	    return new Rectangle(a, b, c, d);
	  };

	  Rectangle.prototype._init = function(a, b, c, d) {
	    this.x = this.y = this.w = this.h = 0;
	    if (d != null) {
	      this.x = a - 0;
	      this.y = b - 0;
	      this.w = c - 0;
	      return this.h = d - 0;
	    } else if (b != null) {
	      if (b instanceof Point) {
	        this.x = a.x;
	        this.y = a.y;
	        this.w = b.w;
	        return this.h = b.h;
	      } else {
	        this.w = a - 0;
	        return this.h = b - 0;
	      }
	    } else if (a instanceof Point) {
	      this.w = a.w;
	      return this.h = a.h;
	    } else if (a != null) {
	      return this.w = this.h = a - 0;
	    }
	  };

	  Rectangle.getter({
	    clone: function() {
	      return new Rectangle(this.x, this.y, this.w, this.h);
	    },
	    location: function() {
	      return new Point(this.x, this.y);
	    },
	    locationMatrix: function() {
	      return Atomic.Matrix.translate(this.x, this.y);
	    },
	    size: function() {
	      return new Point(this.w, this.h);
	    },
	    width: function() {
	      return this.w;
	    },
	    height: function() {
	      return this.h;
	    },
	    rounded: function() {
	      return this["with"](round(this.x), round(this.y), round(this.w), round(this.h));
	    },
	    tl: function() {
	      return new Point(this.x, this.y);
	    },
	    tc: function() {
	      return new Point(this.hCenter, this.y);
	    },
	    tr: function() {
	      return new Point(this.right, this.y);
	    },
	    lc: function() {
	      return new Point(this.x, this.vCenter);
	    },
	    cc: function() {
	      return new Point(this.hCenter, this.vCenter);
	    },
	    rc: function() {
	      return new Point(this.right, this.vCenter);
	    },
	    bl: function() {
	      return new Point(this.x, this.bottom);
	    },
	    bc: function() {
	      return new Point(this.hCenter, this.bottom);
	    },
	    br: function() {
	      return new Point(this.right, this.bottom);
	    },
	    topLeft: function() {
	      return new Point(this.x, this.y);
	    },
	    topCenter: function() {
	      return new Point(this.hCenter, this.y);
	    },
	    topRight: function() {
	      return new Point(this.right, this.y);
	    },
	    centerLeft: function() {
	      return new Point(this.x, this.vCenter);
	    },
	    centerCenter: function() {
	      return new Point(this.hCenter, this.vCenter);
	    },
	    centerRight: function() {
	      return new Point(this.right, this.vCenter);
	    },
	    bottomLeft: function() {
	      return new Point(this.x, this.bottom);
	    },
	    bottomCenter: function() {
	      return new Point(this.hCenter, this.bottom);
	    },
	    bottomRight: function() {
	      return new Point(this.right, this.bottom);
	    },
	    locationIsZero: function() {
	      return floatEq(this.x, 0) && floatEq(this.y, 0);
	    },
	    top: function() {
	      return this.y;
	    },
	    left: function() {
	      return this.x;
	    },
	    right: function() {
	      return this.x + this.w;
	    },
	    bottom: function() {
	      return this.y + this.h;
	    },
	    hCenter: function() {
	      return this.x + this.w * .5;
	    },
	    vCenter: function() {
	      return this.y + this.h * .5;
	    },
	    infinite: function() {
	      return this.w === Infinity || this.h === Infinity;
	    },
	    normalized: function() {
	      var h, w, x, y;
	      w = this.w;
	      h = this.h;
	      if (w >= 0 && h >= 0) {
	        return this;
	      } else {
	        x = this.x;
	        y = this.y;
	        if (w < 0) {
	          x += w;
	          w = -w;
	        }
	        if (h < 0) {
	          y += h;
	          h = -h;
	        }
	        return this["with"](x, y, w, h);
	      }
	    },
	    area: function() {
	      return this.w * this.h;
	    },
	    corners: function() {
	      var bottom, left, right, top;
	      left = this.left;
	      top = this.top;
	      right = this.right;
	      bottom = this.bottom;
	      return [new Point(left, top), new Point(right, top), new Point(right, bottom), new Point(left, bottom)];
	    }
	  });

	  Rectangle.prototype.add = function(b) {
	    if (b instanceof Rectangle) {
	      return new Rectangle(this.x + b.x, this.y + b.y, this.w + b.w, this.h + b.h);
	    } else {
	      return new Rectangle(this.x + b, this.y + b, this.w + b, this.h + b);
	    }
	  };

	  Rectangle.prototype.sub = function(b) {
	    if (b instanceof Rectangle) {
	      return new Rectangle(this.x - b.x, this.y - b.y, this.w - b.w, this.h - b.h);
	    } else {
	      return new Rectangle(this.x - b, this.y - b, this.w - b, this.h - b);
	    }
	  };

	  Rectangle.prototype.mul = function(b) {
	    if (b instanceof Rectangle) {
	      return new Rectangle(this.x * b.x, this.y * b.y, this.w * b.w, this.h * b.h);
	    } else {
	      return new Rectangle(this.x * b, this.y * b, this.w * b, this.h * b);
	    }
	  };

	  Rectangle.prototype.div = function(b) {
	    if (b instanceof Rectangle) {
	      return new Rectangle(this.x / b.x, this.y / b.y, this.w / b.w, this.h / b.h);
	    } else {
	      return new Rectangle(this.x / b, this.y / b, this.w / b, this.h / b);
	    }
	  };

	  Rectangle.prototype.lt = function(b) {
	    return this.x < b.x && this.y < b.y && this.w < b.w && this.h < b.h;
	  };

	  Rectangle.prototype.gt = function(b) {
	    return this.x > b.x && this.y > b.y && this.w > b.w && this.h > b.h;
	  };

	  Rectangle.prototype.lte = function(b) {
	    return this.x <= b.x && this.y <= b.y && this.w <= b.w && this.h <= b.h;
	  };

	  Rectangle.prototype.gte = function(b) {
	    return this.x >= b.x && this.y >= b.y && this.w >= b.w && this.h >= b.h;
	  };

	  Rectangle.prototype.interpolate = function(toRect, p) {
	    var oneMinusP;
	    if (floatEq(p, 0)) {
	      return this;
	    }
	    if (floatEq(p, 1)) {
	      return toRect;
	    }
	    oneMinusP = 1 - p;
	    return new Rectangle(toRect.x * p + this.x * oneMinusP, toRect.y * p + this.y * oneMinusP, toRect.w * p + this.w * oneMinusP, toRect.h * p + this.h * oneMinusP);
	  };

	  Rectangle.prototype.withX = function(v) {
	    if (floatEq(v, this.x)) {
	      return this;
	    } else {
	      return new Rectangle(v, this.y, this.w, this.h);
	    }
	  };

	  Rectangle.prototype.withY = function(v) {
	    if (floatEq(v, this.y)) {
	      return this;
	    } else {
	      return new Rectangle(this.x, v, this.w, this.h);
	    }
	  };

	  Rectangle.prototype.withXY = function(x, y) {
	    if (floatEq(x, this.x) && floatEq(y, this.y)) {
	      return this;
	    } else {
	      return new Rectangle(x, y, this.w, this.h);
	    }
	  };

	  Rectangle.prototype.withW = function(v) {
	    if (floatEq(v, this.w)) {
	      return this;
	    } else {
	      return new Rectangle(this.x, this.y, v, this.h);
	    }
	  };

	  Rectangle.prototype.withH = function(v) {
	    if (floatEq(v, this.h)) {
	      return this;
	    } else {
	      return new Rectangle(this.x, this.y, this.w, v);
	    }
	  };

	  Rectangle.prototype.withWH = function(w, h) {
	    if (floatEq(w, this.w) && floatEq(h, this.h)) {
	      return this;
	    } else {
	      return new Rectangle(this.x, this.y, w, h);
	    }
	  };

	  Rectangle.prototype.withLocation = function(v) {
	    return this.withXY(v.x, v.y);
	  };

	  Rectangle.prototype.withSize = function(v) {
	    return this.withWH(v.x, v.y);
	  };

	  Rectangle.prototype["with"] = function(x, y, w, h) {
	    if (this._eqParts(x, y, w, h)) {
	      return this;
	    } else {
	      return new Rectangle(x, y, w, h);
	    }
	  };

	  Rectangle.prototype.movedBy = function(d) {
	    return this.withXY(this.x + d.x, this.y + d.y);
	  };

	  Rectangle.prototype._eqParts = function(x, y, w, h) {
	    return floatEq(this.x, x) && floatEq(this.y, y) && floatEq(this.w, w) && floatEq(this.h, h);
	  };

	  Rectangle.prototype.eq = function(b) {
	    return this === b || (b && this._eqParts(b.x, b.y, b.w, b.h));
	  };

	  Rectangle.prototype.lt = function(b) {
	    return this.x < b.x && this.y < b.y && this.w < b.w && this.h < b.h;
	  };

	  Rectangle.prototype.gt = function(b) {
	    return this.x > b.x && this.y > b.y && this.w > b.w && this.h > b.h;
	  };

	  Rectangle.prototype.lte = function(b) {
	    return this.x <= b.x && this.y <= b.y && this.w <= b.w && this.h <= b.h;
	  };

	  Rectangle.prototype.gte = function(b) {
	    return this.x >= b.x && this.y >= b.y && this.w >= b.w && this.h >= b.h;
	  };

	  Rectangle.prototype.toString = function() {
	    return "[" + this.x + ", " + this.y + ", " + this.w + ", " + this.h + "]";
	  };

	  Rectangle.prototype.getInspectedString = function() {
	    return "rect(" + this.x + ", " + this.y + ", " + this.w + ", " + this.h + ")";
	  };

	  Rectangle.prototype.toArray = toArray = function() {
	    return [this.x, this.y, this.w, this.h];
	  };

	  Rectangle.prototype.toPlainStructure = {
	    x: Rectangle.x,
	    y: Rectangle.y,
	    w: Rectangle.w,
	    h: Rectangle.h
	  };

	  Rectangle.prototype.toPlainEvalString = function() {
	    return "{x:" + this.x + ", y:" + this.y + ", w:" + this.w + ", h:" + this.h + "}";
	  };

	  Rectangle.prototype.nearestInsidePoint = function(p) {
	    return new Point(bound(this.left, p.x, this.right), bound(this.top, p.y, this.bottom));
	  };

	  Rectangle.prototype.largestInsideRect = function(ofSize) {
	    var h, scaler, w;
	    scaler = min(this.w / ofSize.w, this.h / ofSize.h);
	    w = ofSize.w * scale;
	    h = ofSize.h * scale;
	    return new Rectangle((this.w - w) / 2, (this.h - h) / 2, w, h);
	  };

	  Rectangle.prototype.overlaps = function(val) {
	    if (val == null) {
	      return false;
	    }
	    if (val instanceof Point) {
	      return this.contains(val);
	    } else if (val instanceof Rectangle) {
	      return val.bottom > this.x && val.right > this.y && this.bottom > val.left && this.right > val.top;
	    } else {
	      throw new Error("Invalid arguments for 'overlaps'. Expecting Point or Rectangle. Got: " + val + ".");
	    }
	  };

	  Rectangle.prototype.contains = function(val) {
	    if (val == null) {
	      return false;
	    }
	    if (val instanceof Point) {
	      return val.x >= this.x && val.y >= this.y && val.x < this.right && val.y < this.bottom;
	    } else if (val instanceof Rectangle) {
	      return val.x >= this.x && val.y >= this.y && val.right <= this.right && val.bottom <= this.bottom;
	    } else {
	      throw new Error("Invalid arguments for 'contains'. Expecting Point or Rectangle. Got: " + val + ".");
	    }
	  };

	  Rectangle.prototype.round = function(m) {
	    var h, w, x, y;
	    if (m == null) {
	      m = 1;
	    }
	    x = round(this.x, m);
	    y = round(this.y, m);
	    w = round(this.x + this.w, m) - x;
	    h = round(this.y + this.h, m) - y;
	    return this["with"](x, y, w, h);
	  };

	  Rectangle.prototype.roundOut = function(m, k) {
	    var h, w, x, y;
	    if (m == null) {
	      m = 1;
	    }
	    if (k == null) {
	      k = 0;
	    }
	    x = floor(this.x + k, m);
	    y = floor(this.y + k, m);
	    w = ceil(this.x + this.w - k, m) - x;
	    h = ceil(this.y + this.h - k, m) - y;
	    return this["with"](x, y, w, h);
	  };

	  Rectangle.prototype.roundIn = function(m, k) {
	    var h, w, x, y;
	    if (m == null) {
	      m = 1;
	    }
	    if (k == null) {
	      k = 0;
	    }
	    x = ceil(this.x - k, m);
	    y = ceil(this.y - k, m);
	    w = floor(this.x + this.w + k, m) - x;
	    h = floor(this.y + this.h + k, m) - y;
	    return this["with"](x, y, w, h);
	  };

	  Rectangle.prototype.union = function(b) {
	    var h, w, x, y;
	    if (b == null) {
	      return this;
	    }
	    if (this.getArea() <= 0) {
	      return b;
	    }
	    x = min(this.x, b.left);
	    y = min(this.y, b.top);
	    w = max(this.getRight(), b.getRight()) - x;
	    h = max(this.getBottom(), b.getBottom()) - y;
	    return this["with"](x, y, w, h);
	  };

	  Rectangle.prototype.unionInto = function(into) {
	    var area, h, intoArea, w, x, y;
	    area = this.getArea();
	    intoArea = into.getArea();
	    if (area <= 0 || intoArea === Infinity) {
	      return into;
	    }
	    if (intoArea <= 0 || area === Infinity) {
	      into.x = this.x;
	      into.y = this.y;
	      into.w = this.w;
	      into.h = this.h;
	    } else {
	      x = into.x, y = into.y, w = into.w, h = into.h;
	      into.x = min(x, this.x);
	      into.y = min(y, this.y);
	      into.w = max(x + w, this.x + this.w) - into.x;
	      into.h = max(y + h, this.y + this.h) - into.y;
	    }
	    return into;
	  };

	  Rectangle.prototype.intersectInto = function(into) {
	    var area, h, intoArea, w, x, y;
	    area = this.getArea();
	    intoArea = into.getArea();
	    if (intoArea <= 0 || area === Infinity) {
	      return into;
	    }
	    if (area <= 0 || intoArea === Infinity) {
	      into.x = this.x;
	      into.y = this.y;
	      into.w = this.w;
	      return into.h = this.h;
	    } else {
	      x = into.x, y = into.y, w = into.w, h = into.h;
	      into.x = max(x, this.x);
	      into.y = max(y, this.y);
	      into.w = max(0, min(x + w, this.x + this.w) - into.x);
	      into.h = max(0, min(y + h, this.y + this.h) - into.y);
	      return into;
	    }
	  };

	  Rectangle.prototype.intersection = function(b) {
	    var h, w, x, y;
	    if (b == null) {
	      return this;
	    }
	    if (b.getArea() === Infinity || b.contains(this)) {
	      return this;
	    }
	    if (this.getArea() === Infinity || this.contains(b)) {
	      return b;
	    }
	    x = max(this.x, b.left);
	    y = max(this.y, b.top);
	    w = min(this.getRight(), b.getRight()) - x;
	    h = min(this.getBottom(), b.getBottom()) - y;
	    if (w <= 0 || h <= 0) {
	      return Rectangle.nothing;
	    } else {
	      return this["with"](x, y, w, h);
	    }
	  };

	  Rectangle.prototype.grow = function(a, b) {
	    var gx, gy;
	    if (a instanceof Point) {
	      gx = a.x;
	      gy = a.y;
	    } else {
	      gx = a;
	      gy = b != null ? b : a;
	    }
	    return this["with"](this.x - gx, this.y - gy, this.w + 2 * gx, this.h + 2 * gy);
	  };

	  Rectangle.nothing = Object.freeze(new Rectangle(0, 0, 0, 0));

	  Rectangle.everything = Object.freeze(new Rectangle(0, 0, Infinity, Infinity));

	  return Rectangle;

	})(AtomicBase);


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	var AtomicBase, Foundation, Perimeter, Point, floatEq, inspect, isPlainObject, isString, log, point,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(8);

	AtomicBase = __webpack_require__(95);

	Point = __webpack_require__(97);

	log = Foundation.log, inspect = Foundation.inspect, floatEq = Foundation.floatEq, isPlainObject = Foundation.isPlainObject, isString = Foundation.isString;

	point = Point.point;

	module.exports = Perimeter = (function(superClass) {
	  var k, namedPerimeters, perimeter, perimeter0, ref, toString, v;

	  extend(Perimeter, superClass);

	  function Perimeter() {
	    return Perimeter.__super__.constructor.apply(this, arguments);
	  }

	  Perimeter.perimeter = perimeter = function(a, b, c, d) {
	    var p;
	    if (a instanceof Perimeter) {
	      return a;
	    }
	    if (isString(a) && (p = namedPerimeters[a])) {
	      return p;
	    }
	    if ((b == null) && (floatEq(a, 0)) || !a) {
	      return perimeter0;
	    }
	    return new Perimeter(a, b, c, d);
	  };

	  Perimeter.prototype._initFields = function() {
	    return this.left = this.right = this.top = this.bottom = 0;
	  };

	  Perimeter.prototype._initFromObject = function(obj) {
	    this._initFields();
	    this.left = (obj.left || 0) + (obj.l || 0) + (obj.h || 0) + (obj.horizontal || 0);
	    this.right = (obj.right || 0) + (obj.r || 0) + (obj.h || 0) + (obj.horizontal || 0);
	    this.top = (obj.top || 0) + (obj.t || 0) + (obj.v || 0) + (obj.vertical || 0);
	    return this.bottom = (obj.bottom || 0) + (obj.b || 0) + (obj.v || 0) + (obj.vertical || 0);
	  };

	  Perimeter.prototype._init = function(a, b, c, d) {
	    var argLength;
	    this._initFields();
	    argLength = a != null ? b != null ? c != null ? d != null ? 4 : 3 : 2 : 1 : 0;
	    switch (argLength) {
	      case 0:
	        return this.left = this.right = this.top = this.bottom = 0;
	      case 1:
	        return this.left = this.right = this.top = this.bottom = a;
	      case 2:
	        this.left = this.right = a;
	        return this.top = this.bottom = b;
	      case 4:
	        this.left = a;
	        this.right = b;
	        this.top = c;
	        return this.bottom = d;
	      default:
	        throw new Error("invalid number of arguments: " + (inspect(arguments)));
	    }
	  };

	  Perimeter.namedPerimeters = namedPerimeters = {
	    perimeter0: perimeter0 = Object.freeze(new Perimeter(0))
	  };

	  ref = Perimeter.namedPerimeters;
	  for (k in ref) {
	    v = ref[k];
	    Perimeter[k] = v;
	  }

	  Perimeter.prototype.toArray = function() {
	    return [this.left, this.right, this.top, this.bottom];
	  };

	  Perimeter.prototype.toString = toString = function() {
	    return "[" + (this.toArray().join(', ')) + "]";
	  };

	  Perimeter.prototype.toJson = toString;

	  Perimeter.prototype.getInspectedString = function() {
	    return "perimeter(" + (this.toArray().join(', ')) + ")";
	  };

	  Perimeter.getter({
	    width: function() {
	      return this.left + this.right;
	    },
	    height: function() {
	      return this.top + this.bottom;
	    }
	  });

	  Perimeter.prototype.toObject = function() {
	    return {
	      left: this.left,
	      right: this.right,
	      top: this.top,
	      bottom: this.bottom
	    };
	  };

	  Perimeter.prototype.subtractedFromSize = function(size) {
	    var h, w;
	    w = this.getWidth();
	    h = this.getHeight();
	    if (floatEq(w, 0) && floatEq(h, 0)) {
	      return size;
	    } else {
	      return point(size.x - w, size.y - h);
	    }
	  };

	  Perimeter.prototype.addedToSize = function(size) {
	    var h, w;
	    w = this.getWidth();
	    h = this.getHeight();
	    if (floatEq(w, 0) && floatEq(h, 0)) {
	      return size;
	    } else {
	      return point(size.x + w, size.y + h);
	    }
	  };

	  return Perimeter;

	})(AtomicBase);


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(101);


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var Events;

	module.exports = Events = __webpack_require__(102);

	Events.EventEpoch = __webpack_require__(104);

	Events.EventManager = __webpack_require__(105);

	Events.EventQueue = __webpack_require__(107);

	Events.Event = __webpack_require__(106);

	Events.EventedObjectBase = __webpack_require__(108);

	Events.EventedObject = __webpack_require__(109);

	Events.EventedVariable = __webpack_require__(110);

	Events.finishLoad(["EventEpoch", "EventManager", "EventQueue", "Event", "EventedObjectBase", "EventedObject", "EventedVariable"]);


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(103);

	module.exports = Art.Events || (Art.Events = (function(superClass) {
	  extend(Events, superClass);

	  function Events() {
	    return Events.__super__.constructor.apply(this, arguments);
	  }

	  Events.namespace = Art;

	  Events.namespacePath = "Neptune.Art.Events";

	  return Events;

	})(Neptune.Base));

	Art.addNamespace(Art.Events);


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var Epoch, EventEpoch, log;
	  log = Foundation.log, Epoch = Foundation.Epoch;
	  return EventEpoch = (function(superClass) {
	    extend(EventEpoch, superClass);

	    function EventEpoch() {
	      return EventEpoch.__super__.constructor.apply(this, arguments);
	    }

	    EventEpoch.singletonClass();

	    EventEpoch.prototype.queue = function(event) {
	      return this.queueItem(event);
	    };

	    EventEpoch.prototype.logEvent = function(name, id) {};

	    return EventEpoch;

	  })(Epoch);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*

	TODO:
	  handlEvent alternate signature:
	    (type, functionReturningEventElement) ->

	  The function would only be invoked if there are actually event handlers for the specified type.
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(102), __webpack_require__(8), __webpack_require__(106)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Events, Foundation) {
	  var clone, inspect, isFunction, nextTick, rawErrorLog;
	  nextTick = Foundation.nextTick, isFunction = Foundation.isFunction, inspect = Foundation.inspect, clone = Foundation.clone;
	  rawErrorLog = Foundation.Log.rawErrorLog;
	  return Events.EventManager = (function(superClass) {
	    extend(EventManager, superClass);

	    function EventManager(parent) {
	      this.parent = parent;
	      this.eventHandlers = {};
	    }

	    EventManager.prototype.hasHandler = function(type) {
	      var handlers;
	      return !!((handlers = this.eventHandlers[type]) && handlers.length > 0);
	    };

	    EventManager.prototype.on = function(handlerMap) {
	      var action, base, results, type;
	      results = [];
	      for (type in handlerMap) {
	        action = handlerMap[type];
	        if (!(action)) {
	          continue;
	        }
	        if (!isFunction(action)) {
	          throw new Error("EventManager: action is not a function for " + (inspect(type)) + " event handler. (action: " + (inspect(action)) + ", parent: " + (inspect(this.parent)) + ")");
	        }
	        if ((base = this.eventHandlers)[type] == null) {
	          base[type] = [];
	        }
	        results.push(this.eventHandlers[type].push({
	          action: action,
	          oneTime: false
	        }));
	      }
	      return results;
	    };

	    EventManager.prototype.removeListeners = function(handlerMap) {
	      var action, beforeCount, count, handler, handlers, type;
	      count = 0;
	      for (type in handlerMap) {
	        action = handlerMap[type];
	        if (!(handlers = this.eventHandlers[type])) {
	          continue;
	        }
	        beforeCount = handlers.length;
	        this.eventHandlers[type] = (function() {
	          var i, len, results;
	          results = [];
	          for (i = 0, len = handlers.length; i < len; i++) {
	            handler = handlers[i];
	            if (handler.action !== action) {
	              results.push(handler);
	            }
	          }
	          return results;
	        })();
	        count = beforeCount - this.eventHandlers[type].length;
	      }
	      return count;
	    };

	    EventManager.prototype.onNext = function(handlerMap) {
	      var action, base, results, type;
	      results = [];
	      for (type in handlerMap) {
	        action = handlerMap[type];
	        if ((base = this.eventHandlers)[type] == null) {
	          base[type] = [];
	        }
	        results.push(this.eventHandlers[type].push({
	          action: action,
	          oneTime: true
	        }));
	      }
	      return results;
	    };

	    EventManager.prototype.countOneTimeHandlersFor = function(eventType) {
	      var count, handler, handlers, i, len;
	      count = 0;
	      if (handlers = this.eventHandlers[eventType]) {
	        for (i = 0, len = handlers.length; i < len; i++) {
	          handler = handlers[i];
	          if (handler.oneTime) {
	            count++;
	          }
	        }
	      }
	      return count;
	    };

	    EventManager.prototype.handleEvent = function(event) {
	      if (typeof event === "string") {
	        event = new Events.Event(event);
	      }
	      return this.sendToHandlers(event.type, event);
	    };

	    EventManager.prototype.handleEvents = function(events) {
	      var event, i, len, results;
	      results = [];
	      for (i = 0, len = events.length; i < len; i++) {
	        event = events[i];
	        results.push(this.handleEvent(event));
	      }
	      return results;
	    };

	    EventManager.prototype.sendToHandlers = function(eventType, event) {
	      var action, error, error1, firedOneTimeHandler, handler, handlers, i, len;
	      handlers = this.eventHandlers[eventType];
	      if (!(handlers && handlers.length > 0)) {
	        return;
	      }
	      firedOneTimeHandler = false;
	      for (i = 0, len = handlers.length; i < len; i++) {
	        handler = handlers[i];
	        try {
	          if (handler.oneTime) {
	            handler.remove = firedOneTimeHandler = true;
	          }
	          action = handler.action;
	          action(event);
	        } catch (error1) {
	          error = error1;
	          this.handleErrorInHandler(handler, event, error);
	        }
	      }
	      if (firedOneTimeHandler) {
	        return this.eventHandlers[event.type] = (function() {
	          var j, len1, ref, results;
	          ref = this.eventHandlers[eventType];
	          results = [];
	          for (j = 0, len1 = ref.length; j < len1; j++) {
	            handler = ref[j];
	            if (!handler.remove) {
	              results.push(handler);
	            }
	          }
	          return results;
	        }).call(this);
	      }
	    };

	    EventManager.prototype.handleErrorInHandler = function(handler, event, error) {
	      if (event.type === "eventException") {
	        rawErrorLog("exception in eventException handler.\nEvent:" + (inspect(event, 1)) + ".\n\nError:\n" + error.stack);
	        return Foundation.throwErrorOutOfStack(error);
	      } else if (this.eventHandlers["eventException"]) {
	        return this.handleEvent(new Events.Event("eventException", {
	          event: clone(event),
	          exception: error,
	          handler: handler
	        }));
	      } else {
	        rawErrorLog("exception in handler AND no eventException handler. Error:");
	        rawErrorLog(error);
	        rawErrorLog("Event: " + (inspect(event, 1)));
	        rawErrorLog("Stack:\n" + error.stack);
	        return Foundation.throwErrorOutOfStack(error);
	      }
	    };

	    return EventManager;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(102), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Events, Foundation) {
	  var currentSecond;
	  currentSecond = Foundation.currentSecond;
	  return Events.Event = (function(superClass) {
	    extend(Event, superClass);

	    function Event(type, props, timeStamp) {
	      var k, v;
	      this.type = type;
	      this.timeStamp = timeStamp != null ? timeStamp : currentSecond();
	      if (props) {
	        for (k in props) {
	          v = props[k];
	          this[k] = v;
	        }
	      }
	    }

	    return Event;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(102), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Events, Foundation) {
	  return Events.EventQueue = (function(superClass) {
	    extend(EventQueue, superClass);

	    function EventQueue() {
	      this._length = 0;
	      this.nextToProcess = 0;
	      this.queue = new Array(128);
	    }

	    EventQueue.prototype.add = function(a) {
	      if (a instanceof Array) {
	        this.queue = this.queue.slice(0, this._length).concat(a);
	        return this._length += a.length;
	      } else {
	        return this.queue[this._length++] = a;
	      }
	    };

	    EventQueue.prototype.clear = function() {
	      return this.processAll((function(_this) {
	        return function() {};
	      })(this));
	    };

	    EventQueue.getter({
	      length: function() {
	        return this._length - this.nextToProcess;
	      },
	      isEmpty: function() {
	        return this._length === 0;
	      }
	    });

	    EventQueue.prototype.popAll = function() {
	      var result;
	      result = this.queue.slice(0, this._length);
	      this.clear();
	      return result;
	    };

	    EventQueue.prototype.processAll = function(f) {
	      var popped;
	      while (this.nextToProcess < this._length) {
	        popped = this.queue[this.nextToProcess];
	        this.queue[this.nextToProcess++] = null;
	        f(popped);
	      }
	      return this.nextToProcess = this._length = 0;
	    };

	    return EventQueue;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(104), __webpack_require__(106)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, EventEpoch, Event) {
	  var EventedObjectBase, eventEpoch, inspect, isFunction, isPlainObject, log;
	  isFunction = Foundation.isFunction, log = Foundation.log, isPlainObject = Foundation.isPlainObject, inspect = Foundation.inspect;
	  eventEpoch = EventEpoch.eventEpoch;

	  /*
	  to be used as a mixin via BaseObject's @include method
	  
	  If this class is included directly, you must also implement the methods
	    listed in "TO IMPLEMENT" below.
	   */
	  return EventedObjectBase = (function() {
	    var typeFromEventOrType;

	    function EventedObjectBase() {}

	    EventedObjectBase.typeFromEventOrType = typeFromEventOrType = function(eventOrType) {
	      return eventOrType && (eventOrType.type || eventOrType);
	    };


	    /*
	    Purpose:
	      handle event immediately
	      do some preprocessing on the event
	    
	    Inputs: see #event()'s inputs
	    
	    Output: true if the event was actually handled
	    
	    IMPORTANT: This should only be called during an eventEpoch.
	      This means:
	        Usually, just don't call this directly. Use @queueEvent.
	        If you need to call this directly, only do it from within an event handler.
	      Examples reasons to call directly:
	        - to do custom event routing
	        - send a new event triggered from the first
	     */

	    EventedObjectBase.prototype.handleEvent = function(eventOrType, eventPropertiesOrCreator) {
	      var e, error1, event, eventType;
	      eventType = typeFromEventOrType(eventOrType);
	      if (!(eventType && this._hasEventHandler(eventType))) {
	        return false;
	      }
	      event = eventOrType instanceof Event ? eventOrType : isFunction(eventPropertiesOrCreator) ? isPlainObject(e = eventPropertiesOrCreator()) ? new Event(eventType, e) : e : new Event(eventType, eventPropertiesOrCreator);
	      if (!event) {
	        return false;
	      }
	      event.target = this;
	      try {
	        this._sendToEventHandler(event);
	      } catch (error1) {
	        e = error1;
	        this._handleErrorInHandler(event, "unknown", e);
	      }
	      event.target = null;
	      return true;
	    };


	    /*
	    Inputs:
	      eventOrType can be:
	       * an instanceof Event or
	       * a string representing the "type" of the event
	          (a new Event will be created)
	    
	      eventPropertiesOrCreator can be:
	       * null: only if eventOrType is an instanceof Event
	       * Object: properties passed into: new Event eventOrType, eventPropertiesOrCreator
	       * Function: returns null (indicating a noop) or a new instanceof Event
	    
	    Output:
	      true:   The event was queued.
	      false:  There is no handler for the event. The event was ignored (discarded).
	     */

	    EventedObjectBase.prototype.queueEvent = function(eventOrType, eventPropertiesOrCreator) {
	      var eventType;
	      eventType = typeFromEventOrType(eventOrType);
	      if (eventType && this._hasEventHandler(eventType)) {
	        eventEpoch.queue((function(_this) {
	          return function() {
	            return _this.handleEvent(eventOrType, eventPropertiesOrCreator);
	          };
	        })(this));
	        return true;
	      } else {
	        return false;
	      }
	    };


	    /*
	    inputs: eventType is a string
	    outputs: true if there is a handler for the specified type
	     */

	    EventedObjectBase.prototype._hasEventHandler = function(eventType) {
	      throw new Error("must implement");
	    };


	    /*
	    inputs: an Event object with event.target set to @
	    output: ignored
	    
	    - Called exclusively from handleEvent. Don't call manually.
	    - This is where the event handler is actually called.
	    - Only called during an eventEpoch.
	    - Only called if @_hasEventHandler returned true for event.type
	     */

	    EventedObjectBase.prototype._sendToEventHandler = function(event) {
	      throw new Error("must implement");
	    };

	    EventedObjectBase.prototype._handleErrorInHandler = function(event, handler, error) {
	      console.log("EventedObjectBase: exception in handler. Error:", error);
	      console.log("Event: " + (inspect(event, 1)));
	      console.log("Handler:", handler);
	      console.log("Stack:", error.stack);
	      return Foundation.throwErrorOutOfStack(error);
	    };

	    return EventedObjectBase;

	  })();
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(105), __webpack_require__(104), __webpack_require__(106), __webpack_require__(108)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, EventManager, EventEpoch, Event, EventedObjectBase) {
	  var EventedObject, eventEpoch, isFunction, isPlainObject, log;
	  isFunction = Foundation.isFunction, log = Foundation.log, isPlainObject = Foundation.isPlainObject;
	  eventEpoch = EventEpoch.eventEpoch;
	  return EventedObject = (function(superClass) {
	    extend(EventedObject, superClass);

	    function EventedObject() {
	      return EventedObject.__super__.constructor.apply(this, arguments);
	    }


	    /*
	    optional: call from your constructor to make your object more efficient
	    Explanation: Most optimized javascript engines like objects that declare all their fields
	      in the same order every time. In practice, this means do it in the constructor w/o conditionals.
	     */

	    EventedObject.prototype.initEventHandling = function() {
	      return this.eventManager = null;
	    };

	    EventedObject.prototype._sendToEventHandler = function(event) {
	      return this.eventManager.handleEvent(event);
	    };

	    EventedObject.prototype._hasEventHandler = function(eventType) {
	      var ref;
	      return (ref = this.eventManager) != null ? ref.hasHandler(eventType) : void 0;
	    };

	    EventedObject.prototype.clearEventHandlers = function() {
	      return this.eventManager = null;
	    };

	    EventedObject.prototype.removeListeners = function(handlerMap) {
	      var ref;
	      return (ref = this.eventManager) != null ? ref.removeListeners(handlerMap) : void 0;
	    };

	    EventedObject.prototype.preprocessEventHandlers = function(handlerMap) {
	      return handlerMap;
	    };

	    EventedObject.prototype.on = function(handlerMap) {
	      (this.eventManager || (this.eventManager = new EventManager(this))).on(handlerMap);
	      return this.preprocessEventHandlers(handlerMap);
	    };

	    EventedObject.prototype.onNext = function(handlerMap) {
	      return (this.eventManager || (this.eventManager = new EventManager(this))).onNext(handlerMap);
	    };

	    return EventedObject;

	  })(EventedObjectBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(102), __webpack_require__(8), __webpack_require__(109)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Events, Foundation, EventedObject) {
	  var eq;
	  eq = Foundation.Eq.eq;
	  return Events.EventedVariable = (function(superClass) {
	    extend(EventedVariable, superClass);

	    EventedVariable.include(EventedObject);

	    function EventedVariable(value) {
	      this._value = value;
	    }

	    EventedVariable.prototype.beforeFilter = function(f) {
	      return this.beforeFilter = f;
	    };

	    EventedVariable.getter({
	      value: function() {
	        return this._value;
	      }
	    });

	    EventedVariable.setter({
	      value: function(value) {
	        var oldValue;
	        oldValue = this.refresh(value);
	        if (!eq(oldValue, value)) {
	          this.queueEvent("change", {
	            value: value,
	            oldValue: oldValue
	          });
	        }
	        return oldValue;
	      }
	    });

	    EventedVariable.prototype.get = function() {
	      return this._value;
	    };

	    EventedVariable.prototype.set = function(value) {
	      var oldValue;
	      oldValue = this.refresh(value);
	      if (!eq(oldValue, value)) {
	        this.queueEvent("change", {
	          value: value,
	          oldValue: oldValue
	        });
	      }
	      return oldValue;
	    };

	    EventedVariable.prototype.refresh = function(value) {
	      var oldValue;
	      oldValue = this._value;
	      this._value = value;
	      if (!eq(oldValue, value)) {
	        this.queueEvent("refresh", {
	          value: value,
	          oldValue: oldValue
	        });
	      }
	      return oldValue;
	    };

	    return EventedVariable;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = ((function(_this) {
	  return function() {
	    var EasingFunctions;
	    return EasingFunctions = (function() {
	      function EasingFunctions() {}

	      EasingFunctions.linear = function(t) {
	        return t;
	      };

	      EasingFunctions.easeOutQuad = function(t) {
	        return t * t;
	      };

	      EasingFunctions.easeInQuad = function(t) {
	        return -t * (t - 2);
	      };

	      EasingFunctions.easeBothQuad = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutQuad(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInQuad(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutCubic = function(t) {
	        return t * t * t;
	      };

	      EasingFunctions.easeInCubic = function(t) {
	        return (t = t - 1) * t * t + 1;
	      };

	      EasingFunctions.easeBothCubic = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutCubic(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInCubic(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutQuart = function(t) {
	        return t * t * t * t;
	      };

	      EasingFunctions.easeInQuart = function(t) {
	        return -((t = t - 1) * t * t * t - 1);
	      };

	      EasingFunctions.easeBothQuart = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutQuart(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInQuart(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutQuint = function(t) {
	        return 1 * t * t * t * t * t;
	      };

	      EasingFunctions.easeInQuint = function(t) {
	        return 1 * ((t = t - 1) * t * t * t * t + 1);
	      };

	      EasingFunctions.easeBothQuint = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutQuint(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInQuint(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutSine = function(t) {
	        return -Math.cos(t * Math.PI / 2) + 1;
	      };

	      EasingFunctions.easeInSine = function(t) {
	        return Math.sin(t * Math.PI / 2);
	      };

	      EasingFunctions.easeBothSine = function(t) {
	        return -.5 * (Math.cos(Math.PI * t) - 1);
	      };

	      EasingFunctions.easeOutExp = function(t) {
	        if (t <= 0) {
	          return 0;
	        } else {
	          return Math.pow(2, 10 * (t - 1));
	        }
	      };

	      EasingFunctions.easeInExp = function(t) {
	        if (t >= 1) {
	          return 1;
	        } else {
	          return -Math.pow(2, -10 * t) + 1;
	        }
	      };

	      EasingFunctions.easeBothExp = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutExp(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInExp(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutCirc = function(t) {
	        return -(Math.sqrt(1 - t * t) - 1);
	      };

	      EasingFunctions.easeInCirc = function(t) {
	        return Math.sqrt(1 - (t -= 1) * t);
	      };

	      EasingFunctions.easeBothCirc = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutCirc(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInCirc(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutElastic = function(t) {
	        var p, s;
	        if (t <= 0) {
	          return 0;
	        }
	        if (t >= 1) {
	          return 1;
	        }
	        p = .3;
	        s = p / 4;
	        t -= 1;
	        return -Math.pow(2, 10 * t) * Math.sin((t - s) * (2 * Math.PI) / p);
	      };

	      EasingFunctions.easeInElastic = function(t) {
	        var p, s;
	        if (t <= 0) {
	          return 0;
	        }
	        if (t >= 1) {
	          return 1;
	        }
	        p = .3;
	        s = p / 4;
	        return Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
	      };

	      EasingFunctions.easeBothElastic = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutElastic(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInElastic(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutBack = function(t, s) {
	        if (s == null) {
	          s = 1.70158;
	        }
	        return t * t * ((s + 1) * t - s);
	      };

	      EasingFunctions.easeInBack = function(t, s) {
	        if (s == null) {
	          s = 1.70158;
	        }
	        return (t = t - 1) * t * ((s + 1) * t + s) + 1;
	      };

	      EasingFunctions.easeBothBack = function(t, s) {
	        if (t < .5) {
	          return EasingFunctions.easeOutBack(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInBack(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutBounce = function(t) {
	        return 1 - EasingFunctions.easeInBounce(1 - t);
	      };

	      EasingFunctions.easeInBounce = function(t) {
	        if (t < 1 / 2.75) {
	          return 7.5625 * t * t;
	        } else if (t < 2 / 2.75) {
	          return 7.5625 * (t -= 1.5 / 2.75) * t + .75;
	        } else if (t < 2.5 / 2.75) {
	          return 7.5625 * (t -= 2.25 / 2.75) * t + .9375;
	        } else {
	          return 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	        }
	      };

	      EasingFunctions.easeBothBounce = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutBounce(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInBounce(t * 2 - 1) * .5 + .5;
	        }
	      };

	      return EasingFunctions;

	    })();
	  };
	})(this)), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	
	/*
	Useful ideas about optimizing animations and garbage collection: http://blog.artillery.com/2012/10/browser-garbage-collection-and-framerate.html

	1) Properties are marked animatable.
	2) Every animatable propoerty is animated every time it changes.
	3) A new instance of the Animator is created to start the animation.
	   - initalValue
	   - initialTargetValue
	   - initialTime
	4) The animator is called each frame with updates:
	   - possible changes in targetValue
	   - lastFrameTime
	   - currentValue
	   - currentTime
	5) The animator calls "@done()" when it can be released.
	  It need not ever be released. It could be endless.
	6) Objects

	ELEMENT SUPPORT

	New properties:
	  - for each animatable property, there is an "animator" property.
	    Since each animatable has a default animator, it is optional.
	    Element
	      location: 10
	      locationAnimator: EasingAnimator2
	        d: .25
	        f: "easeInQuad"
	  - "from" values
	    Each animatable property can have an initial property which gets
	    set first. Then, next frame, the normal property value gets set,
	    triggering the animator.
	    There are two kinds of initial values:
	      onCreation - if the Element as added to the parent in the parent's constructor
	      onAddition - if the Element as added to the parent sometime later
	    Syntax idea:
	      new Element
	        location: 0
	        addedFrom:    location: -10
	        createdFrom:  location: -20
	  - "parent" special from value:
	    addedFrom: parent: xyz
	    createdFrom: parent: xyz
	    The basic idea is the same as other "from" properties, except this means the Element
	    gets added to the "from" parent first, then, next frame, gets added to the actual parent.
	    Further, to make this work with React, I think we need these alternatives:
	      addedFrom: parentKey: "component-scoped-key-string"
	      addedFrom: globalParentKey: "actual-parent's AIM-tree-scoped key-string"
	  - "globalKey" property - see below

	Component-scoping
	  An Element can be flagged as a Component.
	  All Elements in its sub-branch are part of that component,
	  EXCEPT for any Elements which are themselves Components - i.e. SubComponents.
	  Any Element can ask for its parent Component.
	  Every Component maintains a hash of Element keys to Elements for every Element in that Component.
	  Automatic warnings for duplicate "key" values for children who have keys within a component.
	    When this happens, the second, duplicate key is renamed to be unique via an appended string.

	Global-scoping & "globalKey" property
	  Any Element can have a globalKey. The Root Element has a hash of globalKeys to elements which is maintained
	  for its entire subtree.
	  Automatic warnings for duplicate "globalKey" values.
	    When this happens, the second, duplicate key is renamed to be unique via an appended string.

	REACT IMPLICATIONS

	"keys" need to become component-wide, not just Parent-scoped.
	"globalKeys" need to be added.

	This locks us into the current rule: The root of a Component
	  a) must be a single element
	  b) can't change its Element-type.

	However, we could consider adding "span" Elements. These essentially act like a list of Elements as-if
	they were directly children of their grand-parent. Obviously this would be groundwork for doing other
	SPAN-like things such as supporting bold text in the middle of other text. Generally, this means
	properties from the grandparent which apply to the SPAN's children can be overridden by the SPAN -
	such as font properties.

	VALUE TYPES

	* number
	* point
	* matrix
	* color

	Maybe we should box "number" so we can treat everything else the same?

	MATRIX

	Matrix is also a little special cased.
	We don't want to linearly animate each of the 6 scalers.
	We want to:
	  - animate Rotate using rotational inertia
	    - values are modulo
	    - take the shortest route
	    - UNLESS somehow
	      - specified to take the long way
	      - or even +N additional full rotations
	  - animate location using linear inertia
	  - animate Scale using z-index linear inertia
	  - animate skew... using deformation physics?


	NOTE:
	 */
	var Animator2, BaseObject, Color, EasingAnimator2, EasingFunctions, Event, EventEpoch, EventedObject, Matrix, Point, Rectangle, Transaction, color, currentSecond, eventEpoch, inspect, inspectLean, log, matrix, max, min, point, rect, ref, ref1, ref2,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(8), currentSecond = ref.currentSecond, min = ref.min, max = ref.max, Transaction = ref.Transaction, inspect = ref.inspect, inspectLean = ref.inspectLean, log = ref.log, BaseObject = ref.BaseObject;

	ref1 = __webpack_require__(89), color = ref1.color, Color = ref1.Color, point = ref1.point, Point = ref1.Point, rect = ref1.rect, Rectangle = ref1.Rectangle, matrix = ref1.matrix, Matrix = ref1.Matrix;

	ref2 = __webpack_require__(100), Event = ref2.Event, EventEpoch = ref2.EventEpoch, EventedObject = ref2.EventedObject;

	EasingFunctions = __webpack_require__(111);

	eventEpoch = EventEpoch.eventEpoch;

	module.exports = Animator2 = (function(superClass) {
	  extend(Animator2, superClass);

	  Animator2.include(EventedObject);

	  Animator2.createAnimator2FactoryFactory = function(Animator2Class) {
	    return (function(_this) {
	      return function(options) {
	        return function(animatedElement, iValue, iTarget) {
	          return new Animator2Class(animatedElement, iValue, iTarget, options);
	        };
	      };
	    })(this);
	  };

	  function Animator2(animatedElement, initialValue, initialTargetValue, options) {
	    if (options == null) {
	      options = {};
	    }
	    Animator2.__super__.constructor.apply(this, arguments);
	    this.animatedElement = animatedElement;
	    this.options = options;
	    if (options != null ? options.on : void 0) {
	      this.on(options.on);
	    }
	    this.lastFrameTime = this.currentFrameTime = this.initialFrameTime = currentSecond();
	    this.currentTargetValue = this.initialTargetValue = initTargetValue;
	    this.lastValue = this.initialValue = initialValue;
	    this._isDone = false;
	    this.queueEvent("start");
	  }

	  Animator2.getter({
	    lastFrameTimeDelta: function() {
	      return this.currentFrameTime - this.lastFrameTime;
	    },
	    ellapsedTime: function() {
	      return this.currentFrameTime - this.initialFrameTime;
	    },
	    isDone: function() {
	      return this._isDone;
	    }
	  });

	  Animator2.prototype.advance = function() {
	    this.done();
	    return this.currentTargetValue;
	  };

	  Animator2.prototype.nextValue = function(currentFrameTime, currentTargetValue) {
	    this.lastFrameTime = this.currentFrameTime;
	    this.currentFrameTime = currentFrameTime;
	    this.currentTargetValue = currentTargetValue;
	    return this.lastValue = this.advance();
	  };

	  Animator2.prototype.done = function() {
	    this._isDone = true;
	    return this.queueEvent("done");
	  };

	  Animator2.prototype.resetOnTargetChange = function() {
	    if (this.currentTargetValue !== this.initialTargetValue) {
	      this.initialFrameTime = this.lastFrameTime;
	      this.initialValue = this.lastValue;
	      return this.initialTargetValue = this.currentTargetValue;
	    }
	  };

	  return Animator2;

	})(BaseObject);

	Animator2.createAnimator2FactoryFactory(EasingAnimator2 = (function(superClass) {
	  extend(EasingAnimator2, superClass);

	  function EasingAnimator2(initialValue, initialTargetValue, options) {
	    var ef;
	    if (options == null) {
	      options = {};
	    }
	    EasingAnimator2.__super__.constructor.apply(this, arguments);
	    this.d = options.d || options.duration || .25;
	    this.f = options.f || options["function"] || "easeInQuad";
	    if (isString(this.f)) {
	      ef = EasingFunctions[this.f];
	      if (!ef) {
	        throw new ("Invalid EasingFunction name: " + (inspect(this.f)));
	      }
	      this.f = ef;
	    }
	  }

	  EasingAnimator2.prototype.interpolate = function(fromValue, toValue, pos) {
	    if (isFunction(fromValue.interpolate)) {
	      return fromValue.interpolate(toValue, pos);
	    } else {
	      return fromValue + (toValue - fromValue) * pos;
	    }
	  };

	  EasingAnimator2.prototype.advance = function() {
	    var pos;
	    this.resetOnTargetChange();
	    pos = this.ellapsedTime / this.d;
	    if (pos < 1) {
	      pos = this.f(pos);
	    } else {
	      this.done();
	      pos = 1;
	    }
	    return this.interpolate(this.initialValue, this.currentTargetValue, pos);
	  };

	  return EasingAnimator2;

	})(Animator2));


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var Core;

	module.exports = Core = __webpack_require__(114);

	Core.CanvasElement = __webpack_require__(115);

	Core.DrawCacheManager = __webpack_require__(164);

	Core.DrawEpoch = __webpack_require__(163);

	Core.ElementBase = __webpack_require__(151);

	Core.ElementFactory = __webpack_require__(155);

	Core.Element = __webpack_require__(150);

	Core.EngineStat = __webpack_require__(167);

	Core.GlobalEpochCycle = __webpack_require__(165);

	Core.IdleEpoch = __webpack_require__(166);

	Core.StateEpochLayout = __webpack_require__(153);

	Core.StateEpoch = __webpack_require__(152);

	Core.finishLoad(["CanvasElement", "DrawCacheManager", "DrawEpoch", "ElementBase", "ElementFactory", "Element", "EngineStat", "GlobalEpochCycle", "IdleEpoch", "StateEpochLayout", "StateEpoch"]);


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Core || (Engine.Core = (function(superClass) {
	  extend(Core, superClass);

	  function Core() {
	    return Core.__super__.constructor.apply(this, arguments);
	  }

	  Core.namespace = Engine;

	  Core.namespacePath = "Neptune.Art.Engine.Core";

	  return Core;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Core);


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(116), __webpack_require__(142), __webpack_require__(143), __webpack_require__(150), __webpack_require__(165), __webpack_require__(163), __webpack_require__(167)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Webgl, Canvas, ArtEngineEvents, Element, GlobalEpochCycle, DrawEpoch, EngineStat) {
	  var Browser, CanvasElement, KeyEvent, Matrix, Point, PointerEvent, PointerEventManager, Rectangle, createWithPostCreate, currentSecond, domElementOffset, drawEpoch, durationString, first, getDevicePixelRatio, globalEpochCycle, inspect, log, matrix, nextTick, point, rect, ref, timeStampToPerformanceSecond, timeout;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  log = Foundation.log, inspect = Foundation.inspect, nextTick = Foundation.nextTick, currentSecond = Foundation.currentSecond, timeout = Foundation.timeout, durationString = Foundation.durationString, timeStampToPerformanceSecond = Foundation.timeStampToPerformanceSecond, first = Foundation.first, Browser = Foundation.Browser, createWithPostCreate = Foundation.createWithPostCreate;
	  ref = Browser.Dom, getDevicePixelRatio = ref.getDevicePixelRatio, domElementOffset = ref.domElementOffset;
	  PointerEventManager = ArtEngineEvents.PointerEventManager, PointerEvent = ArtEngineEvents.PointerEvent, KeyEvent = ArtEngineEvents.KeyEvent;
	  globalEpochCycle = GlobalEpochCycle.globalEpochCycle;
	  drawEpoch = DrawEpoch.drawEpoch;
	  return createWithPostCreate(CanvasElement = (function(superClass) {
	    extend(CanvasElement, superClass);

	    CanvasElement.classGetter({
	      devicePixelsPerPoint: function() {
	        return getDevicePixelRatio();
	      }
	    });

	    CanvasElement.prototype._updateRegistryFromPendingState = function() {
	      return null;
	    };

	    function CanvasElement(options) {
	      if (options == null) {
	        options = {};
	      }
	      this.canvasElement = this;
	      this._devicePixelsPerPoint = 1;
	      CanvasElement.__super__.constructor.apply(this, arguments);
	      if (!options.canvas && options.canvasId) {
	        options.canvas = document.getElementById(options.canvasId);
	      }
	      this._domEventListeners = [];
	      this.webgl = options.webgl;
	      if (!options.disableRetina) {
	        this.retinaSupport = true;
	      }
	      this._drawEpochPreprocessing = [];
	      this._drawEpochQueued = false;
	      this.noFPS = options.noFPS;
	      this._attach(options.canvas);
	      this.engineStat = new EngineStat;
	      this.pointerEventManager = new PointerEventManager({
	        canvasElement: this
	      });
	      self.canvasElement || (self.canvasElement = this);
	    }

	    CanvasElement.virtualProperty({
	      parentSizeForChildren: {
	        getter: function() {
	          return this.getParentSize();
	        }
	      },
	      parentSize: {
	        getter: function() {
	          if (this._canvas) {
	            return point(this._canvas.parentElement.clientWidth, this._canvas.parentElement.clientHeight);
	          } else {
	            return point(100);
	          }
	        }
	      }
	    });

	    CanvasElement.prototype._domListener = function(target, type, listener) {
	      target.addEventListener(type, listener);
	      return this._domEventListeners.push({
	        target: target,
	        type: type,
	        listener: listener
	      });
	    };

	    CanvasElement.prototype.dettach = function() {
	      globalEpochCycle.dettachCanvasElement(this);
	      this._unregister();
	      return this._dettachDomEventListeners();
	    };

	    CanvasElement.prototype._dettachDomEventListeners = function() {
	      var i, len, listener, ref1;
	      ref1 = this._domEventListeners;
	      for (i = 0, len = ref1.length; i < len; i++) {
	        listener = ref1[i];
	        listener.target.removeEventListener(listener.type, listener.listener);
	      }
	      return this._domEventListeners = [];
	    };

	    CanvasElement.prototype.isFocused = function(el) {
	      return this.pointerEventManager.isFocused(el);
	    };

	    CanvasElement.prototype.focusElement = function(el) {
	      return this.pointerEventManager.focus(null, el);
	    };

	    CanvasElement.prototype.enableFileDrop = function() {
	      if (!window.FileReader) {
	        this.log(this.className + "#enableFileDrop failed - browser not supported");
	        return false;
	      }
	      this._domListener(window, 'dragover', (function(_this) {
	        return function(e) {
	          return _this.routeFileDropEvent(e, 'dragOver');
	        };
	      })(this));
	      this._domListener(window, 'dragenter', (function(_this) {
	        return function(e) {
	          return _this.routeFileDropEvent(e, 'dragEnter');
	        };
	      })(this));
	      this._domListener(window, 'dragleave', (function(_this) {
	        return function(e) {
	          return _this.routeFileDropEvent(e, 'dragLeave');
	        };
	      })(this));
	      this._domListener(window, 'drop', (function(_this) {
	        return function(e) {
	          return _this.routeFileDropEvent(e, 'drop');
	        };
	      })(this));
	      this.log(this.className + "#enableFileDrop enabled");
	      return true;
	    };

	    CanvasElement.prototype.routeFileDropEvent = function(e, type) {
	      if (e.dataTransfer.types[0] !== "Files") {
	        return true;
	      }
	      e.preventDefault();
	      this.pointerEventManager.fileDropEvent(type, {
	        locations: [this._domEventLocation(e)],
	        files: e.dataTransfer.files
	      });
	      return false;
	    };

	    CanvasElement.prototype._descendantNeedsRedrawing = function(descendant) {
	      CanvasElement.__super__._descendantNeedsRedrawing.apply(this, arguments);
	      return this.queueDrawEpoch();
	    };

	    CanvasElement.prototype._releaseAllCacheBitmaps = function() {};

	    CanvasElement.prototype.queueDrawEpoch = function() {
	      if (!this._drawEpochQueued) {
	        this._drawEpochQueued = true;
	        return drawEpoch.queueItem((function(_this) {
	          return function() {
	            return _this.processEpoch();
	          };
	        })(this));
	      }
	    };

	    CanvasElement.prototype.queueDrawEpochPreprocessor = function(f) {
	      this._drawEpochPreprocessing.push(f);
	      return this.queueDrawEpoch();
	    };

	    CanvasElement.prototype.processEpoch = function() {
	      var f, i, len, pp;
	      this._drawEpochQueued = false;
	      if (this._drawEpochPreprocessing.length > 0) {
	        pp = this._drawEpochPreprocessing;
	        this._drawEpochPreprocessing = [];
	        for (i = 0, len = pp.length; i < len; i++) {
	          f = pp[i];
	          f();
	        }
	      }
	      return this.draw();
	    };

	    CanvasElement.setter({
	      cssCursor: function(cursor) {
	        var ref1;
	        if (cursor !== this._cssCursor) {
	          if ((ref1 = this._canvas) != null) {
	            ref1.style.cursor = cursor;
	          }
	          return this._cssCursor = cursor;
	        }
	      }
	    });

	    CanvasElement.getter({
	      numActivePointers: function() {
	        return this.pointerEventManager.getNumActivePointers();
	      },
	      cacheable: function() {
	        return false;
	      },
	      canvasElement: function() {
	        return this;
	      },
	      cssCursor: function() {
	        return this._cssCursor;
	      },
	      windowScrollOffset: function() {
	        return point(window.scrollX, window.scrollY);
	      },
	      canvasInnerSize: function() {
	        return point(this._fullPageWidth ? window.innerWidth : this._canvas.clientWidth, this._fullPageHeight ? window.innerHeight : this._canvas.clientHeight);
	      }
	    });

	    CanvasElement.prototype._attach = function(canvas) {
	      globalEpochCycle.attachCanvasElement(this);
	      this.onNextReady((function(_this) {
	        return function() {
	          return _this._register();
	        };
	      })(this));
	      this._canvas = canvas;
	      this._retinaSetup();
	      if (canvas) {
	        this._updateCanvasGeometry();
	        return this._attachDomEventListeners();
	      }
	    };

	    CanvasElement.prototype._retinaSetup = function() {
	      return this._devicePixelsPerPoint = this.retinaSupport ? getDevicePixelRatio() : 1;
	    };

	    CanvasElement.prototype._sizeChanged = function(newSize, oldSize) {
	      CanvasElement.__super__._sizeChanged.apply(this, arguments);
	      this._pointSize = newSize;
	      this._canvas.style.width = newSize.x + "px";
	      this._canvas.style.height = newSize.y + "px";
	      this._pixelSize = this._pointSize.mul(this._devicePixelsPerPoint);
	      this._canvas.setAttribute("width", this._pixelSize.x);
	      this._canvas.setAttribute("height", this._pixelSize.y);
	      this._updateCanvasToDocumentMatricies();
	      this._bitmapFactory = this.canvasBitmap = this.webgl ? new Webgl.Bitmap(this._canvas) : new Canvas.Bitmap(this._canvas);
	      return this.queueDrawEpoch();
	    };

	    CanvasElement.prototype._updateCanvasGeometry = function() {
	      this._updateCanvasToDocumentMatricies();
	      this._layoutPropertyChanged();
	      return this._elementChanged();
	    };

	    CanvasElement.prototype._updateCanvasToDocumentMatricies = function() {
	      var left, ref1, top;
	      ref1 = domElementOffset(this._canvas), left = ref1.left, top = ref1.top;
	      this._canvasDocumentOffset = point(left, top);
	      this._elementToDocumentMatrix = Matrix.scale(1 / this._devicePixelsPerPoint).translate(left, top);
	      this._documentToElementMatrix = Matrix.translate(-left, -top).scale(this._devicePixelsPerPoint);
	      this._parentToElementMatrix = null;
	      this.setElementToParentMatrix(this._elementToAbsMatrix = Matrix.scale(this._devicePixelsPerPoint));
	      return this.queueEvent("documentMatriciesChanged");
	    };

	    CanvasElement.prototype._domEventLocation = function(domEvent) {
	      var windowScrollOffset, x, y;
	      windowScrollOffset = this.getWindowScrollOffset();
	      x = (domEvent.clientX + windowScrollOffset.x - this._canvasDocumentOffset.x) * this._devicePixelsPerPoint;
	      y = (domEvent.clientY + windowScrollOffset.y - this._canvasDocumentOffset.y) * this._devicePixelsPerPoint;
	      return new Point(x, y);
	    };

	    CanvasElement.prototype._attachResizeListener = function() {
	      return this._domListener(window, "resize", (function(_this) {
	        return function(domEvent) {
	          _this._updateCanvasGeometry();
	          return globalEpochCycle.processEpoch();
	        };
	      })(this));
	    };

	    CanvasElement.prototype._attachPointerMoveListeners = function() {
	      this._domListener(this._canvas, "mousemove", (function(_this) {
	        return function(domEvent) {
	          if (_this.numActivePointers === 0) {
	            return _this.mouseMove(_this._domEventLocation(domEvent, timeStampToPerformanceSecond(domEvent.timeStamp)));
	          }
	        };
	      })(this));
	      return this._domListener(window, "mousemove", (function(_this) {
	        return function(domEvent) {
	          if (_this.numActivePointers > 0) {
	            return _this.mouseMove(_this._domEventLocation(domEvent), timeStampToPerformanceSecond(domEvent.timeStamp));
	          }
	        };
	      })(this));
	    };

	    CanvasElement.getter({
	      numActivePointers: function() {
	        return this.pointerEventManager.numActivePointers;
	      },
	      activePointers: function() {
	        return this.pointerEventManager.activePointers;
	      }
	    });

	    CanvasElement.prototype.mouseDown = function(location, timeStampInPerformanceSeconds) {
	      this.pointerEventManager.mouseMove(location, timeStampInPerformanceSeconds);
	      return this.pointerEventManager.mouseDown(location, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.mouseMove = function(location, timeStampInPerformanceSeconds) {
	      return this.pointerEventManager.mouseMove(location, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.mouseUp = function(location, timeStampInPerformanceSeconds) {
	      this.pointerEventManager.mouseMove(location, timeStampInPerformanceSeconds);
	      return this.pointerEventManager.mouseUp(timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.touchDown = function(id, location, timeStampInPerformanceSeconds) {
	      console.log("touchDown " + location);
	      return this.pointerEventManager.pointerDown(id, location, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.touchMove = function(id, location, timeStampInPerformanceSeconds) {
	      return this.pointerEventManager.pointerMove(id, location, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.touchUp = function(id, location, timeStampInPerformanceSeconds) {
	      this.pointerEventManager.pointerMove(id, location, timeStampInPerformanceSeconds);
	      return this.pointerEventManager.pointerUp(id, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.touchCancel = function(id, timeStampInPerformanceSeconds) {
	      return this.pointerEventManager.pointerCancel(id, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.capturePointerEvents = function(element) {
	      return this.pointerEventManager.capturePointerEvents(element);
	    };

	    CanvasElement.prototype.pointerEventsCapturedBy = function(element) {
	      return this.pointerEventManager.pointerEventsCapturedBy(element);
	    };

	    CanvasElement.prototype._attachPointerButtonListeners = function() {
	      this._domListener(this._canvas, "mousedown", (function(_this) {
	        return function(domEvent) {
	          if (domEvent.button === 0) {
	            domEvent.preventDefault();
	            return _this.mouseDown(_this._domEventLocation(domEvent), timeStampToPerformanceSecond(domEvent.timeStamp));
	          }
	        };
	      })(this));
	      return this._domListener(window, "mouseup", (function(_this) {
	        return function(domEvent) {
	          if (domEvent.button === 0 && _this.activePointers["mousePointer"]) {
	            domEvent.preventDefault();
	            return _this.mouseUp(_this._domEventLocation(domEvent), timeStampToPerformanceSecond(domEvent.timeStamp));
	          }
	        };
	      })(this));
	    };

	    CanvasElement.prototype._attachPointerTouchListeners = function() {
	      this._domListener(this._canvas, "touchstart", (function(_this) {
	        return function(e) {
	          var changedTouch, i, len, ref1, results;
	          e.preventDefault();
	          ref1 = e.changedTouches;
	          results = [];
	          for (i = 0, len = ref1.length; i < len; i++) {
	            changedTouch = ref1[i];
	            results.push(_this.touchDown(changedTouch.identifier, _this._domEventLocation(changedTouch), timeStampToPerformanceSecond(e.timeStamp)));
	          }
	          return results;
	        };
	      })(this));
	      this._domListener(this._canvas, "touchmove", (function(_this) {
	        return function(e) {
	          var changedTouch, i, len, ref1, results;
	          e.preventDefault();
	          ref1 = e.changedTouches;
	          results = [];
	          for (i = 0, len = ref1.length; i < len; i++) {
	            changedTouch = ref1[i];
	            results.push(_this.pointerEventManager.pointerMove(changedTouch.identifier, _this._domEventLocation(changedTouch), timeStampToPerformanceSecond(e.timeStamp)));
	          }
	          return results;
	        };
	      })(this));
	      this._domListener(this._canvas, "touchend", (function(_this) {
	        return function(e) {
	          var changedTouch, i, len, ref1, results;
	          e.preventDefault();
	          ref1 = e.changedTouches;
	          results = [];
	          for (i = 0, len = ref1.length; i < len; i++) {
	            changedTouch = ref1[i];
	            results.push(_this.touchUp(changedTouch.identifier, _this._domEventLocation(changedTouch), timeStampToPerformanceSecond(e.timeStamp)));
	          }
	          return results;
	        };
	      })(this));
	      return this._domListener(this._canvas, "touchcancel", (function(_this) {
	        return function(e) {
	          var changedTouch, i, len, ref1, results;
	          e.preventDefault();
	          ref1 = e.changedTouches;
	          results = [];
	          for (i = 0, len = ref1.length; i < len; i++) {
	            changedTouch = ref1[i];
	            results.push(_this.touchCancel(changedTouch.identifier, timeStampToPerformanceSecond(e.timeStamp)));
	          }
	          return results;
	        };
	      })(this));
	    };

	    CanvasElement.prototype._attachKeypressListeners = function() {
	      this.keysDown = {};
	      this._domListener(window, "keypress", (function(_this) {
	        return function(domEvent) {
	          return _this.pointerEventManager.queueKeyEvents("keyPress", function() {
	            return new KeyEvent("keyPress", {
	              typed: String.fromCharCode(domEvent.charCode)
	            });
	          });
	        };
	      })(this));
	      this._domListener(window, "keydown", (function(_this) {
	        return function(domEvent) {
	          return _this.pointerEventManager.queueKeyEvents("keyDown", function() {
	            return new KeyEvent("keyDown", {
	              keyCode: domEvent.keyCode
	            });
	          });
	        };
	      })(this));
	      return this._domListener(window, "keyup", (function(_this) {
	        return function(domEvent) {
	          return _this.pointerEventManager.queueKeyEvents("keyUp", function() {
	            return new KeyEvent("keyUp", {
	              keyCode: domEvent.keyCode
	            });
	          });
	        };
	      })(this));
	    };

	    CanvasElement.prototype._attachDomEventListeners = function() {
	      this._dettachDomEventListeners();
	      this._attachPointerMoveListeners();
	      this._attachPointerTouchListeners();
	      this._attachPointerButtonListeners();
	      this._attachResizeListener();
	      return this._attachKeypressListeners();
	    };

	    CanvasElement.prototype.draw = function() {
	      var frameEndTime, frameStartTime;
	      Element.resetStats();
	      frameStartTime = currentSecond();
	      this.firstFrameTime || (this.firstFrameTime = frameStartTime);
	      if (this.lastFrameTime) {
	        this.engineStat.add("fps", 1 / (frameStartTime - this.lastFrameTime));
	        this.engineStat.add("frameTimeMS", (frameStartTime - this.lastFrameTime) * 1000);
	      }
	      this.lastFrameTime = frameStartTime;
	      if (this.canvasBitmap) {
	        CanvasElement.__super__.draw.call(this, this.canvasBitmap, this.elementToParentMatrix);
	      }
	      frameEndTime = currentSecond();
	      return this.engineStat.add("drawTimeMS", (frameEndTime - frameStartTime) * 1000 | 0);
	    };

	    CanvasElement.prototype._showDrawStats = function() {
	      var numSamples;
	      numSamples = this.engineStat.length("drawTimeMS");
	      return timeout(1000, (function(_this) {
	        return function() {
	          var totalDrawDuration;
	          if (numSamples === _this.engineStat.length("drawTimeMS")) {
	            totalDrawDuration = frameEndTime - _this.firstFrameTime;
	            _this.engineStat.log();
	            _this.engineStat.reset();
	            _this.log({
	              cache: {
	                count: Element._activeCacheCount,
	                size: (Element._activeCacheByteSize / (1024 * 1024)).toFixed(1) + "mb"
	              }
	            });
	            _this.firstFrameTime = null;
	            _this.frameCount = 0;
	            return _this.lastFrameTime = null;
	          }
	        };
	      })(this));
	    };

	    return CanvasElement;

	  })(Element));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(117);


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	var Webgl;

	module.exports = Webgl = __webpack_require__(118);

	Webgl.Bitmap = __webpack_require__(120);

	Webgl.ContextManager = __webpack_require__(133);

	Webgl.Detector = __webpack_require__(141);

	Webgl.OffscreenRenderTarget = __webpack_require__(135);

	Webgl.ShaderProgram = __webpack_require__(136);

	Webgl.ShaderPrograms = __webpack_require__(137);

	Webgl.ShaderRendererColored = __webpack_require__(138);

	Webgl.ShaderRendererTextured = __webpack_require__(140);

	Webgl.ShaderRenderer = __webpack_require__(139);

	Webgl.Shader = __webpack_require__(134);

	Webgl.finishLoad(["Bitmap", "ContextManager", "Detector", "OffscreenRenderTarget", "ShaderProgram", "ShaderPrograms", "ShaderRendererColored", "ShaderRendererTextured", "ShaderRenderer", "Shader"]);


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(119);

	module.exports = Art.Webgl || (Art.Webgl = (function(superClass) {
	  extend(Webgl, superClass);

	  function Webgl() {
	    return Webgl.__super__.constructor.apply(this, arguments);
	  }

	  Webgl.namespace = Art;

	  Webgl.namespacePath = "Neptune.Art.Webgl";

	  return Webgl;

	})(Neptune.Base));

	Art.addNamespace(Art.Webgl);


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(121), __webpack_require__(118), __webpack_require__(133)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Webgl, ContextManager) {
	  var Color, Matrix, Point, Rectangle, color, eq, inspect, matrix, point, rect, superSuperConstructor, white;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  inspect = Foundation.Inspect.inspect;
	  eq = Foundation.Eq.eq;
	  white = color(1, 1, 1, 1);
	  superSuperConstructor = Canvas.BitmapBase.__super__.constructor;
	  return Webgl.Bitmap = (function(superClass) {
	    extend(Bitmap, superClass);

	    Bitmap.supportedCompositeModes = Webgl.ContextManager.supportedCompositeModes;

	    Bitmap.getter({
	      supportedCompositeModes: function() {
	        return Bitmap.supportedCompositeModes;
	      }
	    });

	    function Bitmap(a, b) {
	      if (a instanceof Webgl.ContextManager) {
	        superSuperConstructor.apply(this, arguments);
	        this.initFromContextManager(a, b);
	      } else {
	        Bitmap.__super__.constructor.apply(this, arguments);
	      }
	    }

	    Bitmap.prototype.newBitmap = function(size) {
	      return new this.bitmapClass(this._contextManager, size || this.size).tap((function(_this) {
	        return function(b) {
	          return b.pixelsPerPoint = _this.pixelsPerPoint;
	        };
	      })(this));
	    };

	    Bitmap.prototype.setClippingArea = function(area) {
	      if (area) {
	        this._clippingArea = area = (area || rect(this.size)).roundIn(1, 1 / 256);
	        this._contextManager.viewport = this.texture ? area : rect(area.x, this.size.y - area.bottom, area.w, area.h);
	      } else {
	        this._contextManager.viewport = rect(this.size);
	        this._clippingArea = null;
	      }
	      return this.updateDrawMatrix();
	    };

	    Bitmap.prototype.clippedTo = function(area, f) {
	      var a, previousClippingArea;
	      previousClippingArea = this._clippingArea;
	      try {
	        this.setClippingArea(a = area.intersection(this._clippingArea));
	        return f();
	      } finally {
	        this.setClippingArea(previousClippingArea);
	      }
	    };

	    Bitmap.prototype.populateClone = function(result) {
	      result.initFromContextManager(this._contextManager, this.size);
	      return Bitmap.__super__.populateClone.apply(this, arguments);
	    };

	    Bitmap.prototype.initFromContextManager = function(cm, initializer) {
	      var ref;
	      this._contextManager = cm;
	      this._context = this._contextManager.context;
	      return ref = cm.newTexture(initializer), this._size = ref[0], this.texture = ref[1], ref;
	    };

	    Bitmap.prototype.initContext = function() {
	      this._contextManager = new Webgl.ContextManager(this._canvas);
	      return this._context = this._contextManager.context;
	    };

	    Bitmap.getter({
	      isTexture: function() {
	        return !!this.texture;
	      }
	    });

	    Bitmap.prototype.toMemoryDrawableBitmap = function() {
	      if (this.isTexture) {
	        return this.toMemoryBitmap();
	      } else {
	        return this;
	      }
	    };

	    Bitmap.prototype.toMemoryBitmap = function() {
	      var imageData, memoryBitmap;
	      memoryBitmap = new Canvas.Bitmap(this.size);
	      if (this.isTexture) {
	        imageData = memoryBitmap.context.createImageData(this.size.x, this.size.y);
	        this.fillImageData(imageData);
	        memoryBitmap.putImageData(imageData);
	      } else {
	        memoryBitmap.clear(color(0, 0, 0, 0));
	        memoryBitmap.drawBitmap(point(), this);
	      }
	      return memoryBitmap;
	    };

	    Bitmap.prototype.startGL = function(mode) {
	      if (mode == null) {
	        mode = "normal";
	      }
	      this._contextManager.setRenderTarget(this);
	      this._contextManager.setGLBlender(mode);
	      if (!this.drawMatrix) {
	        return this.updateDrawMatrix();
	      }
	    };

	    Bitmap.prototype.updateDrawMatrix = function() {
	      var size, sx, sy, tx, ty;
	      tx = ty = 0;
	      sx = sy = 1;
	      size = this._clippingArea ? (tx = -this._clippingArea.x, ty = -this._clippingArea.y, this._clippingArea.size) : this.size;
	      if (this.texture) {
	        sx = 2 / size.x;
	        sy = 2 / size.y;
	        tx = tx * sx - 1;
	        ty = ty * sy - 1;
	      } else {
	        sx = 2 / size.x;
	        sy = -2 / size.y;
	        tx = tx * sx - 1;
	        ty = ty * sy + 1;
	      }
	      return this.drawMatrix = new Matrix(sx, sy, 0, 0, tx, ty);
	    };

	    Bitmap.prototype.clear = function(a, b, c, d) {
	      var clr;
	      clr = a != null ? color(a, b, c, d) : color(0, 0, 0, 0);
	      this.startGL();
	      clr = clr.premultiplied;
	      this._context.clearColor(clr.r, clr.g, clr.b, clr.a);
	      return this._context.clear(this._context.COLOR_BUFFER_BIT);
	    };

	    Bitmap.prototype.drawRectangle = function(where, rectangle, options) {
	      var c, clr, compositeMode, fillStyle;
	      compositeMode = options.compositeMode, fillStyle = options.fillStyle;
	      clr = options.color;
	      rectangle = rect(rectangle);
	      if (this.shouldPixelSnap(where)) {
	        rectangle = this.pixelSnapRectangle(where, rectangle);
	      }
	      if (fillStyle instanceof Canvas.GradientFillStyle) {
	        return this.drawLinearGradientRectangle(where, rectangle, fillStyle, compositeMode);
	      } else {
	        c = color(clr).premultiplied;
	        this.startGL(compositeMode);
	        this._contextManager.uniformColorRenderer.renderRectangle(where, rectangle, c);
	        return this;
	      }
	    };

	    Bitmap.prototype.drawLinearGradientRectangle = function(where, rectangle, gfs, compositeMode) {
	      var factor, gfsBitmap, gp1, gp2, gradientV, xRect;
	      gfsBitmap = this.gradientBitmap(gfs, point(512, 1));
	      gp1 = gfs.from;
	      gp2 = gfs.to;
	      gradientV = gp2.sub(gp1);
	      factor = 1 / gradientV.magnitudeSquared;
	      xRect = rectangle instanceof Point ? rectangle = rect(rectangle) : rect(rectangle.size);
	      this.startGL(compositeMode);
	      this._contextManager.texturedUniformColorRenderer.renderRectangle(where, rectangle, white, function(renderer) {
	        var j, len, p, ref, results;
	        renderer.texture = gfsBitmap.texture;
	        ref = xRect.corners;
	        results = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          p = ref[j];
	          results.push(renderer.addTextureLocation(point(p.sub(gp1).dot(gradientV) * factor, 0)));
	        }
	        return results;
	      });
	      return this;
	    };

	    Bitmap.prototype.drawBitmap = function(where, bitmap, options) {
	      var bitmapSize, compositeMode, opacity, r, sourceArea;
	      if (!bitmap.texture) {
	        bitmap = this.newBitmap(bitmap);
	      }
	      if (options) {
	        sourceArea = options.sourceArea;
	        opacity = options.opacity;
	        compositeMode = options.compositeMode;
	      }
	      bitmapSize = bitmap.size;
	      opacity = opacity != null ? opacity : 1;
	      r = !sourceArea ? sourceArea = bitmapSize : sourceArea.x !== 0 || sourceArea.y !== 0 ? new Rectangle(0, 0, sourceArea.w, sourceArea.h) : sourceArea;
	      this.startGL(compositeMode);
	      this._contextManager.texturedUniformColorRenderer.renderRectangle(where, r, opacity, function(renderer) {
	        var data, xScaler, yScaler;
	        renderer.texture = bitmap.texture;
	        xScaler = 1 / bitmapSize.x;
	        yScaler = 1 / bitmapSize.y;
	        data = renderer.allocateTextureLocations(4);
	        data[0] = sourceArea.left * xScaler;
	        data[1] = sourceArea.top * yScaler;
	        data[2] = sourceArea.right * xScaler;
	        data[3] = sourceArea.top * yScaler;
	        data[4] = sourceArea.right * xScaler;
	        data[5] = sourceArea.bottom * yScaler;
	        data[6] = sourceArea.left * xScaler;
	        return data[7] = sourceArea.bottom * yScaler;
	      });
	      return this;
	    };

	    Bitmap.prototype.blur = function(radius, toClone) {
	      var mem;
	      this.log("WARNING: WebGL blurring not implemented efficiently, yet...");
	      mem = this.toMemoryBitmap().blur(radius);
	      toClone = toClone ? this.clone() : this;
	      toClone.drawBitmap(null, mem, {
	        compositeMode: "replace"
	      });
	      return toClone;
	    };

	    Bitmap.prototype.blurAlpha = function(radius, options) {
	      var mem, toClone;
	      this.log("WARNING: WebGL alpha-blurring not implemented efficiently, yet...");
	      toClone = (options != null ? options.clone : void 0) ? this.clone() : this;
	      options && (options.clone = null);
	      mem = this.toMemoryBitmap().blurAlpha(radius, options);
	      toClone.drawBitmap(null, mem, {
	        compositeMode: "replace"
	      });
	      return toClone;
	    };

	    Bitmap.prototype.setTransform = function() {
	      return 1;
	    };

	    Bitmap.prototype.fillText = function() {};

	    Bitmap.prototype.getImageData = function(a, b, c, d) {
	      var imageData, r;
	      if (!this.texture) {
	        return Bitmap.__super__.getImageData.apply(this, arguments);
	      }
	      r = a != null ? rect(a, b, c, d) : rect(this.size);
	      imageData = {
	        data: new Uint8Array(r.area * 4),
	        width: r.w,
	        height: r.h
	      };
	      this.fillImageData(imageData, r);
	      return imageData;
	    };

	    Bitmap.prototype.bindTexture = function() {
	      return this._context.bindTexture(this._context.TEXTURE_2D, this.texture);
	    };

	    Bitmap.prototype.demultiplyImageData = function(data) {
	      var a, b, g, i, j, len, m, r;
	      for (i = j = 0, len = data.length; j < len; i = j += 4) {
	        r = data[i];
	        g = data[i + 1];
	        b = data[i + 2];
	        a = data[i + 3];
	        m = 255.0 / a;
	        data[i] = r > a ? 255 : r * m;
	        data[i + 1] = g > a ? 255 : g * m;
	        data[i + 2] = b > a ? 255 : b * m;
	        if (r > a) {
	          data[i + 3] = a = r;
	        }
	        if (g > a) {
	          data[i + 3] = a = g;
	        }
	        if (b > a) {
	          data[i + 3] = a = b;
	        }
	      }
	      return null;
	    };

	    Bitmap.prototype.fillImageData = function(imageData, r) {
	      var data, i, j, len, results, tempData, v;
	      if (r == null) {
	        r = rect(this.size);
	      }
	      this.startGL();
	      data = imageData.data;
	      if (data.buffer) {
	        data = new Uint8Array(data.buffer);
	        this._context.readPixels(r.x, r.y, r.w, r.h, this._context.RGBA, this._context.UNSIGNED_BYTE, data);
	        return this.demultiplyImageData(data);
	      } else {
	        tempData = new Uint8Array(r.w * r.h * 4);
	        this._context.readPixels(r.x, r.y, r.w, r.h, this._context.RGBA, this._context.UNSIGNED_BYTE, tempData);
	        this.demultiplyImageData(tempData);
	        results = [];
	        for (i = j = 0, len = tempData.length; j < len; i = ++j) {
	          v = tempData[i];
	          results.push(data[i] = v);
	        }
	        return results;
	      }
	    };

	    Bitmap.prototype.gradientBitmap = function(gradientFillStyle, size) {
	      var bitmap, c, colorN, colors, i, j, lastC, lastX, len, r, renderer, w;
	      if (size == null) {
	        size = point(1024, 1);
	      }
	      bitmap = this.newBitmap(size);
	      colors = gradientFillStyle.premultipliedColorPositions;
	      lastX = 0;
	      lastC = colors[0].c;
	      w = size.x;
	      r = rect(0, 0, 0, size.y);
	      bitmap.startGL();
	      renderer = this._contextManager.coloredRenderer;
	      for (i = j = 0, len = colors.length; j < len; i = ++j) {
	        colorN = colors[i];
	        if (i > 0) {
	          r = rect(r.x, r.y, colorN.n * w - r.x, r.h);
	          c = colorN.c;
	          renderer.renderRectangle(null, r, white, function() {
	            renderer.addColor(lastC);
	            renderer.addColor(c);
	            renderer.addColor(c);
	            return renderer.addColor(lastC);
	          });
	          r = rect(r.right, r.y, r.w, r.h);
	          lastC = c;
	        }
	      }
	      return bitmap;
	    };

	    return Bitmap;

	  })(Canvas.BitmapBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var Canvas;

	module.exports = Canvas = __webpack_require__(122);

	Canvas.AssetLoader = __webpack_require__(123);

	Canvas.BitmapBase = __webpack_require__(126);

	Canvas.Bitmap = __webpack_require__(124);

	Canvas.GoogleFontLoader = __webpack_require__(129);

	Canvas.GradientFillStyle = __webpack_require__(125);

	Canvas.Paths = __webpack_require__(127);

	Canvas.StackBlurOriginal = __webpack_require__(131);

	Canvas.StackBlur = __webpack_require__(128);

	Canvas.finishLoad(["AssetLoader", "BitmapBase", "Bitmap", "GoogleFontLoader", "GradientFillStyle", "Paths", "StackBlurOriginal", "StackBlur"]);


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(119);

	module.exports = Art.Canvas || (Art.Canvas = (function(superClass) {
	  extend(Canvas, superClass);

	  function Canvas() {
	    return Canvas.__super__.constructor.apply(this, arguments);
	  }

	  Canvas.namespace = Art;

	  Canvas.namespacePath = "Neptune.Art.Canvas";

	  return Canvas;

	})(Neptune.Base));

	Art.addNamespace(Art.Canvas);


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(124)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Bitmap) {
	  var AssetLoader, BatchLoader, Binary, EncodedImage, assetHandle, inspect, log, slice;
	  Binary = Foundation.Binary, inspect = Foundation.inspect, log = Foundation.log, slice = Foundation.slice, BatchLoader = Foundation.BatchLoader;
	  EncodedImage = Binary.EncodedImage;
	  assetHandle = function(src) {
	    return src.split(".")[0].split("@")[0];
	  };
	  return AssetLoader = (function(superClass) {
	    extend(AssetLoader, superClass);

	    AssetLoader.assetHandle = assetHandle;

	    function AssetLoader(options) {
	      var defaultExtenstion;
	      if (options == null) {
	        options = {};
	      }
	      defaultExtenstion = options.defaultExtenstion || ".png";
	      AssetLoader.__super__.constructor.call(this, (function(_this) {
	        return function(src, addAsset) {
	          var fullPath;
	          fullPath = src;
	          if (!fullPath.match(/\.[0-9a-zA-Z]+$/)) {
	            fullPath += defaultExtenstion;
	          }
	          if (_this.assetRoot) {
	            fullPath = (_this.assetRoot + "/") + fullPath;
	          }
	          return EncodedImage.get(fullPath, function(image) {
	            var bitmap;
	            bitmap = _this.bitmapFactory.newBitmap(image);
	            bitmap.pixelsPerPoint = fullPath.match(/@2x\./) ? 2 : 1;
	            return addAsset(src, bitmap);
	          }, function(rawEvent) {
	            return console.error("asset " + (inspect(fullPath)) + " could not be loaded. Error:", rawEvent);
	          });
	        };
	      })(this));
	      this.bitmapFactory = options.bitmapFactory || Bitmap;
	      this.assetRoot = options.assetRoot;
	    }

	    return AssetLoader;

	  })(BatchLoader);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(89), __webpack_require__(8), __webpack_require__(125), __webpack_require__(126), __webpack_require__(127), __webpack_require__(128)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation, GradientFillStyle, BitmapBase, Paths, StackBlur) {
	  var Binary, Bitmap, Color, IdentityMatrix, Matrix, Point, Promise, Rectangle, canvasBlenders, color, currentSecond, emptyOptions, eq, floatEq0, inspect, isFunction, isNumber, isPlainObject, log, matrix, max, min, point, rect, round;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, color = Atomic.color, Color = Atomic.Color, IdentityMatrix = Atomic.IdentityMatrix;
	  inspect = Foundation.inspect, log = Foundation.log, min = Foundation.min, max = Foundation.max, Binary = Foundation.Binary, isFunction = Foundation.isFunction, isPlainObject = Foundation.isPlainObject, eq = Foundation.eq, currentSecond = Foundation.currentSecond, round = Foundation.round, isNumber = Foundation.isNumber, floatEq0 = Foundation.floatEq0, Promise = Foundation.Promise;
	  emptyOptions = {};
	  canvasBlenders = {
	    add: "lighter",
	    normal: "source-over",
	    target_alphamask: "source-in",
	    alphamask: "destination-in",
	    destover: "destination-over",
	    sourcein: "source-atop",
	    replace: "copy",
	    inverse_alphamask: "destination-out"
	  };
	  return Bitmap = (function(superClass) {
	    var k, v;

	    extend(Bitmap, superClass);

	    function Bitmap() {
	      return Bitmap.__super__.constructor.apply(this, arguments);
	    }

	    Bitmap.supportedCompositeModes = (function() {
	      var results;
	      results = [];
	      for (k in canvasBlenders) {
	        v = canvasBlenders[k];
	        results.push(k);
	      }
	      return results;
	    })();

	    Bitmap.getter({
	      supportedCompositeModes: function() {
	        return Bitmap.supportedCompositeModes;
	      }
	    });

	    Bitmap.artToCanvasCompositeModeMap = canvasBlenders;

	    Bitmap.prototype.initContext = function() {
	      var ref;
	      return this._context = (ref = this._canvas) != null ? ref.getContext("2d") : void 0;
	    };

	    Bitmap.getter({
	      context: function() {
	        if (!this._context && this._htmlImageElement) {
	          this.initNewCanvas(this.size);
	          this.drawBitmap(point(), this._htmlImageElement);
	          this._htmlImageElement = null;
	        }
	        return this._context;
	      },
	      context2D: function() {
	        return this.getContext();
	      },
	      htmlImageElement: function() {
	        return this._htmlImageElement;
	      },
	      htmlElement: function() {
	        return this._htmlImageElement || this._canvas;
	      }
	    });

	    Bitmap.get = function(url, callBack, errorBack) {
	      var p;
	      if (errorBack == null) {
	        errorBack = null;
	      }
	      p = new Promise;
	      Binary.EncodedImage.get(url, function(image) {
	        var bitmap;
	        p.resolve(bitmap = new Bitmap(image));
	        return typeof callBack === "function" ? callBack(bitmap) : void 0;
	      }, function(error) {
	        p.reject(error);
	        return typeof errorBack === "function" ? errorBack(error) : void 0;
	      });
	      return p;
	    };

	    Bitmap.prototype.initFromImage = function(image) {
	      this._size = point(image.width, image.height);
	      return this._htmlImageElement = image;
	    };

	    Bitmap.setter({
	      imageSmoothing: function(bool) {
	        return this._context.imageSmoothingEnabled = this._context.mozImageSmoothingEnabled = this._context.webkitImageSmoothingEnabled = this._context.msImageSmoothingEnabled = this._imageSmoothing = !!bool;
	      }
	    });

	    Bitmap.bitmapClass = Bitmap;

	    Bitmap.newBitmap = function(size) {
	      return new Bitmap.bitmapClass(size);
	    };

	    Bitmap.prototype.newBitmap = function(size) {
	      return new this.bitmapClass(size || this.size).tap((function(_this) {
	        return function(b) {
	          return b.pixelsPerPoint = _this.pixelsPerPoint;
	        };
	      })(this));
	    };

	    Bitmap.prototype.setClippingArea = function(area, drawMatrix) {
	      this._setTransform(drawMatrix);
	      if (isFunction(area)) {
	        this._context.beginPath();
	        area(this._context);
	        return this._context.clip();
	      } else {
	        area = this.pixelSnapRectangle(drawMatrix, area);
	        this._clippingArea = area.intersection(this._clippingArea);
	        this._context.beginPath();
	        this._context.rect(area.x, area.y, area.w, area.h);
	        return this._context.clip();
	      }
	    };

	    Bitmap.prototype.clippedTo = function(area, f, drawMatrix) {
	      var previousClippingArea;
	      this._context.save();
	      previousClippingArea = this._clippingArea;
	      try {
	        this.setClippingArea(area, drawMatrix);
	        return f();
	      } finally {
	        this._context.restore();
	        this._clippingArea = previousClippingArea;
	      }
	    };

	    Bitmap.prototype.clear = function(a, b, c, d) {
	      var clr;
	      clr = a != null ? color(a, b, c, d) : color(0, 0, 0, 0);
	      this._clearTransform();
	      if (clr.a !== 1.0) {
	        this._context.clearRect(0, 0, this.size.x, this.size.y);
	      }
	      if (!clr.eq(color(0, 0, 0, 0))) {
	        this._context.globalCompositeOperation = "source-over";
	        this._setFillStyle(clr);
	        return this._context.fillRect(0, 0, this.size.x, this.size.y);
	      }
	    };

	    Bitmap.prototype.strokeRectangle = function(where, rectangle, options) {
	      var grow, lineWidth, lineWidthMod2, r;
	      if (options == null) {
	        options = emptyOptions;
	      }
	      r = rect(rectangle);
	      if (this.shouldPixelSnap(where)) {
	        lineWidth = options.lineWidth || 1;
	        r = this.pixelSnapRectangle(where, r);
	        lineWidthMod2 = lineWidth % 2;
	        grow = lineWidthMod2 < 1 ? -lineWidthMod2 / 2 : lineWidthMod2 / 2 - 1;
	        if (!floatEq0(grow)) {
	          r = r.grow(grow);
	        }
	      }
	      if (options.radius) {
	        this.strokeShape(where, options, (function(_this) {
	          return function() {
	            return Paths.roundedRectangle(_this._context, r, min(options.radius, r.w / 2, r.h / 2));
	          };
	        })(this));
	      } else {
	        if (this._setupDraw(where, options, true)) {
	          this._context.strokeRect(r.x, r.y, r.w, r.h);
	          this._cleanupDraw(options);
	        }
	      }
	      return this;
	    };

	    Bitmap.prototype.strokeShape = function(where, options, pathFunction) {
	      if (this._setupDraw(where, options, true)) {
	        this._context.beginPath();
	        pathFunction(this._context);
	        this._context.stroke();
	        this._cleanupDraw(options);
	      }
	      return this;
	    };

	    Bitmap.prototype.drawBorder = function(where, rectangle, options) {
	      var a, a1, g, p, w;
	      if (this._setupDraw(where, options, true)) {
	        p = options.padding || 0;
	        w = options.width || 1;
	        a1 = rect(rectangle);
	        g = p - w / 2;
	        a = a1.grow(g);
	        this._context.beginPath();
	        Paths.rectangle(this._context, a);
	        this._context.stroke();
	        this._cleanupDraw(options);
	      }
	      return this;
	    };

	    Bitmap.prototype.drawLine = function(where, fromPoint, toPoint, options) {
	      if (options == null) {
	        options = emptyOptions;
	      }
	      if (this._setupDraw(where, options, true)) {
	        this._context.beginPath();
	        Paths.line(this._context, fromPoint, toPoint);
	        this._context.stroke();
	        this._cleanupDraw(options);
	      }
	      return this;
	    };

	    Bitmap.prototype.drawRectangle = function(where, rectangle, options) {
	      var _context, fillRule, r, radius;
	      if (options == null) {
	        options = emptyOptions;
	      }
	      r = rect(rectangle);
	      radius = options.radius, fillRule = options.fillRule;
	      if (this.shouldPixelSnap(where)) {
	        r = this.pixelSnapRectangle(where, r);
	      }
	      _context = this._context;
	      if (this._setupDraw(where, options)) {
	        if (radius > 0) {
	          _context.beginPath();
	          Paths.roundedRectangle(_context, r, radius);
	          _context.fill(fillRule || "nonzero");
	        } else {
	          _context.fillRect(r.x, r.y, r.w, r.h);
	        }
	        this._cleanupDraw(options);
	      }
	      return this;
	    };

	    Bitmap.prototype.fillShape = function(where, options, pathFunction) {
	      if (this._setupDraw(where, options)) {
	        _context.beginPath();
	        pathFunction(_context);
	        _context.fill(options.fillRule || "nonzero");
	        this._cleanupDraw(options);
	      }
	      return this;
	    };

	    Bitmap.prototype.drawBitmap = function(where, bitmap, options) {
	      var aboutToDrawTime, drawed, endTime, h, inputBitmap, inputBitmapSize, origSourceArea, ref, ref1, sh, sourceArea, startTime, sw, sx, sy, w, x, y;
	      if (options == null) {
	        options = emptyOptions;
	      }
	      startTime = currentSecond();
	      sourceArea = options.sourceArea;
	      inputBitmap = bitmap;
	      if (bitmap.toMemoryDrawableBitmap) {
	        bitmap = bitmap.toMemoryDrawableBitmap();
	      }
	      bitmap = bitmap._canvas || bitmap._htmlImageElement || bitmap;
	      inputBitmapSize = inputBitmap.size || point(inputBitmap.width, inputBitmap.height);
	      drawed = "";
	      if (this.shouldPixelSnap(where)) {
	        ref = this.pixelSnapAndTransformRectangle(where, (sourceArea != null ? sourceArea.size : void 0) || inputBitmapSize), x = ref.x, y = ref.y, w = ref.w, h = ref.h;
	        if (sourceArea) {
	          sx = round(sourceArea.x);
	          sy = round(sourceArea.y);
	          sw = round(sourceArea.w);
	          sh = round(sourceArea.h);
	        } else {
	          sx = sy = 0;
	          sw = inputBitmapSize.x;
	          sh = inputBitmapSize.y;
	        }
	        if (this._setupDraw(null, options)) {
	          drawed = "pixelSnap - " + (inspect([sx, sy, sw, sh]));
	          aboutToDrawTime = currentSecond();
	          this._context.drawImage(bitmap, sx, sy, sw, sh, x, y, w, h);
	          this._cleanupDraw(options);
	        }
	      } else {
	        if (this._setupDraw(where, options)) {
	          aboutToDrawTime = currentSecond();
	          if (origSourceArea = sourceArea) {
	            drawed = "sourceArea";
	            ref1 = sourceArea.intersection(rect(inputBitmap.size)), x = ref1.x, y = ref1.y, w = ref1.w, h = ref1.h;
	            this._context.drawImage(bitmap, x, y, w, h, 0, 0, w, h);
	          } else {
	            drawed = "other";
	            this._context.drawImage(bitmap, 0, 0);
	          }
	          this._cleanupDraw(options);
	        }
	      }
	      endTime = currentSecond();
	      if (endTime - startTime > .1) {
	        log({
	          Canvas_Bitmap_drawBitmap: {
	            slowDraw: ((endTime - startTime) * 1000 | 0) + "ms",
	            time2: ((endTime - aboutToDrawTime) * 1000 | 0) + "ms",
	            where: where,
	            options: options,
	            drawed: drawed,
	            bitmapSize: [bitmap._size, bitmap.width, bitmap.height]
	          }
	        });
	      }
	      return this;
	    };

	    Bitmap.prototype.drawText = function(where, text, options) {
	      if (options == null) {
	        options = emptyOptions;
	      }
	      if (this._setupDraw(where, options)) {
	        this._context.font = (options.size || 16) + "px " + (options.family || 'Arial') + ", Arial";
	        this._context.textAlign = options.align || 'start';
	        this._context.textBaseline = options.baseline || 'alphabetic';
	        this._context.fillText(text, 0, 0);
	        this._cleanupDraw(options);
	      }
	      return this;
	    };

	    Bitmap.prototype.blur = function(radius, toClone) {
	      return (toClone ? this.clone() : this).tap((function(_this) {
	        return function(target) {
	          return StackBlur.blur(_this, radius, target);
	        };
	      })(this));
	    };

	    Bitmap.prototype.blurAlpha = function(radius, options) {
	      if (options == null) {
	        options = emptyOptions;
	      }
	      return (options.clone ? this.clone() : this).tap((function(_this) {
	        return function(target) {
	          var func;
	          func = options.inverted ? "blurInvertedAlpha" : "blurAlpha";
	          return StackBlur[func](_this, radius, target);
	        };
	      })(this));
	    };

	    Bitmap.prototype._clearTransform = function() {
	      this._lastTransform = IdentityMatrix;
	      return this._context.setTransform(1, 0, 0, 1, 0, 0);
	    };

	    Bitmap.prototype._setTransform = function(m) {
	      if (m) {
	        this._lastTransform = m;
	        if (m instanceof Point) {
	          return this._context.setTransform(1, 0, 0, 1, m.x, m.y);
	        } else {
	          return this._context.setTransform(m.sx, m.shy, m.shx, m.sy, m.tx, m.ty);
	        }
	      } else {
	        return this._clearTransform();
	      }
	    };

	    Bitmap.prototype._setStrokeStyle = function(strokeStyle) {
	      return this._context.strokeStyle = strokeStyle.toCanvasStyle ? strokeStyle.toCanvasStyle(this._context) : strokeStyle.toString();
	    };

	    Bitmap.prototype._setFillStyle = function(fillStyle) {
	      return this._context.fillStyle = fillStyle.toCanvasStyle ? fillStyle.toCanvasStyle(this._context) : fillStyle.toString();
	    };

	    Bitmap.prototype._setStrokeStyleFromOptions = function(options) {
	      var lineCap, lineJoin, lineWidth, miterLimit;
	      this._setStrokeStyle(options.fillStyle || options.color || this.defaultColorString);
	      lineWidth = options.lineWidth, lineCap = options.lineCap, lineJoin = options.lineJoin, miterLimit = options.miterLimit;
	      this._context.lineWidth = lineWidth || 1;
	      this._context.lineCap = lineCap || "butt";
	      this._context.lineJoin = lineJoin || "miter";
	      return this._context.miterLimit = miterLimit || 10;
	    };

	    Bitmap.prototype._setFillStyleFromOptions = function(options) {
	      return this._setFillStyle(options.fillStyle || options.color || this.defaultColorString);
	    };

	    Bitmap.prototype._setupDraw = function(where, options, stroke) {
	      var _context, blur, compositeMode, offset, offsetX, offsetY, opacity, shadow, shadowColor;
	      compositeMode = options.compositeMode, shadow = options.shadow, opacity = options.opacity, shadow = options.shadow;
	      stroke || (stroke = options.stroke);
	      if (!isNumber(opacity)) {
	        opacity = 1;
	      }
	      if (opacity < 1 / 256) {
	        return false;
	      }
	      _context = this._context;
	      if (stroke) {
	        this._setStrokeStyleFromOptions(options);
	      } else {
	        this._setFillStyleFromOptions(options);
	      }
	      if (compositeMode && compositeMode !== "normal") {
	        _context.globalCompositeOperation = canvasBlenders[compositeMode] || canvasBlenders.normal;
	      }
	      if (opacity < 1) {
	        _context.globalAlpha = opacity;
	      }
	      if (shadow) {
	        blur = shadow.blur, offsetX = shadow.offsetX, offsetY = shadow.offsetY, offset = shadow.offset;
	        shadowColor = shadow.color;
	        _context.shadowColor = color(shadowColor || "black");
	        if (blur) {
	          _context.shadowBlur = blur;
	        }
	        if (offsetX) {
	          _context.shadowOffsetX = offsetX;
	        }
	        if (offsetY) {
	          _context.shadowOffsetY = offsetY;
	        }
	      }
	      this._setTransform(where);
	      return true;
	    };

	    Bitmap.prototype._cleanupDraw = function(options) {
	      var _context, compositeMode, opacity, shadow;
	      compositeMode = options.compositeMode, shadow = options.shadow, opacity = options.opacity;
	      if (!isNumber(opacity)) {
	        opacity = 1;
	      }
	      _context = this._context;
	      if (compositeMode && compositeMode !== "normal") {
	        _context.globalCompositeOperation = canvasBlenders.normal;
	      }
	      if (opacity < 1) {
	        _context.globalAlpha = 1;
	      }
	      if (shadow) {
	        _context.shadowColor = "transparent";
	        _context.shadowBlur = 0;
	        _context.shadowOffsetX = 0;
	        return _context.shadowOffsetY = 0;
	      }
	    };

	    return Bitmap;

	  })(BitmapBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(89), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation) {
	  var GradientFillStyle, color, flatten, inspect, isNumber, isPlainArray, isPlainObject, isString, log, point, point1, shallowClone;
	  point = Atomic.point, color = Atomic.color, point1 = Atomic.point1;
	  inspect = Foundation.inspect, shallowClone = Foundation.shallowClone, flatten = Foundation.flatten, isPlainObject = Foundation.isPlainObject, log = Foundation.log, isNumber = Foundation.isNumber, isString = Foundation.isString, isPlainArray = Foundation.isPlainArray;
	  return GradientFillStyle = (function(superClass) {
	    extend(GradientFillStyle, superClass);


	    /*
	    from and to are points where the lineary gradient will begin and end.
	    "colors" is a list of the colors for the gradient. There must be at least two colors.
	    In the explicit form, each color should be formatted as {n:<number>, c:<html color string>}
	      Ex: {n:.45, c:"#ff0"}
	    Implicitly, you can:
	      provide just a HTML color string with no "n".
	      N is determined as follows:
	        The first and last color will be forced to have n=0 and n=1 respectively
	        Any string of omitted Ns will be interpolated between the specified ns.
	    
	    Examples:
	      black to white:
	        new GradientFillStyle point(0,0), point(100,0), {c:"#000"}, {c:"#fff"}
	        OR
	        new GradientFillStyle point(0,0), point(100,0), "#000", "#fff"
	    
	      black to red to white:
	        new GradientFillStyle point(0,0), point(100,0), {c:"#000"}, {n:.5, c:"#f00"}, {c:"#fff"}
	        OR
	        new GradientFillStyle point(0,0), point(100,0), "#000", "#f00", "#fff"
	    
	      red to transparent
	        new GradientFillStyle point(0,0), point(100,0), #f00", "rgba(1,0,0,0)"
	    
	      rainbow:
	        new GradientFillStyle(
	          point(0,0), point(100,0)
	          "#f00"
	          "#ff0"
	          "#0f0"
	          "#0ff"
	          "#00f"
	          "#f0f"
	          "#f00"
	        )
	     */

	    GradientFillStyle.colorsToObjectsAndStringColors = function(colors) {
	      var clr, j, len, results;
	      results = [];
	      for (j = 0, len = colors.length; j < len; j++) {
	        clr = colors[j];
	        if (isPlainObject(clr)) {
	          results.push({
	            n: clr.n,
	            c: String(color(clr.c))
	          });
	        } else {
	          results.push({
	            c: String(color(clr))
	          });
	        }
	      }
	      return results;
	    };

	    GradientFillStyle.colorsFromObjects = function(colors) {
	      var c, clr, j, k, len, n, ret;
	      ret = [];
	      for (j = 0, len = colors.length; j < len; j++) {
	        clr = colors[j];
	        if (isPlainObject(clr)) {
	          if (isNumber(clr.r)) {
	            ret.push(color(clr));
	          } else {
	            for (k in clr) {
	              c = clr[k];
	              n = k - 0;
	              ret.push({
	                n: n,
	                c: c
	              });
	            }
	          }
	        } else {
	          ret.push(clr);
	        }
	      }
	      return ret;
	    };

	    GradientFillStyle.interpolateColorPositionRange = function(colors, start, end) {
	      var firstN, i, lastN, n, nDelta, results, steps;
	      steps = end - start;
	      firstN = colors[start].n;
	      lastN = colors[end].n;
	      nDelta = (lastN - firstN) / steps;
	      n = firstN + nDelta;
	      i = start + 1;
	      results = [];
	      while (i < end) {
	        colors[i].n = n;
	        n += nDelta;
	        results.push(i++);
	      }
	      return results;
	    };

	    GradientFillStyle.interpolateColorPositions = function(colors) {
	      var clr, i, j, lastNindex, len;
	      colors[0].n = 0;
	      colors[colors.length - 1].n = 1;
	      lastNindex = 0;
	      for (i = j = 0, len = colors.length; j < len; i = ++j) {
	        clr = colors[i];
	        if (clr.n) {
	          GradientFillStyle.interpolateColorPositionRange(colors, lastNindex, i);
	          lastNindex = i;
	        }
	      }
	      return colors;
	    };

	    GradientFillStyle.sortColorsByN = function(colors) {
	      return colors.sort(function(a, b) {
	        return a.n - b.n;
	      });
	    };

	    GradientFillStyle.normalizeColors = function(colors) {
	      colors = this.colorsFromObjects(colors);
	      colors = this.colorsToObjectsAndStringColors(colors);
	      colors = this.sortColorsByN(colors);
	      colors = this.interpolateColorPositions(colors);
	      return colors;
	    };

	    function GradientFillStyle(from, to, colors, scale) {
	      this.scale = scale || point1;
	      this.from = from;
	      this.to = to;
	      this.setColors(this.inputColors = colors);
	    }

	    GradientFillStyle.prototype.inspect2 = function() {
	      return "gradient(from:" + this.from + ", to:" + this.to + ", colors:" + (inspect(this.inputColors)) + ")";
	    };

	    GradientFillStyle.clone = function() {
	      return new GradientFillStyle(this.from, this.to, shallowClone(this.colors));
	    };

	    GradientFillStyle.getter({
	      colors: function() {
	        return this._colors;
	      },
	      premultipliedColorPositions: function() {
	        var a, j, len, ref, results;
	        ref = this._colors;
	        results = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          a = ref[j];
	          results.push({
	            n: a.n,
	            c: color(a.c).premultiplied
	          });
	        }
	        return results;
	      }
	    });

	    GradientFillStyle.setter({
	      colors: function(colors) {
	        var k, v;
	        return this._colors = isPlainArray(colors) ? GradientFillStyle.normalizeColors(colors) : isPlainObject(colors) ? (colors = (function() {
	          var results;
	          results = [];
	          for (k in colors) {
	            v = colors[k];
	            results.push({
	              n: k * 1,
	              c: isString(v) ? v : String(color(v))
	            });
	          }
	          return results;
	        })(), colors = GradientFillStyle.sortColorsByN(colors), GradientFillStyle.interpolateColorPositions(colors)) : [
	          {
	            n: 0,
	            c: color("black"),
	            n: 1,
	            c: color("white")
	          }
	        ];
	      }
	    });

	    GradientFillStyle.prototype.toCanvasStyle = function(context) {
	      var clr, gradient, j, len, ref, ref1, x, y;
	      if (context.context) {
	        context = context.context;
	      }
	      ref = this.scale, x = ref.x, y = ref.y;
	      gradient = context.createLinearGradient(this.from.x * x, this.from.y * y, this.to.x * x, this.to.y * y);
	      ref1 = this._colors;
	      for (j = 0, len = ref1.length; j < len; j++) {
	        clr = ref1[j];
	        gradient.addColorStop(clr.n, clr.c);
	      }
	      return gradient;
	    };

	    return GradientFillStyle;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic) {
	  var BaseObject, Binary, BitmapBase, Color, Matrix, Point, Rectangle, color, floor, inspect, isNumber, isString, log, matrix, nextTick, point, pureMerge, rect, round, toChannelNumberMap;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, color = Atomic.color, Color = Atomic.Color;
	  inspect = Foundation.inspect, nextTick = Foundation.nextTick, BaseObject = Foundation.BaseObject, Binary = Foundation.Binary, pureMerge = Foundation.pureMerge, isString = Foundation.isString, isNumber = Foundation.isNumber, log = Foundation.log;
	  round = Math.round, floor = Math.floor;
	  toChannelNumberMap = {
	    0: 0,
	    1: 1,
	    2: 2,
	    3: 3,
	    r: 0,
	    g: 1,
	    b: 2,
	    a: 3,
	    red: 0,
	    green: 1,
	    blue: 2,
	    alpha: 3
	  };
	  return BitmapBase = (function(superClass) {
	    extend(BitmapBase, superClass);

	    BitmapBase.bitmapsCreated = 0;

	    BitmapBase.prototype.compositeModeSupported = function(mode) {
	      return this.supportedCompositeModes.indexOf(mode) >= 0;
	    };

	    BitmapBase.pixelSnapDefault = true;

	    BitmapBase.prototype.defaultColor = color("black");

	    BitmapBase.prototype.defaultColorString = "black";

	    function BitmapBase(a, b) {
	      BitmapBase.__super__.constructor.apply(this, arguments);
	      this._htmlImageElement = null;
	      this._canvas = null;
	      this._clippingArea = null;
	      this._context = null;
	      this._size = null;
	      this._lastTransform = null;
	      this._imageSmoothing = false;
	      this.pixelSnap = BitmapBase.pixelSnapDefault;
	      this._pixelsPerPoint = 1;
	      BitmapBase.bitmapsCreated++;
	      if (b) {
	        a = point(a, b);
	      }
	      if (a instanceof BitmapBase) {
	        this.populateClone(this);
	      } else if (a instanceof HTMLCanvasElement) {
	        this.initFromCanvas(a);
	      } else if (a instanceof HTMLImageElement) {
	        this.initFromImage(a);
	      } else {
	        this.initNewCanvas(point(a, b));
	      }
	    }

	    BitmapBase.getter({
	      canvas: function() {
	        return this._canvas;
	      },
	      bitmapClass: function() {
	        return this["class"];
	      },
	      clippingArea: function() {
	        return this._clippingArea || (this._clippingArea = rect(this.getSize()));
	      },
	      aspectRatio: function() {
	        return this.getSize().getAspectRatio();
	      }
	    });

	    BitmapBase.prototype.shouldPixelSnap = function(where) {
	      return this.pixelSnap && ((!where) || (where instanceof Point) || where.isTranslateAndScaleOnly);
	    };

	    BitmapBase.prototype.pixelSnapWhere = function(where) {
	      if (where instanceof Point) {
	        return where.rounded;
	      } else if (where) {
	        return where.withRoundedTranslation;
	      }
	    };

	    BitmapBase.prototype.pixelSnapRectangle = function(where, r) {
	      var bottom, h, isx, isy, right, sx, sy, tx, ty, w, x, y;
	      right = (x = r.x) + (w = r.w);
	      bottom = (y = r.y) + (h = r.h);
	      isx = isy = sx = sy = 1;
	      tx = ty = 0;
	      if (where instanceof Point) {
	        tx = where.x;
	        ty = where.y;
	      } else if (where) {
	        tx = where.tx;
	        ty = where.ty;
	        sx = where.sx;
	        isx = 1 / sx;
	        sy = where.sy;
	        isy = 1 / sy;
	      }
	      x = (Math.round((x * sx) + tx) - tx) * isx;
	      y = (Math.round((y * sy) + ty) - ty) * isy;
	      w = (Math.round((right * sx) + tx) - tx) * isx - x;
	      h = (Math.round((bottom * sy) + ty) - ty) * isy - y;
	      return rect(x, y, w, h);
	    };

	    BitmapBase.prototype.pixelSnapAndTransformRectangle = function(where, r) {
	      var bottom, left, right, top;
	      if (!r) {
	        console.error("no r");
	      }
	      left = r.left, right = r.right, top = r.top, bottom = r.bottom;
	      if (where instanceof Point) {
	        left += where.x;
	        right += where.x;
	        top += where.y;
	        bottom += where.y;
	      } else if (where) {
	        left = where.transformX(left, top);
	        top = where.transformY(left, top);
	        right = where.transformX(right, bottom);
	        bottom = where.transformY(right, bottom);
	      }
	      left = Math.round(left);
	      top = Math.round(top);
	      right = Math.round(right);
	      bottom = Math.round(bottom);
	      return rect(left, top, right - left, bottom - top);
	    };

	    BitmapBase.prototype.clone = function() {
	      var b;
	      b = this.newBitmap(this.size);
	      b.drawBitmap(null, this);
	      return b;
	    };

	    BitmapBase.prototype.initFromCanvas = function(canvas) {
	      this._canvas = canvas;
	      this._size = point(this._canvas.width, this._canvas.height);
	      return this.initContext();
	    };

	    BitmapBase.prototype.initFromImage = function(image) {
	      this._size = point(image.width, image.height);
	      this.initNewCanvas(this.size);
	      return this.drawBitmap(point(), image);
	    };

	    BitmapBase.prototype.initNewCanvas = function(size) {
	      if (this._context) {
	        return;
	      }
	      if (!size.gt(point())) {
	        throw new Error("invalid size=" + size + " for Art.Canvas.Bitmap");
	      }
	      this._size = size.floor();
	      this._canvas = document.createElement('canvas');
	      this._canvas.width = this.size.x;
	      this._canvas.height = this.size.y;
	      return this.initContext();
	    };

	    BitmapBase.prototype.populateClone = function(result) {
	      result.initNewCanvas(this.size);
	      result.drawBitmap(null, this);
	      return result._pixelsPerPoint = this._pixelsPerPoint;
	    };

	    BitmapBase.getter({
	      pixelsPerPoint: function() {
	        return this._pixelsPerPoint;
	      },
	      pointsPerPixel: function() {
	        return 1 / this._pixelsPerPoint;
	      },
	      pointSize: function() {
	        return this.size.div(this.pixelsPerPoint);
	      },
	      byteSize: function() {
	        return this.size.area * this.getBytesPerPixel();
	      },
	      bytesPerPixel: function() {
	        return 4;
	      }
	    });

	    BitmapBase.setter({
	      pixelsPerPoint: function(v) {
	        return this._pixelsPerPoint = v;
	      },
	      pointsPerPixel: function(v) {
	        return this._pixelsPerPoint = 1 / v;
	      }
	    });

	    BitmapBase.property({
	      size: point(100, 100)
	    });

	    BitmapBase.property({
	      imageSmoothing: false
	    });

	    BitmapBase.prototype.toMemoryBitmap = function() {
	      return this;
	    };

	    BitmapBase.prototype.toMemoryDrawableBitmap = function() {
	      return this;
	    };

	    BitmapBase.prototype.getImageData = function(a, b, c, d) {
	      var area;
	      area = a === null || a === void 0 ? rect(this.size) : rect(a, b, c, d);
	      return this.toMemoryBitmap().context.getImageData(area.x, area.y, area.w, area.h);
	    };

	    BitmapBase.prototype.putImageData = function(imageData, location, sourceArea) {
	      if (location == null) {
	        location = point();
	      }
	      if (sourceArea == null) {
	        sourceArea = rect(this.size);
	      }
	      location = location.sub(sourceArea.location);
	      return this._context.putImageData(imageData, location.x, location.y, sourceArea.x, sourceArea.y, sourceArea.w, sourceArea.h);
	    };

	    BitmapBase.prototype.getImageDataArray = function(channel) {
	      var data, end, i, j, len, results, results1, v;
	      if (channel == null) {
	        channel = null;
	      }
	      data = this.getImageData().data;
	      if ((channel = toChannelNumberMap[channel]) != null) {
	        i = channel;
	        end = data.length;
	        results = [];
	        while (i < end) {
	          i += 4;
	          results.push(data[i - 4]);
	        }
	        return results;
	      } else {
	        results1 = [];
	        for (j = 0, len = data.length; j < len; j++) {
	          v = data[j];
	          results1.push(v);
	        }
	        return results1;
	      }
	    };

	    BitmapBase.prototype.toPngUri = function(callback) {
	      if (!callback) {
	        throw new Error("callback required");
	      }
	      return nextTick((function(_this) {
	        return function() {
	          return callback(_this.toMemoryBitmap().canvas.toDataURL());
	        };
	      })(this));
	    };

	    BitmapBase.prototype.toJpgUri = function(quality, callback) {
	      if (quality == null) {
	        quality = .95;
	      }
	      if (!callback) {
	        throw new Error("callback required");
	      }
	      return nextTick((function(_this) {
	        return function() {
	          return callback(_this.toMemoryBitmap().canvas.toDataURL("image/jpeg", quality));
	        };
	      })(this));
	    };

	    BitmapBase.prototype.toPng = function(callback) {
	      return this.toPngUri(function(dataURI) {
	        return callback(Binary.String.fromDataURI(dataURI));
	      });
	    };

	    BitmapBase.prototype.toJpg = function(quality, callback) {
	      return this.toJpgUri(quality, function(dataURI) {
	        return callback(Binary.String.fromDataURI(dataURI));
	      });
	    };

	    BitmapBase.prototype.toImage = function(callback, errorback) {
	      if (errorback == null) {
	        errorback = null;
	      }
	      if (!callback) {
	        throw new Error("callback required");
	      }
	      return nextTick((function(_this) {
	        return function() {
	          var url;
	          if (_this._htmlImageElement) {
	            return callback(_this._htmlImageElement);
	          } else {
	            url = _this.toMemoryBitmap().canvas.toDataURL();
	            return Binary.EncodedImage.toImage(url, function(image) {
	              var size;
	              size = _this.pointSize;
	              image.width = size.w;
	              image.height = size.h;
	              return callback(image);
	            }, errorback);
	          }
	        };
	      })(this));
	    };

	    BitmapBase.prototype.hFlipped = function() {
	      var result;
	      result = this.newBitmap(this.size);
	      result.drawBitmap(Matrix.translate(-this.size.x / 2, 0).scale(-1, 1).translate(this.size.x / 2, 0), this);
	      return result;
	    };

	    BitmapBase.prototype.vFlipped = function() {
	      var result;
	      result = this.newBitmap(this.size);
	      result.drawBitmap(Matrix.translate(0, -this.size.y / 2).scale(1, -1).translate(0, this.size.y / 2), this);
	      return result;
	    };

	    BitmapBase.prototype.drawBorder = function(where, r, options) {
	      var c, m, p, w;
	      m = matrix(where);
	      r = rect(r);
	      c = options.color || "#777";
	      w = options.width || 1;
	      p = options.padding || 0;
	      r = r.grow(p);
	      this.drawRectangle(m, rect(r.x, r.y, r.w, w), c);
	      this.drawRectangle(m, rect(r.x, r.bottom - w, r.w, w), c);
	      this.drawRectangle(m, rect(r.x, r.y + w, w, r.h - w * 2), c);
	      return this.drawRectangle(m, rect(r.right - w, r.y + w, w, r.h - w * 2), c);
	    };

	    BitmapBase.prototype.drawStretchedBorderBitmap = function(drawMatrix, targetArea, bitmap, sourceCenterArea, options) {
	      var bitmapSize, borderRatio, borderReductionRatio, borderScale, botomCenter, bottomCenter, bottomLeft, bottomRight, centerCenter, centerLeft, centerRight, centertCenter, hide, horizontalBorderHeight, horizontalBorderWidth, m, show, sourceBottomHeight, sourceBottomScale, sourceCenterAreaBottom, sourceCenterAreaHeight, sourceCenterAreaLeft, sourceCenterAreaRight, sourceCenterAreaTop, sourceCenterAreaWidth, sourceCenterHeightScale, sourceCenterWidthScale, sourceLeftScale, sourceLeftWidth, sourceRightScale, sourceRightWidth, sourceTopHeight, sourceTopScale, targetAreaBottom, targetAreaHeight, targetAreaLeft, targetAreaRight, targetAreaTop, targetAreaWidth, targetBottomHeight, targetCenterAreaBottom, targetCenterAreaHeight, targetCenterAreaLeft, targetCenterAreaRight, targetCenterAreaTop, targetCenterAreaWidth, targetLeftWidth, targetRightWidth, targetTopHeight, topCenter, topLeft, topRight, totalBorderHeight, totalBorderWidth;
	      if (options == null) {
	        options = {};
	      }
	      hide = options.hide, show = options.show;
	      bitmapSize = bitmap.size;
	      borderScale = options.borderScale;
	      if (!isNumber(borderScale)) {
	        borderScale = 1;
	      }
	      sourceCenterAreaLeft = sourceCenterArea.left;
	      sourceCenterAreaTop = sourceCenterArea.top;
	      sourceCenterAreaRight = sourceCenterArea.right;
	      sourceCenterAreaBottom = sourceCenterArea.bottom;
	      sourceCenterAreaWidth = sourceCenterAreaRight - sourceCenterAreaLeft;
	      sourceCenterAreaHeight = sourceCenterAreaBottom - sourceCenterAreaTop;
	      targetAreaLeft = round(drawMatrix.transformX(targetArea.left, 0));
	      targetAreaTop = round(drawMatrix.transformY(0, targetArea.top));
	      targetAreaRight = round(drawMatrix.transformX(targetArea.right, 0));
	      targetAreaBottom = round(drawMatrix.transformY(0, targetArea.bottom));
	      targetAreaWidth = targetAreaRight - targetAreaLeft;
	      targetAreaHeight = targetAreaBottom - targetAreaTop;
	      sourceLeftWidth = sourceCenterAreaLeft;
	      sourceTopHeight = sourceCenterAreaTop;
	      sourceRightWidth = bitmapSize.w - sourceCenterAreaRight;
	      sourceBottomHeight = bitmapSize.h - sourceCenterAreaBottom;
	      targetCenterAreaLeft = round(drawMatrix.transformX(targetArea.left + sourceLeftWidth * borderScale, 0));
	      targetCenterAreaTop = round(drawMatrix.transformY(0, targetArea.top + sourceTopHeight * borderScale));
	      targetCenterAreaRight = round(drawMatrix.transformX(targetArea.right - sourceRightWidth * borderScale, 0));
	      targetCenterAreaBottom = round(drawMatrix.transformY(0, targetArea.bottom - sourceBottomHeight * borderScale));
	      targetCenterAreaWidth = targetCenterAreaRight - targetCenterAreaLeft;
	      targetCenterAreaHeight = targetCenterAreaBottom - targetCenterAreaTop;
	      if (targetCenterAreaWidth < 0) {
	        horizontalBorderWidth = targetAreaWidth - targetCenterAreaWidth;
	        borderReductionRatio = targetAreaWidth / horizontalBorderWidth;
	        borderRatio = sourceLeftWidth / (totalBorderWidth = sourceLeftWidth + sourceRightWidth);
	        sourceLeftWidth = round(sourceLeftWidth * borderReductionRatio);
	        sourceRightWidth = round(sourceRightWidth * borderReductionRatio);
	        sourceCenterAreaRight = bitmap.size.x - sourceRightWidth;
	        targetCenterAreaLeft = targetCenterAreaRight = targetAreaLeft + round(targetAreaWidth * borderRatio);
	        targetCenterAreaWidth = 0;
	      }
	      if (targetCenterAreaHeight < 0) {
	        horizontalBorderHeight = targetAreaHeight - targetCenterAreaHeight;
	        borderReductionRatio = targetAreaHeight / horizontalBorderHeight;
	        borderRatio = sourceTopHeight / (totalBorderHeight = sourceTopHeight + sourceBottomHeight);
	        sourceTopHeight = round(sourceTopHeight * borderReductionRatio);
	        sourceBottomHeight = round(sourceBottomHeight * borderReductionRatio);
	        sourceCenterAreaBottom = bitmap.size.x - sourceBottomHeight;
	        targetCenterAreaTop = targetCenterAreaBottom = targetAreaTop + round(targetAreaHeight * borderRatio);
	        targetCenterAreaHeight = 0;
	      }
	      targetLeftWidth = targetCenterAreaLeft - targetAreaLeft;
	      targetTopHeight = targetCenterAreaTop - targetAreaTop;
	      targetRightWidth = targetAreaRight - targetCenterAreaRight;
	      targetBottomHeight = targetAreaBottom - targetCenterAreaBottom;
	      sourceLeftScale = targetLeftWidth / sourceLeftWidth;
	      sourceTopScale = targetTopHeight / sourceTopHeight;
	      sourceRightScale = targetRightWidth / sourceRightWidth;
	      sourceBottomScale = targetBottomHeight / sourceBottomHeight;
	      sourceCenterWidthScale = targetCenterAreaWidth / sourceCenterAreaWidth;
	      sourceCenterHeightScale = targetCenterAreaHeight / sourceCenterAreaHeight;
	      if (show) {
	        topLeft = !show.topLeft;
	        topRight = !show.topRight;
	        topCenter = !show.topCenter;
	        centerLeft = !show.centerLeft;
	        centerRight = !show.centerRight;
	        centerCenter = !show.centerCenter;
	        bottomLeft = !show.bottomLeft;
	        bottomRight = !show.bottomRight;
	        bottomCenter = !show.bottomCenter;
	      }
	      if (hide) {
	        topLeft = hide.topLeft, topCenter = hide.topCenter, topRight = hide.topRight, centerLeft = hide.centerLeft, centerCenter = hide.centerCenter, centerRight = hide.centerRight, bottomLeft = hide.bottomLeft, botomCenter = hide.botomCenter, bottomRight = hide.bottomRight;
	        if (hide.top) {
	          topLeft = topCenter = topRight = true;
	        }
	        if (hide.bottom) {
	          bottomLeft = bottomCenter = bottomRight = true;
	        }
	        if (hide.left) {
	          topLeft = centerLeft = bottomLeft = true;
	        }
	        if (hide.left) {
	          topRight = centerRight = bottomRight = true;
	        }
	        if (hide.centerRow) {
	          centerLeft = centerCenter = centerRight = true;
	        }
	        if (hide.centerColumn) {
	          topCenter = centertCenter = bottomRight = true;
	        }
	      }
	      if (!topLeft) {
	        m = Matrix.scale(sourceLeftScale, sourceTopScale).translate(targetAreaLeft, targetAreaTop);
	        options.sourceArea = rect(0, 0, sourceLeftWidth, sourceTopHeight);
	        this.drawBitmap(m, bitmap, options);
	      }
	      if (!topRight) {
	        m = Matrix.scale(sourceRightScale, sourceTopScale).translate(targetCenterAreaRight, targetAreaTop);
	        options.sourceArea = rect(sourceCenterAreaRight, 0, sourceRightWidth, sourceTopHeight);
	        this.drawBitmap(m, bitmap, options);
	      }
	      if (!bottomLeft) {
	        m = Matrix.scale(sourceLeftScale, sourceBottomScale).translate(targetAreaLeft, targetCenterAreaBottom);
	        options.sourceArea = rect(0, sourceCenterAreaBottom, sourceLeftWidth, sourceBottomHeight);
	        this.drawBitmap(m, bitmap, options);
	      }
	      if (!bottomRight) {
	        m = Matrix.scale(sourceRightScale, sourceBottomScale).translate(targetCenterAreaRight, targetCenterAreaBottom);
	        options.sourceArea = rect(sourceCenterAreaRight, sourceCenterAreaBottom, sourceRightWidth, sourceBottomHeight);
	        this.drawBitmap(m, bitmap, options);
	      }
	      if (targetCenterAreaHeight > 0) {
	        if (!centerLeft) {
	          m = Matrix.scale(sourceLeftScale, sourceCenterHeightScale).translate(targetAreaLeft, targetCenterAreaTop);
	          options.sourceArea = rect(0, sourceTopHeight, sourceLeftWidth, sourceCenterAreaHeight);
	          this.drawBitmap(m, bitmap, options);
	        }
	        if (!(centerCenter || targetCenterAreaWidth <= 0)) {
	          m = Matrix.scale(sourceCenterWidthScale, sourceCenterHeightScale).translate(targetCenterAreaLeft, targetCenterAreaTop);
	          options.sourceArea = rect(sourceCenterAreaLeft, sourceCenterAreaTop, sourceCenterAreaWidth, sourceCenterAreaHeight);
	          this.drawBitmap(m, bitmap, options);
	        }
	        if (!centerRight) {
	          m = Matrix.scale(sourceRightScale, sourceCenterHeightScale).translate(targetCenterAreaRight, targetCenterAreaTop);
	          options.sourceArea = rect(sourceCenterAreaRight, sourceTopHeight, sourceRightWidth, sourceCenterAreaHeight);
	          this.drawBitmap(m, bitmap, options);
	        }
	      }
	      if (sourceCenterAreaWidth > 0) {
	        if (!bottomCenter) {
	          m = Matrix.scale(sourceCenterWidthScale, sourceBottomScale).translate(targetCenterAreaLeft, targetCenterAreaBottom);
	          options.sourceArea = rect(sourceLeftWidth, sourceCenterAreaBottom, sourceCenterAreaWidth, sourceBottomHeight);
	          this.drawBitmap(m, bitmap, options);
	        }
	        if (!topCenter) {
	          m = Matrix.scale(sourceCenterWidthScale, sourceTopScale).translate(targetCenterAreaLeft, targetAreaTop);
	          options.sourceArea = rect(sourceCenterAreaLeft, 0, sourceCenterAreaWidth, sourceTopHeight);
	          return this.drawBitmap(m, bitmap, options);
	        }
	      }
	    };

	    return BitmapBase;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var Paths, floatEq, log, min;
	  log = Foundation.log, floatEq = Foundation.floatEq, min = Foundation.min;
	  return Paths = (function() {
	    var rectangle, roundedRectangle;

	    function Paths() {}

	    Paths.rectangle = rectangle = function(context, r) {
	      var bottom, left, right, top;
	      left = r.left, right = r.right, top = r.top, bottom = r.bottom;
	      context.moveTo(left, top);
	      context.lineTo(right, top);
	      context.lineTo(right, bottom);
	      context.lineTo(left, bottom);
	      return context.closePath();
	    };

	    Paths.line = function(context, fromPoint, toPoint) {
	      context.moveTo(fromPoint.x, fromPoint.y);
	      return context.lineTo(toPoint.x, toPoint.y);
	    };

	    Paths.roundedRectangle = roundedRectangle = function(context, r, radius) {
	      var bottom, h, hCenter, halfW, left, right, top, vCenter, w;
	      if (!((radius != null) && radius > 0)) {
	        return rectangle(context, r);
	      }
	      w = r.w, h = r.h;
	      if (floatEq(w, h) && radius >= (halfW = w / 2)) {
	        hCenter = r.hCenter, vCenter = r.vCenter;
	        return context.arc(hCenter, vCenter, halfW, 0, Math.PI * 2, true);
	      } else {
	        radius = min(radius, w / 2, h / 2);
	        left = r.left, right = r.right, top = r.top, bottom = r.bottom;
	        context.moveTo(left, top + radius);
	        context.arcTo(left, top, left + radius, top, radius);
	        context.lineTo(right - radius, top);
	        context.arcTo(right, top, right, top + radius, radius);
	        context.lineTo(right, bottom - radius);
	        context.arcTo(right, bottom, right - radius, bottom, radius);
	        context.lineTo(left + radius, bottom);
	        context.arcTo(left, bottom, left, bottom - radius, radius);
	        return context.closePath();
	      }
	    };

	    Paths.curriedRoundedRectangle = function(r, radius) {
	      return function(context) {
	        return roundedRectangle(context, r, radius);
	      };
	    };

	    return Paths;

	  })();
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	SBD TODO

	Bluring transparencies has errors. Repro:
	  clear background to: color(1,0,0,.5)
	  drawRectangle color(0,1,0,1) over a sub-area of the bitmap
	  blur

	The problem (I think) is transparent colors have equal weight as non-transparent colors.

	...

	I need to test bluring on the edge of the bitmap. I'm not convinced it works right.

	...

	Possible speedup and simplification:

	One solution which may be faster overall is to reserve one line of pixels in memory plus
	the blur radius amount of pixels on each side. Those pixel colors should be repetitions of the edge colors.
	Then we can blur over that range with reduced tests in our inner loop.
	It looks like "slice" allows us to quickly get a subsection of an ArrayBuffer. That will work for all lines
	except the first and last one(s). Just slice and then overwrite the first and end colors with the edge-colors.

	UInt8Array .subarray and .set should make moving the pixles to and from pretty fast. The only slow part will
	be filling the edge pixels in.
	 */

	/*

	StackBlur - a fast almost Gaussian Blur For Canvas

	Version:  0.5
	Author:   Mario Klingemann
	Contact:  mario@quasimondo.com
	Website:  http://www.quasimondo.com/StackBlurForCanvas
	Twitter:  @quasimondo

	In case you find this class useful - especially in commercial projects -
	I am not totally unhappy for a small donation to my PayPal account
	mario@quasimondo.de

	Or support me on flattr:
	https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript

	Copyright (c) 2010 Mario Klingemann

	Permission is hereby granted, free of charge, to any person
	obtaining a copy of this software and associated documentation
	files (the "Software"), to deal in the Software without
	restriction, including without limitation the rights to use,
	copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following
	conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(122), __webpack_require__(89), __webpack_require__(8), __webpack_require__(126)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Canvas, Atomic, Foundation) {
	  var BlurStack, color, inspect, matrix, nextTick, point, rect;
	  point = Atomic.point, matrix = Atomic.matrix, rect = Atomic.rect, color = Atomic.color;
	  inspect = Foundation.Inspect.inspect;
	  nextTick = Foundation.nextTick;
	  BlurStack = (function() {
	    function BlurStack() {
	      this.r = this.g = this.b = this.a = 0;
	      this.next = null;
	    }

	    return BlurStack;

	  })();
	  return Canvas.StackBlur = (function(superClass) {
	    extend(StackBlur, superClass);

	    function StackBlur() {
	      return StackBlur.__super__.constructor.apply(this, arguments);
	    }

	    StackBlur.blur = function(bitmap, radius) {
	      return (new Canvas.StackBlur).blur(bitmap, radius);
	    };

	    StackBlur.blurRGB = function(bitmap, radius) {
	      return (new Canvas.StackBlur).blurRGB(bitmap, radius);
	    };

	    StackBlur.blurAlpha = function(bitmap, radius) {
	      return (new Canvas.StackBlur).blurAlpha(bitmap, radius);
	    };

	    StackBlur.blurInvertedAlpha = function(bitmap, radius) {
	      return (new Canvas.StackBlur).blurInvertedAlpha(bitmap, radius);
	    };

	    StackBlur.prototype.blur = function(bitmap, radius, targetBitmap) {
	      var imageData, pixels;
	      targetBitmap || (targetBitmap = bitmap);
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      radius = radius + .5 | 0;
	      if (radius > 0) {
	        this.stackBlurCanvasRGBA(pixels, bitmap.size.w, bitmap.size.h, radius);
	      }
	      return targetBitmap.putImageData(imageData);
	    };

	    StackBlur.prototype.blurRGB = function(bitmap, radius, targetBitmap) {
	      var imageData, pixels;
	      targetBitmap || (targetBitmap = bitmap);
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      radius = radius + .5 | 0;
	      if (radius > 0) {
	        this.stackBlurCanvasRGB(pixels, bitmap.size.w, bitmap.size.h, radius);
	      }
	      return targetBitmap.putImageData(imageData);
	    };

	    StackBlur.prototype.blurAlpha = function(bitmap, radius, targetBitmap) {
	      var imageData, pixels;
	      targetBitmap || (targetBitmap = bitmap);
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      radius = radius + .5 | 0;
	      if (radius > 0) {
	        this.stackBlurCanvasAlpha(pixels, bitmap.size.w, bitmap.size.h, radius);
	      }
	      return targetBitmap.putImageData(imageData);
	    };

	    StackBlur.prototype.blurInvertedAlpha = function(bitmap, radius, targetBitmap) {
	      var imageData, pixels;
	      targetBitmap || (targetBitmap = bitmap);
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      radius = radius + .5 | 0;
	      this.invertAlpha(pixels, bitmap.size.area);
	      if (radius > 0) {
	        this.stackBlurCanvasAlpha(pixels, bitmap.size.w, bitmap.size.h, radius);
	      }
	      return targetBitmap.putImageData(imageData);
	    };

	    StackBlur.prototype.invertAlpha = function(pixels, numPixels) {
	      var end, end8, i, results;
	      i = 0;
	      end = numPixels * 4 - 4;
	      end8 = end - (end % 8);
	      while (i <= end) {
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	      }
	      results = [];
	      while (i <= end) {
	        pixels[i + 3] = 255 - pixels[i + 3];
	        results.push(i += 4);
	      }
	      return results;
	    };

	    StackBlur.prototype.createStack = function(radius) {
	      var i, j, ref, stack;
	      this.stackStart = new BlurStack();
	      stack = this.stackStart;
	      for (i = j = 1, ref = 2 * radius; j <= ref; i = j += 1) {
	        stack = stack.next = new BlurStack();
	        if (i === radius + 1) {
	          this.stackEnd = stack;
	        }
	      }
	      return stack.next = this.stackStart;
	    };

	    StackBlur.prototype.rgbaPass = function(radius, pixels, outterStep, outterEnd, innerStep, innerEndDelta) {
	      var a_in_sum, a_out_sum, a_sum, b_in_sum, b_out_sum, b_sum, firstPixelSumWeight, g_in_sum, g_out_sum, g_sum, i, innerEnd, innerPos, innerRadiusEnd, j, oneOverStackWeight, outterPos, pa, pb, pg, pr, r_in_sum, r_out_sum, r_sum, radiusPlus1, rbs, readPos, readPosOffset, ref, results, stackEnd, stackIn, stackOut, stackStart, stackWeight, weight;
	      radiusPlus1 = radius + 1;
	      stackWeight = radiusPlus1 * radiusPlus1;
	      oneOverStackWeight = 1 / stackWeight;
	      firstPixelSumWeight = (stackWeight + radiusPlus1) / 2;
	      stackStart = this.stackStart;
	      stackEnd = this.stackEnd;
	      outterPos = 0;
	      results = [];
	      while (outterPos <= outterEnd) {
	        r_in_sum = g_in_sum = b_in_sum = a_in_sum = 0;
	        pr = pixels[outterPos];
	        pg = pixels[outterPos + 1];
	        pb = pixels[outterPos + 2];
	        pa = pixels[outterPos + 3];
	        if (pa < 255) {
	          weight = pa / 255;
	          pr *= weight;
	          pg *= weight;
	          pb *= weight;
	        }
	        r_out_sum = radiusPlus1 * pr;
	        g_out_sum = radiusPlus1 * pg;
	        b_out_sum = radiusPlus1 * pb;
	        a_out_sum = radiusPlus1 * pa;
	        r_sum = firstPixelSumWeight * pr;
	        g_sum = firstPixelSumWeight * pg;
	        b_sum = firstPixelSumWeight * pb;
	        a_sum = firstPixelSumWeight * pa;
	        stackIn = stackStart;
	        for (i = j = 0, ref = radius; j <= ref; i = j += 1) {
	          stackIn.r = pr;
	          stackIn.g = pg;
	          stackIn.b = pb;
	          stackIn.a = pa;
	          stackIn = stackIn.next;
	        }
	        innerEnd = outterPos + innerEndDelta;
	        rbs = radius;
	        innerRadiusEnd = outterPos + radius * innerStep;
	        innerPos = outterPos + innerStep;
	        while (innerPos <= innerRadiusEnd) {
	          readPos = innerPos;
	          if (innerPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          pr = pixels[readPos];
	          pg = pixels[readPos + 1];
	          pb = pixels[readPos + 2];
	          pa = pixels[readPos + 3];
	          if (pa < 255) {
	            weight = pa / 255;
	            pr *= weight;
	            pg *= weight;
	            pb *= weight;
	          }
	          r_in_sum += stackIn.r = pr;
	          g_in_sum += stackIn.g = pg;
	          b_in_sum += stackIn.b = pb;
	          a_in_sum += stackIn.a = pa;
	          r_sum += pr * rbs;
	          g_sum += pg * rbs;
	          b_sum += pb * rbs;
	          a_sum += pa * rbs;
	          rbs--;
	          stackIn = stackIn.next;
	          innerPos += innerStep;
	        }
	        stackOut = stackEnd;
	        readPosOffset = radiusPlus1 * innerStep;
	        innerPos = outterPos;
	        while (innerPos <= innerEnd) {
	          pixels[innerPos + 3] = pa = a_sum * oneOverStackWeight;
	          if (pa !== 0) {
	            pa = oneOverStackWeight * 255 / pa;
	            pixels[innerPos] = r_sum * pa;
	            pixels[innerPos + 1] = g_sum * pa;
	            pixels[innerPos + 2] = b_sum * pa;
	          } else {
	            pixels[innerPos] = pixels[innerPos + 1] = pixels[innerPos + 2] = 0;
	          }
	          r_sum -= r_out_sum;
	          g_sum -= g_out_sum;
	          b_sum -= b_out_sum;
	          a_sum -= a_out_sum;
	          r_out_sum -= stackIn.r;
	          g_out_sum -= stackIn.g;
	          b_out_sum -= stackIn.b;
	          a_out_sum -= stackIn.a;
	          readPos = innerPos + readPosOffset;
	          if (readPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          pr = pixels[readPos];
	          pg = pixels[readPos + 1];
	          pb = pixels[readPos + 2];
	          pa = pixels[readPos + 3];
	          if (pa < 255) {
	            weight = pa / 255;
	            pr *= weight;
	            pg *= weight;
	            pb *= weight;
	          }
	          r_in_sum += stackIn.r = pr;
	          g_in_sum += stackIn.g = pg;
	          b_in_sum += stackIn.b = pb;
	          a_in_sum += stackIn.a = pa;
	          r_sum += r_in_sum;
	          g_sum += g_in_sum;
	          b_sum += b_in_sum;
	          a_sum += a_in_sum;
	          r_out_sum += pr = stackOut.r;
	          g_out_sum += pg = stackOut.g;
	          b_out_sum += pb = stackOut.b;
	          a_out_sum += pa = stackOut.a;
	          r_in_sum -= pr;
	          g_in_sum -= pg;
	          b_in_sum -= pb;
	          a_in_sum -= pa;
	          stackIn = stackIn.next;
	          stackOut = stackOut.next;
	          innerPos += innerStep;
	        }
	        results.push(outterPos += outterStep);
	      }
	      return results;
	    };

	    StackBlur.prototype.rgbPass = function(radius, pixels, outterStep, outterEnd, innerStep, innerEndDelta) {
	      var b_in_sum, b_out_sum, b_sum, firstPixelSumWeight, g_in_sum, g_out_sum, g_sum, i, innerEnd, innerPos, innerRadiusEnd, j, oneOverStackWeight, outterPos, pb, pg, pr, r_in_sum, r_out_sum, r_sum, radiusPlus1, rbs, readPos, readPosOffset, ref, results, stackEnd, stackIn, stackOut, stackStart, stackWeight;
	      radiusPlus1 = radius + 1;
	      stackWeight = radiusPlus1 * radiusPlus1;
	      oneOverStackWeight = 1 / stackWeight;
	      firstPixelSumWeight = (stackWeight + radiusPlus1) / 2;
	      stackStart = this.stackStart;
	      stackEnd = this.stackEnd;
	      outterPos = 0;
	      results = [];
	      while (outterPos <= outterEnd) {
	        r_in_sum = g_in_sum = b_in_sum = 0;
	        pr = pixels[outterPos];
	        pg = pixels[outterPos + 1];
	        pb = pixels[outterPos + 2];
	        r_out_sum = radiusPlus1 * pr;
	        g_out_sum = radiusPlus1 * pg;
	        b_out_sum = radiusPlus1 * pb;
	        r_sum = firstPixelSumWeight * pr;
	        g_sum = firstPixelSumWeight * pg;
	        b_sum = firstPixelSumWeight * pb;
	        stackIn = stackStart;
	        for (i = j = 0, ref = radius; j <= ref; i = j += 1) {
	          stackIn.r = pr;
	          stackIn.g = pg;
	          stackIn.b = pb;
	          stackIn = stackIn.next;
	        }
	        innerEnd = outterPos + innerEndDelta;
	        rbs = radius;
	        innerRadiusEnd = outterPos + radius * innerStep;
	        innerPos = outterPos + innerStep;
	        while (innerPos <= innerRadiusEnd) {
	          readPos = innerPos;
	          if (innerPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          pr = pixels[readPos];
	          pg = pixels[readPos + 1];
	          pb = pixels[readPos + 2];
	          r_in_sum += stackIn.r = pr;
	          g_in_sum += stackIn.g = pg;
	          b_in_sum += stackIn.b = pb;
	          r_sum += pr * rbs;
	          g_sum += pg * rbs;
	          b_sum += pb * rbs;
	          rbs--;
	          stackIn = stackIn.next;
	          innerPos += innerStep;
	        }
	        stackOut = stackEnd;
	        readPosOffset = radiusPlus1 * innerStep;
	        innerPos = outterPos;
	        while (innerPos <= innerEnd) {
	          pixels[innerPos] = r_sum * oneOverStackWeight;
	          pixels[innerPos + 1] = g_sum * oneOverStackWeight;
	          pixels[innerPos + 2] = b_sum * oneOverStackWeight;
	          r_sum -= r_out_sum;
	          g_sum -= g_out_sum;
	          b_sum -= b_out_sum;
	          r_out_sum -= stackIn.r;
	          g_out_sum -= stackIn.g;
	          b_out_sum -= stackIn.b;
	          readPos = innerPos + readPosOffset;
	          if (readPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          pr = pixels[readPos];
	          pg = pixels[readPos + 1];
	          pb = pixels[readPos + 2];
	          r_in_sum += stackIn.r = pr;
	          g_in_sum += stackIn.g = pg;
	          b_in_sum += stackIn.b = pb;
	          r_sum += r_in_sum;
	          g_sum += g_in_sum;
	          b_sum += b_in_sum;
	          r_out_sum += pr = stackOut.r;
	          g_out_sum += pg = stackOut.g;
	          b_out_sum += pb = stackOut.b;
	          r_in_sum -= pr;
	          g_in_sum -= pg;
	          b_in_sum -= pb;
	          stackIn = stackIn.next;
	          stackOut = stackOut.next;
	          innerPos += innerStep;
	        }
	        results.push(outterPos += outterStep);
	      }
	      return results;
	    };

	    StackBlur.prototype.alphaPass = function(radius, pixels, outterStep, outterEnd, innerStep, innerEndDelta) {
	      var a_in_sum, a_out_sum, a_sum, firstPixelSumWeight, i, innerEnd, innerPos, innerRadiusEnd, j, oneOverStackWeight, outterPos, pa, radiusPlus1, rbs, readPos, readPosOffset, ref, results, stackEnd, stackIn, stackOut, stackStart, stackWeight;
	      radiusPlus1 = radius + 1;
	      stackWeight = radiusPlus1 * radiusPlus1;
	      oneOverStackWeight = 1 / stackWeight;
	      firstPixelSumWeight = (stackWeight + radiusPlus1) / 2;
	      stackStart = this.stackStart;
	      stackEnd = this.stackEnd;
	      outterPos = 3;
	      outterEnd += 3;
	      results = [];
	      while (outterPos <= outterEnd) {
	        a_in_sum = 0;
	        pa = pixels[outterPos];
	        a_out_sum = radiusPlus1 * pa;
	        a_sum = firstPixelSumWeight * pa;
	        stackIn = stackStart;
	        for (i = j = 0, ref = radius; j <= ref; i = j += 1) {
	          stackIn.a = pa;
	          stackIn = stackIn.next;
	        }
	        innerEnd = outterPos + innerEndDelta;
	        rbs = radius;
	        innerRadiusEnd = outterPos + radius * innerStep;
	        innerPos = outterPos + innerStep;
	        while (innerPos <= innerRadiusEnd) {
	          readPos = innerPos;
	          if (innerPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          pa = pixels[readPos];
	          a_in_sum += stackIn.a = pa;
	          a_sum += pa * rbs;
	          rbs--;
	          stackIn = stackIn.next;
	          innerPos += innerStep;
	        }
	        stackOut = stackEnd;
	        readPosOffset = radiusPlus1 * innerStep;
	        innerPos = outterPos;
	        while (innerPos <= innerEnd) {
	          pixels[innerPos] = a_sum * oneOverStackWeight;
	          a_sum -= a_out_sum;
	          a_out_sum -= stackIn.a;
	          readPos = innerPos + readPosOffset;
	          if (readPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          a_in_sum += stackIn.a = pixels[readPos];
	          a_sum += a_in_sum;
	          a_out_sum += pa = stackOut.a;
	          a_in_sum -= pa;
	          stackIn = stackIn.next;
	          stackOut = stackOut.next;
	          innerPos += innerStep;
	        }
	        results.push(outterPos += outterStep);
	      }
	      return results;
	    };

	    StackBlur.prototype.stackBlurCanvasRGBA = function(pixels, width, height, radius) {
	      if (radius <= 0) {
	        return;
	      }
	      this.createStack(radius);
	      this.rgbaPass(radius, pixels, 4, (width - 1) * 4, width * 4, (height - 1) * width * 4);
	      return this.rgbaPass(radius, pixels, width * 4, (height - 1) * width * 4, 4, (width - 1) * 4);
	    };

	    StackBlur.prototype.stackBlurCanvasAlpha = function(pixels, width, height, radius) {
	      if (radius <= 0) {
	        return;
	      }
	      this.createStack(radius);
	      this.alphaPass(radius, pixels, 4, (width - 1) * 4, width * 4, (height - 1) * width * 4);
	      return this.alphaPass(radius, pixels, width * 4, (height - 1) * width * 4, 4, (width - 1) * 4);
	    };

	    StackBlur.prototype.stackBlurCanvasRGB = function(pixels, width, height, radius) {
	      if (radius <= 0) {
	        return;
	      }
	      this.createStack(radius);
	      this.rgbPass(radius, pixels, 4, (width - 1) * 4, width * 4, (height - 1) * width * 4);
	      return this.rgbPass(radius, pixels, width * 4, (height - 1) * width * 4, 4, (width - 1) * 4);
	    };

	    return StackBlur;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(130)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var BatchLoader, GoogleFontLoader, inspect, log;
	  inspect = Foundation.inspect, log = Foundation.log, BatchLoader = Foundation.BatchLoader;
	  return GoogleFontLoader = (function(superClass) {
	    extend(GoogleFontLoader, superClass);

	    GoogleFontLoader.singletonClass();

	    function GoogleFontLoader(options) {
	      if (options == null) {
	        options = {};
	      }
	      this.defaultWeight = {
	        UnifrakturCook: 700
	      };
	      GoogleFontLoader.__super__.constructor.call(this, (function(_this) {
	        return function(src) {
	          return _this.webFontLoadWithWaiting([src]);
	        };
	      })(this));
	    }

	    GoogleFontLoader.prototype.googleFamilies = function(fontFamilies) {
	      var font, i, len, results, weight;
	      results = [];
	      for (i = 0, len = fontFamilies.length; i < len; i++) {
	        font = fontFamilies[i];
	        weight = this.defaultWeight[font] || "";
	        results.push((font.split(" ").join("+")) + ":" + weight + ":latin,latin-ext");
	      }
	      return results;
	    };

	    GoogleFontLoader.prototype.webFontLoad = function(fontFamilies, done) {
	      return WebFont.load({
	        google: {
	          families: this.googleFamilies(fontFamilies)
	        },
	        fontactive: (function(_this) {
	          return function(font) {
	            return _this.addAsset(font, font);
	          };
	        })(this),
	        fontinactive: (function(_this) {
	          return function(font) {
	            return _this.addAsset(font, "FAILED TO LOAD");
	          };
	        })(this),
	        inactive: done,
	        active: done
	      });
	    };

	    GoogleFontLoader.prototype.webFontLoadWithWaiting = function(fontFamilies) {
	      var font, i, len, wfw;
	      this.log("loading external fonts: " + (inspect(fontFamilies)));
	      if (window.WebFontConfig) {
	        wfw = window.WebFontWaiting || (window.WebFontWaiting = {});
	        for (i = 0, len = fontFamilies.length; i < len; i++) {
	          font = fontFamilies[i];
	          wfw[font] = true;
	        }
	        return;
	      }
	      return this.webFontLoad(fontFamilies, (function(_this) {
	        return function() {
	          var waitingList;
	          waitingList = window.WebFontWaiting && Object.keys(window.WebFontWaiting);
	          window.WebFontWaiting = null;
	          window.WebFontConfig = null;
	          if (waitingList) {
	            return _this.webFontLoad(waitingList);
	          }
	        };
	      })(this));
	    };

	    return GoogleFontLoader;

	  })(BatchLoader);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 130 */
/***/ function(module, exports) {

	;(function(window,document,undefined){
	var j=!0,l=null,m=!1;function n(a){return function(){return this[a]}}var q=this;function r(a,b){var c=a.split("."),d=q;!(c[0]in d)&&d.execScript&&d.execScript("var "+c[0]);for(var e;c.length&&(e=c.shift());)!c.length&&void 0!==b?d[e]=b:d=d[e]?d[e]:d[e]={}}function aa(a,b,c){return a.call.apply(a.bind,arguments)}
	function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function t(a,b,c){t=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?aa:ba;return t.apply(l,arguments)}var u=Date.now||function(){return+new Date};function v(a,b){this.G=a;this.v=b||a;this.z=this.v.document}v.prototype.createElement=function(a,b,c){a=this.z.createElement(a);if(b)for(var d in b)b.hasOwnProperty(d)&&("style"==d?a.style.cssText=b[d]:a.setAttribute(d,b[d]));c&&a.appendChild(this.z.createTextNode(c));return a};function ca(a,b,c){a=a.z.getElementsByTagName(b)[0];a||(a=document.documentElement);a&&a.lastChild&&a.insertBefore(c,a.lastChild)}
	function w(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return;c.push(b);a.className=c.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function x(a,b){for(var c=a.className.split(/\s+/),d=[],e=0,g=c.length;e<g;e++)c[e]!=b&&d.push(c[e]);a.className=d.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function da(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return j;return m}
	function y(a){var b=a.v.location.protocol;"about:"==b&&(b=a.G.location.protocol);return"https:"==b?"https:":"http:"}function ea(a,b){var c=a.createElement("link",{rel:"stylesheet",href:b}),d=m;c.onload=function(){d||(d=j)};c.onerror=function(){d||(d=j)};ca(a,"head",c)}
	function z(a,b,c,d){var e=a.z.getElementsByTagName("head")[0];if(e){var g=a.createElement("script",{src:b}),f=m;g.onload=g.onreadystatechange=function(){if(!f&&(!this.readyState||"loaded"==this.readyState||"complete"==this.readyState))f=j,c&&c(l),g.onload=g.onreadystatechange=l,"HEAD"==g.parentNode.tagName&&e.removeChild(g)};e.appendChild(g);window.setTimeout(function(){f||(f=j,c&&c(Error("Script load timeout")))},d||5E3);return g}return l};function A(a,b,c){this.M=a;this.U=b;this.Aa=c}r("webfont.BrowserInfo",A);A.prototype.pa=n("M");A.prototype.hasWebFontSupport=A.prototype.pa;A.prototype.qa=n("U");A.prototype.hasWebKitFallbackBug=A.prototype.qa;A.prototype.ra=n("Aa");A.prototype.hasWebKitMetricsBug=A.prototype.ra;function B(a,b,c,d){this.d=a!=l?a:l;this.o=b!=l?b:l;this.aa=c!=l?c:l;this.f=d!=l?d:l}var fa=/^([0-9]+)(?:[\._-]([0-9]+))?(?:[\._-]([0-9]+))?(?:[\._+-]?(.*))?$/;B.prototype.toString=function(){return[this.d,this.o||"",this.aa||"",this.f||""].join("")};
	function C(a){a=fa.exec(a);var b=l,c=l,d=l,e=l;a&&(a[1]!==l&&a[1]&&(b=parseInt(a[1],10)),a[2]!==l&&a[2]&&(c=parseInt(a[2],10)),a[3]!==l&&a[3]&&(d=parseInt(a[3],10)),a[4]!==l&&a[4]&&(e=/^[0-9]+$/.test(a[4])?parseInt(a[4],10):a[4]));return new B(b,c,d,e)};function D(a,b,c,d,e,g,f,h,k,p,s){this.K=a;this.Ga=b;this.za=c;this.fa=d;this.Ea=e;this.ea=g;this.wa=f;this.Fa=h;this.va=k;this.da=p;this.k=s}r("webfont.UserAgent",D);D.prototype.getName=n("K");D.prototype.getName=D.prototype.getName;D.prototype.oa=n("za");D.prototype.getVersion=D.prototype.oa;D.prototype.ka=n("fa");D.prototype.getEngine=D.prototype.ka;D.prototype.la=n("ea");D.prototype.getEngineVersion=D.prototype.la;D.prototype.ma=n("wa");D.prototype.getPlatform=D.prototype.ma;D.prototype.na=n("va");
	D.prototype.getPlatformVersion=D.prototype.na;D.prototype.ja=n("da");D.prototype.getDocumentMode=D.prototype.ja;D.prototype.ia=n("k");D.prototype.getBrowserInfo=D.prototype.ia;function E(a,b){this.a=a;this.I=b}var ga=new D("Unknown",new B,"Unknown","Unknown",new B,"Unknown","Unknown",new B,"Unknown",void 0,new A(m,m,m));
	E.prototype.parse=function(){var a;if(-1!=this.a.indexOf("MSIE")||-1!=this.a.indexOf("Trident/")){a=F(this);var b=G(this),c=C(b),d=l,e=l,g=l,f=l,h=H(this.a,/Trident\/([\d\w\.]+)/,1),k=I(this.I),d=-1!=this.a.indexOf("MSIE")?H(this.a,/MSIE ([\d\w\.]+)/,1):H(this.a,/rv:([\d\w\.]+)/,1),e=C(d);""!=h?(g="Trident",f=C(h)):(g="Unknown",f=new B,h="Unknown");a=new D("MSIE",e,d,g,f,h,a,c,b,k,new A("Windows"==a&&6<=e.d||"Windows Phone"==a&&8<=c.d,m,m))}else if(-1!=this.a.indexOf("Opera"))a:if(a="Unknown",b=H(this.a,
	/Presto\/([\d\w\.]+)/,1),c=C(b),d=G(this),e=C(d),g=I(this.I),c.d!==l?a="Presto":(-1!=this.a.indexOf("Gecko")&&(a="Gecko"),b=H(this.a,/rv:([^\)]+)/,1),c=C(b)),-1!=this.a.indexOf("Opera Mini/"))f=H(this.a,/Opera Mini\/([\d\.]+)/,1),h=C(f),a=new D("OperaMini",h,f,a,c,b,F(this),e,d,g,new A(m,m,m));else{if(-1!=this.a.indexOf("Version/")&&(f=H(this.a,/Version\/([\d\.]+)/,1),h=C(f),h.d!==l)){a=new D("Opera",h,f,a,c,b,F(this),e,d,g,new A(10<=h.d,m,m));break a}f=H(this.a,/Opera[\/ ]([\d\.]+)/,1);h=C(f);a=
	h.d!==l?new D("Opera",h,f,a,c,b,F(this),e,d,g,new A(10<=h.d,m,m)):new D("Opera",new B,"Unknown",a,c,b,F(this),e,d,g,new A(m,m,m))}else/OPR\/[\d.]+/.test(this.a)?a=ha(this):/AppleWeb(K|k)it/.test(this.a)?a=ha(this):-1!=this.a.indexOf("Gecko")?(a="Unknown",b=new B,c="Unknown",d=G(this),e=C(d),g=m,-1!=this.a.indexOf("Firefox")?(a="Firefox",c=H(this.a,/Firefox\/([\d\w\.]+)/,1),b=C(c),g=3<=b.d&&5<=b.o):-1!=this.a.indexOf("Mozilla")&&(a="Mozilla"),f=H(this.a,/rv:([^\)]+)/,1),h=C(f),g||(g=1<h.d||1==h.d&&
	9<h.o||1==h.d&&9==h.o&&2<=h.aa||f.match(/1\.9\.1b[123]/)!=l||f.match(/1\.9\.1\.[\d\.]+/)!=l),a=new D(a,b,c,"Gecko",h,f,F(this),e,d,I(this.I),new A(g,m,m))):a=ga;return a};function F(a){var b=H(a.a,/(iPod|iPad|iPhone|Android|Windows Phone|BB\d{2}|BlackBerry)/,1);if(""!=b)return/BB\d{2}/.test(b)&&(b="BlackBerry"),b;a=H(a.a,/(Linux|Mac_PowerPC|Macintosh|Windows|CrOS)/,1);return""!=a?("Mac_PowerPC"==a&&(a="Macintosh"),a):"Unknown"}
	function G(a){var b=H(a.a,/(OS X|Windows NT|Android) ([^;)]+)/,2);if(b||(b=H(a.a,/Windows Phone( OS)? ([^;)]+)/,2))||(b=H(a.a,/(iPhone )?OS ([\d_]+)/,2)))return b;if(b=H(a.a,/(?:Linux|CrOS) ([^;)]+)/,1))for(var b=b.split(/\s/),c=0;c<b.length;c+=1)if(/^[\d\._]+$/.test(b[c]))return b[c];return(a=H(a.a,/(BB\d{2}|BlackBerry).*?Version\/([^\s]*)/,2))?a:"Unknown"}
	function ha(a){var b=F(a),c=G(a),d=C(c),e=H(a.a,/AppleWeb(?:K|k)it\/([\d\.\+]+)/,1),g=C(e),f="Unknown",h=new B,k="Unknown",p=m;/OPR\/[\d.]+/.test(a.a)?f="Opera":-1!=a.a.indexOf("Chrome")||-1!=a.a.indexOf("CrMo")||-1!=a.a.indexOf("CriOS")?f="Chrome":/Silk\/\d/.test(a.a)?f="Silk":"BlackBerry"==b||"Android"==b?f="BuiltinBrowser":-1!=a.a.indexOf("PhantomJS")?f="PhantomJS":-1!=a.a.indexOf("Safari")?f="Safari":-1!=a.a.indexOf("AdobeAIR")&&(f="AdobeAIR");"BuiltinBrowser"==f?k="Unknown":"Silk"==f?k=H(a.a,
	/Silk\/([\d\._]+)/,1):"Chrome"==f?k=H(a.a,/(Chrome|CrMo|CriOS)\/([\d\.]+)/,2):-1!=a.a.indexOf("Version/")?k=H(a.a,/Version\/([\d\.\w]+)/,1):"AdobeAIR"==f?k=H(a.a,/AdobeAIR\/([\d\.]+)/,1):"Opera"==f?k=H(a.a,/OPR\/([\d.]+)/,1):"PhantomJS"==f&&(k=H(a.a,/PhantomJS\/([\d.]+)/,1));h=C(k);p="AdobeAIR"==f?2<h.d||2==h.d&&5<=h.o:"BlackBerry"==b?10<=d.d:"Android"==b?2<d.d||2==d.d&&1<d.o:526<=g.d||525<=g.d&&13<=g.o;return new D(f,h,k,"AppleWebKit",g,e,b,d,c,I(a.I),new A(p,536>g.d||536==g.d&&11>g.o,"iPhone"==
	b||"iPad"==b||"iPod"==b||"Macintosh"==b))}function H(a,b,c){return(a=a.match(b))&&a[c]?a[c]:""}function I(a){if(a.documentMode)return a.documentMode};function ia(a){this.ua=a||"-"}ia.prototype.f=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.ua)};function J(a,b){this.K=a;this.V=4;this.L="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.L=c[1],this.V=parseInt(c[2],10))}J.prototype.getName=n("K");function K(a){return a.L+a.V}function ja(a){var b=4,c="n",d=l;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ka(a,b,c){this.c=a;this.h=b;this.O=c;this.j="wf";this.g=new ia("-")}function L(a){x(a.h,a.g.f(a.j,"loading"));da(a.h,a.g.f(a.j,"active"))||w(a.h,a.g.f(a.j,"inactive"));M(a,"inactive")}function M(a,b,c){if(a.O[b])if(c)a.O[b](c.getName(),K(c));else a.O[b]()};function la(){this.w={}};function O(a,b){this.c=a;this.C=b;this.s=this.c.createElement("span",{"aria-hidden":"true"},this.C)}
	function P(a,b){var c;c=[];for(var d=b.K.split(/,\s*/),e=0;e<d.length;e++){var g=d[e].replace(/['"]/g,"");-1==g.indexOf(" ")?c.push(g):c.push("'"+g+"'")}c=c.join(",");d="normal";e=b.V+"00";"o"===b.L?d="oblique":"i"===b.L&&(d="italic");a.s.style.cssText="position:absolute;top:-999px;left:-999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+c+";"+("font-style:"+d+";font-weight:"+e+";")}
	function Q(a){ca(a.c,"body",a.s)}O.prototype.remove=function(){var a=this.s;a.parentNode&&a.parentNode.removeChild(a)};function ma(a,b,c,d,e,g,f,h){this.W=a;this.sa=b;this.c=c;this.q=d;this.C=h||"BESbswy";this.k=e;this.F={};this.T=g||5E3;this.Z=f||l;this.B=this.A=l;a=new O(this.c,this.C);Q(a);for(var k in R)R.hasOwnProperty(k)&&(P(a,new J(R[k],K(this.q))),this.F[R[k]]=a.s.offsetWidth);a.remove()}var R={Da:"serif",Ca:"sans-serif",Ba:"monospace"};
	ma.prototype.start=function(){this.A=new O(this.c,this.C);Q(this.A);this.B=new O(this.c,this.C);Q(this.B);this.xa=u();P(this.A,new J(this.q.getName()+",serif",K(this.q)));P(this.B,new J(this.q.getName()+",sans-serif",K(this.q)));oa(this)};function pa(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.F[R[d]]&&c===a.F[R[d]])return j;return m}
	function oa(a){var b=a.A.s.offsetWidth,c=a.B.s.offsetWidth;b===a.F.serif&&c===a.F["sans-serif"]||a.k.U&&pa(a,b,c)?u()-a.xa>=a.T?a.k.U&&pa(a,b,c)&&(a.Z===l||a.Z.hasOwnProperty(a.q.getName()))?S(a,a.W):S(a,a.sa):setTimeout(t(function(){oa(this)},a),25):S(a,a.W)}function S(a,b){a.A.remove();a.B.remove();b(a.q)};function T(a,b,c,d){this.c=b;this.t=c;this.P=0;this.ba=this.Y=m;this.T=d;this.k=a.k}function qa(a,b,c,d,e){if(0===b.length&&e)L(a.t);else{a.P+=b.length;e&&(a.Y=e);for(e=0;e<b.length;e++){var g=b[e],f=c[g.getName()],h=a.t,k=g;w(h.h,h.g.f(h.j,k.getName(),K(k).toString(),"loading"));M(h,"fontloading",k);(new ma(t(a.ga,a),t(a.ha,a),a.c,g,a.k,a.T,d,f)).start()}}}
	T.prototype.ga=function(a){var b=this.t;x(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"loading"));x(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"inactive"));w(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"active"));M(b,"fontactive",a);this.ba=j;ra(this)};T.prototype.ha=function(a){var b=this.t;x(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"loading"));da(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"active"))||w(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"inactive"));M(b,"fontinactive",a);ra(this)};
	function ra(a){0==--a.P&&a.Y&&(a.ba?(a=a.t,x(a.h,a.g.f(a.j,"loading")),x(a.h,a.g.f(a.j,"inactive")),w(a.h,a.g.f(a.j,"active")),M(a,"active")):L(a.t))};function U(a){this.G=a;this.u=new la;this.ya=new E(a.navigator.userAgent,a.document);this.a=this.ya.parse();this.Q=this.R=0}
	U.prototype.load=function(a){var b=a.context||this.G;this.c=new v(this.G,b);var b=new ka(this.c,b.document.documentElement,a),c=[],d=a.timeout;w(b.h,b.g.f(b.j,"loading"));M(b,"loading");var c=this.u,e=this.c,g=[],f;for(f in a)if(a.hasOwnProperty(f)){var h=c.w[f];h&&g.push(h(a[f],e))}c=g;this.Q=this.R=c.length;a=new T(this.a,this.c,b,d);f=0;for(d=c.length;f<d;f++)e=c[f],e.H(this.a,t(this.ta,this,e,b,a))};
	U.prototype.ta=function(a,b,c,d){var e=this;d?a.load(function(a,b,d){var k=0==--e.R;setTimeout(function(){qa(c,a,b||{},d||l,k)},0)}):(a=0==--this.R,this.Q--,a&&0==this.Q&&L(b),qa(c,[],{},l,a))};function sa(a,b,c){this.N=a?a:b+ta;this.p=[];this.S=[];this.ca=c||""}var ta="//fonts.googleapis.com/css";sa.prototype.f=function(){if(0==this.p.length)throw Error("No fonts to load !");if(-1!=this.N.indexOf("kit="))return this.N;for(var a=this.p.length,b=[],c=0;c<a;c++)b.push(this.p[c].replace(/ /g,"+"));a=this.N+"?family="+b.join("%7C");0<this.S.length&&(a+="&subset="+this.S.join(","));0<this.ca.length&&(a+="&text="+encodeURIComponent(this.ca));return a};function ua(a){this.p=a;this.$=[];this.J={}}
	var va={latin:"BESbswy",cyrillic:"&#1081;&#1103;&#1046;",greek:"&#945;&#946;&#931;",khmer:"&#x1780;&#x1781;&#x1782;",Hanuman:"&#x1780;&#x1781;&#x1782;"},wa={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},xa={i:"i",italic:"i",n:"n",normal:"n"},ya=RegExp("^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$");
	ua.prototype.parse=function(){for(var a=this.p.length,b=0;b<a;b++){var c=this.p[b].split(":"),d=c[0].replace(/\+/g," "),e=["n4"];if(2<=c.length){var g;var f=c[1];g=[];if(f)for(var f=f.split(","),h=f.length,k=0;k<h;k++){var p;p=f[k];if(p.match(/^[\w]+$/)){p=ya.exec(p.toLowerCase());var s=void 0;if(p==l)s="";else{s=void 0;s=p[1];if(s==l||""==s)s="4";else var na=wa[s],s=na?na:isNaN(s)?"4":s.substr(0,1);s=[p[2]==l||""==p[2]?"n":xa[p[2]],s].join("")}p=s}else p="";p&&g.push(p)}0<g.length&&(e=g);3==c.length&&
	(c=c[2],g=[],c=!c?g:c.split(","),0<c.length&&(c=va[c[0]])&&(this.J[d]=c))}this.J[d]||(c=va[d])&&(this.J[d]=c);for(c=0;c<e.length;c+=1)this.$.push(new J(d,e[c]))}};function V(a,b){this.a=(new E(navigator.userAgent,document)).parse();this.c=a;this.e=b}var za={Arimo:j,Cousine:j,Tinos:j};V.prototype.H=function(a,b){b(a.k.M)};V.prototype.load=function(a){var b=this.c;if("MSIE"==this.a.getName()&&this.e.blocking!=j){var c=t(this.X,this,a),d=function(){b.z.body?c():setTimeout(d,0)};d()}else this.X(a)};
	V.prototype.X=function(a){for(var b=this.c,c=new sa(this.e.api,y(b),this.e.text),d=this.e.families,e=d.length,g=0;g<e;g++){var f=d[g].split(":");3==f.length&&c.S.push(f.pop());var h="";2==f.length&&""!=f[1]&&(h=":");c.p.push(f.join(h))}d=new ua(d);d.parse();ea(b,c.f());a(d.$,d.J,za)};function W(a,b){this.c=a;this.e=b;this.m=[]}W.prototype.D=function(a){return y(this.c)+(this.e.api||"//f.fontdeck.com/s/css/js/")+(this.c.v.location.hostname||this.c.G.location.hostname)+"/"+a+".js"};
	W.prototype.H=function(a,b){var c=this.e.id,d=this.c.v,e=this;c?(d.__webfontfontdeckmodule__||(d.__webfontfontdeckmodule__={}),d.__webfontfontdeckmodule__[c]=function(a,c){for(var d=0,k=c.fonts.length;d<k;++d){var p=c.fonts[d];e.m.push(new J(p.name,ja("font-weight:"+p.weight+";font-style:"+p.style)))}b(a)},z(this.c,this.D(c),function(a){a&&b(m)})):b(m)};W.prototype.load=function(a){a(this.m)};function X(a,b){this.c=a;this.e=b;this.m=[]}X.prototype.D=function(a){var b=y(this.c);return(this.e.api||b+"//use.typekit.net")+"/"+a+".js"};
	X.prototype.H=function(a,b){var c=this.e.id,d=this.e,e=this.c.v,g=this;c?(e.__webfonttypekitmodule__||(e.__webfonttypekitmodule__={}),e.__webfonttypekitmodule__[c]=function(c){c(a,d,function(a,c,d){for(var e=0;e<c.length;e+=1){var f=d[c[e]];if(f)for(var N=0;N<f.length;N+=1)g.m.push(new J(c[e],f[N]));else g.m.push(new J(c[e]))}b(a)})},z(this.c,this.D(c),function(a){a&&b(m)},2E3)):b(m)};X.prototype.load=function(a){a(this.m)};function Y(a,b){this.c=a;this.e=b;this.m=[]}Y.prototype.H=function(a,b){var c=this,d=c.e.projectId,e=c.e.version;if(d){var g=c.c.v;z(this.c,c.D(d,e),function(e){if(e)b(m);else{if(g["__mti_fntLst"+d]&&(e=g["__mti_fntLst"+d]()))for(var h=0;h<e.length;h++)c.m.push(new J(e[h].fontfamily));b(a.k.M)}}).id="__MonotypeAPIScript__"+d}else b(m)};Y.prototype.D=function(a,b){var c=y(this.c),d=(this.e.api||"fast.fonts.net/jsapi").replace(/^.*http(s?):(\/\/)?/,"");return c+"//"+d+"/"+a+".js"+(b?"?v="+b:"")};
	Y.prototype.load=function(a){a(this.m)};function Z(a,b){this.c=a;this.e=b}Z.prototype.load=function(a){var b,c,d=this.e.urls||[],e=this.e.families||[],g=this.e.testStrings||{};b=0;for(c=d.length;b<c;b++)ea(this.c,d[b]);d=[];b=0;for(c=e.length;b<c;b++){var f=e[b].split(":");if(f[1])for(var h=f[1].split(","),k=0;k<h.length;k+=1)d.push(new J(f[0],h[k]));else d.push(new J(f[0]))}a(d,g)};Z.prototype.H=function(a,b){return b(a.k.M)};var $=new U(q);$.u.w.custom=function(a,b){return new Z(b,a)};$.u.w.fontdeck=function(a,b){return new W(b,a)};$.u.w.monotype=function(a,b){return new Y(b,a)};$.u.w.typekit=function(a,b){return new X(b,a)};$.u.w.google=function(a,b){return new V(b,a)};q.WebFont||(q.WebFont={},q.WebFont.load=t($.load,$),q.WebFontConfig&&$.load(q.WebFontConfig));
	})(this,document);


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*

	StackBlurOriginal - a fast almost Gaussian Blur For Canvas

	Version:  0.5
	Author:   Mario Klingemann
	Contact:  mario@quasimondo.com
	Website:  http://www.quasimondo.com/StackBlurForCanvas
	Twitter:  @quasimondo

	In case you find this class useful - especially in commercial projects -
	I am not totally unhappy for a small donation to my PayPal account
	mario@quasimondo.de

	Or support me on flattr:
	https://flattr.com/thing/72791/StackBlurOriginal-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript

	Copyright (c) 2010 Mario Klingemann

	Permission is hereby granted, free of charge, to any person
	obtaining a copy of this software and associated documentation
	files (the "Software"), to deal in the Software without
	restriction, including without limitation the rights to use,
	copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following
	conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(122), __webpack_require__(132), __webpack_require__(126)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, OrigStackBlur) {
	  var BlurStack, color, inspect, matrix, mulTable, nextTick, point, rect, shgTable;
	  point = Atomic.point, matrix = Atomic.matrix, rect = Atomic.rect, color = Atomic.color;
	  inspect = Foundation.Inspect.inspect;
	  nextTick = Foundation.nextTick;
	  mulTable = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];
	  shgTable = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];
	  BlurStack = (function() {
	    function BlurStack() {
	      this.r = this.g = this.b = this.a = 0;
	      this.next = null;
	    }

	    return BlurStack;

	  })();
	  return Canvas.StackBlurOriginal = (function(superClass) {
	    extend(StackBlurOriginal, superClass);

	    function StackBlurOriginal() {
	      return StackBlurOriginal.__super__.constructor.apply(this, arguments);
	    }

	    StackBlurOriginal.blur = function(bitmap, radius) {
	      return (new Canvas.StackBlurOriginal).blur(bitmap, radius);
	    };

	    StackBlurOriginal.blurRGB = function(bitmap, radius) {
	      return (new Canvas.StackBlurOriginal).blurRGB(bitmap, radius);
	    };

	    StackBlurOriginal.prototype.blur = function(bitmap, radius) {
	      var imageData, pixels;
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      OrigStackBlur.stackBlurCanvasRGBA(imageData, 0, 0, bitmap.size.w, bitmap.size.h, radius);
	      return bitmap.putImageData(imageData);
	    };

	    StackBlurOriginal.prototype.blurRGB = function(bitmap, radius) {
	      var imageData, pixels;
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      OrigStackBlur.stackBlurCanvasRGB(imageData, 0, 0, bitmap.size.w, bitmap.size.h, radius);
	      return bitmap.putImageData(imageData);
	    };

	    StackBlurOriginal.prototype.stackBlurCanvasRGBA = function(pixels, top_x, top_y, width, height, radius) {
	      var a_in_sum, a_out_sum, a_sum, b_in_sum, b_out_sum, b_sum, div, g_in_sum, g_out_sum, g_sum, heightMinus1, i, j, k, l, m, mul_sum, n, o, p, pa, pb, pg, pr, q, r, r_in_sum, r_out_sum, r_sum, radiusPlus1, rbs, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, results, s, shg_sum, stack, stackEnd, stackIn, stackOut, stackStart, sumFactor, w4, widthMinus1, x, y, yi, yp, yw;
	      div = radius + radius + 1;
	      w4 = width << 2;
	      widthMinus1 = width - 1;
	      heightMinus1 = height - 1;
	      radiusPlus1 = radius + 1;
	      sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
	      stackStart = new BlurStack();
	      stack = stackStart;
	      for (i = j = 1, ref = div - 1; j <= ref; i = j += 1) {
	        stack = stack.next = new BlurStack();
	        if (i === radiusPlus1) {
	          stackEnd = stack;
	        }
	      }
	      stack.next = stackStart;
	      yw = yi = 0;
	      mul_sum = mulTable[radius];
	      shg_sum = shgTable[radius];
	      for (y = k = 0, ref1 = heightMinus1; k <= ref1; y = k += 1) {
	        r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;
	        r_out_sum = radiusPlus1 * (pr = pixels[yi]);
	        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
	        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
	        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
	        r_sum += sumFactor * pr;
	        g_sum += sumFactor * pg;
	        b_sum += sumFactor * pb;
	        a_sum += sumFactor * pa;
	        stack = stackStart;
	        for (i = l = 0, ref2 = radius; l <= ref2; i = l += 1) {
	          stack.r = pr;
	          stack.g = pg;
	          stack.b = pb;
	          stack.a = pa;
	          stack = stack.next;
	        }
	        for (i = m = 1, ref3 = radius; m <= ref3; i = m += 1) {
	          p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
	          r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);
	          g_sum += (stack.g = (pg = pixels[p + 1])) * rbs;
	          b_sum += (stack.b = (pb = pixels[p + 2])) * rbs;
	          a_sum += (stack.a = (pa = pixels[p + 3])) * rbs;
	          r_in_sum += pr;
	          g_in_sum += pg;
	          b_in_sum += pb;
	          a_in_sum += pa;
	          stack = stack.next;
	        }
	        stackIn = stackStart;
	        stackOut = stackEnd;
	        for (x = n = 0, ref4 = widthMinus1; n <= ref4; x = n += 1) {
	          pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;
	          if (pa !== 0) {
	            pa = 255 / pa;
	            pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;
	            pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
	            pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
	          } else {
	            pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
	          }
	          r_sum -= r_out_sum;
	          g_sum -= g_out_sum;
	          b_sum -= b_out_sum;
	          a_sum -= a_out_sum;
	          r_out_sum -= stackIn.r;
	          g_out_sum -= stackIn.g;
	          b_out_sum -= stackIn.b;
	          a_out_sum -= stackIn.a;
	          p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;
	          r_in_sum += (stackIn.r = pixels[p]);
	          g_in_sum += (stackIn.g = pixels[p + 1]);
	          b_in_sum += (stackIn.b = pixels[p + 2]);
	          a_in_sum += (stackIn.a = pixels[p + 3]);
	          r_sum += r_in_sum;
	          g_sum += g_in_sum;
	          b_sum += b_in_sum;
	          a_sum += a_in_sum;
	          stackIn = stackIn.next;
	          r_out_sum += (pr = stackOut.r);
	          g_out_sum += (pg = stackOut.g);
	          b_out_sum += (pb = stackOut.b);
	          a_out_sum += (pa = stackOut.a);
	          r_in_sum -= pr;
	          g_in_sum -= pg;
	          b_in_sum -= pb;
	          a_in_sum -= pa;
	          stackOut = stackOut.next;
	          yi += 4;
	        }
	        yw += width;
	      }
	      results = [];
	      for (x = o = 0, ref5 = widthMinus1; o <= ref5; x = o += 1) {
	        g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;
	        yi = x << 2;
	        r_out_sum = radiusPlus1 * (pr = pixels[yi]);
	        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
	        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
	        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
	        r_sum += sumFactor * pr;
	        g_sum += sumFactor * pg;
	        b_sum += sumFactor * pb;
	        a_sum += sumFactor * pa;
	        stack = stackStart;
	        for (i = q = 0, ref6 = radius; q <= ref6; i = q += 1) {
	          stack.r = pr;
	          stack.g = pg;
	          stack.b = pb;
	          stack.a = pa;
	          stack = stack.next;
	        }
	        yp = width;
	        for (i = r = 1, ref7 = radius; r <= ref7; i = r += 1) {
	          yi = (yp + x) << 2;
	          r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);
	          g_sum += (stack.g = (pg = pixels[yi + 1])) * rbs;
	          b_sum += (stack.b = (pb = pixels[yi + 2])) * rbs;
	          a_sum += (stack.a = (pa = pixels[yi + 3])) * rbs;
	          r_in_sum += pr;
	          g_in_sum += pg;
	          b_in_sum += pb;
	          a_in_sum += pa;
	          stack = stack.next;
	          if (i < heightMinus1) {
	            yp += width;
	          }
	        }
	        yi = x;
	        stackIn = stackStart;
	        stackOut = stackEnd;
	        for (y = s = 0, ref8 = heightMinus1; s <= ref8; y = s += 1) {
	          p = yi << 2;
	          pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;
	          if (pa > 0) {
	            pa = 255 / pa;
	            pixels[p] = ((r_sum * mul_sum) >> shg_sum) * pa;
	            pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
	            pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
	          } else {
	            pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;
	          }
	          r_sum -= r_out_sum;
	          g_sum -= g_out_sum;
	          b_sum -= b_out_sum;
	          a_sum -= a_out_sum;
	          r_out_sum -= stackIn.r;
	          g_out_sum -= stackIn.g;
	          b_out_sum -= stackIn.b;
	          a_out_sum -= stackIn.a;
	          p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;
	          r_sum += (r_in_sum += (stackIn.r = pixels[p]));
	          g_sum += (g_in_sum += (stackIn.g = pixels[p + 1]));
	          b_sum += (b_in_sum += (stackIn.b = pixels[p + 2]));
	          a_sum += (a_in_sum += (stackIn.a = pixels[p + 3]));
	          stackIn = stackIn.next;
	          r_out_sum += (pr = stackOut.r);
	          g_out_sum += (pg = stackOut.g);
	          b_out_sum += (pb = stackOut.b);
	          a_out_sum += (pa = stackOut.a);
	          r_in_sum -= pr;
	          g_in_sum -= pg;
	          b_in_sum -= pb;
	          a_in_sum -= pa;
	          stackOut = stackOut.next;
	          yi += width;
	        }
	        results.push(1);
	      }
	      return results;
	    };

	    return StackBlurOriginal;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*

	StackBlur - a fast almost Gaussian Blur For Canvas

	Version:  0.5
	Author:   Mario Klingemann
	Contact:  mario@quasimondo.com
	Website:  http://www.quasimondo.com/StackBlurForCanvas
	Twitter:  @quasimondo

	In case you find this class useful - especially in commercial projects -
	I am not totally unhappy for a small donation to my PayPal account
	mario@quasimondo.de

	Or support me on flattr:
	https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript

	Copyright (c) 2010 Mario Klingemann

	Permission is hereby granted, free of charge, to any person
	obtaining a copy of this software and associated documentation
	files (the "Software"), to deal in the Software without
	restriction, including without limitation the rights to use,
	copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following
	conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
	*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {


	  var mul_table = [
	          512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,
	          454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,
	          482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,
	          437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,
	          497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,
	          320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,
	          446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,
	          329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,
	          505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,
	          399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,
	          324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,
	          268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,
	          451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,
	          385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,
	          332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,
	          289,287,285,282,280,278,275,273,271,269,267,265,263,261,259];


	  var shg_table = [
	         9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,
	      17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,
	      19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,
	      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
	      21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	      21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	      22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	      22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,
	      23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	      23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	      23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	      23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	      24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	      24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	      24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	      24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24 ];

	  function stackBlurImage( imageID, canvasID, radius, blurAlphaChannel )
	  {

	    var img = document.getElementById( imageID );
	    var w = img.naturalWidth;
	      var h = img.naturalHeight;

	    var canvas = document.getElementById( canvasID );

	      canvas.style.width  = w + "px";
	      canvas.style.height = h + "px";
	      canvas.width = w;
	      canvas.height = h;

	      var context = canvas.getContext("2d");
	      context.clearRect( 0, 0, w, h );
	      context.drawImage( img, 0, 0 );

	    if ( isNaN(radius) || radius < 1 ) return;

	    if ( blurAlphaChannel )
	      stackBlurCanvasRGBA( canvasID, 0, 0, w, h, radius );
	    else
	      stackBlurCanvasRGB( canvasID, 0, 0, w, h, radius );
	  }


	  function stackBlurCanvasRGBA( imageData, top_x, top_y, width, height, radius )
	  {
	    // if ( isNaN(radius) || radius < 1 ) return;
	    // radius |= 0;

	    // var canvas  = document.getElementById( id );
	    // var context = canvas.getContext("2d");
	    // var imageData;

	    // try {
	    //   try {
	    //   imageData = context.getImageData( top_x, top_y, width, height );
	    //   } catch(e) {

	    //   // NOTE: this part is supposedly only needed if you want to work with local files
	    //   // so it might be okay to remove the whole try/catch block and just use
	    //   // imageData = context.getImageData( top_x, top_y, width, height );
	    //   try {
	    //     netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
	    //     imageData = context.getImageData( top_x, top_y, width, height );
	    //   } catch(e) {
	    //     alert("Cannot access local image");
	    //     throw new Error("unable to access local image data: " + e);
	    //     return;
	    //   }
	    //   }
	    // } catch(e) {
	    //   alert("Cannot access image");
	    //   throw new Error("unable to access image data: " + e);
	    // }

	    var pixels = imageData.data;

	    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum,
	    r_out_sum, g_out_sum, b_out_sum, a_out_sum,
	    r_in_sum, g_in_sum, b_in_sum, a_in_sum,
	    pr, pg, pb, pa, rbs;

	    var div = radius + radius + 1;
	    var w4 = width << 2;
	    var widthMinus1  = width - 1;
	    var heightMinus1 = height - 1;
	    var radiusPlus1  = radius + 1;
	    var sumFactor = radiusPlus1 * ( radiusPlus1 + 1 ) / 2;

	    var stackStart = new BlurStack();
	    var stack = stackStart;
	    for ( i = 1; i < div; i++ )
	    {
	      stack = stack.next = new BlurStack();
	      if ( i == radiusPlus1 ) var stackEnd = stack;
	    }
	    stack.next = stackStart;
	    var stackIn = null;
	    var stackOut = null;

	    yw = yi = 0;

	    var mul_sum = mul_table[radius];
	    var shg_sum = shg_table[radius];

	    for ( y = 0; y < height; y++ )
	    {
	      r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;

	      r_out_sum = radiusPlus1 * ( pr = pixels[yi] );
	      g_out_sum = radiusPlus1 * ( pg = pixels[yi+1] );
	      b_out_sum = radiusPlus1 * ( pb = pixels[yi+2] );
	      a_out_sum = radiusPlus1 * ( pa = pixels[yi+3] );

	      r_sum += sumFactor * pr;
	      g_sum += sumFactor * pg;
	      b_sum += sumFactor * pb;
	      a_sum += sumFactor * pa;

	      stack = stackStart;

	      for( i = 0; i < radiusPlus1; i++ )
	      {
	        stack.r = pr;
	        stack.g = pg;
	        stack.b = pb;
	        stack.a = pa;
	        stack = stack.next;
	      }

	      for( i = 1; i < radiusPlus1; i++ )
	      {
	        p = yi + (( widthMinus1 < i ? widthMinus1 : i ) << 2 );
	        r_sum += ( stack.r = ( pr = pixels[p])) * ( rbs = radiusPlus1 - i );
	        g_sum += ( stack.g = ( pg = pixels[p+1])) * rbs;
	        b_sum += ( stack.b = ( pb = pixels[p+2])) * rbs;
	        a_sum += ( stack.a = ( pa = pixels[p+3])) * rbs;

	        r_in_sum += pr;
	        g_in_sum += pg;
	        b_in_sum += pb;
	        a_in_sum += pa;

	        stack = stack.next;
	      }


	      stackIn = stackStart;
	      stackOut = stackEnd;
	      for ( x = 0; x < width; x++ )
	      {
	        pixels[yi+3] = pa = (a_sum * mul_sum) >> shg_sum;
	        if ( pa != 0 )
	        {
	          pa = 255 / pa;
	          pixels[yi]   = ((r_sum * mul_sum) >> shg_sum) * pa;
	          pixels[yi+1] = ((g_sum * mul_sum) >> shg_sum) * pa;
	          pixels[yi+2] = ((b_sum * mul_sum) >> shg_sum) * pa;
	        } else {
	          pixels[yi] = pixels[yi+1] = pixels[yi+2] = 0;
	        }

	        r_sum -= r_out_sum;
	        g_sum -= g_out_sum;
	        b_sum -= b_out_sum;
	        a_sum -= a_out_sum;

	        r_out_sum -= stackIn.r;
	        g_out_sum -= stackIn.g;
	        b_out_sum -= stackIn.b;
	        a_out_sum -= stackIn.a;

	        p =  ( yw + ( ( p = x + radius + 1 ) < widthMinus1 ? p : widthMinus1 ) ) << 2;

	        r_in_sum += ( stackIn.r = pixels[p]);
	        g_in_sum += ( stackIn.g = pixels[p+1]);
	        b_in_sum += ( stackIn.b = pixels[p+2]);
	        a_in_sum += ( stackIn.a = pixels[p+3]);

	        r_sum += r_in_sum;
	        g_sum += g_in_sum;
	        b_sum += b_in_sum;
	        a_sum += a_in_sum;

	        stackIn = stackIn.next;

	        r_out_sum += ( pr = stackOut.r );
	        g_out_sum += ( pg = stackOut.g );
	        b_out_sum += ( pb = stackOut.b );
	        a_out_sum += ( pa = stackOut.a );

	        r_in_sum -= pr;
	        g_in_sum -= pg;
	        b_in_sum -= pb;
	        a_in_sum -= pa;

	        stackOut = stackOut.next;

	        yi += 4;
	      }
	      yw += width;
	    }


	    for ( x = 0; x < width; x++ )
	    {
	      g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;

	      yi = x << 2;
	      r_out_sum = radiusPlus1 * ( pr = pixels[yi]);
	      g_out_sum = radiusPlus1 * ( pg = pixels[yi+1]);
	      b_out_sum = radiusPlus1 * ( pb = pixels[yi+2]);
	      a_out_sum = radiusPlus1 * ( pa = pixels[yi+3]);

	      r_sum += sumFactor * pr;
	      g_sum += sumFactor * pg;
	      b_sum += sumFactor * pb;
	      a_sum += sumFactor * pa;

	      stack = stackStart;

	      for( i = 0; i < radiusPlus1; i++ )
	      {
	        stack.r = pr;
	        stack.g = pg;
	        stack.b = pb;
	        stack.a = pa;
	        stack = stack.next;
	      }

	      yp = width;

	      for( i = 1; i <= radius; i++ )
	      {
	        yi = ( yp + x ) << 2;

	        r_sum += ( stack.r = ( pr = pixels[yi])) * ( rbs = radiusPlus1 - i );
	        g_sum += ( stack.g = ( pg = pixels[yi+1])) * rbs;
	        b_sum += ( stack.b = ( pb = pixels[yi+2])) * rbs;
	        a_sum += ( stack.a = ( pa = pixels[yi+3])) * rbs;

	        r_in_sum += pr;
	        g_in_sum += pg;
	        b_in_sum += pb;
	        a_in_sum += pa;

	        stack = stack.next;

	        if( i < heightMinus1 )
	        {
	          yp += width;
	        }
	      }

	      yi = x;
	      stackIn = stackStart;
	      stackOut = stackEnd;
	      for ( y = 0; y < height; y++ )
	      {
	        p = yi << 2;
	        pixels[p+3] = pa = (a_sum * mul_sum) >> shg_sum;
	        if ( pa > 0 )
	        {
	          pa = 255 / pa;
	          pixels[p]   = ((r_sum * mul_sum) >> shg_sum ) * pa;
	          pixels[p+1] = ((g_sum * mul_sum) >> shg_sum ) * pa;
	          pixels[p+2] = ((b_sum * mul_sum) >> shg_sum ) * pa;
	        } else {
	          pixels[p] = pixels[p+1] = pixels[p+2] = 0;
	        }

	        r_sum -= r_out_sum;
	        g_sum -= g_out_sum;
	        b_sum -= b_out_sum;
	        a_sum -= a_out_sum;

	        r_out_sum -= stackIn.r;
	        g_out_sum -= stackIn.g;
	        b_out_sum -= stackIn.b;
	        a_out_sum -= stackIn.a;

	        p = ( x + (( ( p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1 ) * width )) << 2;

	        r_sum += ( r_in_sum += ( stackIn.r = pixels[p]));
	        g_sum += ( g_in_sum += ( stackIn.g = pixels[p+1]));
	        b_sum += ( b_in_sum += ( stackIn.b = pixels[p+2]));
	        a_sum += ( a_in_sum += ( stackIn.a = pixels[p+3]));

	        stackIn = stackIn.next;

	        r_out_sum += ( pr = stackOut.r );
	        g_out_sum += ( pg = stackOut.g );
	        b_out_sum += ( pb = stackOut.b );
	        a_out_sum += ( pa = stackOut.a );

	        r_in_sum -= pr;
	        g_in_sum -= pg;
	        b_in_sum -= pb;
	        a_in_sum -= pa;

	        stackOut = stackOut.next;

	        yi += width;
	      }
	    }

	    // context.putImageData( imageData, top_x, top_y );

	  }


	  function stackBlurCanvasRGB( imageData, top_x, top_y, width, height, radius )
	  {
	    // if ( isNaN(radius) || radius < 1 ) return;
	    // radius |= 0;

	    // var canvas  = document.getElementById( id );
	    // var context = canvas.getContext("2d");
	    // var imageData;

	    // try {
	    //   try {
	    //   imageData = context.getImageData( top_x, top_y, width, height );
	    //   } catch(e) {

	    //   // NOTE: this part is supposedly only needed if you want to work with local files
	    //   // so it might be okay to remove the whole try/catch block and just use
	    //   // imageData = context.getImageData( top_x, top_y, width, height );
	    //   try {
	    //     netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
	    //     imageData = context.getImageData( top_x, top_y, width, height );
	    //   } catch(e) {
	    //     alert("Cannot access local image");
	    //     throw new Error("unable to access local image data: " + e);
	    //     return;
	    //   }
	    //   }
	    // } catch(e) {
	    //   alert("Cannot access image");
	    //   throw new Error("unable to access image data: " + e);
	    // }

	    var pixels = imageData.data;

	    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum,
	    r_out_sum, g_out_sum, b_out_sum,
	    r_in_sum, g_in_sum, b_in_sum,
	    pr, pg, pb, rbs;

	    var div = radius + radius + 1;
	    var w4 = width << 2;
	    var widthMinus1  = width - 1;
	    var heightMinus1 = height - 1;
	    var radiusPlus1  = radius + 1;
	    var sumFactor = radiusPlus1 * ( radiusPlus1 + 1 ) / 2;

	    var stackStart = new BlurStack();
	    var stack = stackStart;
	    for ( i = 1; i < div; i++ )
	    {
	      stack = stack.next = new BlurStack();
	      if ( i == radiusPlus1 ) var stackEnd = stack;
	    }
	    stack.next = stackStart;
	    var stackIn = null;
	    var stackOut = null;

	    yw = yi = 0;

	    var mul_sum = mul_table[radius];
	    var shg_sum = shg_table[radius];

	    for ( y = 0; y < height; y++ )
	    {
	      r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;

	      r_out_sum = radiusPlus1 * ( pr = pixels[yi] );
	      g_out_sum = radiusPlus1 * ( pg = pixels[yi+1] );
	      b_out_sum = radiusPlus1 * ( pb = pixels[yi+2] );

	      r_sum += sumFactor * pr;
	      g_sum += sumFactor * pg;
	      b_sum += sumFactor * pb;

	      stack = stackStart;

	      for( i = 0; i < radiusPlus1; i++ )
	      {
	        stack.r = pr;
	        stack.g = pg;
	        stack.b = pb;
	        stack = stack.next;
	      }

	      for( i = 1; i < radiusPlus1; i++ )
	      {
	        p = yi + (( widthMinus1 < i ? widthMinus1 : i ) << 2 );
	        r_sum += ( stack.r = ( pr = pixels[p])) * ( rbs = radiusPlus1 - i );
	        g_sum += ( stack.g = ( pg = pixels[p+1])) * rbs;
	        b_sum += ( stack.b = ( pb = pixels[p+2])) * rbs;

	        r_in_sum += pr;
	        g_in_sum += pg;
	        b_in_sum += pb;

	        stack = stack.next;
	      }


	      stackIn = stackStart;
	      stackOut = stackEnd;
	      for ( x = 0; x < width; x++ )
	      {
	        pixels[yi]   = (r_sum * mul_sum) >> shg_sum;
	        pixels[yi+1] = (g_sum * mul_sum) >> shg_sum;
	        pixels[yi+2] = (b_sum * mul_sum) >> shg_sum;

	        r_sum -= r_out_sum;
	        g_sum -= g_out_sum;
	        b_sum -= b_out_sum;

	        r_out_sum -= stackIn.r;
	        g_out_sum -= stackIn.g;
	        b_out_sum -= stackIn.b;

	        p =  ( yw + ( ( p = x + radius + 1 ) < widthMinus1 ? p : widthMinus1 ) ) << 2;

	        r_in_sum += ( stackIn.r = pixels[p]);
	        g_in_sum += ( stackIn.g = pixels[p+1]);
	        b_in_sum += ( stackIn.b = pixels[p+2]);

	        r_sum += r_in_sum;
	        g_sum += g_in_sum;
	        b_sum += b_in_sum;

	        stackIn = stackIn.next;

	        r_out_sum += ( pr = stackOut.r );
	        g_out_sum += ( pg = stackOut.g );
	        b_out_sum += ( pb = stackOut.b );

	        r_in_sum -= pr;
	        g_in_sum -= pg;
	        b_in_sum -= pb;

	        stackOut = stackOut.next;

	        yi += 4;
	      }
	      yw += width;
	    }


	    for ( x = 0; x < width; x++ )
	    {
	      g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;

	      yi = x << 2;
	      r_out_sum = radiusPlus1 * ( pr = pixels[yi]);
	      g_out_sum = radiusPlus1 * ( pg = pixels[yi+1]);
	      b_out_sum = radiusPlus1 * ( pb = pixels[yi+2]);

	      r_sum += sumFactor * pr;
	      g_sum += sumFactor * pg;
	      b_sum += sumFactor * pb;

	      stack = stackStart;

	      for( i = 0; i < radiusPlus1; i++ )
	      {
	        stack.r = pr;
	        stack.g = pg;
	        stack.b = pb;
	        stack = stack.next;
	      }

	      yp = width;

	      for( i = 1; i <= radius; i++ )
	      {
	        yi = ( yp + x ) << 2;

	        r_sum += ( stack.r = ( pr = pixels[yi])) * ( rbs = radiusPlus1 - i );
	        g_sum += ( stack.g = ( pg = pixels[yi+1])) * rbs;
	        b_sum += ( stack.b = ( pb = pixels[yi+2])) * rbs;

	        r_in_sum += pr;
	        g_in_sum += pg;
	        b_in_sum += pb;

	        stack = stack.next;

	        if( i < heightMinus1 )
	        {
	          yp += width;
	        }
	      }

	      yi = x;
	      stackIn = stackStart;
	      stackOut = stackEnd;
	      for ( y = 0; y < height; y++ )
	      {
	        p = yi << 2;
	        pixels[p]   = (r_sum * mul_sum) >> shg_sum;
	        pixels[p+1] = (g_sum * mul_sum) >> shg_sum;
	        pixels[p+2] = (b_sum * mul_sum) >> shg_sum;

	        r_sum -= r_out_sum;
	        g_sum -= g_out_sum;
	        b_sum -= b_out_sum;

	        r_out_sum -= stackIn.r;
	        g_out_sum -= stackIn.g;
	        b_out_sum -= stackIn.b;

	        p = ( x + (( ( p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1 ) * width )) << 2;

	        r_sum += ( r_in_sum += ( stackIn.r = pixels[p]));
	        g_sum += ( g_in_sum += ( stackIn.g = pixels[p+1]));
	        b_sum += ( b_in_sum += ( stackIn.b = pixels[p+2]));

	        stackIn = stackIn.next;

	        r_out_sum += ( pr = stackOut.r );
	        g_out_sum += ( pg = stackOut.g );
	        b_out_sum += ( pb = stackOut.b );

	        r_in_sum -= pr;
	        g_in_sum -= pg;
	        b_in_sum -= pb;

	        stackOut = stackOut.next;

	        yi += width;
	      }
	    }

	    // context.putImageData( imageData, top_x, top_y );

	  }

	  function BlurStack()
	  {
	    this.r = 0;
	    this.g = 0;
	    this.b = 0;
	    this.a = 0;
	    this.next = null;
	  }
	  return {stackBlurCanvasRGBA:stackBlurCanvasRGBA, stackBlurCanvasRGB:stackBlurCanvasRGB};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(121), __webpack_require__(118), __webpack_require__(134), __webpack_require__(135), __webpack_require__(136), __webpack_require__(137), __webpack_require__(139)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Webgl) {
	  var Color, Matrix, Point, Rectangle, blendModeSetters, color, inspect, matrix, point, rect;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  inspect = Foundation.Inspect.inspect;
	  blendModeSetters = {
	    replace: function(gl) {
	      return gl.disable(gl.BLEND);
	    },
	    normal: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
	    },
	    add: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ONE, gl.ONE);
	    },
	    associative_add: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ZERO, gl.ONE);
	    },
	    alphamask: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ZERO, gl.SRC_ALPHA);
	    },
	    target_alphamask: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.DST_ALPHA, gl.ZERO);
	    },
	    destover: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ONE_MINUS_DST_ALPHA, gl.ONE);
	    },
	    sourcein: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
	    },
	    sub: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_REVERSE_SUBTRACT);
	      return gl.blendFunc(gl.ONE, gl.ONE);
	    },
	    erase: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);
	    },
	    mul: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.DST_COLOR, gl.ZERO);
	    },
	    inverse_alphamask: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);
	    },
	    inverse_alpha: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFuncSeparate(gl.ZERO, gl.ONE, gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);
	    }
	  };
	  return Webgl.ContextManager = (function(superClass) {
	    var k, v;

	    extend(ContextManager, superClass);

	    ContextManager.supportedCompositeModes = (function() {
	      var results;
	      results = [];
	      for (k in blendModeSetters) {
	        v = blendModeSetters[k];
	        results.push(k);
	      }
	      return results;
	    })();

	    function ContextManager(canvas) {
	      var contextOptions;
	      this.canvas = canvas;
	      this.canvas.addEventListener("webglcontextlost", function(event) {
	        return this.log("WEBGL CONTEXT LOST");
	      });
	      contextOptions = {
	        premultipliedAlpha: false
	      };
	      this.context = this.canvas.getContext("webgl", contextOptions) || this.canvas.getContext("experimental-webgl", contextOptions);
	      if (window.WebGLDebugUtils) {
	        this.log("!!!!!!!!!!!!!!!!!!! Using WebGLDebugUtils !!!!!!!!!!!!!");
	        this.context = WebGLDebugUtils.makeDebugContext(this.context);
	      }
	      Webgl.Detector.detect(function(message) {
	        if (!this.context) {
	          throw new Error(message);
	        }
	      });
	      this.offscreenRenderTarget = new Webgl.OffscreenRenderTarget(this);
	      this.shaders = {};
	      this.shaderPrograms = {};
	      this.renderers = {};
	      this.initBasicShaders();
	    }

	    ContextManager.setter({
	      viewport: function(r) {
	        return this.context.viewport(r.x, r.y, r.w, r.h);
	      }
	    });

	    ContextManager.getter({
	      bitmapClass: function() {
	        return Webgl.Bitmap;
	      }
	    });

	    ContextManager.prototype.newBitmap = function(size) {
	      return new Webgl.Bitmap(this, size);
	    };

	    ContextManager.prototype.shaderProgram = function(name) {
	      var base;
	      return (base = this.shaderPrograms)[name] || (base[name] = this.compileShaderProgram(name));
	    };

	    ContextManager.prototype.renderer = function(name) {
	      var base;
	      return (base = this.renderers)[name] || (base[name] = this.buildRenderer(name));
	    };

	    ContextManager.prototype.buildRenderer = function(name) {
	      var program, rendererClass;
	      program = this.shaderProgram(name);
	      rendererClass = program.rendererClass || Webgl.ShaderRenderer;
	      return new rendererClass(this, program);
	    };

	    ContextManager.prototype.compileShaderProgram = function(name) {
	      var definition;
	      definition = Webgl.ShaderPrograms[name];
	      if (!definition) {
	        throw new Error("ShaderProgram " + (inspect(name)) + " not found in Webgl.ShaderPrograms");
	      }
	      return new Webgl.ShaderProgram(this.context, name, new Webgl.Shader(this.context, name + "FragmentShader", this.context.FRAGMENT_SHADER, definition.fragment), new Webgl.Shader(this.context, name + "VertexShader", this.context.VERTEX_SHADER, definition.vertex), definition.rendererClass);
	    };

	    ContextManager.prototype.newTexture = function(a) {
	      var gl, loadPixelDataFrom, size, texture;
	      size = a instanceof Point ? a : a instanceof Canvas.Bitmap ? (loadPixelDataFrom = a.canvas, a.size) : a instanceof HTMLCanvasElement ? (loadPixelDataFrom = a, point(a.width, a.height)) : a instanceof HTMLImageElement ? (loadPixelDataFrom = a, point(a.width, a.height)) : void 0;
	      if (!(size.x >= 1 && size.y >= 1)) {
	        throw new Error("size must be >= 1,1");
	      }
	      gl = this.context;
	      texture = gl.createTexture();
	      gl.bindTexture(gl.TEXTURE_2D, texture);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
	      if (loadPixelDataFrom) {
	        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, loadPixelDataFrom);
	      } else {
	        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size.width, size.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
	      }
	      return [size, texture];
	    };

	    ContextManager.prototype.bindGlobalRenderTarget = function() {
	      this.context.bindTexture(this.context.TEXTURE_2D, null);
	      this.context.bindFramebuffer(this.context.FRAMEBUFFER, null);
	      return this.context.bindRenderbuffer(this.context.RENDERBUFFER, null);
	    };

	    ContextManager.prototype.setRenderTarget = function(bitmap) {
	      var clippingArea, height, size;
	      if (this.renderTarget === bitmap) {
	        return;
	      }
	      if (bitmap.texture != null) {
	        this.offscreenRenderTarget.bind(bitmap.texture);
	      } else {
	        this.bindGlobalRenderTarget();
	      }
	      size = bitmap.size;
	      if (clippingArea = bitmap.clippingArea) {
	        height = size.y;
	        this.context.viewport(clippingArea.x, height - clippingArea.bottom, clippingArea.w, clippingArea.h);
	      } else {
	        this.context.viewport(0, 0, size.x, size.y);
	      }
	      return this.renderTarget = bitmap;
	    };

	    ContextManager.prototype.setGLBlender = function(mode) {
	      var blendModeSetter;
	      if (this.blenderMode === mode) {
	        return;
	      }
	      blendModeSetter = blendModeSetters[mode];
	      if (!blendModeSetter) {
	        throw "invalid blend mode: " + mode;
	      }
	      blendModeSetter(this.context);
	      return this.blenderMode = mode;
	    };

	    ContextManager.prototype.initBasicShaders = function() {
	      this.uniformColorRenderer = this.renderer("uniformColor");
	      this.texturedUniformColorRenderer = this.renderer("texturedUniformColor");
	      return this.coloredRenderer = this.renderer("colored");
	    };

	    return ContextManager;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(118)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Webgl) {
	  var rawErrorLog;
	  rawErrorLog = Foundation.Log.rawErrorLog;
	  return Webgl.Shader = (function(superClass) {
	    extend(Shader, superClass);

	    function Shader(context, name, shaderType, shaderCode) {
	      this.name = name;
	      this.shaderType = shaderType;
	      this.context = context;
	      this.shaderCode = shaderCode;
	      this.compile();
	    }

	    Shader.prototype.compile = function() {
	      this.shader = this.context.createShader(this.shaderType);
	      this.context.shaderSource(this.shader, this.shaderCode);
	      this.context.compileShader(this.shader);
	      return this.reportCompileErrors();
	    };

	    Shader.prototype.reportCompileErrors = function() {
	      var message;
	      if (!this.context.getShaderParameter(this.shader, this.context.COMPILE_STATUS)) {
	        message = this.context.getShaderInfoLog(this.shader);
	        rawErrorLog("Shader name:" + this.name + ", type:" + this.shaderType);
	        rawErrorLog("Compile error:\n" + message);
	        return rawErrorLog("Shader code:\n" + (this.shaderCode.replace(";    ", ";\n    ")));
	      }
	    };

	    return Shader;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(118)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Webgl) {
	  return Webgl.OffscreenRenderTarget = (function(superClass) {
	    extend(OffscreenRenderTarget, superClass);

	    function OffscreenRenderTarget(contextManager) {
	      this.contextManager = contextManager;
	      this.context = this.contextManager.context;
	      this.setup();
	    }

	    OffscreenRenderTarget.prototype.setup = function() {
	      this.framebuffer = this.context.createFramebuffer();
	      return this.renderbuffer = this.context.createRenderbuffer();
	    };

	    OffscreenRenderTarget.prototype.bind = function(texture) {
	      this.context.bindTexture(this.context.TEXTURE_2D, texture);
	      this.context.bindFramebuffer(this.context.FRAMEBUFFER, this.framebuffer);
	      this.context.bindRenderbuffer(this.context.RENDERBUFFER, this.renderbuffer);
	      return this.context.framebufferTexture2D(this.context.FRAMEBUFFER, this.context.COLOR_ATTACHMENT0, this.context.TEXTURE_2D, texture, 0);
	    };

	    return OffscreenRenderTarget;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(118)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Webgl) {
	  var rawErrorLog;
	  rawErrorLog = Foundation.Log.rawErrorLog;
	  return Webgl.ShaderProgram = (function(superClass) {
	    extend(ShaderProgram, superClass);

	    function ShaderProgram(context, name, fragmentShader, vertexShader, rendererClass) {
	      this.name = name;
	      this.context = context;
	      this.fragmentShader = fragmentShader;
	      this.vertexShader = vertexShader;
	      this.rendererClass = rendererClass;
	      this.link();
	    }

	    ShaderProgram.getter({
	      glShaderType: function() {
	        if (this.shaderType === "vertex") {
	          return this.context.VERTEX_SHADER;
	        } else {
	          return this.context.FRAGMENT_SHADER;
	        }
	      }
	    });

	    ShaderProgram.prototype.link = function() {
	      this.program = this.context.createProgram();
	      this.context.attachShader(this.program, this.fragmentShader.shader);
	      this.context.attachShader(this.program, this.vertexShader.shader);
	      this.context.linkProgram(this.program);
	      return this.reportLinkErrors();
	    };

	    ShaderProgram.prototype.reportLinkErrors = function() {
	      var message;
	      if (!this.context.getProgramParameter(this.program, this.context.LINK_STATUS)) {
	        message = this.context.getProgramInfoLog(this.program);
	        rawErrorLog("Program name:" + this.name + " vertexShader: " + this.vertexShader.name + " fragmentShader: " + this.fragmentShader.name);
	        return rawErrorLog("Link error:\n" + message);
	      }
	    };

	    ShaderProgram.prototype.use = function() {
	      return this.context.useProgram(this.program);
	    };

	    return ShaderProgram;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(118), __webpack_require__(138), __webpack_require__(140)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Webgl) {
	  var vertexShaderCommonCode, vertexShaderCommonDeclarations;
	  vertexShaderCommonDeclarations = "attribute vec2 vertexLoc; uniform mat3 vertexMatrix;";
	  vertexShaderCommonCode = "vec3 l = vec3(vertexLoc, 1) * vertexMatrix; gl_Position = vec4(l, 1);";
	  return Webgl.ShaderPrograms = (function() {
	    function ShaderPrograms() {}

	    ShaderPrograms.texturedUniformColor = {
	      rendererClass: Webgl.ShaderRendererTextured,
	      vertex: vertexShaderCommonDeclarations + " attribute vec2 textureLoc; varying vec2 interpolatedTextureLoc; void main(void) { " + vertexShaderCommonCode + " interpolatedTextureLoc = textureLoc; }",
	      fragment: "precision highp float; varying vec2 interpolatedTextureLoc; uniform sampler2D texture1; uniform vec4 color; void main(void) {gl_FragColor = texture2D(texture1, interpolatedTextureLoc) * color;}"
	    };

	    ShaderPrograms.uniformColor = {
	      vertex: vertexShaderCommonDeclarations + " void main(void) { " + vertexShaderCommonCode + " }",
	      fragment: "precision highp float; uniform vec4 color; void main(void) {gl_FragColor = color;}"
	    };

	    ShaderPrograms.colored = {
	      rendererClass: Webgl.ShaderRendererColored,
	      vertex: vertexShaderCommonDeclarations + " attribute vec4 vertexColor; varying vec4 interpolatedColor; uniform vec4 color; void main(void) { " + vertexShaderCommonCode + " interpolatedColor = vertexColor * color; }",
	      fragment: "precision highp float; varying vec4 interpolatedColor; void main(void) {gl_FragColor = interpolatedColor;}"
	    };

	    return ShaderPrograms;

	  })();
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(121), __webpack_require__(118), __webpack_require__(139)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Webgl, ShaderRenderer) {
	  var Color, Matrix, Point, Rectangle, color, matrix, point, rect;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  return Webgl.ShaderRendererColored = (function(superClass) {
	    extend(ShaderRendererColored, superClass);

	    function ShaderRendererColored() {
	      ShaderRendererColored.__super__.constructor.apply(this, arguments);
	      this.glColorBuffer = this.context.createBuffer();
	    }

	    ShaderRendererColored.prototype.addColor = function(c) {
	      return this.colorData = this.colorData.concat([c.r, c.g, c.b, c.a]);
	    };

	    ShaderRendererColored.prototype.shaderAttributeNames = function() {
	      return ShaderRendererColored.__super__.shaderAttributeNames.apply(this, arguments).concat(["vertexColor"]);
	    };

	    ShaderRendererColored.prototype.reset = function() {
	      ShaderRendererColored.__super__.reset.apply(this, arguments);
	      this.float32ArrayColorData = null;
	      this.colorData = [];
	      return this.color = null;
	    };

	    ShaderRendererColored.prototype.bindEverything = function() {
	      ShaderRendererColored.__super__.bindEverything.apply(this, arguments);
	      return this.bindColors();
	    };

	    ShaderRendererColored.prototype.bindColors = function() {
	      this.float32ArrayColorData || (this.float32ArrayColorData = new Float32Array(this.colorData));
	      return this.bindFloatArray(this.vertexColorAttribLocation, this.float32ArrayColorData, 4, this.glColorBuffer);
	    };

	    return ShaderRendererColored;

	  })(ShaderRenderer);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(121), __webpack_require__(118), __webpack_require__(133)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Webgl, ContextManager) {
	  var Color, Matrix, Point, Rectangle, color, matrix, point, rect;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  return Webgl.ShaderRenderer = (function(superClass) {
	    extend(ShaderRenderer, superClass);

	    function ShaderRenderer(contextManager, shaderProgram) {
	      this.contextManager = contextManager;
	      this.context = contextManager.context;
	      this.shaderProgram = shaderProgram;
	      this.glProgram = shaderProgram.program;
	      this.uniformLocations = {};
	      this.attributeLocations = {};
	      this.glVertexBuffer = this.context.createBuffer();
	      this.initShaderLocations();
	    }

	    ShaderRenderer.prototype.shaderAttributeNames = function() {
	      return ["vertexLoc"];
	    };

	    ShaderRenderer.prototype.shaderUniformNames = function() {
	      return ["color", "vertexMatrix"];
	    };

	    ShaderRenderer.prototype.initShaderLocations = function() {
	      var j, k, len, len1, name, ref, ref1, results;
	      ref = this.shaderAttributeNames();
	      for (j = 0, len = ref.length; j < len; j++) {
	        name = ref[j];
	        this[name + "AttribLocation"] = this.context.getAttribLocation(this.glProgram, name);
	      }
	      ref1 = this.shaderUniformNames();
	      results = [];
	      for (k = 0, len1 = ref1.length; k < len1; k++) {
	        name = ref1[k];
	        results.push(this[name + "UniformLocation"] = this.context.getUniformLocation(this.glProgram, name));
	      }
	      return results;
	    };

	    ShaderRenderer.prototype.startTriangleStrip = function(vertexCount) {
	      this.drawMode = this.context.TRIANGLE_STRIP;
	      return this.reset(vertexCount);
	    };

	    ShaderRenderer.prototype.startTriangleFan = function(vertexCount) {
	      this.drawMode = this.context.TRIANGLE_FAN;
	      return this.reset(vertexCount);
	    };

	    ShaderRenderer.prototype.render = function() {
	      this.shaderProgram.use();
	      this.bindEverything();
	      return this.drawArrays();
	    };

	    ShaderRenderer.prototype.drawArrays = function() {
	      return this.context.drawArrays(this.drawMode, 0, this.vertexCount);
	    };

	    ShaderRenderer.prototype.renderTriangleFan = function(vertexCount, f) {
	      this.startTriangleFan(vertexCount);
	      f(this);
	      return this.render();
	    };

	    ShaderRenderer.prototype.renderTriangleStrip = function(vertexCount, f) {
	      this.startTriangleStrip(vertexCount);
	      f(this);
	      return this.render();
	    };

	    ShaderRenderer.prototype.renderRectangle = function(m, r, c, f) {
	      var i, va;
	      this.startTriangleFan(4);
	      this.color = c;
	      va = this.float32ArrayVertexData;
	      i = 0;
	      this.matrix = m;
	      va[0] = r.left;
	      va[1] = r.top;
	      va[2] = r.right;
	      va[3] = r.top;
	      va[4] = r.right;
	      va[5] = r.bottom;
	      va[6] = r.left;
	      va[7] = r.bottom;
	      if (f) {
	        f(this);
	      }
	      return this.render();
	    };

	    ShaderRenderer.prototype.bindUniformInt = function(uniformLocation, v) {
	      return this.context.uniform1i(uniformLocation, v);
	    };

	    ShaderRenderer.prototype.bindUniformFloat = function(uniformLocation, v) {
	      return this.context.uniform1f(uniformLocation, v);
	    };

	    ShaderRenderer.prototype.bindUniformPoint = function(uniformLocation, p) {
	      return this.context.uniform2f(uniformLocation, p.x, p.y);
	    };

	    ShaderRenderer.prototype.bindUniformColor = function(uniformLocation, c) {
	      if (typeof c === "number") {
	        return this.context.uniform4f(uniformLocation, c, c, c, c);
	      } else {
	        return this.context.uniform4f(uniformLocation, c.r, c.g, c.b, c.a);
	      }
	    };

	    ShaderRenderer.prototype.bindUniformVec2 = function(uniformLocation, a, b) {
	      return this.context.uniform4f(uniformLocation, a, b);
	    };

	    ShaderRenderer.prototype.bindUniformVec4 = function(uniformLocation, a, b, c, d) {
	      return this.context.uniform4f(uniformLocation, a, b, c, d);
	    };

	    ShaderRenderer.prototype.bindUniformMatrix = function(uniformLocation, m) {
	      m.fillFloat32Array(this.matrixData);
	      return this.context.uniformMatrix3fv(uniformLocation, false, this.matrixData);
	    };

	    ShaderRenderer.prototype.bindFloatArray = function(attribLocation, float32Array, floatsPerVector, glBuffer) {
	      var gl;
	      gl = this.context;
	      gl.bindBuffer(gl.ARRAY_BUFFER, glBuffer);
	      gl.bufferData(gl.ARRAY_BUFFER, float32Array, gl.STATIC_DRAW);
	      gl.enableVertexAttribArray(attribLocation);
	      gl.bindBuffer(gl.ARRAY_BUFFER, glBuffer);
	      return gl.vertexAttribPointer(attribLocation, floatsPerVector, gl.FLOAT, false, 0, 0);
	    };

	    ShaderRenderer.prototype.reset = function(vertexCount) {
	      if (!this.float32ArrayVertexData || this.float32ArrayVertexData.length < vertexCount * 2) {
	        this.float32ArrayVertexData = new Float32Array(vertexCount * 2);
	      }
	      this.vertexCount = vertexCount;
	      this.color = 1;
	      return this.matrixData || (this.matrixData = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 0]));
	    };

	    ShaderRenderer.prototype.bindEverything = function() {
	      this.bindVerticies();
	      this.bindGeometry();
	      return this.bindColor();
	    };

	    ShaderRenderer.prototype.bindVerticies = function() {
	      return this.bindFloatArray(this.vertexLocAttribLocation, this.float32ArrayVertexData, 2, this.glVertexBuffer);
	    };

	    ShaderRenderer.prototype.bindColor = function() {
	      return this.bindUniformColor(this.colorUniformLocation, this.color);
	    };

	    ShaderRenderer.prototype.bindGeometry = function() {
	      var drawMatrix, m;
	      drawMatrix = this.contextManager.renderTarget.drawMatrix;
	      m = this.matrix ? (!(this.matrix instanceof Matrix) ? this.matrix = matrix(this.matrix) : void 0, this.matrix.mul(drawMatrix)) : drawMatrix;
	      return this.bindUniformMatrix(this.vertexMatrixUniformLocation, m);
	    };

	    return ShaderRenderer;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(121), __webpack_require__(118), __webpack_require__(133)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Webgl, ContextManager) {
	  var Color, Matrix, Point, Rectangle, color, matrix, point, rect;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  return Webgl.ShaderRendererTextured = (function(superClass) {
	    extend(ShaderRendererTextured, superClass);

	    function ShaderRendererTextured() {
	      ShaderRendererTextured.__super__.constructor.apply(this, arguments);
	      this.glTextureBuffer = this.context.createBuffer();
	    }

	    ShaderRendererTextured.prototype.addTextureLocation = function(loc) {
	      this.textureLocations || (this.textureLocations = []);
	      return loc.appendToVector(this.textureLocations);
	    };

	    ShaderRendererTextured.prototype.shaderAttributeNames = function() {
	      return ShaderRendererTextured.__super__.shaderAttributeNames.apply(this, arguments).concat(["textureLoc"]);
	    };

	    ShaderRendererTextured.prototype.shaderUniformNames = function() {
	      return ShaderRendererTextured.__super__.shaderUniformNames.apply(this, arguments).concat(["texture1"]);
	    };

	    ShaderRendererTextured.prototype.allocateTextureLocations = function(numLocations) {
	      return this.float32ArrayTextureData = new Float32Array(numLocations * 2);
	    };

	    ShaderRendererTextured.prototype.reset = function() {
	      ShaderRendererTextured.__super__.reset.apply(this, arguments);
	      this.float32ArrayTextureData = null;
	      this.textureLocations = null;
	      return this.texture = null;
	    };

	    ShaderRendererTextured.prototype.bindTexture = function() {
	      var gl;
	      gl = this.context;
	      gl.activeTexture(gl.TEXTURE0);
	      gl.bindTexture(gl.TEXTURE_2D, this.texture);
	      this.bindUniformInt(this.texture1UniformLocation, 0);
	      this.float32ArrayTextureData || (this.float32ArrayTextureData = new Float32Array(this.textureLocations));
	      return this.bindFloatArray(this.textureLocAttribLocation, this.float32ArrayTextureData, 2, this.glTextureBuffer);
	    };

	    ShaderRendererTextured.prototype.bindEverything = function() {
	      ShaderRendererTextured.__super__.bindEverything.apply(this, arguments);
	      return this.bindTexture();
	    };

	    return ShaderRendererTextured;

	  })(Webgl.ShaderRenderer);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(118), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Webgl, Foundation) {
	  var helpMessage;
	  helpMessage = "This web browser does not support Webgl, or it is disabled. We recommend using Chrome (http://www.google.com/chrome) or Firefox (http://www.mozilla.org/firefox). You might also try updating your video driver.";
	  return Webgl.Detector = (function(superClass) {
	    extend(Detector, superClass);

	    function Detector() {
	      return Detector.__super__.constructor.apply(this, arguments);
	    }

	    Detector.detect = function(onFailure) {
	      var canvas, context;
	      if (onFailure == null) {
	        onFailure = null;
	      }
	      if (!window.WebGLRenderingContext) {
	        this.log(helpMessage);
	        if (onFailure) {
	          onFailure(helpMessage);
	        }
	        return false;
	      }
	      canvas = document.createElement('canvas');
	      context = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
	      if (!context) {
	        this.log(helpMessage);
	        if (onFailure) {
	          onFailure(helpMessage);
	        }
	        return false;
	      }
	      return true;
	    };

	    return Detector;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(121);


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	var Events;

	module.exports = Events = __webpack_require__(144);

	Events.GestureRecognizer = __webpack_require__(145);

	Events.KeyEvent = __webpack_require__(147);

	Events.PointerEventManager = __webpack_require__(148);

	Events.PointerEvent = __webpack_require__(149);

	Events.Pointer = __webpack_require__(146);

	Events.finishLoad(["GestureRecognizer", "KeyEvent", "PointerEventManager", "PointerEvent", "Pointer"]);


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Events || (Engine.Events = (function(superClass) {
	  extend(Events, superClass);

	  function Events() {
	    return Events.__super__.constructor.apply(this, arguments);
	  }

	  Events.namespace = Engine;

	  Events.namespacePath = "Neptune.Art.Engine.Events";

	  return Events;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Events);


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(146)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Pointer) {
	  var BaseObject, GestureRecognizer, abs, clone, first, inspect, isFunction, isPlainObject, matrix, objectWithout, peek, point, pointerDeadZone, pointerDeadZoneSquared, rect, select;
	  inspect = Foundation.inspect, clone = Foundation.clone, peek = Foundation.peek, first = Foundation.first, BaseObject = Foundation.BaseObject, isPlainObject = Foundation.isPlainObject, clone = Foundation.clone, abs = Foundation.abs, isFunction = Foundation.isFunction, select = Foundation.select, objectWithout = Foundation.objectWithout;
	  point = Atomic.point, rect = Atomic.rect, matrix = Atomic.matrix;
	  pointerDeadZone = Pointer.pointerDeadZone;
	  pointerDeadZoneSquared = pointerDeadZone * pointerDeadZone;
	  return GestureRecognizer = (function(superClass) {
	    var pointerHandlers;

	    extend(GestureRecognizer, superClass);

	    GestureRecognizer.createGestureRecognizer = function(o) {
	      var gr;
	      gr = new GestureRecognizer(o);
	      return gr.getPointerHandlers();
	    };

	    pointerHandlers = ["pointerDown", "pointerUp", "pointerMove", "pointerCancel"];

	    function GestureRecognizer(gestureRecognizers) {
	      this._nonGestureHandlers = select(gestureRecognizers, pointerHandlers);
	      this._gestureRecognizers = objectWithout(gestureRecognizers, pointerHandlers);
	      this._activeGesture = null;
	      this._lastActiveGesture = null;
	      this._startEvent = null;
	      GestureRecognizer.__super__.constructor.apply(this, arguments);
	      this.setupDefaultRecognizers();
	      this._startEvent = null;
	    }

	    GestureRecognizer.prototype.setupDefaultRecognizers = function() {
	      var k, ref, results, v;
	      ref = this._gestureRecognizers;
	      results = [];
	      for (k in ref) {
	        v = ref[k];
	        switch (k) {
	          case "horizontal":
	            results.push(v.recognize || (v.recognize = function(e) {
	              var d;
	              d = e.delta;
	              return abs(d.y) < abs(d.x);
	            }));
	            break;
	          case "vertical":
	            results.push(v.recognize || (v.recognize = function(e) {
	              var d;
	              d = e.delta;
	              return abs(d.y) > abs(d.x);
	            }));
	            break;
	          default:
	            if (!isFunction(v.recognize)) {
	              throw new Error("'recognize' function required for recognizer '" + k + "'");
	            } else {
	              results.push(void 0);
	            }
	        }
	      }
	      return results;
	    };

	    GestureRecognizer.getter({
	      pointerHandlers: function() {
	        return {
	          pointerDown: (function(_this) {
	            return function(e) {
	              var base, ref;
	              if (typeof (base = _this._nonGestureHandlers).pointerDown === "function") {
	                base.pointerDown(e);
	              }
	              _this._startEvent = e.newEvent ? e.newEvent() : clone(e);
	              if ((ref = _this._lastActiveGesture) != null ? typeof ref.resume === "function" ? ref.resume(e) : void 0 : void 0) {
	                return _this._resumeGesture(e);
	              }
	            };
	          })(this),
	          pointerMove: (function(_this) {
	            return function(e) {
	              var ag, base, base1;
	              if (ag = _this._activeGesture) {
	                return typeof ag.move === "function" ? ag.move(e) : void 0;
	              } else {
	                if (_this._startEvent && !e.pointer.stayedWithinDeadzone) {
	                  _this._startGesture(e);
	                  return typeof (base = _this._nonGestureHandlers).pointerCancel === "function" ? base.pointerCancel(e) : void 0;
	                } else {
	                  return typeof (base1 = _this._nonGestureHandlers).pointerMove === "function" ? base1.pointerMove(e) : void 0;
	                }
	              }
	            };
	          })(this),
	          pointerUp: (function(_this) {
	            return function(e) {
	              var base, base1;
	              if (_this._activeGesture) {
	                if (typeof (base = _this._activeGesture).end === "function") {
	                  base.end(e);
	                }
	                return _this._activeGesture = null;
	              } else {
	                return typeof (base1 = _this._nonGestureHandlers).pointerUp === "function" ? base1.pointerUp(e) : void 0;
	              }
	            };
	          })(this),
	          pointerCancel: (function(_this) {
	            return function(e) {
	              var base, base1;
	              if (_this._activeGesture) {
	                if (typeof (base = _this._activeGesture).cancel === "function") {
	                  base.cancel(e);
	                }
	                _this._activeGesture = null;
	              } else {
	                if (typeof (base1 = _this._nonGestureHandlers).pointerCancel === "function") {
	                  base1.pointerCancel(e);
	                }
	              }
	              return _this._startEvent = null;
	            };
	          })(this)
	        };
	      }
	    });

	    GestureRecognizer.prototype._resumeGesture = function(e) {
	      var base, ref;
	      if ((ref = e.target) != null) {
	        if (typeof ref.capturePointerEvents === "function") {
	          ref.capturePointerEvents();
	        }
	      }
	      this._activeGesture = this._lastActiveGesture;
	      return typeof (base = this._activeGesture).begin === "function" ? base.begin(this._startEvent) : void 0;
	    };

	    GestureRecognizer.prototype._startGesture = function(e) {
	      var base, base1, k, ref, ref1, v;
	      ref = this._gestureRecognizers;
	      for (k in ref) {
	        v = ref[k];
	        if (v.recognize(e)) {
	          this._lastActiveGesture = this._activeGesture = v;
	          break;
	        }
	      }
	      if (this._activeGesture) {
	        if ((ref1 = e.target) != null) {
	          if (typeof ref1.capturePointerEvents === "function") {
	            ref1.capturePointerEvents();
	          }
	        }
	        if (typeof (base = this._activeGesture).begin === "function") {
	          base.begin(this._startEvent);
	        }
	        return typeof (base1 = this._activeGesture).move === "function" ? base1.move(e) : void 0;
	      } else {
	        return this._startEvent = null;
	      }
	    };

	    return GestureRecognizer;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic) {
	  var BaseObject, Pointer, clone, first, inspect, matrix, peek, point, rect;
	  inspect = Foundation.inspect, clone = Foundation.clone, peek = Foundation.peek, first = Foundation.first, BaseObject = Foundation.BaseObject;
	  point = Atomic.point, rect = Atomic.rect, matrix = Atomic.matrix;
	  return Pointer = (function(superClass) {
	    var emptyObject, pointerDeadZone, pointerDeadZoneSquared;

	    extend(Pointer, superClass);

	    Pointer.pointerDeadZone = pointerDeadZone = 10;

	    Pointer.pointerDeadZoneSquared = pointerDeadZoneSquared = pointerDeadZone * pointerDeadZone;

	    function Pointer(id, location, lastLocation, firstLocation, stayedWithinDeadzone) {
	      if (stayedWithinDeadzone == null) {
	        stayedWithinDeadzone = true;
	      }
	      this.id = id;
	      this.location = location;
	      this.lastLocation = lastLocation || location;
	      this.firstLocation = firstLocation || location;
	      this.stayedWithinDeadzone = stayedWithinDeadzone;
	    }

	    emptyObject = {};

	    Pointer.prototype.newPointer = function(options) {
	      if (options == null) {
	        options = emptyObject;
	      }
	      return new Pointer(options.id || this.id, options.location || this.location, options.lastLocation || this.lastLocation, options.firstLocation || this.firstLocation, options.stayedWithinDeadzone || this.stayedWithinDeadzone);
	    };

	    Pointer.prototype.moved = function(newLocation) {
	      var stayedWithinDeadzone;
	      stayedWithinDeadzone = this.stayedWithinDeadzone && newLocation.distanceSquared(this.firstLocation) <= pointerDeadZoneSquared;
	      return new Pointer(this.id, newLocation, this.location, this.firstLocation, stayedWithinDeadzone);
	    };

	    Pointer.prototype.locationIn = function(element) {
	      if (element) {
	        return element.absToElementMatrix.transform(this.location);
	      } else {
	        return this.location;
	      }
	    };

	    Pointer.prototype.lastLocationIn = function(element) {
	      if (element) {
	        return element.absToElementMatrix.transform(this.lastLocation);
	      } else {
	        return this.lastLocation;
	      }
	    };

	    Pointer.prototype.firstLocationIn = function(element) {
	      if (element) {
	        return element.absToElementMatrix.transform(this.firstLocation);
	      } else {
	        return this.firstLocation;
	      }
	    };

	    Pointer.prototype.deltaIn = function(element) {
	      if (element) {
	        return element.absToElementMatrix.transformDifference(this.location, this.lastLocation);
	      } else {
	        return this.location.sub(this.lastLocation);
	      }
	    };

	    Pointer.prototype.totalDeltaIn = function(element) {
	      if (element) {
	        return element.absToElementMatrix.transformDifference(this.location, this.firstLocation);
	      } else {
	        return this.location.sub(this.firstLocation);
	      }
	    };

	    return Pointer;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(100)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Events) {
	  var Color, KeyEvent, Matrix, Point, Rectangle, clone, color, inspect, k, keyCodesToKeys, keysToKeyCodes, matrix, point, rect, v;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  inspect = Foundation.Inspect.inspect;
	  clone = Foundation.Clone.clone;
	  keysToKeyCodes = {
	    backspace: 8,
	    tab: 9,
	    enter: 13,
	    shift: 16,
	    ctrl: 17,
	    alt: 18,
	    pause_break: 19,
	    caps_lock: 20,
	    escape: 27,
	    page_up: 33,
	    page_down: 34,
	    end: 35,
	    home: 36,
	    left_arrow: 37,
	    up_arrow: 38,
	    right_arrow: 39,
	    down_arrow: 40,
	    insert: 45,
	    "delete": 46,
	    " ": 32,
	    "0": 48,
	    "1": 49,
	    "2": 50,
	    "3": 51,
	    "4": 52,
	    "5": 53,
	    "6": 54,
	    "7": 55,
	    "8": 56,
	    "9": 57,
	    a: 65,
	    b: 66,
	    c: 67,
	    d: 68,
	    e: 69,
	    f: 70,
	    g: 71,
	    h: 72,
	    i: 73,
	    j: 74,
	    k: 75,
	    l: 76,
	    m: 77,
	    n: 78,
	    o: 79,
	    p: 80,
	    q: 81,
	    r: 82,
	    s: 83,
	    t: 84,
	    u: 85,
	    v: 86,
	    w: 87,
	    x: 88,
	    y: 89,
	    z: 90,
	    left_window_key: 91,
	    right_window_key: 92,
	    select_key: 93,
	    numpad_0: 96,
	    numpad_1: 97,
	    numpad_2: 98,
	    numpad_3: 99,
	    numpad_4: 100,
	    numpad_5: 101,
	    numpad_6: 102,
	    numpad_7: 103,
	    numpad_8: 104,
	    numpad_9: 105,
	    multiply: 106,
	    add: 107,
	    subtract: 109,
	    decimal_point: 110,
	    divide: 111,
	    f1: 112,
	    f2: 113,
	    f3: 114,
	    f4: 115,
	    f5: 116,
	    f6: 117,
	    f7: 118,
	    f8: 119,
	    f9: 120,
	    f10: 121,
	    f11: 122,
	    f12: 123,
	    num_lock: 144,
	    scroll_lock: 145,
	    semi_colon: 186,
	    equal_sign: 187,
	    comma: 188,
	    dash: 189,
	    period: 190,
	    forward_slash: 191,
	    grave_accent: 192,
	    open_bracket: 219,
	    back_slash: 220,
	    close_braket: 221,
	    single_quote: 222
	  };
	  keyCodesToKeys = [];
	  for (k in keysToKeyCodes) {
	    v = keysToKeyCodes[k];
	    keyCodesToKeys[v] = k;
	  }
	  return KeyEvent = (function(superClass) {
	    extend(KeyEvent, superClass);

	    KeyEvent.keysToKeyCodes = keysToKeyCodes;

	    KeyEvent.keyCodesToKeys = keyCodesToKeys;

	    KeyEvent.keysDown = {};

	    KeyEvent.keysDown.length = 0;

	    function KeyEvent() {
	      this.keyCode = null;
	      this.typed = null;
	      KeyEvent.__super__.constructor.apply(this, arguments);
	      if (this.keyCode) {
	        this.key = keyCodesToKeys[this.keyCode];
	      }
	      switch (this.type) {
	        case "keyDown":
	          if (!this.keysDown[this.key]) {
	            this.keysDown[this.key] = true;
	            this.keysDown.length++;
	          }
	          break;
	        case "keyUp":
	          if (this.keysDown[this.key]) {
	            this.keysDown[this.key] = false;
	            this.keysDown.length--;
	          }
	      }
	    }

	    KeyEvent.getter({
	      keysDown: function() {
	        return KeyEvent.keysDown;
	      }
	    });

	    return KeyEvent;

	  })(Events.Event);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	PointerEventManager

	All Event Types:
	  pointerCancel
	  pointerMove
	  pointerUp
	  pointerDown
	  mouseMove
	  mouseIn
	  mouseOut
	  focus
	  blur

	DESIGN NOTES
	Purpose:
	  Support Touch and Mouse events.
	  Support a common set of events for the subset of Touch and Mouse semantics that overlap:
	    single-touch / single-mouse-button-down

	  Synthesize events:
	    pointerClick
	      triggerd if active-locations went from 0 to non-0 and back to 0 without moving outside the pointerDeadZone

	Differences between Touch events and Mouse events
	  Touch Events
	    can have 0 or more "active" locations. Does not have "inactive" locations.
	    locations can be added or removed. A removed location is not "re-added", only "new" locations are added.
	  Mouse Events
	    can have 1 active or 1 "inactive" location
	    the "active" location has state:
	      what mouse buttons are down

	EVENT ORDER
	  Parents get events before children.
	  If a parent captures a pointer during an event, children will NOT see the event.

	TODO
	  updateMousePath should be called anytime Elements are added, removed or any other change that might effect the mousePath

	HOW IT WORKS
	  pointerDown, pointerUp and pointerMove events all happen when a pointer is being ACTIVE:
	    touchs are always "active"
	    mouse is "active" if one or more buttons are down (currently only left button is supported)

	  multi-touch:
	    Each active touch sends its own events. Ex:
	      these sequence of real-world events:
	        index-finger-touch-start
	        middle-finger-touch-start
	        hand-moves-and-so-do-both-fingers
	        remove-all-fingers
	      results in an event sequence like this:
	        touch_down id: 7
	        touch_down id: 3
	        touch_move id: 7
	        touch_move id: 3
	        touch_up   id: 7
	        touch_down id: 3

	      NOTE: the ids are abitrary, but consistent across events for a touch sequence
	      NOTE: Because of this, if you listen to "pointerMove" without inspecting the pointer's id,
	        you might get more move events than you are expecting.

	  mouseMove is sent every time the mouse moves regardless of button status
	    NOTE: mouseMove is never sent on a touch device.

	GUARANTEES
	  All pointer movement will send mouseMove events!
	    This isn't true with the raw DOM events. Mouse-Pointer up/down and touchEnd can all show locations different from the last move event.
	    This means:
	      On desktop, if you are tracking "null" move events (inactive pointer), then you'll be up-to-date with the pointer-location when a click happens.
	      On either desktop or touch devices, if you are tracking move events, the pointer's location won't have changed between the last mouseMove event and the pointerUp event.
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(89), __webpack_require__(8), __webpack_require__(100), __webpack_require__(146), __webpack_require__(149)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation, Events, Pointer, PointerEvent) {
	  var EventEpoch, PointerEventManager, arrayWithoutValue, clone, eventEpoch, first, inspect, log, matrix, max, min, peek, point, rect, shallowClone, stableSort;
	  EventEpoch = Events.EventEpoch;
	  eventEpoch = EventEpoch.eventEpoch;
	  point = Atomic.point, rect = Atomic.rect, matrix = Atomic.matrix;
	  inspect = Foundation.inspect, clone = Foundation.clone, shallowClone = Foundation.shallowClone, peek = Foundation.peek, first = Foundation.first, min = Foundation.min, max = Foundation.max, arrayWithoutValue = Foundation.arrayWithoutValue, stableSort = Foundation.stableSort, log = Foundation.log;
	  return PointerEventManager = (function(superClass) {
	    var elementToRootPath, prioritySortElements, rootToElementPath, updatePath;

	    extend(PointerEventManager, superClass);

	    function PointerEventManager(options) {
	      if (options == null) {
	        options = {};
	      }
	      PointerEventManager.__super__.constructor.apply(this, arguments);
	      this.canvasElement = options.canvasElement;
	      this.mouse = new Pointer("mouse", point(-1));
	      this.activePointers = {};
	      this._numActivePointers = 0;
	      this.capturingElement = null;
	      this.currentMousePath = [];
	      this.currentFocusedPath = [];
	    }

	    PointerEventManager.getter({
	      numActivePointers: function() {
	        return this._numActivePointers;
	      },
	      hasMouseCursor: function() {
	        return true;
	      },
	      currentMousePathClassNames: function() {
	        var el, j, len, ref, results;
	        ref = this.currentMousePath;
	        results = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          el = ref[j];
	          results.push(el.classPathName);
	        }
	        return results;
	      }
	    });

	    PointerEventManager.prototype.capturePointerEvents = function(element) {
	      var elementsToCancel, name, pointer, ref;
	      elementsToCancel = arrayWithoutValue(this.currentFocusedPath, element);
	      ref = this.activePointers;
	      for (name in ref) {
	        pointer = ref[name];
	        this.queuePointerEventForElements(elementsToCancel, "pointerCancel", pointer);
	      }
	      return this.capturingElement = element;
	    };

	    PointerEventManager.prototype.pointerEventsCapturedBy = function(element) {
	      return element === this.capturingElement;
	    };

	    PointerEventManager.prototype.pointerElementPath = function(pointer) {
	      var element, newPath, root;
	      root = this.canvasElement;
	      if (!root.pointInside(pointer.location)) {
	        return [];
	      }
	      element = root;
	      newPath = [];
	      while (element) {
	        newPath.push(element);
	        element = element.childUnderPoint(pointer.locationIn(element));
	      }
	      return newPath;
	    };

	    PointerEventManager.prototype.queueEventForElements = function(elements, type, newEventFunction) {
	      var element, j, len, results;
	      results = [];
	      for (j = 0, len = elements.length; j < len; j++) {
	        element = elements[j];
	        results.push(element.queueEvent(type, newEventFunction));
	      }
	      return results;
	    };

	    PointerEventManager.prototype.queuePointerEventForElement = function(element, type, pointer, timeStampInPerformanceSeconds) {
	      return element.queueEvent(type, (function(_this) {
	        return function() {
	          if (!_this.capturingElement || type === "pointerCancel" || element === _this.capturingElement) {
	            return new PointerEvent(type, pointer, timeStampInPerformanceSeconds);
	          }
	        };
	      })(this));
	    };

	    PointerEventManager.prioritySortElements = prioritySortElements = function(elements) {
	      return stableSort(elements, function(a, b) {
	        return b._pointerEventPriority - a._pointerEventPriority;
	      });
	    };

	    PointerEventManager.prototype.queuePointerEventForElements = function(elements, type, pointer, timeStampInPerformanceSeconds) {
	      var element, j, len, results;
	      elements = prioritySortElements(elements.slice());
	      results = [];
	      for (j = 0, len = elements.length; j < len; j++) {
	        element = elements[j];
	        results.push(this.queuePointerEventForElement(element, type, pointer, timeStampInPerformanceSeconds));
	      }
	      return results;
	    };

	    PointerEventManager.prototype.queuePointerEvents = function(type, pointer, timeStampInPerformanceSeconds) {
	      var e;
	      if (e = this.capturingElement) {
	        return this.queuePointerEventForElement(e, type, pointer, timeStampInPerformanceSeconds);
	      } else {
	        return this.queuePointerEventForElements(this.currentFocusedPath, type, pointer, timeStampInPerformanceSeconds);
	      }
	    };

	    PointerEventManager.prototype.queueMouseEvents = function(type, pointer, timeStampInPerformanceSeconds) {
	      return this.queuePointerEventForElements(this.currentMousePath, type, pointer, timeStampInPerformanceSeconds);
	    };

	    PointerEventManager.prototype.queueKeyEvents = function(type, newEventFunction) {
	      return this.queueEventForElements(this.currentFocusedPath, type, newEventFunction);
	    };

	    PointerEventManager.elementToRootPath = elementToRootPath = function(element) {
	      var path;
	      path = [];
	      while (element) {
	        path.push(element);
	        element = element.parent;
	      }
	      return path;
	    };

	    PointerEventManager.rootToElementPath = rootToElementPath = function(element) {
	      return elementToRootPath(element).reverse();
	    };

	    PointerEventManager.updatePath = updatePath = function(oldPath, newPath, removedElementsAction, addedElementsAction, onAnyChange) {
	      var i, j, maxLen, minLen, ref;
	      minLen = min(oldPath.length, newPath.length);
	      maxLen = max(oldPath.length, newPath.length);
	      for (i = j = 0, ref = minLen - 1; j <= ref; i = j += 1) {
	        if (oldPath[i] !== newPath[i]) {
	          removedElementsAction(oldPath.slice(i));
	          addedElementsAction(newPath.slice(i));
	          if (onAnyChange) {
	            onAnyChange(newPath);
	          }
	          return newPath;
	        }
	      }
	      if (minLen < oldPath.length) {
	        removedElementsAction(oldPath.slice(minLen));
	      }
	      if (minLen < newPath.length) {
	        addedElementsAction(newPath.slice(minLen));
	      }
	      if (onAnyChange && minLen !== maxLen) {
	        onAnyChange(newPath);
	      }
	      return newPath;
	    };

	    PointerEventManager.prototype.updateCursor = function(path) {
	      var c, cursor, el, j, len;
	      cursor = "default";
	      for (j = 0, len = path.length; j < len; j++) {
	        el = path[j];
	        if (c = el.cursor) {
	          cursor = c;
	        }
	      }
	      return this.canvasElement.cssCursor = cursor;
	    };

	    PointerEventManager.prototype.queueOutEvents = function(pointer, elements) {
	      return this.queuePointerEventForElements(elements, "mouseOut", pointer);
	    };

	    PointerEventManager.prototype.queueInEvents = function(pointer, elements) {
	      return this.queuePointerEventForElements(elements, "mouseIn", pointer);
	    };

	    PointerEventManager.prototype.queueBlurEvents = function(pointer, elements) {
	      return this.queuePointerEventForElements(elements, "blur", pointer);
	    };

	    PointerEventManager.prototype.queueFocusEvents = function(pointer, elements) {
	      return this.queuePointerEventForElements(elements, "focus", pointer);
	    };

	    PointerEventManager.prototype.isFocused = function(element) {
	      return this.currentFocusedPath.indexOf(element) >= 0;
	    };

	    PointerEventManager.prototype.focus = function(pointer, element) {
	      return this.currentFocusedPath = updatePath(this.currentFocusedPath, rootToElementPath(element), (function(_this) {
	        return function(oldElements) {
	          return _this.queueBlurEvents(pointer, oldElements);
	        };
	      })(this), (function(_this) {
	        return function(newElements) {
	          return _this.queueFocusEvents(pointer, newElements);
	        };
	      })(this));
	    };

	    PointerEventManager.prototype.updateMousePath = function() {
	      var pointer;
	      pointer = this.mouse;
	      if (!(this._numActivePointers === 0 && this.getHasMouseCursor())) {
	        return;
	      }
	      return this.currentMousePath = updatePath(this.currentMousePath, this.pointerElementPath(pointer), (function(_this) {
	        return function(oldElements) {
	          return _this.queueOutEvents(pointer, oldElements);
	        };
	      })(this), (function(_this) {
	        return function(newElements) {
	          return _this.queueInEvents(pointer, newElements);
	        };
	      })(this), (function(_this) {
	        return function(newPath) {
	          return _this.updateCursor(newPath);
	        };
	      })(this));
	    };

	    PointerEventManager.prototype.pointerDown = function(id, location, timeStampInPerformanceSeconds) {
	      var pointer;
	      eventEpoch.logEvent("pointerDown", id);
	      if (this.activePointers[id]) {
	        console.error("pointerDown(id:" + (inspect(id)) + ", location:" + (inspect(location)) + "): already have an active pointer for that id");
	      } else {
	        this._numActivePointers++;
	      }
	      pointer = this.activePointers[id] = new Pointer(id, location);
	      if (this._numActivePointers === 1) {
	        this.focus(pointer, peek(this.pointerElementPath(pointer)));
	      }
	      return this.queuePointerEvents("pointerDown", pointer, timeStampInPerformanceSeconds);
	    };

	    PointerEventManager.prototype.pointerUp = function(id, timeStampInPerformanceSeconds) {
	      var pointer;
	      eventEpoch.logEvent("pointerUp", id);
	      if (!(pointer = this.activePointers[id])) {
	        return console.error("pointerUp(" + id + "): no active pointer for that id");
	      }
	      this._numActivePointers--;
	      delete this.activePointers[id];
	      this.queuePointerEvents("pointerUp", pointer, timeStampInPerformanceSeconds);
	      if (pointer.stayedWithinDeadzone) {
	        this.queuePointerEvents("pointerClick", pointer, timeStampInPerformanceSeconds);
	        eventEpoch.flushEpochNow();
	      }
	      if (this.capturingElement && this._numActivePointers === 0) {
	        return this.capturingElement = null;
	      }
	    };

	    PointerEventManager.prototype.pointerCancel = function(id, timeStampInPerformanceSeconds) {
	      var pointer;
	      eventEpoch.logEvent("pointerCancel", id);
	      if (!(pointer = this.activePointers[id])) {
	        return console.error("pointerCancel(" + id + "): no active pointer for that id");
	      }
	      this._numActivePointers--;
	      delete this.activePointers[id];
	      this.queuePointerEvents("pointerCancel", pointer, timeStampInPerformanceSeconds);
	      if (this.capturingElement && this._numActivePointers === 0) {
	        return this.capturingElement = null;
	      }
	    };

	    PointerEventManager.prototype.pointerMove = function(id, location, timeStampInPerformanceSeconds) {
	      var pointer;
	      eventEpoch.logEvent("pointerMove", id);
	      if (!(pointer = this.activePointers[id])) {
	        return console.error("pointerMove(" + id + ", " + location + "): no active pointer for that id");
	      }
	      if (!!pointer.location.eq(location)) {
	        return;
	      }
	      this.activePointers[id] = pointer = pointer.moved(location);
	      return this.queuePointerEvents("pointerMove", pointer, timeStampInPerformanceSeconds);
	    };

	    PointerEventManager.prototype.mouseDown = function(location, timeStampInPerformanceSeconds) {
	      return this.pointerDown("mousePointer", location, timeStampInPerformanceSeconds);
	    };

	    PointerEventManager.prototype.mouseUp = function(timeStampInPerformanceSeconds) {
	      this.pointerUp("mousePointer", timeStampInPerformanceSeconds);
	      return this.updateMousePath();
	    };

	    PointerEventManager.prototype.mouseMove = function(location, timeStampInPerformanceSeconds) {
	      if (!!this.mouse.location.eq(location)) {
	        return;
	      }
	      this.mouse = this.mouse.moved(location);
	      this.updateMousePath();
	      if (this._numActivePointers > 0) {
	        this.pointerMove("mousePointer", location, timeStampInPerformanceSeconds);
	      }
	      return this.queueMouseEvents("mouseMove", this.mouse);
	    };

	    return PointerEventManager;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(89), __webpack_require__(8), __webpack_require__(100)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation, Events) {
	  var PointerEvent, arrayize, clone, first, inspect, matrix, merge, peek, point, rect, transformedArray;
	  point = Atomic.point, rect = Atomic.rect, matrix = Atomic.matrix;
	  inspect = Foundation.inspect, clone = Foundation.clone, peek = Foundation.peek, first = Foundation.first, merge = Foundation.merge;
	  arrayize = function(single, array, defaultArray) {
	    if (single) {
	      return [single];
	    } else {
	      return array || defaultArray || [];
	    }
	  };
	  transformedArray = function(arrayOfPoints, matrix) {
	    var i, len, p, results;
	    results = [];
	    for (i = 0, len = arrayOfPoints.length; i < len; i++) {
	      p = arrayOfPoints[i];
	      results.push(matrix.transform(p));
	    }
	    return results;
	  };
	  return PointerEvent = (function(superClass) {
	    var emptyObject;

	    extend(PointerEvent, superClass);

	    function PointerEvent(type, pointer, time) {
	      PointerEvent.__super__.constructor.call(this, type, null, time);
	      this.pointer = pointer;
	    }

	    emptyObject = {};

	    PointerEvent.prototype.newEvent = function(options) {
	      var e;
	      if (options == null) {
	        options = emptyObject;
	      }
	      e = new PointerEvent(options.type || this.type, options.pointer || this.pointer, options.time || this.time);
	      e.target = options.target || this.target;
	      return e;
	    };

	    PointerEvent.getter({
	      location: function() {
	        return this.pointer.locationIn(this.target);
	      },
	      firstLocation: function() {
	        return this.pointer.firstLocationIn(this.target);
	      },
	      lastLocation: function() {
	        return this.pointer.lastLocationIn(this.target);
	      },
	      absLocation: function() {
	        return this.pointer.location;
	      },
	      absFirstLocation: function() {
	        return this.pointer.firstLocation;
	      },
	      absLastLocation: function() {
	        return this.pointer.lastLocation;
	      },
	      parentLocation: function() {
	        return this.pointer.locationIn(this.target.parent);
	      },
	      parentParentLocation: function() {
	        return this.pointer.locationIn(this.target.parent.parent);
	      },
	      parentFirstLocation: function() {
	        return this.pointer.firstLocationIn(this.target.parent);
	      },
	      parentParentFirstLocation: function() {
	        return this.pointer.firstLocationIn(this.target.parent.parent);
	      },
	      parentLastLocation: function() {
	        return this.pointer.lastLocationIn(this.target.parent);
	      },
	      parentParentLastLocation: function() {
	        return this.pointer.lastLocationIn(this.target.parent.parent);
	      },
	      absDelta: function() {
	        return this.pointer.location.sub(this.pointer.lastLocation);
	      },
	      delta: function() {
	        return this.location.sub(this.lastLocation);
	      },
	      parentDelta: function() {
	        return this.pointer.deltaIn(this.target.parent);
	      },
	      parentParentDelta: function() {
	        return this.pointer.deltaIn(this.target.parent.parent);
	      },
	      absTotalDelta: function() {
	        return this.pointer.location.sub(this.pointer.firstLocation);
	      },
	      totalDelta: function() {
	        return this.location.sub(this.firstLocation);
	      },
	      totalParentDelta: function() {
	        return this.pointer.totalDeltaIn(this.target.parent);
	      },
	      totalParentParentDelta: function() {
	        return this.pointer.totalDeltaIn(this.target.parent.parent);
	      }
	    });

	    PointerEvent.prototype.toElementMatrix = function(element) {
	      return this.target.elementToElementMatrix(element);
	    };

	    PointerEvent.prototype.locationIn = function(element) {
	      return this.pointer.locationIn(element);
	    };

	    PointerEvent.prototype.lastLocationIn = function(element) {
	      return this.pointer.lastLocationIn(element);
	    };

	    PointerEvent.prototype.firstLocationIn = function(element) {
	      return this.pointer.firstLocationIn(element);
	    };

	    return PointerEvent;

	  })(Events.Event);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*

	Unless otherwise specified, all geometry is in the Object's own space. point(0,0) is the upper left-hand corner. The point at @size is just outside the object to the lower-right.

	NOTE on the "axis" property. It doesn't impact drawing in any way. It just eases common patterns of:
	  getting / setting @location, @angle
	  layout
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(89), __webpack_require__(8), __webpack_require__(142), __webpack_require__(88), __webpack_require__(156), __webpack_require__(151), __webpack_require__(152), __webpack_require__(163), __webpack_require__(165), __webpack_require__(164)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation, Canvas, Animator, Layout, ElementBase, StateEpoch, DrawEpoch, GlobalEpochCycle, DrawCacheManager) {
	  var Element, Join, Map, Matrix, Point, PointLayout, PointLayoutBase, Rectangle, Unique, arrayWithoutValue, cacheAggressively, clone, compact, compactFlatten, createWithPostCreate, currentSecond, defaultSize, drawCacheManager, drawEpoch, floatEq, floor, globalEpochCycle, identityMatrix, insert, inspect, isFunction, isNumber, isPlainArray, isPlainObject, isPoint, isString, keepIfRubyTrue, log, matrix, max, merge, mergeInto, min, minimumOrderedOverlappingMerge, nonStatePropertyKeyTest, perimeter0, plainObjectsDeepEq, point, point0, point1, present, rect, remove, repeat, rubyTrue, shallowEq, stateEpoch, stats, time, truncateLayoutCoordinate, zeroedStats;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, Matrix = Atomic.Matrix, matrix = Atomic.matrix, identityMatrix = Atomic.identityMatrix, point0 = Atomic.point0, point1 = Atomic.point1, perimeter0 = Atomic.perimeter0, isPoint = Atomic.isPoint;
	  floor = Math.floor;
	  globalEpochCycle = GlobalEpochCycle.globalEpochCycle;
	  drawCacheManager = DrawCacheManager.drawCacheManager;
	  PointLayout = Layout.PointLayout, PointLayoutBase = Layout.PointLayoutBase;
	  truncateLayoutCoordinate = function(v) {
	    return floor(v + 1 / 256);
	  };
	  inspect = Foundation.inspect, clone = Foundation.clone, time = Foundation.time, Map = Foundation.Map, plainObjectsDeepEq = Foundation.plainObjectsDeepEq, shallowEq = Foundation.shallowEq, Unique = Foundation.Unique, compact = Foundation.compact, compactFlatten = Foundation.compactFlatten, keepIfRubyTrue = Foundation.keepIfRubyTrue, log = Foundation.log, insert = Foundation.insert, remove = Foundation.remove, merge = Foundation.merge, max = Foundation.max, min = Foundation.min, arrayWithoutValue = Foundation.arrayWithoutValue, minimumOrderedOverlappingMerge = Foundation.minimumOrderedOverlappingMerge, isPlainObject = Foundation.isPlainObject, isPlainArray = Foundation.isPlainArray, isNumber = Foundation.isNumber, isString = Foundation.isString, isFunction = Foundation.isFunction, mergeInto = Foundation.mergeInto, floatEq = Foundation.floatEq, Join = Foundation.Join, rubyTrue = Foundation.rubyTrue, createWithPostCreate = Foundation.createWithPostCreate, currentSecond = Foundation.currentSecond, repeat = Foundation.repeat, present = Foundation.present;
	  cacheAggressively = false;
	  stats = clone(zeroedStats = {
	    stagingBitmapsCreated: 0,
	    elementsDrawn: 0
	  });
	  defaultSize = point(100);
	  stateEpoch = StateEpoch.stateEpoch;
	  drawEpoch = DrawEpoch.drawEpoch;
	  nonStatePropertyKeyTest = ElementBase.nonStatePropertyKeyTest;
	  return createWithPostCreate(Element = (function(superClass) {
	    var childrenWithout, drawCachingEnabled, initialChildren;

	    extend(Element, superClass);

	    Element.drawCachingEnabled = drawCachingEnabled = false;

	    Element.registerWithElementFactory = function() {
	      return true;
	    };

	    Element.stats = stats;

	    Element.resetStats = function() {
	      return mergeInto(stats, zeroedStats);
	    };

	    Element.created = 0;

	    Element.createdByType = {};

	    Element.resetCreated = function() {
	      Element.created = 0;
	      return Element.createdByType = {};
	    };

	    function Element(options, children) {
	      var childrenArray, i, j, ref;
	      Element.created++;
	      Element.__super__.constructor.call(this, options);
	      this.initFields();
	      this._propertiesInitialized = false;
	      if (arguments.length === 2 && children && children.constructor === Array) {
	        if (children.length > 0) {
	          this.setChildren(children);
	        }
	      } else if (arguments.length > 1) {
	        childrenArray = new Array(arguments.length - 1);
	        for (i = j = 1, ref = arguments.length; j < ref; i = j += 1) {
	          childrenArray[i - 1] = arguments[i];
	        }
	        this.setChildren(childrenArray);
	      }
	      this._propertiesInitialized = true;
	    }

	    Element.prototype.initFields = function() {
	      this._initDrawCache();
	      this._initTemporaryFields();
	      this._initComputedFields();
	      this._activeAnimator = null;
	      this._animatingOut = false;
	      this._locationLayoutDisabled = false;
	      return this.creator = null;
	    };

	    Element.prototype._initTemporaryFields = function() {
	      this._currentDrawTarget = null;
	      this._currentToTargetMatrix = null;
	      this._lastParentSize = null;
	      return this._bitmapFactory = null;
	    };

	    Element.prototype._initComputedFields = function() {
	      this._elementSpaceDrawArea = null;
	      this._rootElement = this;
	      this._elementToAbsMatrix = null;
	      this._absToElementMatrix = null;
	      return this._parentToElementMatrix = null;
	    };

	    Element.getter({
	      absToElementMatrix: function() {
	        return this._absToElementMatrix || (this._absToElementMatrix = this._parent ? this._parent.getAbsToElementMatrix().mul(this.getParentToElementMatrix()) : this.getParentToElementMatrix());
	      },
	      parentToElementMatrix: function() {
	        return this._parentToElementMatrix || (this._parentToElementMatrix = this._elementToParentMatrix.inv);
	      },
	      elementToDocumentMatrix: function() {
	        return this.getElementToAbsMatrix().mul(this.getCanvasElement()._elementToDocumentMatrix);
	      },
	      documentToElementMatrix: function() {
	        return this.getCanvasElement()._documentToElementMatrix.mul(this.getAbsToElementMatrix());
	      },
	      parentSpaceDrawArea: function() {
	        return this._elementToParentMatrix.transformBoundingRect(this.getElementSpaceDrawArea());
	      },
	      elementSpaceDrawArea: function() {
	        return this._elementSpaceDrawArea || (this._elementSpaceDrawArea = this._computeElementSpaceDrawArea());
	      },
	      isChanging: function() {
	        return this._pendingState.__addedToChangingElements;
	      },
	      rootElement: function() {
	        return this._rootElement || (this._rootElement = this._parent ? this._parent.getRootElement() : this);
	      },
	      bitmapFactory: function() {
	        var ref;
	        return this._bitmapFactory || ((ref = this.getCanvasElement()) != null ? ref.bitmapFactory : void 0) || Canvas.Bitmap;
	      },
	      devicePixelsPerPoint: function() {
	        return this.getRootElement()._devicePixelsPerPoint || 1;
	      },
	      canvasElement: function() {
	        var re;
	        re = this.getRootElement();
	        if (re !== this) {
	          return re.getCanvasElement();
	        } else {
	          return null;
	        }
	      }
	    });

	    Element.prototype._clearRootElement = function() {
	      var child, j, len, oldRootElement, ref, results1;
	      if (oldRootElement = this._rootElement) {
	        this._rootElement = null;
	        this.queueEvent("rootElementChanged", (function(_this) {
	          return function() {
	            return {
	              oldRootElement: oldRootElement,
	              rootElement: _this.getRootElement()
	            };
	          };
	        })(this));
	        ref = this._children;
	        results1 = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          child = ref[j];
	          results1.push(child._clearRootElement());
	        }
	        return results1;
	      }
	    };

	    Element.prototype.preprocessEventHandlers = function(handlerMap) {
	      var k, v;
	      for (k in handlerMap) {
	        v = handlerMap[k];
	        if (k === "rootElementChanged") {
	          this.getRootElement();
	        }
	      }
	      return handlerMap;
	    };

	    Element.setter({
	      absToElementMatrix: function(aToE) {
	        return this.setElementToAbsMatrix(aToE.invert());
	      },
	      parentToElementMatrix: function(pToE) {
	        return this.setElementToParentMatrix(pToE.invert());
	      }
	    });

	    Element.layoutProperty({
	      size: {
	        "default": {
	          ps: 1
	        },
	        preprocess: function(v, oldValue) {
	          if (v instanceof PointLayoutBase) {
	            return v;
	          } else {
	            return new PointLayout(v, oldValue);
	          }
	        }
	      },

	      /*
	      TODO: Update StateEpochLayout to use this.
	      
	      How do we want to handle currentPadding?
	        - is it always set; gut: yes
	        - should childrenSizePreprocessor be responsible for including padding?
	        - should we check before calling childrenSizePreprocessor? If it is length 4,
	          then padding is added after?
	      
	        - I kinda want to NOT include currentPadding, at least not most the time.
	          99% of the time it is going to be the exact same calulation:
	      
	          if currentPadding
	            right += currentPadding.getWidth()
	            bottom += currentPadding.getHeight()
	      
	          which, if applied after, would look like this:
	      
	            childrenSizePreprocessor(...).add currentPadding.getWidth(), currentPadding.getHeight()
	             * note, this only creates a second point if there is non-zero padding.
	       */
	      childrenSizePreprocessor: {
	        "default": function(left, top, right, bottom) {
	          return point(right, bottom);
	        },
	        validate: function(v) {
	          return isFunction(v);
	        }
	      },
	      location: {
	        "default": 0,
	        preprocess: function(v, oldValue) {
	          if (v instanceof PointLayoutBase) {
	            return v;
	          } else {
	            return new PointLayout(v, oldValue);
	          }
	        },
	        postSetter: function() {
	          return this._locationLayoutDisabled = false;
	        }
	      },
	      childrenLayout: {
	        "default": null,
	        validate: function(v) {
	          return v === null || v === "flow" || v === "column" || v === "row";
	        }
	      },
	      childrenGrid: {
	        "default": null,
	        validate: function(v) {
	          return v === null || isString(v) && v.match(/^[ a-zA-Z]+$/);
	        }
	      },
	      childrenAlignment: {
	        "default": point0,
	        preprocess: function(v) {
	          return point(v);
	        }
	      },
	      axis: {
	        "default": point0,
	        preprocess: function(v) {
	          return point(v);
	        }
	      },
	      inFlow: {
	        "default": true,
	        preprocess: function(v) {
	          return !!v;
	        }
	      },
	      padding: {
	        "default": 0,
	        validate: function(v) {
	          if (v === false || v === void 0 || v === null) {
	            return true;
	          } else if (isPlainArray(v)) {
	            return v.length === 2 || v.length === 4;
	          } else {
	            return isNumber(v) || isFunction(v) || isPlainObject(v);
	          }
	        }
	      },
	      margin: {
	        "default": 0,
	        validate: function(v) {
	          if (v === false || v === void 0 || v === null) {
	            return true;
	          } else if (isPlainArray(v)) {
	            return v.length === 2 || v.length === 4;
	          } else {
	            return isNumber(v) || isFunction(v) || isPlainObject(v);
	          }
	        }
	      }
	    });

	    Element.coreProperty({
	      currentSize: {
	        "default": defaultSize,
	        setter: function() {
	          throw new Error("you cannot set currentSize directly");
	        }
	      },
	      currentPadding: {
	        "default": perimeter0,
	        setter: function() {
	          throw new Error("you cannot set currentPadding directly");
	        }
	      },
	      currentMargin: {
	        "default": perimeter0,
	        setter: function() {
	          throw new Error("you cannot set currentMargin directly");
	        }
	      }
	    });

	    Element.virtualProperty({
	      currentLocationX: {
	        getter: function(o) {
	          var a, p, s;
	          s = o._currentSize;
	          a = o._axis;
	          p = o._currentPadding;
	          return o._elementToParentMatrix.transformX(s.x * a.x - p.left, s.y * a.y - p.top);
	        }
	      },
	      currentLocationY: {
	        getter: function(o) {
	          var a, p, s;
	          s = o._currentSize;
	          a = o._axis;
	          p = o._currentPadding;
	          return o._elementToParentMatrix.transformY(s.x * a.x - p.left, s.y * a.y - p.top);
	        }
	      },
	      currentLocation: {
	        getter: function(o) {
	          var a, p, s;
	          s = o._currentSize;
	          a = o._axis;
	          p = o._currentPadding;
	          return o._elementToParentMatrix.transform(s.x * a.x - p.left, s.y * a.y - p.top);
	        }
	      },
	      layout: {
	        getter: function(o) {
	          throw new Error("get layout is depricated");
	        },
	        setter: function(v) {
	          throw new Error("set layout is depricated");
	        }
	      },
	      elementToAbsMatrix: {
	        getter: function(o) {
	          return o._elementToAbsMatrix || (o._elementToAbsMatrix = o._parent ? o._elementToParentMatrix.mul(o._parent.getElementToAbsMatrix()) : o._elementToParentMatrix);
	        },
	        setter: function(eToA) {
	          return this.setElementToParentMatrix(this._parent ? eToA.mul(this._parent.getAbsToElementMatrix()) : eToA);
	        }
	      }
	    });

	    Element.coreProperty({
	      cursor: {
	        "default": null,
	        validate: function(v) {
	          return v === null || typeof v === "string";
	        }
	      },
	      elementToParentMatrix: {
	        "default": Matrix.identityMatrix,
	        preprocess: function(v) {
	          return matrix(v);
	        },
	        setter: function(v) {
	          this._locationLayoutDisabled = true;
	          return matrix(v);
	        }
	      },
	      parent: {
	        "default": null,
	        setter: function(p) {
	          if (p) {
	            p.addChild(this);
	          } else {
	            this.removeFromParent();
	          }
	          return p;
	        }
	      },
	      children: {
	        "default": initialChildren = [],
	        setter: function(newChildren, oldChildren) {
	          var child, childRemovedAnimation, childrenHaveRemovedAnimations, firstTimeSettingChildren, j, keepAllChildren, keepOldChildren, len, len1, len2, len3, len4, n, oldParent, q, r, t;
	          this._pendingState.__drawPropertiesChanged = true;
	          newChildren = compactFlatten(newChildren, keepIfRubyTrue);
	          firstTimeSettingChildren = oldChildren === initialChildren;
	          if (!(childrenHaveRemovedAnimations = childRemovedAnimation = this.getPendingChildRemovedAnimation())) {
	            for (j = 0, len = oldChildren.length; j < len; j++) {
	              child = oldChildren[j];
	              if (!(child.getPendingRemovedAnimation())) {
	                continue;
	              }
	              childrenHaveRemovedAnimations = true;
	              break;
	            }
	          }
	          if (childrenHaveRemovedAnimations) {
	            keepOldChildren = [];
	            for (n = 0, len1 = oldChildren.length; n < len1; n++) {
	              child = oldChildren[n];
	              if (child._animatingOut === "done") {
	                child._animatingOut = false;
	              } else if (childRemovedAnimation || child.getPendingRemovedAnimation() || indexOf.call(newChildren, child) >= 0) {
	                keepOldChildren.push(child);
	              }
	            }
	            keepAllChildren = minimumOrderedOverlappingMerge(keepOldChildren, newChildren);
	            for (q = 0, len2 = keepAllChildren.length; q < len2; q++) {
	              child = keepAllChildren[q];
	              if (indexOf.call(newChildren, child) < 0) {
	                (function(child) {
	                  var animation;
	                  if (!child._animatingOut && (animation = childRemovedAnimation || child.getPendingRemovedAnimation())) {
	                    child.setAnimate(merge(animation, {
	                      on: {
	                        done: (function(_this) {
	                          return function() {
	                            child._animatingOut = "done";
	                            return child.removeFromParent();
	                          };
	                        })(this)
	                      }
	                    }));
	                    return child._animatingOut = true;
	                  }
	                })(child);
	              }
	            }
	            newChildren = keepAllChildren;
	          }
	          for (r = 0, len3 = oldChildren.length; r < len3; r++) {
	            child = oldChildren[r];
	            if (indexOf.call(newChildren, child) < 0) {
	              child._setParentOnly(null);
	            }
	          }
	          for (t = 0, len4 = newChildren.length; t < len4; t++) {
	            child = newChildren[t];
	            if (!((oldParent = child.getPendingParent()) !== this)) {
	              continue;
	            }
	            if (oldParent != null) {
	              oldParent._setChildrenOnly(oldParent.pendingChildrenWithout(child));
	            }
	            child._setParentOnly(this);
	            if (!firstTimeSettingChildren) {
	              this.startChildAddedAnimation(child);
	            }
	          }
	          return newChildren;
	        }
	      }
	    });


	    /*
	    Apply f to each child
	    return: this
	    
	    SBD NOTE: 2015-11-5 We should start using this for all child iteration.
	      It will allow us to implement Spans in the future.
	    
	       * basic span sketch:
	      for child in @_children
	        if isSpan child
	          child.eachChild f
	        else
	          f child
	    
	       * span sketch with span-properties:
	      class ElementBase
	        eachChild: (f, spanProps) ->
	          for child in @_children
	            if isSpan child
	              child.eachChild f, spanProps
	            else
	              f child, spanProps
	    
	      class Span extends ElementBase
	        eachChild: (f, spanProps) ->
	          if @props
	            spanProps = if spanProps
	              merge spanProps, @props
	            else
	              @props
	          super f, spanProps
	     */

	    Element.prototype.eachChild = function(f) {
	      var child, j, len, ref;
	      ref = this._children;
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        f(child);
	      }
	      return this;
	    };

	    Element.getter({
	      area: function() {
	        throw new Error("depricated - use logicalArea");
	      },
	      logicalArea: function() {
	        var p, size;
	        p = this.getCurrentPadding();
	        size = this._currentSize;
	        return new Rectangle(-p.left, -p.top, size.x, size.y);
	      },
	      paddedWidth: function() {
	        return this._currentSize.x - this.getCurrentPadding().getWidth();
	      },
	      paddedHeight: function() {
	        return this._currentSize.y - this.getCurrentPadding().getHeight();
	      },
	      paddedSize: function() {
	        var p, size;
	        p = this.getCurrentPadding();
	        size = this._currentSize;
	        return point(size.x - p.getWidth(), size.y - p.getHeight());
	      },
	      paddedArea: function() {
	        var p, size;
	        p = this.getCurrentPadding();
	        size = this._currentSize;
	        return new Rectangle(0, 0, size.x - p.getWidth(), size.y - p.getHeight());
	      }
	    });

	    Element.drawAreaProperty({
	      clip: {
	        "default": false,
	        preprocess: function(v) {
	          return !!v;
	        }
	      }
	    });

	    Element.drawLayoutProperty({
	      visible: {
	        "default": true,
	        preprocess: function(v) {
	          return !!v;
	        }
	      }
	    });

	    Element.inertProperty({
	      opacity: {
	        "default": 1,
	        validate: function(v) {
	          return typeof v === "number";
	        }
	      },
	      compositeMode: {
	        "default": "normal",
	        validate: function(v) {
	          return typeof v === "string";
	        }
	      },
	      pointerEventPriority: {
	        "default": 0,
	        preprocess: function(v) {
	          return v | 0;
	        }
	      },
	      name: {
	        "default": null,
	        validate: function(v) {
	          return v === null || isFunction(v.toString);
	        },
	        preprocess: function(v) {
	          if (v === null) {
	            return v;
	          } else {
	            return v.toString();
	          }
	        }
	      },
	      userProperties: {
	        "default": null,
	        preprocess: function(v, oldValue) {
	          return merge(oldValue, v);
	        }
	      },
	      childAddedAnimation: {
	        "default": null,
	        validate: function(v) {
	          return (v == null) || isPlainObject(v);
	        }
	      },
	      childRemovedAnimation: {
	        "default": null,
	        validate: function(v) {
	          return (v == null) || isPlainObject(v);
	        }
	      },
	      addedAnimation: {
	        "default": null,
	        validate: function(v) {
	          return (v == null) || isPlainObject(v);
	        }
	      },
	      removedAnimation: {
	        "default": null,
	        validate: function(v) {
	          return (v == null) || isPlainObject(v);
	        }
	      },
	      receivePointerEvents: {
	        "default": "inLogicalArea",
	        validate: function(v) {
	          return v === "never" || v === "inLogicalArea" || v === "inPaddedArea" || v === "passToChildren";
	        }
	      }
	    });

	    Element.inertProperty({
	      cacheDraw: {
	        "default": false,
	        validate: function(v) {
	          return v === false || v === true || v === "locked" || v === "always" || v === "auto";
	        },
	        preprocess: function(v) {
	          if (v === true) {
	            return "auto";
	          } else {
	            return v;
	          }
	        },
	        description: "'auto', true: this element will be cached if it is rendered multiple times and isn't changing 'always': this element will always be cached 'locked': it will be cached once and no matter what changes, the old drawCache will be used for drawing. NOTE: If the element's internal draw properties change, _drawCacheBitmapInvalid is set to true, but the old drawCache is still used. NOTE: If it was 'locked' and then cacheDraw is changed to not 'locked' and not false, and _drawCacheBitmapInvalid is true, the cache will be regenerated."
	      }
	    });

	    Element.virtualProperty({
	      key: {
	        setter: function(v) {
	          return this.setName(v);
	        },
	        getter: function(o) {
	          return o._name;
	        }
	      },
	      scale: {
	        preprocess: function(s) {
	          return point(s);
	        },
	        getter: function(o) {
	          return o._elementToParentMatrix.getS();
	        },
	        setter: function(s) {
	          this._setElementToParentMatrixWithoutChangingLocation(this.getPendingElementToParentMatrix().withScale(s));
	          return s;
	        }
	      },
	      angle: {
	        getter: function(o) {
	          return o._elementToParentMatrix.getAngle();
	        },
	        setter: function(a) {
	          this._setElementToParentMatrixWithoutChangingLocation(this.getPendingElementToParentMatrix().withAngle(a));
	          return a;
	        }
	      },
	      invisible: {
	        getter: function(o) {
	          return !o._visible;
	        },
	        setter: function(v) {
	          return this.setVisible(!v);
	        }
	      },
	      isMask: {
	        getter: function(o) {
	          return o._compositeMode === "alphamask";
	        },
	        setter: function(v) {
	          return this.setCompositeMode(v ? "alphamask" : "normal");
	        }
	      },
	      opacityPercent: {
	        getter: function(o) {
	          return o._opacity * 100 | 0;
	        }
	      },
	      hasMask: {
	        getter: function(o) {
	          var child, j, len, ref;
	          ref = o._children;
	          for (j = 0, len = ref.length; j < len; j++) {
	            child = ref[j];
	            if (child.isMask) {
	              return true;
	            }
	          }
	          return false;
	        }
	      },
	      firstMask: {
	        getter: function(o) {
	          var child, j, len, ref;
	          ref = o._children;
	          for (j = 0, len = ref.length; j < len; j++) {
	            child = ref[j];
	            if (child.isMask) {
	              return child;
	            }
	          }
	        }
	      },
	      sizeAffectsLocation: {
	        getter: function(o) {
	          return o._axis.x !== 0 || o._axis.y !== 0;
	        }
	      },
	      absoluteAxis: {
	        getter: function(o) {
	          return o._currentSize.mul(o._axis);
	        }
	      },
	      sizeForChildren: {
	        getter: function(o) {
	          return o._currentPadding.subtractedFromSize(o._currentSize);
	        }
	      },
	      parentSize: {
	        getter: function(o) {
	          throw new Error("parentSize depricated");
	        }
	      },
	      parentSizeForChildren: {
	        getter: function(o) {
	          var ref;
	          return ((ref = o._parent) != null ? ref.getSizeForChildren() : void 0) || defaultSize;
	        },
	        pendingGetter: function(o) {
	          var ref;
	          return ((ref = o._parent) != null ? ref.getPendingSizeForChildren() : void 0) || defaultSize;
	        }
	      },
	      nextSibling: {
	        getter: function(o) {
	          return [o._parent, (o._parent && o._parent._children[o._parent.childIndex(o) + 1]) || null];
	        },
	        pendingGetter: function(o) {
	          return [o._parent, (o._parent && o._parent.getPendingChildren()[o._parent.pendingChildIndex(o) + 1]) || null];
	        },
	        setter: function(siblingOrPair) {
	          return this.placeRelativeToSibling(siblingOrPair, 0);
	        }
	      },
	      prevSibling: {
	        getter: function(o) {
	          return [o._parent, (o._parent && o._parent._children[o._parent.childIndex(o) - 1]) || null];
	        },
	        pendingGetter: function(o) {
	          return [o._parent, (o._parent && o._parent.getPendingChildren()[o._parent.pendingChildIndex(o) - 1]) || null];
	        },
	        setter: function(siblingOrPair) {
	          return this.placeRelativeToSibling(siblingOrPair, 1);
	        }
	      },
	      maxXInParentSpace: {
	        getter: function(o) {
	          var a, b, bottom, c, d, left, padding, right, top;
	          padding = o._currentPadding;
	          left = -padding.left;
	          top = -padding.top;
	          right = o._currentSize.x + left;
	          bottom = o._currentSize.y + top;
	          a = o._elementToParentMatrix.transformX(left, top);
	          b = o._elementToParentMatrix.transformX(left, bottom);
	          c = o._elementToParentMatrix.transformX(right, top);
	          d = o._elementToParentMatrix.transformX(right, bottom);
	          return max(a, b, c, d);
	        }
	      },
	      maxYInParentSpace: {
	        getter: function(o) {
	          var a, b, bottom, c, d, left, padding, right, top;
	          padding = o._currentPadding;
	          left = -padding.left;
	          top = -padding.top;
	          right = o._currentSize.x + left;
	          bottom = o._currentSize.y + top;
	          a = o._elementToParentMatrix.transformY(left, top);
	          b = o._elementToParentMatrix.transformY(left, bottom);
	          c = o._elementToParentMatrix.transformY(right, top);
	          d = o._elementToParentMatrix.transformY(right, bottom);
	          return max(a, b, c, d);
	        }
	      },
	      widthInParentSpace: {
	        getter: function(o) {
	          var a, b, bottom, c, d, left, padding, right, top;
	          padding = o._currentPadding;
	          left = -padding.left;
	          top = -padding.top;
	          right = o._currentSize.x + left;
	          bottom = o._currentSize.y + top;
	          a = o._elementToParentMatrix.transformX(left, top);
	          b = o._elementToParentMatrix.transformX(left, bottom);
	          c = o._elementToParentMatrix.transformX(right, top);
	          d = o._elementToParentMatrix.transformX(right, bottom);
	          return max(a, b, c, d) - min(a, b, c, d);
	        }
	      },
	      heightInParentSpace: {
	        getter: function(o) {
	          var a, b, bottom, c, d, left, padding, right, top;
	          padding = o._currentPadding;
	          left = -padding.left;
	          top = -padding.top;
	          right = o._currentSize.x + left;
	          bottom = o._currentSize.y + top;
	          a = o._elementToParentMatrix.transformY(left, top);
	          b = o._elementToParentMatrix.transformY(left, bottom);
	          c = o._elementToParentMatrix.transformY(right, top);
	          d = o._elementToParentMatrix.transformY(right, bottom);
	          return max(a, b, c, d) - min(a, b, c, d);
	        }
	      },
	      layoutLocationParentCircular: {
	        getter: function(o) {
	          var ref;
	          return !!o._location.layoutIsCircular((ref = o._parent) != null ? ref._size : void 0);
	        },
	        pendingGetter: function(o) {
	          var ref;
	          return !!o._location.layoutIsCircular((ref = o._parent) != null ? ref.getPendingSize() : void 0);
	        }
	      },
	      layoutSizeParentCircular: {
	        getter: function(o) {
	          var ref;
	          return !!o._size.layoutIsCircular((ref = o._parent) != null ? ref._size : void 0);
	        },
	        pendingGetter: function(o) {
	          var ref;
	          return !!o._size.layoutIsCircular((ref = o._parent) != null ? ref.getPendingSize() : void 0);
	        }
	      },
	      layoutMovesChildren: {
	        getter: function(o) {
	          return !!o._childrenLayout;
	        }
	      },
	      animate: {
	        "default": null,
	        getter: function() {
	          return this._activeAnimator;
	        },
	        pendingGetter: function() {
	          return this._activeAnimator;
	        },
	        setter: function(options) {
	          if (this._animatingOut) {
	            return;
	          }
	          this.finishAnimations();
	          return stateEpoch.onNextReady((function(_this) {
	            return function() {
	              if (options) {
	                return new Animator(_this, options);
	              }
	            };
	          })(this));
	        }
	      },
	      baseDrawArea: {
	        getter: function(o) {
	          var p, s;
	          p = o._currentPadding;
	          s = o._currentSize;
	          return rect(0, 0, s.x - p.getWidth(), s.y - p.getHeight());
	        }
	      }
	    });

	    Element.getter({
	      allChildrenAreUpLayout: function() {
	        return false;
	      }
	    });


	    /*
	    INFO
	     */

	    Element.getter({
	      inspectTree: function() {
	        var c;
	        return [
	          this.getInspectedName(), (function() {
	            var j, len, ref, results1;
	            ref = this._children;
	            results1 = [];
	            for (j = 0, len = ref.length; j < len; j++) {
	              c = ref[j];
	              results1.push(c.inspectTree);
	            }
	            return results1;
	          }).call(this)
	        ];
	      },
	      inspectProps: function() {
	        var attr, props;
	        props = [];
	        if (this._axis && !this.axis.eq(point())) {
	          props.push("axis");
	        }
	        if (!this.scale.eq(point(1, 1))) {
	          props.push("scale");
	        }
	        if (this._currentSize) {
	          props.push("currentSize");
	        }
	        if (!this.getCurrentLocation().eq(point0)) {
	          props.push("currentLocation");
	        }
	        if (this._compositeMode && this._compositeMode !== "normal") {
	          props.push("compositeMode");
	        }
	        if ((this._opacity != null) && this._opacity < 1) {
	          props.push("opacity");
	        }
	        props = (function() {
	          var j, len, results1;
	          results1 = [];
	          for (j = 0, len = props.length; j < len; j++) {
	            attr = props[j];
	            results1.push(attr + ":" + this[attr]);
	          }
	          return results1;
	        }).call(this);
	        if ((this._visible != null) && !this._visible) {
	          props.push("invisible");
	        }
	        if (this._children && this._useStagingBitmap()) {
	          props.push("staged");
	        }
	        return props;
	      },
	      coreProps: function() {
	        var j, len, prop, properties, ret;
	        properties = [this._axis && !this.axis.eq(point()) ? "axis" : void 0, !this.location.eq(point0) ? "location" : void 0, this._currentSize ? "size" : void 0, !floatEq(this.angle, 0) ? "angle" : void 0, !this.scale.eq(point(1, 1)) ? "scale" : void 0, this._compositeMode && this._compositeMode !== "normal" ? "compositeMode" : void 0, (this._opacity != null) && this._opacity < 1 ? "opacity" : void 0, this._invisible ? "invisible" : void 0, this._layout ? "layout" : void 0];
	        ret = {};
	        for (j = 0, len = properties.length; j < len; j++) {
	          prop = properties[j];
	          if (prop) {
	            ret[prop] = this[prop];
	          }
	        }
	        return ret;
	      },
	      requiresParentStagingBitmap: function() {
	        switch (this._compositeMode) {
	          case "alphamask":
	          case "target_alphamask":
	          case "destover":
	          case "sourcein":
	          case "inverse_alphamask":
	            return true;
	          case "add":
	          case "normal":
	            return false;
	          default:
	            throw new Error("unknown compositeMode: " + this._compositeMode);
	        }
	      },
	      firstChildRequiringParentStagingBitmap: function() {
	        var child, j, len, ref;
	        ref = this._children;
	        for (j = 0, len = ref.length; j < len; j++) {
	          child = ref[j];
	          if (child.getRequiresParentStagingBitmap()) {
	            return child;
	          }
	        }
	      },
	      childRequiresParentStagingBitmap: function() {
	        return !!this.getFirstChildRequiringParentStagingBitmap();
	      }
	    });

	    Element.prototype.inspectParentStructure = function(elementPath) {
	      if (elementPath == null) {
	        elementPath = this.elementPath;
	      }
	      if (elementPath.length === 1) {
	        return [elementPath[0].inspectedName, elementPath[0].coreProps];
	      } else {
	        return [elementPath[0].inspectedName, elementPath[0].coreProps, this.inspectParentStructure(elementPath.slice(1))];
	      }
	    };

	    Element.prototype.inspectChildrenStructure = function() {
	      var child;
	      return [this.inspectedName, this.coreProps].concat((function() {
	        var j, len, ref, results1;
	        ref = this._children;
	        results1 = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          child = ref[j];
	          results1.push(child.inspectChildrenStructure());
	        }
	        return results1;
	      }).call(this));
	    };

	    Element.prototype.inspectRender = function(toBitmapOptions, callback) {
	      var childArea;
	      childArea = toBitmapOptions.area || "parentLogicalArea";
	      return this.onNextReady((function(_this) {
	        return function() {
	          var child, fn, i, j, joiner, len, ref;
	          joiner = new Join;
	          joiner["do"](function(done) {
	            return _this.toBitmap(merge(toBitmapOptions, {
	              area: "logicalArea"
	            }), function(bitmap) {
	              var outPut;
	              outPut = {};
	              outPut[_this.inspectedName] = [_this.inspectedName, bitmap];
	              return done(outPut);
	            });
	          });
	          ref = _this.children;
	          fn = function(child, i) {
	            return joiner["do"](function(done) {
	              return child.toBitmap(merge(toBitmapOptions, {
	                area: childArea
	              }), function(bitmap) {
	                var ret;
	                ret = {};
	                ret["child" + i] = [child.inspectedName, bitmap];
	                return done(ret);
	              });
	            });
	          };
	          for (i = j = 0, len = ref.length; j < len; i = ++j) {
	            child = ref[i];
	            fn(child, i);
	          }
	          return joiner.join(function(results) {
	            return callback(merge(results));
	          });
	        };
	      })(this));
	    };

	    Element.prototype.logInspectRender = function(toBitmapOptions) {
	      if (toBitmapOptions == null) {
	        toBitmapOptions = {};
	      }
	      toBitmapOptions.pixelsPerPoint || (toBitmapOptions.pixelsPerPoint = this.devicePixelsPerPoint);
	      return this.inspectRender(toBitmapOptions, (function(_this) {
	        return function(results) {
	          return _this.log(results);
	        };
	      })(this));
	    };

	    Element.prototype.inspectLocal = function() {
	      return this.getInspectedName() + " " + this.inspectProps.join(", ");
	    };

	    Element.prototype.inspect = function(inspector) {
	      var inspected;
	      inspected = this.inspectLocal();
	      if (inspector != null) {
	        if (typeof inspector.put === "function") {
	          inspector.put(inspected);
	        }
	      }
	      return inspected;
	    };

	    Element.prototype.inspect2 = function() {
	      return this.inspectedName;
	    };

	    Element.prototype.toVisualStructure = function(callback) {};

	    Element.prototype.abortAnimations = function() {
	      if (this._activeAnimator) {
	        return this._activeAnimator.abort();
	      }
	    };

	    Element.prototype.finishAnimations = function() {
	      if (this._activeAnimator) {
	        return this._activeAnimator.finish();
	      }
	    };

	    Element.prototype.startChildAddedAnimation = function(child) {
	      var animation;
	      if (animation = child.getPendingAddedAnimation() || (this._propertiesInitialized && this.getPendingChildAddedAnimation())) {
	        return child.animate = animation;
	      }
	    };

	    Element.prototype._useStagingBitmap = function() {
	      return (this.getHasChildren() || this.getIsMask()) && (this._compositeMode !== "normal" || this._opacity < 1 || this.getChildRequiresParentStagingBitmap());
	    };

	    Element.prototype._drawChildren = function(target, elementToTargetMatrix, usingStagingBitmap) {
	      var child, j, len, ref;
	      ref = this.children;
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        if (child.visible) {
	          child.draw(target, child.elementToTargetMatrix(elementToTargetMatrix));
	        }
	      }
	      return this.children;
	    };

	    Element.prototype._renderStagingBitmap = function(targetSpaceDrawArea, elementToTargetMatrix, stagingBitmap) {
	      targetSpaceDrawArea = targetSpaceDrawArea.roundOut();
	      if (!targetSpaceDrawArea.getLocationIsZero()) {
	        elementToTargetMatrix = elementToTargetMatrix.translate(-targetSpaceDrawArea.x, -targetSpaceDrawArea.y);
	      }
	      stats.stagingBitmapsCreated++;
	      stagingBitmap || (stagingBitmap = this.bitmapFactory.newBitmap(targetSpaceDrawArea.size));
	      this._currentDrawTarget = stagingBitmap;
	      this._currentToTargetMatrix = elementToTargetMatrix;
	      if (this.getHasCustomClipping()) {
	        this._clipDraw(null, stagingBitmap, elementToTargetMatrix);
	      } else {
	        this._drawChildren(stagingBitmap, elementToTargetMatrix, true);
	      }
	      return stagingBitmap;
	    };

	    Element.prototype._accountForOverdraw = function(proposedTargetSpaceDrawArea, elementToTargetMatrix) {
	      var child, j, len, ref;
	      ref = this.children;
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        if (child.overDraw) {
	          proposedTargetSpaceDrawArea = child.overDraw(proposedTargetSpaceDrawArea, elementToTargetMatrix);
	        }
	      }
	      return proposedTargetSpaceDrawArea;
	    };

	    Element.prototype._drawWithStagingBitmap = function(targetSpaceDrawArea, target, elementToTargetMatrix) {
	      var stagingBitmap;
	      targetSpaceDrawArea = this._accountForOverdraw(targetSpaceDrawArea, elementToTargetMatrix);
	      stagingBitmap = this._renderStagingBitmap(targetSpaceDrawArea, elementToTargetMatrix);
	      return target.drawBitmap(targetSpaceDrawArea.locationMatrix, stagingBitmap, {
	        compositeMode: this._compositeMode,
	        opacity: this.opacity
	      });
	    };

	    Element.prototype._clippedDrawWithStagingBitmapInElementSpace = function(target, elementToTargetMatrix) {
	      var m, s, stagingBitmap;
	      s = elementToTargetMatrix.getExactScale();
	      stagingBitmap = this._renderStagingBitmap(rect(0, 0, this._currentSize.x * s.x, this._currentSize.y * s.y), m = Matrix.scale(s));
	      return target.drawBitmap(m.inv.mul(elementToTargetMatrix), stagingBitmap, {
	        compositeMode: this._compositeMode,
	        opacity: this.opacity
	      });
	    };

	    Element.prototype._fullDraw = function(targetSpaceDrawArea, target, elementToTargetMatrix) {
	      if (this._clip) {
	        return this._clipDraw(targetSpaceDrawArea, target, elementToTargetMatrix);
	      } else if (this._useStagingBitmap()) {
	        return this._drawWithStagingBitmap(targetSpaceDrawArea, target, elementToTargetMatrix);
	      } else {
	        return this._drawChildren(target, elementToTargetMatrix);
	      }
	    };

	    Element.prototype._clipDraw = function(clipArea, target, elementToTargetMatrix) {
	      if (!elementToTargetMatrix.getIsTranslateAndScaleOnly() || this._useStagingBitmap()) {
	        return this._clippedDrawWithStagingBitmapInElementSpace(target, elementToTargetMatrix);
	      } else {
	        return target.clippedTo(clipArea, (function(_this) {
	          return function() {
	            return _this._drawChildren(target, elementToTargetMatrix);
	          };
	        })(this));
	      }
	    };

	    Element.getter({
	      hasCustomClipping: function() {
	        return false;
	      }
	    });

	    Element.prototype.draw = function(target, elementToTargetMatrix) {
	      var targetSpaceDrawArea;
	      stats.elementsDrawn++;
	      try {
	        if (this.opacity < 1 / 256) {
	          return;
	        }
	        this._currentDrawTarget = target;
	        this._currentToTargetMatrix = elementToTargetMatrix;
	        targetSpaceDrawArea = this.drawAreaIn(elementToTargetMatrix).intersection(target.getClippingArea());
	        if (targetSpaceDrawArea.area > 0) {
	          return this._cachedFullDraw(targetSpaceDrawArea, target, elementToTargetMatrix);
	        }
	      } finally {
	        this._currentDrawTarget = this._currentToTargetMatrix = null;
	      }
	    };

	    Element.prototype.preCache = function() {
	      var child, j, len, ref, sum;
	      sum = 0;
	      if (this.getCacheDraw()) {
	        if (this._drawCacheBitmap) {

	        } else {
	          this._generateDrawCache();
	          sum++;
	        }
	      } else {
	        ref = this.getChildren();
	        for (j = 0, len = ref.length; j < len; j++) {
	          child = ref[j];
	          sum += child.preCache();
	        }
	      }
	      return sum;
	    };

	    Element.prototype.whenCached = function(callback) {
	      return this.getCanvasElement().queueDrawEpochPreprocessor((function(_this) {
	        return function() {
	          _this.preCache();
	          return drawEpoch.onNextReady(callback);
	        };
	      })(this));
	    };

	    Element.prototype._initDrawCache = function() {
	      this._drawCacheBitmap = null;
	      this._drawCacheBitmapInvalid = false;
	      this._elementDrawChangedThisFrame = true;
	      this._drawCacheToElementMatrix = null;
	      this._uncachableDrawCount = 0;
	      return this._cachableDrawCount = 0;
	    };

	    Element.prototype._drawPropertiesChanged = function() {
	      if (this._drawCacheBitmap) {
	        this._clearDrawCache();
	      }
	      return this._elementDrawChangedThisFrame = true;
	    };

	    Element.prototype._elementToParentMatrixChanged = function(oldElementToParentMatrix) {};

	    Element.prototype._descendantNeedsRedrawing = function(descendant) {
	      if (this._drawCacheBitmap) {
	        this._clearDrawCache();
	      }
	      return this._elementDrawChangedThisFrame = true;
	    };


	    /*
	    
	    When clearing drawCaching for this branch of the AIM, we stop recursing
	    down a sub-branch when we hit an existing drawCache. When a drawCache is
	    created, all its children's drawCaches are removed. Therefor when a
	    drawCache exists, all children are drawCache free.
	     */

	    Element.prototype.__clearDrawCacheCallbackFromDrawCacheManager = function() {
	      return this._drawCacheBitmap = null;
	    };

	    Element.prototype._clearDrawCache = function(force) {
	      if (this._cacheDraw === "locked") {
	        this._drawCacheBitmapInvalid = true;
	        return;
	      }
	      if (this._drawCacheBitmap) {
	        drawCacheManager.doneWithCacheBitmap(this);
	      }
	      return null;
	    };

	    Element.prototype._releaseAllCacheBitmaps = function() {
	      var child, count, j, len, ref;
	      count = 0;
	      if (this._drawCacheBitmap) {
	        drawCacheManager.doneWithCacheBitmap(this);
	        count++;
	      }
	      ref = this._children;
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        count += child._releaseAllCacheBitmaps();
	      }
	      return count;
	    };

	    Element._drawCachingEnabled = drawCachingEnabled;

	    Element.prototype._generateDrawCache = function() {
	      var _drawCachingEnabled, cacheDrawArea, drawArea, pixelsPerPoint;
	      globalEpochCycle.logEvent("generateDrawCache", "same-id");
	      drawArea = this.getElementSpaceDrawArea().roundOut();
	      if (drawArea.getArea() <= 0) {
	        return;
	      }
	      pixelsPerPoint = this.getDevicePixelsPerPoint();
	      cacheDrawArea = drawArea.mul(pixelsPerPoint);
	      if (cacheDrawArea.size.area > 2048 * 768 * 2) {
	        return;
	      }
	      this._clearDrawCache();
	      this._drawCacheToElementMatrix = Matrix.translate(-drawArea.x, -drawArea.y).scale(pixelsPerPoint).inv;
	      if (!cacheAggressively) {
	        _drawCachingEnabled = Element._drawCachingEnabled;
	        Element._drawCachingEnabled = false;
	      }
	      this._drawCacheBitmap = this._renderStagingBitmap(cacheDrawArea, Matrix.scale(pixelsPerPoint), drawCacheManager.allocateCacheBitmap(this, cacheDrawArea.size));
	      log({
	        _generateDrawCache: this._drawCacheBitmap,
	        element: this.inspectedName
	      });
	      this._drawCacheBitmapInvalid = false;
	      if (!cacheAggressively) {
	        return Element._drawCachingEnabled = _drawCachingEnabled;
	      }
	    };

	    Element.prototype._generateDrawCacheIfNeeded = function() {
	      var _cacheDraw;
	      _cacheDraw = this._cacheDraw;
	      if (!_cacheDraw) {
	        if (this._drawCacheBitmap) {
	          this._clearDrawCache();
	        }
	        return false;
	      } else if (_cacheDraw === 'locked' && this._drawCacheBitmap) {
	        return false;
	      } else if (this._elementDrawChangedThisFrame && _cacheDraw === "auto") {
	        this._uncachableDrawCount++;
	        this._elementDrawChangedThisFrame = false;
	        return false;
	      } else {
	        this._cachableDrawCount++;
	        if ((!this._drawCacheBitmap || this._drawCacheBitmapInvalid) && Element._drawCachingEnabled && this.getCacheable() && (_cacheDraw !== "auto" || this._cachableDrawCount >= this._uncachableDrawCount)) {
	          this._generateDrawCache();
	          return true;
	        }
	      }
	    };

	    Element.prototype._cachedFullDraw = function(targetSpaceDrawArea, target, elementToTargetMatrix) {
	      var drawCacheToTargetMatrix;
	      this._generateDrawCacheIfNeeded();
	      if (this._drawCacheBitmap) {
	        drawCacheManager.useDrawCache(this);
	        drawCacheToTargetMatrix = this._drawCacheToElementMatrix.mul(elementToTargetMatrix);
	        return target.drawBitmap(drawCacheToTargetMatrix, this._drawCacheBitmap, {
	          opacity: this.opacity,
	          compositeMode: this.compositeMode
	        });
	      } else {
	        return this._fullDraw(targetSpaceDrawArea, target, elementToTargetMatrix);
	      }
	    };

	    Element.getter({
	      cacheable: function() {
	        return true;
	      }
	    });

	    Element.prototype.toBitmap = function(options, callback) {
	      if (options == null) {
	        options = {};
	      }
	      if (typeof callback !== "function") {
	        throw new Error("callback now required for toBitmap");
	      }
	      if (options.elementSpaceDrawArea) {
	        throw new Error("elementSpaceDrawArea option depricated");
	      }
	      return stateEpoch.onNextReady((function(_this) {
	        return function() {
	          var areaOptions, backgroundColor, bitmap, bitmapFactory, drawArea, elementToBitmapMatrix, elementToDrawAreaMatrix, mode, oldBitmapFactory, pixelsPerPoint, ratio, scale, size;
	          areaOptions = (function() {
	            switch (options.area || "drawArea") {
	              case "logicalArea":
	                return {
	                  drawArea: this.logicalArea,
	                  elementToDrawAreaMatrix: identityMatrix
	                };
	              case "paddedArea":
	                return {
	                  drawArea: this.paddedArea,
	                  elementToDrawAreaMatrix: identityMatrix
	                };
	              case "drawArea":
	                return {
	                  drawArea: this.elementSpaceDrawArea,
	                  elementToDrawAreaMatrix: identityMatrix
	                };
	              case "parentLogicalArea":
	                return {
	                  drawArea: this.parent.logicalArea,
	                  elementToDrawAreaMatrix: this.elementToParentMatrix
	                };
	              case "parentPaddedArea":
	                return {
	                  drawArea: this.parent.paddedArea,
	                  elementToDrawAreaMatrix: this.elementToParentMatrix
	                };
	              case "parentDrawArea":
	                return {
	                  drawArea: this.parent.elementSpaceDrawArea,
	                  elementToDrawAreaMatrix: this.elementToParentMatrix
	                };
	              case "targetDrawArea":
	                return {
	                  drawArea: this.drawAreaIn(options.elementToDrawAreaMatrix || identityMatrix),
	                  elementToDrawAreaMatrix: identityMatrix
	                };
	              default:
	                throw new Error("invalid area option: " + options.area);
	            }
	          }).call(_this);
	          options = merge(areaOptions, options);
	          drawArea = options.drawArea, elementToDrawAreaMatrix = options.elementToDrawAreaMatrix, size = options.size, mode = options.mode, bitmapFactory = options.bitmapFactory, pixelsPerPoint = options.pixelsPerPoint, backgroundColor = options.backgroundColor;
	          pixelsPerPoint || (pixelsPerPoint = 1);
	          mode || (mode = "fit");
	          size = point(size || drawArea.size).mul(pixelsPerPoint).ceil();
	          ratio = size.div(drawArea.size);
	          if (mode === "zoom") {
	            scale = ratio.max();
	          } else {
	            scale = ratio.min();
	            size = drawArea.size.mul(scale).ceil();
	          }
	          elementToBitmapMatrix = elementToDrawAreaMatrix.mul(Matrix.translate(drawArea.cc.neg).scale(scale).translate(size.cc));
	          oldBitmapFactory = _this._bitmapFactory;
	          _this._bitmapFactory = bitmapFactory || _this.bitmapFactory;
	          bitmap = _this.bitmapFactory.newBitmap(size);
	          bitmap.pixelsPerPoint = pixelsPerPoint;
	          if (backgroundColor) {
	            bitmap.clear(backgroundColor);
	          }
	          _this.draw(bitmap, elementToBitmapMatrix);
	          _this._bitmapFactory = oldBitmapFactory;
	          return callback(bitmap, elementToBitmapMatrix);
	        };
	      })(this));
	    };

	    Element.prototype.logBitmap = function(options) {
	      if (options == null) {
	        options = {};
	      }
	      options.pixelsPerPoint || (options.pixelsPerPoint = this.devicePixelsPerPoint);
	      return this.toBitmap(options, (function(_this) {
	        return function(bitmap) {
	          return _this.log({
	            size: _this.currentSize,
	            location: _this.currentLocation,
	            size: _this.size,
	            location: _this.location,
	            elementToParentMatrix: _this.elementToParentMatrix,
	            bitmap: bitmap
	          });
	        };
	      })(this));
	    };

	    Element.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	      if (options == null) {
	        options = {};
	      }
	    };

	    Element.prototype.strokeShape = function(target, elementToTargetMatrix, options) {
	      if (options == null) {
	        options = {};
	      }
	    };

	    Element.prototype.compositingChanged = function() {
	      return this.getOpacityChanged() || this.getCompositeModeChanged();
	    };

	    Element.getter({
	      redrawRequired: function() {
	        var _pendingState;
	        _pendingState = this._pendingState;
	        return _pendingState.__drawPropertiesChanged || (this._opacity !== _pendingState._opacity) || (this._compositeMode !== _pendingState._compositeMode) || (this._parent !== _pendingState._parent) || (!this._currentSize.eq(_pendingState._currentSize)) || (!this._elementToParentMatrix.eq(_pendingState._elementToParentMatrix));
	      }
	    });

	    Element.prototype._setChildrenOnly = function(c) {
	      this._pendingState._children = c;
	      this._elementChanged();
	      return c;
	    };

	    Element.prototype._setParentOnly = function(p) {
	      this._pendingState._parent = p;
	      this._elementChanged();
	      return p;
	    };

	    Element.prototype._setLocationFromLayout = function(l) {
	      return this._setLocationFromLayoutXY(l.x, l.y);
	    };

	    Element.prototype._setLocationFromLayoutXY = function(x, y) {
	      var e2p, newTx, newTy, tx, ty;
	      if (this._locationLayoutDisabled) {
	        return;
	      }
	      e2p = this.getPendingElementToParentMatrix();
	      tx = e2p.tx, ty = e2p.ty;
	      newTx = tx + x - this.getPendingCurrentLocationX();
	      newTy = ty + y - this.getPendingCurrentLocationY();
	      if (tx !== newTx || ty !== newTy) {
	        this._pendingState._elementToParentMatrix = e2p.withLocationXY(newTx, newTy);
	        this._elementChanged();
	      }
	      return this;
	    };

	    Element.prototype._sizeDirectlyEffectsDrawing = function() {
	      var c;
	      return ((c = this.getPendingChildren()) && c.length === 0) || this.getPendingClip();
	    };

	    Element.prototype._setSizeFromLayout = function(s) {
	      var x, y;
	      x = s.x, y = s.y;
	      if (!s.eq(this.getPendingCurrentSize())) {
	        this._pendingState._currentSize = s;
	        if (this._sizeDirectlyEffectsDrawing()) {
	          this._pendingState.__drawPropertiesChanged = true;
	        }
	        this._elementChanged();
	        return s;
	      }
	    };

	    Element.prototype._setPaddingFromLayout = function(p) {
	      this._pendingState._currentPadding = p;
	      this._elementChanged();
	      return p;
	    };

	    Element.prototype._setMarginFromLayout = function(m) {
	      this._pendingState._currentMargin = m;
	      this._elementChanged();
	      return m;
	    };

	    Element.prototype._setElementToParentMatrixWithoutChangingLocation = function(m) {
	      var ax, axis, ay, o, size, x1, x2, y1, y2;
	      o = this._pendingState;
	      size = o._currentSize;
	      axis = o._axis;
	      ax = size.x * axis.x;
	      ay = size.y * axis.y;
	      x1 = o._elementToParentMatrix.transformX(ax, ay);
	      y1 = o._elementToParentMatrix.transformY(ax, ay);
	      x2 = m.transformX(ax, ay);
	      y2 = m.transformY(ax, ay);
	      return this.setElementToParentMatrix(m.translate(x1 - x2, y1 - y2));
	    };

	    Element.prototype.elementToElementMatrix = function(o) {
	      if (o === this) {
	        return matrix();
	      } else {
	        return this.getElementToAbsMatrix().mul(o.getAbsToElementMatrix());
	      }
	    };

	    Element.prototype.elementToTargetMatrix = function(parentToTargetMatrix) {
	      return this._elementToParentMatrix.mul(parentToTargetMatrix);
	    };


	    /*
	    returns:
	      if ancestor is not an actual ancestor to v
	        @elementToAbsMatrix.transform v
	      else
	        ancestor.absToElementMatrix.transform @elementToAbsMatrix.transform v
	    performance:
	      only creates one object, the returned point, no matter how far away the ancestor is.
	     */

	    Element.prototype.transformToAncestorSpace = function(v, ancestor) {
	      var element, x, y;
	      x = v.x, y = v.y;
	      element = this;
	      while (element) {
	        x = element._elementToParentMatrix.transformX(x, y);
	        y = element._elementToParentMatrix.transformY(x, y);
	        element = element.parent;
	        if (element === ancestor) {
	          return point(x, y);
	        }
	      }
	      return null;
	    };

	    Element.prototype.transformToAncestorSpaceX = function(v, ancestor) {
	      var element, x, y;
	      if (isPoint(v)) {
	        x = v.x, y = v.y;
	      } else {
	        x = v;
	        y = 0;
	      }
	      element = this;
	      while (element) {
	        x = element._elementToParentMatrix.transformX(x, y);
	        y = element._elementToParentMatrix.transformY(x, y);
	        element = element.parent;
	        if (element === ancestor) {
	          return x;
	        }
	      }
	      return null;
	    };

	    Element.prototype.transformToAncestorSpaceY = function(v, ancestor) {
	      var element, x, y;
	      if (isPoint(v)) {
	        x = v.x, y = v.y;
	      } else {
	        x = 0;
	        y = v;
	      }
	      element = this;
	      while (element) {
	        x = element._elementToParentMatrix.transformX(x, y);
	        y = element._elementToParentMatrix.transformY(x, y);
	        element = element.parent;
	        if (element === ancestor) {
	          return y;
	        }
	      }
	      return null;
	    };

	    Element.prototype.pointInsideChildren = function(p) {
	      return !!(this._visible && !!this.childUnderPoint(this.getParentToElementMatrix().transform(p)));
	    };

	    Element.prototype.pointInside = function(p) {
	      var h, p2EM, padding, size, w, x, y;
	      return this._visible && !this.getIsMask() && (function() {
	        switch (this._receivePointerEvents) {
	          case "never":
	            return false;
	          case "passToChildren":
	            return this.pointInsideChildren(p);
	          case "inPaddedArea":
	            p2EM = this.getParentToElementMatrix();
	            size = this._currentSize;
	            padding = this._currentPadding;
	            x = p2EM.transformX(p.x, p.y);
	            y = p2EM.transformY(p.x, p.y);
	            w = size.x - padding.getWidth();
	            h = size.y - padding.getHeight();
	            return x >= 0 && y >= 0 && x < w && y < h;
	          case "inLogicalArea":
	            p2EM = this.getParentToElementMatrix();
	            size = this._currentSize;
	            padding = this._currentPadding;
	            x = p2EM.transformX(p.x, p.y);
	            y = p2EM.transformY(p.x, p.y);
	            x += padding.left;
	            y += padding.top;
	            w = size.x;
	            h = size.y;
	            return x >= 0 && y >= 0 && x < w && y < h;
	        }
	      }).call(this);
	    };

	    Element.prototype.childUnderPoint = function(pointInElementSpace) {
	      var child, j, ref;
	      ref = this._children;
	      for (j = ref.length - 1; j >= 0; j += -1) {
	        child = ref[j];
	        if (child.pointInside(pointInElementSpace)) {
	          return child;
	        }
	      }
	      return false;
	    };

	    Element.prototype.drawAreaIn = function(elementToTargetMatrix) {
	      return elementToTargetMatrix.transformBoundingRect(this.getElementSpaceDrawArea());
	    };

	    Element.prototype._computeElementSpaceDrawArea = function() {
	      var child, elementSpaceChildDrawArea, elementSpaceDrawArea, j, len, ref;
	      if (this.getPendingChildren().length > 0 && !this.getPendingClip()) {
	        elementSpaceDrawArea = rect();
	        ref = this.children;
	        for (j = 0, len = ref.length; j < len; j++) {
	          child = ref[j];
	          elementSpaceChildDrawArea = child.getParentSpaceDrawArea();
	          switch (child.compositeMode) {
	            case "alphamask":
	              elementSpaceChildDrawArea.intersectInto(elementSpaceDrawArea);
	              break;
	            case "sourcein":
	            case "target_alphamask":
	            case "inverse_alphamask":
	              null;
	              break;
	            case "normal":
	            case "add":
	            case "destover":
	            case "replace":
	              elementSpaceChildDrawArea.unionInto(elementSpaceDrawArea);
	              break;
	            default:
	              throw new Error("unknown compositeMode:" + child.compositeMode);
	          }
	        }
	        return elementSpaceDrawArea;
	      } else {

	        /*
	        TODO: should we find out if we even actually need "pending"?
	        
	        Someday parent layout will have the option to be relative to children's draw area.
	        Probably also the case that children could be relative to parent's draw area.
	        
	        USE-CASE: Imikimi's Font effects - fills need to, say, cover all of an outline
	          which requires them to cover the outline's drawarea
	         */
	        return this.getPendingBaseDrawArea();
	      }
	    };

	    Element.prototype._drawAreaChanged = function() {
	      var p;
	      if (this._elementSpaceDrawArea) {
	        this._elementSpaceDrawArea = null;
	        if (p = this.getPendingParent()) {
	          return p._childsDrawAreaChanged();
	        }
	      }
	    };

	    Element.prototype._childsDrawAreaChanged = function() {
	      if (!this.getPendingClip()) {
	        return this._drawAreaChanged();
	      }
	    };

	    Element.prototype.childIndex = function(child) {
	      return this._children.indexOf(child);
	    };

	    Element.prototype.pendingChildIndex = function(child) {
	      return this.getPendingChildren().indexOf(child);
	    };

	    Element.prototype.find = function(pattern, arg, matches) {
	      var child, findAll, functionResult, j, len, matchFound, ref, ref1, usedFunction, verbose;
	      ref = arg != null ? arg : {}, findAll = ref.findAll, verbose = ref.verbose;
	      if (matches == null) {
	        matches = [];
	      }
	      matchFound = (usedFunction = isFunction(pattern)) ? !!(functionResult = pattern(this)) : this.pathStringWithNames.match(pattern);
	      if (matchFound) {
	        if (verbose) {
	          this.log(usedFunction ? {
	            found: this.inspectedNameWithoutIds,
	            functionResult: functionResult
	          } : {
	            found: this.inspectedNameWithoutIds,
	            pattern: pattern,
	            matched: this.pathStringWithNames
	          });
	        }
	        matches.push(this);
	      }
	      if (!matchFound || findAll) {
	        ref1 = this._children;
	        for (j = 0, len = ref1.length; j < len; j++) {
	          child = ref1[j];
	          child.find(pattern, arguments[1], matches);
	        }
	      }
	      return matches;
	    };

	    Element.getter({
	      elementPath: function() {
	        if (this.parent) {
	          return this.parent.elementPath + " > " + this.classPathNameAndId;
	        } else {
	          return this.classPathNameAndId;
	        }
	      },
	      elementPathWithoutIds: function() {
	        if (this.parent) {
	          return this.parent.elementPath + " > " + this.classPathNameAndId;
	        } else {
	          return this.classPathNameAndId;
	        }
	      },
	      topMostParent: function() {
	        if (this._parent) {
	          return this._parent.topMostParent || this._parent;
	        } else {
	          return null;
	        }
	      },
	      hasChildren: function() {
	        return this._children.length > 0;
	      },
	      reverseChildren: function() {
	        return this._children.slice().reverse();
	      },
	      childrenMap: function() {
	        return (new Map).tap((function(_this) {
	          return function(map) {
	            var child, j, len, ref, results1;
	            ref = _this._children;
	            results1 = [];
	            for (j = 0, len = ref.length; j < len; j++) {
	              child = ref[j];
	              results1.push(map.set(child, true));
	            }
	            return results1;
	          };
	        })(this));
	      },
	      elementPath: function() {
	        var elementPath;
	        if (this.parent) {
	          elementPath = this.parent.elementPath;
	          elementPath.push(this);
	          return elementPath;
	        } else {
	          return [this];
	        }
	      },
	      pathIdString: function() {
	        var p;
	        return ((function() {
	          var j, len, ref, results1;
	          ref = this.elementPath;
	          results1 = [];
	          for (j = 0, len = ref.length; j < len; j++) {
	            p = ref[j];
	            results1.push(p.className + p.objectId);
	          }
	          return results1;
	        }).call(this)).join('/');
	      },
	      pathString: function() {
	        var p;
	        return ((function() {
	          var j, len, ref, results1;
	          ref = this.elementPath;
	          results1 = [];
	          for (j = 0, len = ref.length; j < len; j++) {
	            p = ref[j];
	            results1.push(p.className);
	          }
	          return results1;
	        }).call(this)).join('/');
	      },
	      pathStringWithNames: function() {
	        var p;
	        return ((function() {
	          var j, len, ref, results1;
	          ref = this.elementPath;
	          results1 = [];
	          for (j = 0, len = ref.length; j < len; j++) {
	            p = ref[j];
	            results1.push(p.inspectedNameWithoutIds);
	          }
	          return results1;
	        }).call(this)).join('/');
	      },
	      fullPathString: function() {
	        var p;
	        return ((function() {
	          var j, len, ref, results1;
	          ref = this.elementPath;
	          results1 = [];
	          for (j = 0, len = ref.length; j < len; j++) {
	            p = ref[j];
	            results1.push(p.classPathNameAndId);
	          }
	          return results1;
	        }).call(this)).join('/');
	      }
	    });

	    childrenWithout = function(children, child) {
	      var index;
	      children = children.slice();
	      if ((index = children.indexOf(child)) >= 0) {
	        remove(children, index, 1);
	      }
	      return children;
	    };

	    Element.prototype.childrenWithout = function(child) {
	      return childrenWithout(this._children, child);
	    };

	    Element.prototype.pendingChildrenWithout = function(child) {
	      return childrenWithout(this.getPendingChildren(), child);
	    };

	    Element.prototype.insertChild = function(child, index) {
	      var children;
	      children = this.pendingChildrenWithout(child);
	      if (index < 0) {
	        index = children.length + 1 + index;
	      }
	      this.setChildren(insert(children, index, child));
	      return child;
	    };

	    Element.prototype.addChild = function(child) {
	      return this.insertChild(child, -1);
	    };

	    Element.prototype.addChildBelow = function(child, belowChild) {
	      var children;
	      if (!(belowChild !== child && indexOf.call(this.getPendingChildren(), belowChild) >= 0)) {
	        return this.insertChild(child, 0);
	      }
	      children = this.pendingChildrenWithout(child);
	      this.setChildren(insert(children, children.indexOf(belowChild), child));
	      return child;
	    };

	    Element.prototype.addChildAbove = function(child, aboveChild) {
	      var children;
	      if (!(aboveChild !== child && indexOf.call(this.getPendingChildren(), aboveChild) >= 0)) {
	        return this.insertChild(child, -1);
	      }
	      children = this.pendingChildrenWithout(child);
	      this.setChildren(insert(children, children.indexOf(aboveChild) + 1, child));
	      return child;
	    };

	    Element.prototype.addBelow = function(sibling) {
	      return sibling.getPendingParent().addChildBelow(this, sibling);
	    };

	    Element.prototype.addAbove = function(sibling) {
	      return sibling.getPendingParent().addChildAbove(this, sibling);
	    };

	    Element.prototype.addChildBelowMask = function(child) {
	      return this.addChildBelow(child, this.getPendingFirstMask());
	    };

	    Element.prototype.placeRelativeToSibling = function(siblingOrPair, offset) {
	      var children, parent, sibling;
	      if (siblingOrPair && siblingOrPair.constructor === Array) {
	        if (siblingOrPair.length !== 2) {
	          throw new Error("If array is provided, it must be formated: [parent, sibling]");
	        }
	        parent = siblingOrPair[0], sibling = siblingOrPair[1];
	        if (sibling && sibling.getPendingParent() !== parent) {
	          throw new Error("Sibling's current parent does not match specified parent. Did the sibling move?");
	        }
	      } else {
	        sibling = siblingOrPair;
	        parent = (sibling != null ? sibling.getPendingParent() : void 0) || this.getPendingParent();
	      }
	      if (!parent) {
	        if (!sibling) {
	          return this.setParent(null);
	        } else {
	          throw new Error("Can't place next to sibling. Sibling is an orphan.");
	        }
	      }
	      children = parent.pendingChildrenWithout(this);
	      return parent.setChildren(insert(children, children.indexOf(sibling) + offset, this));
	    };

	    Element.prototype.removeChild = function(child) {
	      if (!child) {
	        return;
	      }
	      this.setChildren(this.pendingChildrenWithout(child));
	      return child;
	    };

	    Element.prototype.releaseChildren = function() {
	      return this.setChildren([]);
	    };

	    Element.prototype.removeFromParent = function() {
	      var p, ref;
	      if ((ref = (p = this.getPendingParent())) != null) {
	        ref.removeChild(this);
	      }
	      return p;
	    };

	    Element.prototype.moveChildToFront = function(child) {
	      return this.insertChild(child, -1);
	    };

	    Element.prototype.moveChildToBack = function(child) {
	      return this.insertChild(child, 0);
	    };

	    Element.prototype.moveToFront = function() {
	      var ref;
	      return (ref = this.getPendingParent()) != null ? ref.insertChild(this, -1) : void 0;
	    };

	    Element.prototype.moveToBack = function() {
	      var ref;
	      return (ref = this.getPendingParent()) != null ? ref.insertChild(this, 0) : void 0;
	    };

	    Element.prototype.moveBelow = function(sibling) {
	      var ref;
	      return sibling != null ? (ref = sibling.getPendingParent()) != null ? ref.addChildBelow(this, sibling) : void 0 : void 0;
	    };

	    Element.prototype.moveBelowMask = function() {
	      var ref;
	      return (ref = this.getPendingParent()) != null ? ref.addChildBelowMask(this) : void 0;
	    };

	    Element.prototype.depth = function() {
	      if (this.parent) {
	        return this.parent.depth() + 1;
	      } else {
	        return 1;
	      }
	    };

	    Element.getter({
	      focused: function() {
	        var c;
	        return (c = this.getCanvasElement()) && c.isFocused(this);
	      }
	    });

	    Element.prototype.focus = function() {
	      var ref;
	      return (ref = this.getCanvasElement()) != null ? ref.focusElement(this) : void 0;
	    };

	    Element.prototype.blur = function() {
	      var ref;
	      if (!this.focused) {
	        return;
	      }
	      return (ref = this.getCanvasElement()) != null ? ref.focusElement(this.parent) : void 0;
	    };

	    Element.prototype.capturePointerEvents = function() {
	      var ref;
	      return (ref = this.getCanvasElement()) != null ? ref.capturePointerEvents(this) : void 0;
	    };

	    Element.getter({
	      pointerEventsCaptured: function() {
	        var ref;
	        return (ref = this.getCanvasElement()) != null ? ref.pointerEventsCapturedBy(this) : void 0;
	      }
	    });

	    return Element;

	  })(ElementBase));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(89), __webpack_require__(8), __webpack_require__(100), __webpack_require__(152), __webpack_require__(155)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation, arg, StateEpoch, arg1) {
	  var BaseObject, ElementBase, EventedObjectBase, blankOptions, capitalize, compactFlatten, elementFactory, extendClone, globalCount, inspect, isNumber, isPlainObject, log, merge, peek, plainObjectsDeepEq, present, propInternalName, shallowEq, stateEpoch, statePropertyKeyTest;
	  EventedObjectBase = arg.EventedObjectBase;
	  elementFactory = arg1.elementFactory;
	  stateEpoch = StateEpoch.stateEpoch;
	  capitalize = Foundation.capitalize, shallowEq = Foundation.shallowEq, plainObjectsDeepEq = Foundation.plainObjectsDeepEq, BaseObject = Foundation.BaseObject, merge = Foundation.merge, inspect = Foundation.inspect, log = Foundation.log, extendClone = Foundation.extendClone, isNumber = Foundation.isNumber, compactFlatten = Foundation.compactFlatten, globalCount = Foundation.globalCount, isPlainObject = Foundation.isPlainObject, peek = Foundation.peek, present = Foundation.present;
	  statePropertyKeyTest = /^_[a-z].*$/;
	  blankOptions = {};
	  propInternalName = BaseObject._propInternalName;
	  return ElementBase = (function(superClass) {
	    var _elementInstanceRegistry, defaultEventHandlerPreprocessor, emptyEventHandlers, initFirstPropertiesHack, inspectedPropsFirst, inspectedPropsNotToInclude, propsEq, shallowPropsEq, virtualPropertySecondPassMetaProperties, virtualPropertySecondPassValues;

	    extend(ElementBase, superClass);

	    ElementBase.registerWithElementFactory = function() {
	      return false;
	    };

	    ElementBase._elementInstanceRegistry = _elementInstanceRegistry = {};

	    ElementBase.propsEq = propsEq = plainObjectsDeepEq;

	    ElementBase.shallowPropsEq = shallowPropsEq = shallowEq;

	    ElementBase.include(EventedObjectBase);

	    ElementBase.postCreate = function() {
	      if (this.registerWithElementFactory()) {
	        elementFactory.register(this);
	      }
	      return ElementBase.__super__.constructor.postCreate.apply(this, arguments);
	    };

	    ElementBase.getElementByInstanceId = function(instanceId) {
	      return _elementInstanceRegistry[instanceId];
	    };

	    ElementBase.prototype._register = function() {
	      var instanceId;
	      if (_elementInstanceRegistry[instanceId = this.getInstanceId()]) {
	        return;
	      }
	      _elementInstanceRegistry[instanceId] = this;
	      return this.eachChild((function(_this) {
	        return function(child) {
	          return child._register();
	        };
	      })(this));
	    };

	    ElementBase.prototype._unregister = function() {
	      var instanceId;
	      if (!_elementInstanceRegistry[instanceId = this.getInstanceId()]) {
	        return;
	      }
	      delete _elementInstanceRegistry[instanceId];
	      this.eachChild((function(_this) {
	        return function(child) {
	          return child._unregister();
	        };
	      })(this));
	      this.queueEvent("unregistered");
	      return null;
	    };

	    ElementBase.getter({
	      isRegistered: function() {
	        return !!_elementInstanceRegistry[this.getInstanceId()];
	      }
	    });

	    ElementBase.prototype._updateRegistryFromPendingState = function() {
	      var pendingParent;
	      if (pendingParent = this.getPendingParent()) {
	        if (pendingParent.getIsRegistered()) {
	          return this._register();
	        }
	      } else {
	        return this._unregister();
	      }
	    };

	    ElementBase.prototype._getIsChangingElement = function() {
	      return stateEpoch._isChangingElement(this);
	    };


	    /*
	    
	    CONCRETE PROPERTIES
	    
	    Concrete-properties (non-virtual properties), once declared, take care of many common property tasks.
	    For a property "foo":
	    
	      * @_foo and @_pendingState._foo are initialized on Element-instantiation
	        - They are either intialized to default values (which are validated for consistency) or
	        - Can be initialized by the instantiating code. Ex: new Element foo:123
	      * Defines the following API
	        - element.foo       # getter, returns @_foo
	        - element.getFoo()  # old-school, alternative getter - faster in some browsers (Safari7 is 100x faster, Safary8 is 3x faster. Chrome is same speed.)
	        - element.foo = v   # setter
	        - element.setFoo(v) # old-school, alternative setter
	        - element.pendingFoo / getPendingFoo() # returns @_pendingState.foo
	        - element.fooChanged / getFooChanged() # returns propsEq @foo, @pendingFoo
	      * Elements can override the default values for properties by setting:
	        - prototype.defaultFoo to something other than undefined
	        - Ex:
	          class MyElement extends Element
	            defaultSize: ps:1
	      * Populates @class.metaProperties.foo with things like default values, names, preprocessors, etc...
	        (this code is in flux; see below for current implementation)
	    
	    options:
	      default:  # default value set when the Element is created
	      setter: (rawNewValue, oldValue, preprocessorAndValidator) ->
	        IN:
	          rawNewValue: the exact, unprocessed, unvalidated value of 'foo' passed by the setYourProp(foo) or @yourProp = foo statement.
	          oldValue: the (custom-setter-processed) value that was last set (i.e. the value in @_pendingState)
	          preprocessorAndValidator: your custom preprocessor and validator are merged into a single function you can use
	            as part of your custom setter if desired. A no-op function is provided by default, so this is always a valid function.
	          this/@: set to the Element the setter was called on
	        OUT: It should return the value to set in @_pendingState.
	        THIS/@: set to the Element the setter was called on
	        SIDE EFFECTS:
	          It should NOT actually set the value in @ or @_pendingState.
	          It is best to use setProperty calls for all side-effects. This maintains the epoch
	          consistency model: mutations only modify pendingState, not current-state.
	    
	        TODO:
	          Verify and implement:
	            Depricate concrete property setters:
	              They are obsolete now that we can have postSetters.
	              "postSetter" plus "preprocess" covers everything, I think.
	    
	        Use when:
	          a) you need to do update other poperties when this one changes AND/OR
	          b) you need to do something different when actually setting the value
	             as opposed to simply preprocessing the value.
	             NOTE: animations use the preprocessor when initializing their to and from values.
	    
	      postSetter: (newValue, oldValue) ->
	        IN:
	          newValue: the value after it has passed through the preprocessor and/or setter
	          oldValue: the (custom-setter-processed) value that was last set
	            i.e. the value in @_pendingState before the setter was called
	        THIS/@: set to the Element the setter was called on
	        OUT: ignored
	        STATE: @_pendingState has been updated with newValue; getPendingPropertyName() will return newValue
	        SIDE EFFECTS:
	          It is best to use setProperty calls for all side-effects. This maintains the epoch
	          consistency model: mutations only modify pendingState, not current-state.
	    
	        Use when:
	          a) You need to update other properties when this one changes. The simplest example is when
	            this property defines default values for other properties that haven't been set yet.
	          b) You need to fire off events when this property changes.
	    
	        This is particularly useful when writing custom Elements which consist of a struture of other
	        elements. Often you'll want to update that structure in response to properties being set.
	    
	      preprocess: (rawValue) -> processedValue
	        IN: raw setter input
	        THIS/@: not set
	        OUT: normalized value to actually set
	    
	      validate: (rawValue) -> boolean
	        IN: raw value
	        THIS/@: not set
	        OUT: true or false
	        Return false if the input is invalid which will trigger an exception.
	    
	    In all cases _elementChanged executes every time the property is set
	    .setter takes precidence over .preprocess takes precidence over .validate; you can only have one
	    
	    VIRTUAL PROPERTIES
	    
	    Virtual properties are specified with the class method: @virtualProperty
	    
	    VPs have the same API from the client's perspective, but they don't have any storage in @ or @_pendingState.
	    Virtual properties are used as alternative "views" into the Element's state. Ex:
	    
	       @location isn't actually stored as a point. It is derived from @elementToParentMatrix and @axis.
	    
	    For a virtual property, "bar":
	    Virtual vs Concrete properties:
	    
	      * Virutal props don't have default values
	      * Virtual props don't create property slots in Element instances or their _pendingState, BUT
	      * Virtual props can have their setters invoked from initializers: new Element bar: 456
	      * preprocessors and validators can be specified
	      * getter and setter specification/semantics are a little different. See below:
	    
	    options:
	      setter: (rawNewvalue, preprocessorAndValidator) ->
	        THIS/@: set to the Element the setter was called on
	        IN:
	          rawNewValue: the exact, unprocessed, unvalidated value of 'foo' passed by the setYourProp(foo) or @yourProp = foo statement.
	          preprocessorAndValidator: your custom preprocessor and validator are merged into a single function you can use
	            as part of your custom setter if desired. A no-op function is provided by default, so this is always a valid function.
	        OUT: ignored
	        SIDE-EFFECTS
	          To maintain Epoch consistency, only use property setters to store side-effects.
	    
	    There are two ways to specify your getters:
	    
	    1) Specify a getter with one argument. That argument is the object you should read state values from.
	       It may either be the Element instance or its @_pendingState depending on if getFoo or getPendingFoo was called.
	       NOTE: 1-argument getters do NOT have "@" bound to the Element instance. @ should not be used.
	    
	       Ex: getter: (o) -> o._foo
	    
	       You can optionally also specify a pendingGetter in the same way if you have to do something special.
	       This is typically needed when reading values from related Elements. Ex:
	    
	         parentFoo:
	           getter:        (o) ->  o._parent._foo
	           pendingGetter: (o) ->  o._parent.getPendingFoo()
	    
	       TODO: I may depricated 1-argument pendingGetters. Getter-pattern #2 tends to be a better way to handle
	       this special-case.
	    
	    2) No-argument getters and pendingGetters DO have @ bound to the Element instance. If you specify
	       a no-argument getter, you MUST also specify it's mirror pendingGetter.
	    
	         parentFoo:
	           getter:        ->  @._parent._foo
	           pendingGetter: ->  @.getPendingParent().getPendingFoo()
	     */

	    ElementBase._defineElementProperty = function(externalName, options) {
	      var _getter, _pendingGetter, customPreprocessor, customSetter, customValidator, defaultValue, drawAreaProperty, drawProperty, getter, internalName, layoutProperty, metaProperties, pendingGetter, postSetter, preprocessor, setter;
	      if (options == null) {
	        options = {};
	      }
	      internalName = propInternalName(externalName);
	      customValidator = options.validate;
	      customPreprocessor = options.preprocess;
	      preprocessor = customPreprocessor && customValidator ? customPreprocessor.length > 1 || customValidator.length > 1 ? function(v, oldValue) {
	        if (!customValidator(v, oldValue)) {
	          throw new Error("invalid value for " + externalName + ": " + (inspect(v)));
	        }
	        return customPreprocessor(v, oldValue);
	      } : function(v) {
	        if (!customValidator(v)) {
	          throw new Error("invalid value for " + externalName + ": " + (inspect(v)));
	        }
	        return customPreprocessor(v);
	      } : customValidator ? customValidator.length > 1 ? function(v, oldValue) {
	        if (!customValidator(v, oldValue)) {
	          throw new Error("invalid value for " + externalName + ": " + (inspect(v)));
	        }
	        return v;
	      } : function(v) {
	        if (!customValidator(v)) {
	          throw new Error("invalid value for " + externalName + ": " + (inspect(v)));
	        }
	        return v;
	      } : customPreprocessor || function(v) {
	        return v;
	      };
	      metaProperties = {
	        internalName: internalName,
	        externalName: externalName,
	        preprocessor: preprocessor,
	        getterName: this._propGetterName(externalName),
	        setterName: this._propSetterName(externalName)
	      };
	      if (options.virtual) {
	        _getter = options.getter;
	        _pendingGetter = options.pendingGetter || options.getter;
	        if (_getter.length === 1) {
	          pendingGetter = function() {
	            return _pendingGetter(this._pendingState);
	          };
	          getter = function() {
	            return _getter(this);
	          };
	        } else {
	          pendingGetter = _pendingGetter || _getter;
	          getter = _getter;
	        }
	        setter = options.setter;
	        metaProperties.virtual = true;
	      } else {
	        metaProperties.internalName = internalName;
	        metaProperties.defaultValue = defaultValue = preprocessor(options["default"]);
	        getter = function() {
	          return this[internalName];
	        };
	        pendingGetter = function() {
	          return this._pendingState[internalName];
	        };
	        layoutProperty = options.layoutProperty, drawProperty = options.drawProperty, drawAreaProperty = options.drawAreaProperty, postSetter = options.postSetter, setter = options.setter;
	        setter = (customSetter = setter) ? postSetter ? function(v) {
	          var newValue, oldValue;
	          oldValue = this._pendingState[internalName];
	          newValue = v;
	          this._pendingState[internalName] = customSetter.call(this, newValue, oldValue, preprocessor);
	          this._elementChanged(layoutProperty, drawProperty, drawAreaProperty);
	          postSetter.call(this, newValue, oldValue);
	          return newValue;
	        } : function(v) {
	          var newValue, oldValue;
	          oldValue = this._pendingState[internalName];
	          newValue = v;
	          this._pendingState[internalName] = customSetter.call(this, newValue, oldValue, preprocessor);
	          this._elementChanged(layoutProperty, drawProperty, drawAreaProperty);
	          return newValue;
	        } : postSetter ? function(v) {
	          var newValue, oldValue;
	          oldValue = this._pendingState[internalName];
	          newValue = this._pendingState[internalName] = preprocessor(v, oldValue);
	          this._elementChanged(layoutProperty, drawProperty, drawAreaProperty);
	          postSetter.call(this, newValue, oldValue);
	          return newValue;
	        } : preprocessor.length > 1 ? function(v) {
	          var newValue, oldValue;
	          oldValue = this._pendingState[internalName];
	          newValue = this._pendingState[internalName] = preprocessor(v, oldValue);
	          this._elementChanged(layoutProperty, drawProperty, drawAreaProperty);
	          return newValue;
	        } : function(v) {
	          var newValue;
	          newValue = this._pendingState[internalName] = preprocessor(v);
	          this._elementChanged(layoutProperty, drawProperty, drawAreaProperty);
	          return newValue;
	        };
	        this._getPropertyInitializerList().push([internalName, defaultValue, externalName]);
	      }
	      this._getMetaProperties()[externalName] = metaProperties;
	      this._addGetter(this.prototype, externalName, getter);
	      this._addGetter(this.prototype, "pending" + capitalize(externalName), pendingGetter);
	      this._addGetter(this.prototype, externalName + "Changed", function() {
	        return !shallowPropsEq(getter.call(this), pendingGetter.call(this));
	      });
	      return this._addSetter(this.prototype, externalName, setter);
	    };

	    ElementBase.prototype._elementChanged = function(layoutPropertyChanged, drawPropertyChanged, drawAreaPropertyChanged) {
	      var _pendingState;
	      _pendingState = this._pendingState;
	      if (layoutPropertyChanged) {
	        if (StateEpoch._stateEpochLayoutInProgress) {
	          console.error("__layoutPropertiesChanged while _stateEpochLayoutInProgress");
	        }
	        _pendingState.__layoutPropertiesChanged = true;
	      }
	      if (drawPropertyChanged) {
	        _pendingState.__drawPropertiesChanged = true;
	      }
	      if (drawAreaPropertyChanged) {
	        _pendingState.__drawAreaChanged = true;
	      }
	      if (!_pendingState.__addedToChangingElements) {
	        _pendingState.__addedToChangingElements = true;
	        return stateEpoch._addChangingElement(this);
	      }
	    };

	    ElementBase._getPropertyInitializerList = function() {
	      return this.getPrototypePropertyExtendedByInheritance("propertyInitializerList", []);
	    };

	    ElementBase._getMetaProperties = function() {
	      return this.getPrototypePropertyExtendedByInheritance("metaProperties", {});
	    };

	    ElementBase.generateSetPropertyDefaults = function() {
	      var defaultName, defaultOverride, externalName, functionString, i, k, metaProperties, preprocessor, propertyInitializerList, v, value;
	      propertyInitializerList = this._getPropertyInitializerList();
	      metaProperties = this._getMetaProperties();
	      functionString = compactFlatten([
	        "(function(options) {", "var _pendingState = this._pendingState;", "var metaProperties = this.metaProperties;", (function() {
	          var j, len, ref, results;
	          results = [];
	          for (i = j = 0, len = propertyInitializerList.length; j < len; i = ++j) {
	            ref = propertyInitializerList[i], k = ref[0], v = ref[1], externalName = ref[2];
	            value = (defaultOverride = this.prototype[defaultName = "default" + capitalize(externalName)]) !== void 0 ? ((preprocessor = metaProperties[externalName].preprocessor) ? this.prototype[defaultName] = preprocessor(defaultOverride) : void 0, "this." + defaultName) : v === null || v === false || v === true || v === void 0 || isNumber(v) ? v : "metaProperties." + externalName + ".defaultValue;";
	            results.push("this." + k + " = _pendingState." + k + " = " + value + ";");
	          }
	          return results;
	        }).call(this), "})"
	      ]).join("\n");
	      return eval(functionString);
	    };

	    initFirstPropertiesHack = {
	      layout: true
	    };

	    emptyEventHandlers = {};

	    ElementBase.prototype._initEventHandlers = function(options) {
	      if (!options.on && this.preprocessEventHandlers !== defaultEventHandlerPreprocessor) {
	        return this.setOn(emptyEventHandlers);
	      }
	    };

	    virtualPropertySecondPassMetaProperties = [];

	    virtualPropertySecondPassValues = [];

	    ElementBase.prototype._initProperties = function(options) {
	      var i, j, k, metaProperties, mp, ref, v, virtualCount;
	      metaProperties = this.metaProperties;
	      if (!this.__proto__.hasOwnProperty("_initPropertiesAuto")) {
	        this.__proto__._initPropertiesAuto = this["class"].generateSetPropertyDefaults();
	      }
	      this._initPropertiesAuto(options);
	      this._initEventHandlers(options);
	      virtualCount = 0;
	      for (k in options) {
	        v = options[k];
	        if (v !== void 0 && (mp = metaProperties[k])) {
	          if (mp.virtual) {
	            virtualPropertySecondPassMetaProperties[virtualCount] = mp;
	            virtualPropertySecondPassValues[virtualCount++] = v;
	          } else {
	            this[mp.setterName](v);
	          }
	        }
	      }
	      for (i = j = 0, ref = virtualCount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        mp = virtualPropertySecondPassMetaProperties[i];
	        v = virtualPropertySecondPassValues[i];
	        this[mp.setterName](v);
	      }
	      this._elementChanged(true, true, true);
	      return null;
	    };

	    ElementBase.prototype.setProperties = function(propertySet) {
	      var metaProperties, mp, property, setterName, value;
	      metaProperties = this.metaProperties;
	      for (property in propertySet) {
	        value = propertySet[property];
	        mp = metaProperties[property];
	        if (!mp.virtual) {
	          if (setterName = mp != null ? mp.setterName : void 0) {
	            this[setterName](value);
	          }
	        }
	      }
	      return propertySet;
	    };

	    ElementBase.prototype.replaceProperties = function(propertySet) {
	      var externalName, metaProperties, mp, property;
	      metaProperties = this.metaProperties;
	      for (property in metaProperties) {
	        mp = metaProperties[property];
	        if (!(!mp.virtual)) {
	          continue;
	        }
	        externalName = mp.externalName;
	        this[mp.setterName](propertySet.hasOwnProperty(externalName) ? propertySet[externalName] : mp.defaultValue);
	      }
	      return propertySet;
	    };

	    ElementBase.prototype.setProperty = function(property, value) {
	      var mp;
	      if (mp = this.metaProperties[property]) {
	        return this[mp.setterName](value);
	      }
	    };

	    ElementBase.prototype.resetProperty = function(property) {
	      var mp;
	      if (mp = this.metaProperties[property]) {
	        return this[mp.setterName](mp.defaultValue);
	      }
	    };

	    ElementBase.prototype.preprocessProperties = function(propertySet) {
	      var metaProperties, mp, property, value;
	      metaProperties = this.metaProperties;
	      for (property in propertySet) {
	        value = propertySet[property];
	        if (mp = metaProperties[property]) {
	          propertySet[property] = mp.preprocessor(value, this[mp.internalName]);
	        }
	      }
	      return propertySet;
	    };

	    ElementBase.prototype.getPendingPropertyValues = function(propertyNames) {
	      var j, len, metaProp, property, ret;
	      ret = {};
	      for (j = 0, len = propertyNames.length; j < len; j++) {
	        property = propertyNames[j];
	        if (metaProp = this.metaProperties[property]) {
	          ret[property] = this._pendingState[metaProp.internalName];
	        }
	      }
	      return ret;
	    };

	    ElementBase.prototype.getPropertyValues = function(propertyNames) {
	      var j, len, metaProp, property, ret;
	      ret = {};
	      for (j = 0, len = propertyNames.length; j < len; j++) {
	        property = propertyNames[j];
	        if (metaProp = this.metaProperties[property]) {
	          ret[property] = this[metaProp.internalName];
	        }
	      }
	      return ret;
	    };

	    ElementBase.prototype._getChangingStateKeys = function() {
	      var k, ref, results, v;
	      ref = this._pendingState;
	      results = [];
	      for (k in ref) {
	        v = ref[k];
	        if (statePropertyKeyTest.test(k) && (!shallowPropsEq(this[k], this._pendingState[k]))) {
	          results.push(k);
	        }
	      }
	      return results;
	    };

	    ElementBase.prototype._sizeChanged = function(newSize, oldSize) {
	      return this.queueEvent("sizeChanged", {
	        oldSize: oldSize,
	        size: newSize
	      });
	    };


	    /*
	    TODO:
	      It would probably be faster overall to:
	    
	        a) move all the __* properties out of _pendingState
	          Probably just promote them to the Element itself
	    
	        b) replace _pendingState with a new, empty object after _applyStateChanges
	    
	        c) for faster Element creation
	          - could we just say the Element "consumes" the props passed to it on creation?
	          - then we can alter that props object
	          - every prop in the passed-in props object gets run through the preprocessors/validators
	          - and the result is assigned back to the props object
	          - then the props object BECOMES the first @_pendingState
	     */

	    ElementBase.prototype._applyStateChanges = function() {
	      var k, oldElementToParentMatrix, ref, releaseCount, v;
	      if (this.getCurrentSizeChanged()) {
	        this._sizeChanged(this._pendingState._currentSize, this._currentSize);
	      }
	      if (this.getParentChanged()) {
	        this.queueEvent("parentChanged", {
	          oldParent: this._parent,
	          parent: this._pendingState._parent
	        });
	      }
	      this.queueEvent("ready");
	      if (this.getElementToParentMatrixChanged()) {
	        oldElementToParentMatrix = this._elementToParentMatrix;
	      }
	      ref = this._pendingState;
	      for (k in ref) {
	        v = ref[k];
	        if (statePropertyKeyTest.test(k)) {
	          this[k] = v;
	        }
	      }
	      if (this._pendingState.__drawAreaChanged) {
	        this._drawAreaChanged();
	      }
	      if (this._pendingState.__drawPropertiesChanged) {
	        this._drawPropertiesChanged();
	      }
	      if (oldElementToParentMatrix) {
	        this._elementToParentMatrixChanged(oldElementToParentMatrix);
	      }
	      this._pendingState.__drawAreaChanged = false;
	      this._pendingState.__drawPropertiesChanged = false;
	      this._pendingState.__layoutPropertiesChanged = false;
	      this._pendingState.__addedToChangingElements = false;
	      if (!this._parent) {
	        return releaseCount = this._releaseAllCacheBitmaps();
	      }
	    };

	    ElementBase.getter({
	      props: function() {
	        var k, ref, ret, virtual;
	        ret = {};
	        ref = this.metaProperties;
	        for (k in ref) {
	          virtual = ref[k].virtual;
	          ret[k] = this[k];
	        }
	        return ret;
	      },
	      concreteProps: function() {
	        var internalName, k, ref, ref1, ret, virtual;
	        ret = {};
	        ref = this.metaProperties;
	        for (k in ref) {
	          ref1 = ref[k], internalName = ref1.internalName, virtual = ref1.virtual;
	          if (!virtual) {
	            ret[k] = this[internalName];
	          }
	        }
	        return ret;
	      },
	      virtualProps: function() {
	        var k, ref, ret, virtual;
	        ret = {};
	        ref = this.metaProperties;
	        for (k in ref) {
	          virtual = ref[k].virtual;
	          if (virtual) {
	            ret[k] = this[k];
	          }
	        }
	        return ret;
	      }
	    });

	    ElementBase.coreProperty = ElementBase.inertProperty = function(map) {
	      var options, prop, results;
	      results = [];
	      for (prop in map) {
	        options = map[prop];
	        results.push(this._defineElementProperty(prop, options));
	      }
	      return results;
	    };

	    ElementBase.virtualProperty = function(map) {
	      var options, prop, results;
	      results = [];
	      for (prop in map) {
	        options = map[prop];
	        options.virtual = true;
	        results.push(this._defineElementProperty(prop, options));
	      }
	      return results;
	    };

	    ElementBase.layoutProperty = function(map) {
	      var options, prop, results;
	      results = [];
	      for (prop in map) {
	        options = map[prop];
	        options.layoutProperty = true;
	        results.push(this._defineElementProperty(prop, options));
	      }
	      return results;
	    };

	    ElementBase.drawProperty = function(map) {
	      var options, prop, results;
	      results = [];
	      for (prop in map) {
	        options = map[prop];
	        options.drawProperty = true;
	        results.push(this._defineElementProperty(prop, options));
	      }
	      return results;
	    };

	    ElementBase.drawLayoutProperty = function(map) {
	      var options, prop, results;
	      results = [];
	      for (prop in map) {
	        options = map[prop];
	        options.layoutProperty = true;
	        options.drawProperty = true;
	        results.push(this._defineElementProperty(prop, options));
	      }
	      return results;
	    };

	    ElementBase.drawAreaProperty = function(map) {
	      var options, prop, results;
	      results = [];
	      for (prop in map) {
	        options = map[prop];
	        options.drawAreaProperty = true;
	        options.drawProperty = true;
	        results.push(this._defineElementProperty(prop, options));
	      }
	      return results;
	    };

	    ElementBase.prototype._layoutPropertyChanged = function() {
	      return this._elementChanged(true);
	    };

	    ElementBase.prototype._drawPropertyChanged = function() {
	      return this._elementChanged(false, true, false);
	    };

	    ElementBase.prototype._drawAreaPropertyChanged = function() {
	      return this._elementChanged(false, true, true);
	    };

	    ElementBase.prototype._releaseAllCacheBitmaps = function() {};

	    ElementBase.prototype._drawAreaChanged = function() {};

	    ElementBase.prototype._drawPropertiesChanged = function() {};

	    ElementBase.prototype._elementToParentMatrixChanged = function(oldElementToParentMatrix) {};

	    ElementBase.prototype._layoutPropertiesChanged = function() {};

	    ElementBase.prototype._updateDrawArea = function() {};

	    ElementBase.prototype._layoutSize = function(parentSize, childrenSize) {
	      return this.getPendingSize().layout(parentSize, childrenSize);
	    };

	    ElementBase.prototype._layoutLocation = function(parentSize) {
	      return this.getPendingLocation().layout(parentSize);
	    };

	    ElementBase.prototype._layoutLocationX = function(parentSize) {
	      return this.getPendingLocation().layoutX(parentSize);
	    };

	    ElementBase.prototype._layoutLocationY = function(parentSize) {
	      return this.getPendingLocation().layoutY(parentSize);
	    };

	    ElementBase.prototype._sizeForChildren = function(size) {
	      return this.getPendingCurrentPadding().subtractedFromSize(size);
	    };

	    ElementBase.prototype._descendantNeedsRedrawing = function(descendant) {};

	    function ElementBase(options) {
	      if (options == null) {
	        options = blankOptions;
	      }
	      ElementBase.__super__.constructor.apply(this, arguments);
	      this.remoteId = null;
	      this._pendingState = {
	        __drawAreaChanged: true,
	        __drawPropertiesChanged: true,
	        __redrawRequired: true,
	        __layoutPropertiesChanged: false,
	        __depth: 0,
	        __addedToChangingElements: false
	      };
	      this._initProperties(options);
	    }

	    inspectedPropsNotToInclude = ElementBase.getter({
	      instanceId: function() {
	        return this.remoteId || this.getUniqueId();
	      },
	      shortClassPathName: function() {
	        var name;
	        name = this.getClassPathName();
	        return peek(name.split(/(Art\.)?Engine\.(Core|Elements)\./));
	      },
	      inspectedName: function() {
	        var name;
	        return (this.getClassPathName()) + ":" + (this.getInstanceId()) + ((name = this.getPendingName()) ? ":" + name : "");
	      },
	      inspectedNameWithoutIds: function() {
	        var name;
	        return "" + (this.getClassPathName()) + ((name = this.getPendingName()) ? ":" + name : "");
	      },
	      inspectedString: function() {
	        return this.inspectedName;
	      }
	    });

	    inspectedPropsNotToInclude = ["children", "name", "on"];

	    inspectedPropsFirst = ["key", "instanceId", "location", "size", "currentLocation", "currentSize"];

	    ElementBase.getter({
	      inspectedPropsMaps: function() {
	        var defaultValue, internalName, j, k, len, props, ref, ref1, value, virtual;
	        props = {};
	        for (j = 0, len = inspectedPropsFirst.length; j < len; j++) {
	          k = inspectedPropsFirst[j];
	          if (present(value = this[k])) {
	            props[k] = value;
	          }
	        }
	        ref = this.metaProperties;
	        for (k in ref) {
	          ref1 = ref[k], internalName = ref1.internalName, virtual = ref1.virtual, defaultValue = ref1.defaultValue;
	          if (!virtual && indexOf.call(inspectedPropsNotToInclude, k) < 0 && !propsEq(defaultValue, value = this[internalName])) {
	            props[k] = value;
	          }
	        }
	        return props;
	      },
	      debugStructure: function() {
	        var child, result;
	        result = [this.shortClassPathName, this.inspectedPropsMaps];
	        if (this.hasChildren) {
	          result = result.concat((function() {
	            var j, len, ref, results;
	            ref = this.children;
	            results = [];
	            for (j = 0, len = ref.length; j < len; j++) {
	              child = ref[j];
	              results.push(child.debugStructure);
	            }
	            return results;
	          }).call(this));
	        }
	        return result;
	      }
	    });

	    ElementBase.prototype.inspectLocal = function() {
	      return this.getInspectedName();
	    };

	    ElementBase.prototype.onNextReady = function(callback) {
	      return stateEpoch.onNextReady(callback);
	    };

	    ElementBase.onNextReady = function(callback) {
	      return stateEpoch.onNextReady(callback);
	    };

	    ElementBase.prototype.onIdle = function(callback) {
	      return stateEpoch.onNextReady(callback);
	    };


	    /*
	    To respect stateEpochs, events will never be sent to pending event handlers.
	    This would only be a consern if @_on changed between the last stateEpoch and
	    the current eventEpoch.
	     */

	    ElementBase.prototype._sendToEventHandler = function(event) {
	      var _on, e, error, error1, handler, preprocessor, processedEvent, ref, type;
	      _on = this._on;
	      if (_on) {
	        type = (processedEvent = event).type;
	        if (preprocessor = (ref = _on.preprocess) != null ? ref[type] : void 0) {
	          try {
	            processedEvent = preprocessor(event);
	          } catch (error) {
	            e = error;
	            processedEvent = null;
	            this._handleErrorInHandler(event, preprocessor, e);
	          }
	        }
	        if (processedEvent && (handler = _on[type])) {
	          try {
	            return handler(processedEvent);
	          } catch (error1) {
	            e = error1;
	            return this._handleErrorInHandler(processedEvent, handler, e);
	          }
	        }
	      }
	    };


	    /*
	    NOTE: by checking @_pendingState also, we can receive events triggered in the same
	    epoch as the Element's creation - such as "parentChanged." Actual handling
	    will be done later, in the eventEpoch, where _hasEventHandler is double-checked.
	     */

	    ElementBase.prototype._hasEventHandler = function(eventType) {
	      var ref, ref1;
	      return ((ref = this._on) != null ? ref[eventType] : void 0) || ((ref1 = this._pendingState._on) != null ? ref1[eventType] : void 0);
	    };

	    ElementBase.inertProperty({
	      on: {
	        "default": emptyEventHandlers,
	        validate: function(v) {
	          return isPlainObject(v);
	        },
	        setter: function(v) {
	          return this.preprocessEventHandlers(v);
	        }
	      }
	    });

	    ElementBase.prototype.preprocessEventHandlers = defaultEventHandlerPreprocessor = function(handlerMap) {
	      return handlerMap;
	    };

	    return ElementBase;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(153)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, StateEpochLayout) {
	  var Epoch, Point, StateEpoch, childrenDrawChanged, childrenDrawUnchanged, globalCount, inspect, log, longestCommonSubsequence, point, requestAnimationFrame, select;
	  point = Atomic.point, Point = Atomic.Point;
	  log = Foundation.log, requestAnimationFrame = Foundation.requestAnimationFrame, longestCommonSubsequence = Foundation.longestCommonSubsequence, select = Foundation.select, inspect = Foundation.inspect, Epoch = Foundation.Epoch, globalCount = Foundation.globalCount;
	  childrenDrawUnchanged = function(before, after) {
	    return window.lcs = longestCommonSubsequence(before, after);
	  };
	  childrenDrawChanged = function(before, after) {
	    var child, i, len, results;
	    if (before) {
	      results = [];
	      for (i = 0, len = before.length; i < len; i++) {
	        child = before[i];
	        if (indexOf.call(childrenDrawUnchanged(before, after), child) < 0) {
	          results.push(child);
	        }
	      }
	      return results;
	    } else {
	      return after;
	    }
	  };
	  return StateEpoch = (function(superClass) {
	    var epochCount, markChildrenRedrawRequired;

	    extend(StateEpoch, superClass);

	    StateEpoch.singletonClass();

	    StateEpoch._stateEpochLayoutInProgress = false;

	    function StateEpoch() {
	      StateEpoch.__super__.constructor.call(this, {
	        emptyQueueAfterProcessing: true
	      });
	    }

	    StateEpoch.prototype._addChangingElement = function(element) {
	      return this.queueItem(element);
	    };

	    StateEpoch.prototype._isChangingElement = function(element) {
	      return this.isItemQueued(element);
	    };

	    StateEpoch.prototype.computeDepth = function(element) {
	      var depth, ref;
	      if (!element) {
	        return 0;
	      }
	      if ((ref = element._pendingState) != null ? ref.__depth : void 0) {
	        return element._pendingState.__depth;
	      }
	      depth = 1 + this.computeDepth(element.getPendingParent());
	      element._pendingState.__depth = depth;
	      return depth;
	    };

	    StateEpoch.prototype.computeDepths = function(changingElements) {
	      var element, i, len;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        element = changingElements[i];
	        this.computeDepth(element);
	      }
	      return null;
	    };

	    StateEpoch.prototype.sortChangingElementsDepthsAscending = function(changingElements) {
	      return changingElements.sort(function(a, b) {
	        return a._pendingState.__depth - b._pendingState.__depth;
	      });
	    };

	    StateEpoch.prototype.notifyLayoutPropertiesChanged = function(changingElements) {
	      var element, i, len;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        element = changingElements[i];
	        if (element._pendingState.__layoutPropertiesChanged) {
	          element._layoutPropertiesChanged();
	        }
	      }
	      return null;
	    };

	    StateEpoch.prototype.getDrawChangedElements = function(changingElements) {
	      var el, i, len, results;
	      results = [];
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        if (el._pendingState.__redrawRequired) {
	          results.push(el);
	        }
	      }
	      return results;
	    };

	    StateEpoch.prototype.informAncestorsElementNeedsRedrawing = function(el) {
	      var p;
	      p = el;
	      while (p = p.getParent()) {
	        p._descendantNeedsRedrawing(el);
	      }
	      return null;
	    };

	    StateEpoch.prototype._applyStateChanges = function(changingElements) {
	      var el, i, len, results;
	      results = [];
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        results.push(el._applyStateChanges());
	      }
	      return results;
	    };

	    markChildrenRedrawRequired = function(element) {
	      var child, i, len, ref;
	      if (element.getChildrenChanged()) {
	        ref = childrenDrawChanged(element.children, element.getPendingChildren());
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          child._pendingState.__redrawRequired = true;
	        }
	      }
	      return null;
	    };

	    StateEpoch.prototype.markRedrawRequired = function(changingElements) {
	      var element, i, len;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        element = changingElements[i];
	        element._pendingState.__redrawRequired = element.getRedrawRequired();
	        markChildrenRedrawRequired(element);
	      }
	      return null;
	    };

	    StateEpoch.prototype.markDrawAreaChanged = function(changingElements) {
	      var base, element, i, len, parent;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        element = changingElements[i];
	        (base = element._pendingState).__drawAreaChanged || (base.__drawAreaChanged = element.getChildrenChanged() || (element.getCurrentSizeChanged() && (element.getPendingChildren().length === 0 || element.getPendingClip())));
	        if (element.getElementToParentMatrixChanged()) {
	          if (parent = element.getPendingParent()) {
	            parent._pendingState.__drawAreaChanged = true;
	            parent._elementChanged();
	          }
	        }
	      }
	      return null;
	    };

	    StateEpoch.prototype.resetAbsMatriciesR = function(element) {
	      var child, i, len, ref;
	      if (element._elementToAbsMatrix === null && element._absToElementMatrix === null) {
	        return;
	      }
	      element._elementToAbsMatrix = element._absToElementMatrix = null;
	      element.queueEvent("absMatriciesChanged");
	      ref = element.getPendingChildren();
	      for (i = 0, len = ref.length; i < len; i++) {
	        child = ref[i];
	        this.resetAbsMatriciesR(child);
	      }
	      return null;
	    };

	    StateEpoch.prototype.resetParentToElementMatricies = function(elements) {
	      var el, i, len;
	      for (i = 0, len = elements.length; i < len; i++) {
	        el = elements[i];
	        if (el) {
	          if (el.getElementToParentMatrixChanged()) {
	            el._parentToElementMatrix = null;
	          }
	        }
	      }
	      return null;
	    };

	    StateEpoch.prototype.getElementToAbsMatrixChangedElementsDepthAscending = function(changingElements) {
	      var el, i, len, results;
	      results = [];
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        if (el.getElementToParentMatrixChanged() || el.getParentChanged()) {
	          results.push(el);
	        }
	      }
	      return results;
	    };

	    StateEpoch.prototype.resetAbsMatricies = function(elements) {
	      var el, i, len;
	      for (i = 0, len = elements.length; i < len; i++) {
	        el = elements[i];
	        this.resetAbsMatriciesR(el);
	      }
	      return null;
	    };

	    StateEpoch.prototype.updateElementParentChangingElements = function(changingElements) {
	      var el, i, len;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        if (!(el.getParentChanged())) {
	          continue;
	        }
	        el._clearRootElement();
	        el._updateRegistryFromPendingState();
	      }
	      return null;
	    };

	    StateEpoch.prototype.recomputeMousePathAndCursor = function(changingElements) {
	      var el, i, len, ref, rootElement, testedRoots;
	      testedRoots = [];
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        rootElement = el.getRootElement();
	        if (indexOf.call(testedRoots, rootElement) < 0) {
	          testedRoots.push(rootElement);
	          if ((ref = rootElement.pointerEventManager) != null) {
	            ref.updateMousePath();
	          }
	        }
	      }
	      return null;
	    };

	    epochCount = 0;

	    StateEpoch.prototype.inspectChangingElements = function(changingElements) {
	      var c, ce, changing, changingKeys, key, newV, o, oldV;
	      return {
	        epoch: ++epochCount,
	        changingElements: (function() {
	          var i, j, len, len1, results;
	          results = [];
	          for (i = 0, len = changingElements.length; i < len; i++) {
	            ce = changingElements[i];
	            o = {};
	            if ((changingKeys = ce._getChangingStateKeys()).length > 0) {
	              o.changing = changing = {};
	              for (j = 0, len1 = changingKeys.length; j < len1; j++) {
	                key = changingKeys[j];
	                oldV = ce[key];
	                newV = ce._pendingState[key];
	                switch (key) {
	                  case "_parent":
	                    oldV = oldV != null ? oldV.inspectedName : void 0;
	                    newV = newV != null ? newV.inspectedName : void 0;
	                    break;
	                  case "_children":
	                    oldV = (function() {
	                      var k, len2, results1;
	                      results1 = [];
	                      for (k = 0, len2 = oldV.length; k < len2; k++) {
	                        c = oldV[k];
	                        results1.push(c.inspectedName);
	                      }
	                      return results1;
	                    })();
	                    newV = (function() {
	                      var k, len2, results1;
	                      results1 = [];
	                      for (k = 0, len2 = newV.length; k < len2; k++) {
	                        c = newV[k];
	                        results1.push(c.inspectedName);
	                      }
	                      return results1;
	                    })();
	                }
	                changing[key] = {
	                  old: oldV,
	                  "new": newV
	                };
	              }
	            }
	            o.__depth = ce._pendingState.__depth;
	            if (ce._pendingState.__drawAreaChanged) {
	              o.drawAreaChanged = true;
	            }
	            if (ce._pendingState.__redrawRequired) {
	              o.drawPropertiesChanged = true;
	            }
	            results.push([ce.inspectLocal(), o]);
	          }
	          return results;
	        })()
	      };
	    };

	    StateEpoch.prototype.processEpochItems = function(changingElements) {
	      var changingElementsLength, drawChangedElements, el, elementToAbsMatrixChangedElementsDepthAscending, i, j, k, len, len1, len2, results;
	      this.computeDepths(changingElements);
	      this.notifyLayoutPropertiesChanged(changingElements);
	      StateEpochLayout.markLayoutPropertiesChanged(changingElements);
	      changingElementsLength = changingElements.length;
	      this.sortChangingElementsDepthsAscending(changingElements);
	      StateEpoch._stateEpochLayoutInProgress = true;
	      StateEpochLayout.updateLayouts(changingElements);
	      StateEpoch._stateEpochLayoutInProgress = false;
	      this.markRedrawRequired(changingElements);
	      this.markDrawAreaChanged(changingElements);
	      if (changingElements.length !== changingElementsLength) {
	        this.sortChangingElementsDepthsAscending(changingElements);
	      }
	      elementToAbsMatrixChangedElementsDepthAscending = this.getElementToAbsMatrixChangedElementsDepthAscending(changingElements);
	      drawChangedElements = this.getDrawChangedElements(changingElements);
	      this.resetParentToElementMatricies(elementToAbsMatrixChangedElementsDepthAscending);
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        if (el.getElementToParentMatrixChanged()) {
	          this.informAncestorsElementNeedsRedrawing(el);
	        }
	      }
	      this.updateElementParentChangingElements(changingElements);
	      this._applyStateChanges(changingElements);
	      this.resetAbsMatricies(elementToAbsMatrixChangedElementsDepthAscending);
	      for (j = 0, len1 = changingElements.length; j < len1; j++) {
	        el = changingElements[j];
	        if (el._pendingState.__drawAreaChanged) {
	          el._drawAreaChanged();
	        }
	      }
	      results = [];
	      for (k = 0, len2 = drawChangedElements.length; k < len2; k++) {
	        el = drawChangedElements[k];
	        results.push(this.informAncestorsElementNeedsRedrawing(el));
	      }
	      return results;
	    };

	    return StateEpoch;

	  })(Epoch);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(114), __webpack_require__(8), __webpack_require__(89), __webpack_require__(154)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ArtEngineCore, Foundation, Atomic, LayoutBase) {
	  var BaseObject, Point, StateEpochLayout, Unique, abs, eachRunAsCharCodes, floatEq, getGlobalEpochCycle, inspect, isFunction, isNumber, log, longestCommonSubsequence, max, nearInfiniteSize, nearInfinity, nearInfinityResult, partition, peek, perimeter, point, point0, select, shallowEq;
	  point = Atomic.point, Point = Atomic.Point, perimeter = Atomic.perimeter;
	  BaseObject = Foundation.BaseObject, log = Foundation.log, max = Foundation.max, shallowEq = Foundation.shallowEq, longestCommonSubsequence = Foundation.longestCommonSubsequence, select = Foundation.select, Unique = Foundation.Unique, peek = Foundation.peek, inspect = Foundation.inspect, isFunction = Foundation.isFunction, eachRunAsCharCodes = Foundation.eachRunAsCharCodes, floatEq = Foundation.floatEq, isNumber = Foundation.isNumber;
	  nearInfiniteSize = LayoutBase.nearInfiniteSize, nearInfinity = LayoutBase.nearInfinity, nearInfinityResult = LayoutBase.nearInfinityResult;
	  point0 = Point.point0;
	  abs = Math.abs;
	  getGlobalEpochCycle = function() {
	    return ArtEngineCore.GlobalEpochCycle.globalEpochCycle;
	  };
	  partition = function(src, f) {
	    var intoIfFalse, intoIfTrue, k, len, v;
	    intoIfFalse = [];
	    intoIfTrue = [];
	    for (k = 0, len = src.length; k < len; k++) {
	      v = src[k];
	      if (f(v)) {
	        intoIfTrue.push(v);
	      } else {
	        intoIfFalse.push(v);
	      }
	    }
	    return [intoIfTrue, intoIfFalse];
	  };
	  return StateEpochLayout = (function(superClass) {
	    var alignChildren, isSpace, layoutChildrenComputeArea, layoutChildrenComputeMaxSize, layoutChildrenFlex, layoutChildrenFlow, layoutChildrenFlowLine, layoutChildrenRowGrid, layoutElement, layoutMargin, layoutPadding, markParentLayoutPropertiesChanged, sizeWithPadding, subLayoutChildrenAndGatherInformation;

	    extend(StateEpochLayout, superClass);

	    function StateEpochLayout() {
	      return StateEpochLayout.__super__.constructor.apply(this, arguments);
	    }

	    layoutPadding = function(element, parentSize) {
	      var padding;
	      padding = element.getPendingPadding();
	      return element._setPaddingFromLayout(perimeter(isFunction(padding) ? padding(parentSize) : padding));
	    };

	    layoutMargin = function(element, parentSize) {
	      var margin;
	      margin = element.getPendingMargin();
	      return element._setMarginFromLayout(perimeter(isFunction(margin) ? margin(parentSize) : margin));
	    };

	    sizeWithPadding = function(width, height, currentPadding) {
	      return point(width + currentPadding.getWidth(), height + currentPadding.getHeight());
	    };

	    StateEpochLayout.markLayoutPropertiesChanged = function(changingElements) {
	      var element, k, len, results;
	      results = [];
	      for (k = 0, len = changingElements.length; k < len; k++) {
	        element = changingElements[k];
	        if ((element.getParentChanged() && element.getPendingParent()) || (element.getChildrenChanged() && element.getPendingLayoutMovesChildren())) {
	          if (!element._pendingState.__layoutPropertiesChanged) {
	            element._pendingState.__layoutPropertiesChanged = true;
	            element._elementChanged();
	          }
	        }
	        results.push(markParentLayoutPropertiesChanged(element));
	      }
	      return results;
	    };

	    StateEpochLayout.updateLayouts = function(layoutChangedElements) {
	      var process;
	      process = function() {
	        var element, k, len, results;
	        results = [];
	        for (k = 0, len = layoutChangedElements.length; k < len; k++) {
	          element = layoutChangedElements[k];
	          if (element._pendingState.__layoutPropertiesChanged) {
	            results.push(layoutElement(element, element.getPendingParentSizeForChildren()));
	          }
	        }
	        return results;
	      };
	      if (getGlobalEpochCycle()) {
	        getGlobalEpochCycle().timePerformance("aimLayout", process);
	      } else {
	        process();
	      }
	      return null;
	    };

	    markParentLayoutPropertiesChanged = function(element) {
	      var results;
	      results = [];
	      while ((element = element.getPendingParent()) && (element.getPendingSize().getChildrenRelative() || element.getPendingLayoutMovesChildren()) && !element._pendingState.__layoutPropertiesChanged) {
	        element._pendingState.__layoutPropertiesChanged = true;
	        results.push(element._elementChanged());
	      }
	      return results;
	    };

	    layoutChildrenComputeMaxSize = function(parentSize, children) {
	      var child, childrenHeight, childrenWidth, k, len, size;
	      childrenHeight = 0;
	      childrenWidth = 0;
	      for (k = 0, len = children.length; k < len; k++) {
	        child = children[k];
	        if (!(children)) {
	          continue;
	        }
	        size = layoutElement(child, parentSize);
	        childrenWidth = max(childrenWidth, size.x);
	        childrenHeight = max(childrenHeight, size.y);
	      }
	      return point(childrenWidth, childrenHeight);
	    };

	    layoutChildrenComputeArea = function(currentPadding, parentSize, children, secondPassChildren, secondPassLocation) {
	      var child, childrenHeight, childrenWidth, k, len, skipLocationLayout, x, y;
	      childrenHeight = 0;
	      childrenWidth = 0;
	      for (k = 0, len = children.length; k < len; k++) {
	        child = children[k];
	        if (!(children)) {
	          continue;
	        }
	        if (skipLocationLayout = child.getPendingLayoutLocationParentCircular()) {
	          child._setLocationFromLayout(point0);
	          layoutElement(child, parentSize, true);
	          x = child.getPendingWidthInParentSpace();
	          y = child.getPendingHeightInParentSpace();
	        } else {
	          layoutElement(child, parentSize);
	          x = child.getPendingMaxXInParentSpace();
	          y = child.getPendingMaxYInParentSpace();
	        }
	        if (abs(x) >= nearInfinityResult || abs(y) >= nearInfinityResult) {
	          secondPassChildren.push(child);
	        } else {
	          if (skipLocationLayout) {
	            secondPassLocation.push(child);
	          }
	          childrenWidth = max(childrenWidth, x);
	          childrenHeight = max(childrenHeight, y);
	        }
	      }
	      return sizeWithPadding(childrenWidth, childrenHeight, currentPadding);
	    };

	    layoutChildrenFlowLine = function(children, rightEdge, state) {
	      var child, childI, childSize, childrenLength, currentMargin, firstChildOnLine, k, lastChildOnLine, lastLineMarginBottom, lastMarginRight, lineFull, lineHeight, m, maxLineMarginBottom, maxLineMarginTop, maxWidth, ref, ref1, ref2, ref3, x, y;
	      y = state.y, firstChildOnLine = state.firstChildOnLine, lastLineMarginBottom = state.lastLineMarginBottom, maxWidth = state.maxWidth;
	      childrenLength = children.length;
	      maxLineMarginBottom = 0;
	      maxLineMarginTop = 0;
	      lineHeight = 0;
	      lastMarginRight = 0;
	      lastChildOnLine = firstChildOnLine;
	      x = 0;
	      for (childI = k = ref = firstChildOnLine, ref1 = childrenLength; k < ref1; childI = k += 1) {
	        lastChildOnLine = childI;
	        child = children[lastChildOnLine];
	        currentMargin = child.getPendingCurrentMargin();
	        childSize = child.getPendingCurrentSize();
	        if (lastChildOnLine !== firstChildOnLine) {
	          x += max(currentMargin.left, lastMarginRight);
	        }
	        x += childSize.x;
	        lastMarginRight = currentMargin.right;
	        lineFull = x >= rightEdge;
	        if (child.getPendingLayoutSizeParentCircular() && child.getPendingSize().getXParentRelative()) {
	          if (lastChildOnLine !== firstChildOnLine) {
	            lastChildOnLine--;
	          }
	          lineFull = true;
	        }
	        if (!lineFull || lastChildOnLine === firstChildOnLine) {
	          maxLineMarginTop = max(currentMargin.top, maxLineMarginTop);
	          maxLineMarginBottom = max(currentMargin.bottom, maxLineMarginBottom);
	          lineHeight = max(lineHeight, childSize.y);
	          if (lineFull) {
	            break;
	          }
	        } else {
	          lastChildOnLine--;
	          break;
	        }
	      }
	      if (lastLineMarginBottom != null) {
	        y += max(lastLineMarginBottom, maxLineMarginTop);
	      }
	      x = 0;
	      lastMarginRight = 0;
	      for (childI = m = ref2 = firstChildOnLine, ref3 = lastChildOnLine; m <= ref3; childI = m += 1) {
	        child = children[childI];
	        currentMargin = child.getPendingCurrentMargin();
	        childSize = child.getPendingCurrentSize();
	        if (childI !== firstChildOnLine) {
	          x += max(currentMargin.left, lastMarginRight);
	        }
	        child._setLocationFromLayout(point(x, y));
	        x += childSize.x;
	        lastMarginRight = currentMargin.right;
	      }
	      if (state.flowChildren) {
	        state.firstChildIndexOfEachLine.push(firstChildOnLine);
	        state.lastChildIndexOfEachLine.push(lastChildOnLine);
	        state.widthOfEachLine.push(x);
	      }
	      state.lastLineMarginBottom = maxLineMarginBottom;
	      state.y = y + lineHeight;
	      state.firstChildOnLine = lastChildOnLine + 1;
	      return state.maxWidth = max(maxWidth, x);
	    };

	    subLayoutChildrenAndGatherInformation = function(parentSize, children, secondPassSizeLayoutChildren) {
	      var child, k, len, results;
	      results = [];
	      for (k = 0, len = children.length; k < len; k++) {
	        child = children[k];
	        if (child.getPendingLayoutSizeParentCircular()) {
	          child._setSizeFromLayout(child._layoutSize(point0, point0));
	          results.push(secondPassSizeLayoutChildren.push(child));
	        } else {
	          results.push(layoutElement(child, parentSize, true));
	        }
	      }
	      return results;
	    };

	    layoutChildrenFlow = function(element, currentPadding, parentSize, children, secondPassSizeLayoutChildren) {
	      var childrenAlignment, childrenLength, halfPixel, rightEdge, state;
	      subLayoutChildrenAndGatherInformation(parentSize, children, secondPassSizeLayoutChildren);
	      halfPixel = .5;
	      rightEdge = parentSize.x + halfPixel;
	      state = {
	        y: 0,
	        firstChildOnLine: 0,
	        lastLineMarginBottom: null,
	        maxWidth: 0
	      };
	      childrenAlignment = element.getPendingChildrenAlignment();
	      if (!floatEq(childrenAlignment.x, 0) || !floatEq(childrenAlignment.y, 0)) {
	        state.childrenAlignment = childrenAlignment;
	        state.flowChildren = children;
	        state.firstChildIndexOfEachLine = [];
	        state.lastChildIndexOfEachLine = [];
	        state.widthOfEachLine = [];
	      }
	      childrenLength = children.length;
	      while (state.firstChildOnLine < childrenLength) {
	        layoutChildrenFlowLine(children, rightEdge, state);
	      }
	      state.childrenSize = sizeWithPadding(state.maxWidth, state.y, currentPadding);
	      return state;
	    };

	    layoutChildrenFlex = function(isRowLayout, element, currentPadding, elementPaddedSize, children, parentSize) {

	      /*
	      Flexbox terminology: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes
	      
	      Names for row-layout: (swap x/y, width/height, left/top and right/bottom for column-layout)
	        main-axis:    x
	        cross-axis:   y
	        main-size:    w
	        cross-size    h
	        main-start:   left / 0
	        main-end:     right / parent-width
	        cross-start:  top / 0
	        cross-end:    bottom / parent-height
	       */
	      var adjustedCrossSize, adjustedParentSize, child, childCrossSize, childFlexWeight, childrenAlignment, childrenSize, crossAlignment, crossCoordinate, crossOffset, crossRelativeTestFunction, crossSize, currentSize, effectivePrevMargin, elementCrossPaddedSize, elementMainAxisIsChildRelative, elementMainPaddedSize, flexParentSize, hasCrossAlignment, hasMainAlignment, heightRemainingChildren, i, k, lastChildsNextMargin, len, len1, len2, len3, locationX, locationY, m, mainAlignment, mainCoordinate, mainPos, mainSize, margin, maxCrossSize, n, nextMargin, o, previousMargin, ratio, relativeSizeIndex, relativeTestFunction, secondPassSizeForChildren, secondPassSizeLayoutChildren, spaceForFlexChildren, state, toPoint, totalFlexWeight, totalMainSize;
	      if (isRowLayout) {
	        mainCoordinate = "x";
	        crossCoordinate = "y";
	        previousMargin = "left";
	        nextMargin = "right";
	        relativeTestFunction = "getXRelativeToParentW";
	        crossRelativeTestFunction = "getYRelativeToParentH";
	        elementMainAxisIsChildRelative = element.getPendingSize().getXRelativeToChildrenW();
	      } else {
	        mainCoordinate = "y";
	        crossCoordinate = "x";
	        previousMargin = "top";
	        nextMargin = "bottom";
	        relativeTestFunction = "getYRelativeToParentH";
	        crossRelativeTestFunction = "getXRelativeToParentW";
	        elementMainAxisIsChildRelative = element.getPendingSize().getYRelativeToChildrenH();
	      }
	      elementMainPaddedSize = elementPaddedSize[mainCoordinate];
	      elementCrossPaddedSize = elementPaddedSize[crossCoordinate];
	      heightRemainingChildren = null;
	      maxCrossSize = totalFlexWeight = 0;
	      spaceForFlexChildren = elementPaddedSize[mainCoordinate];
	      totalMainSize = 0;
	      toPoint = function(mainPos, crossPos, currentPadding) {
	        var x, y;
	        x = y = 0;
	        if (isRowLayout) {
	          x = mainPos;
	          y = crossPos;
	        } else {
	          x = crossPos;
	          y = mainPos;
	        }
	        if (currentPadding) {
	          return sizeWithPadding(x, y, currentPadding);
	        } else {
	          return point(x, y);
	        }
	      };
	      state = {};
	      lastChildsNextMargin = 0;
	      secondPassSizeLayoutChildren = null;
	      for (i = k = 0, len = children.length; k < len; i = ++k) {
	        child = children[i];
	        if (child.getPendingSize()[relativeTestFunction]()) {
	          currentSize = child._layoutSize(elementPaddedSize, point0);
	          childFlexWeight = 1;
	          totalFlexWeight += childFlexWeight;
	        } else {
	          if (child.getPendingLayoutSizeParentCircular()) {
	            child._setSizeFromLayout(child._layoutSize(point0, point0));
	            secondPassSizeLayoutChildren || (secondPassSizeLayoutChildren = []);
	            secondPassSizeLayoutChildren.push(child);
	          } else {
	            layoutElement(child, elementPaddedSize, true);
	          }
	          currentSize = child.getPendingCurrentSize();
	          mainSize = currentSize[mainCoordinate];
	          crossSize = currentSize[crossCoordinate];
	          maxCrossSize = max(maxCrossSize, crossSize);
	          totalMainSize += mainSize;
	          spaceForFlexChildren -= mainSize;
	        }
	        margin = layoutMargin(child, elementPaddedSize);
	        if (i > 0) {
	          effectivePrevMargin = max(lastChildsNextMargin, margin[previousMargin]);
	          spaceForFlexChildren -= effectivePrevMargin;
	        }
	        lastChildsNextMargin = margin[nextMargin];
	      }
	      relativeSizeIndex = 0;
	      for (i = m = 0, len1 = children.length; m < len1; i = ++m) {
	        child = children[i];
	        if (!(child.getPendingSize()[relativeTestFunction]())) {
	          continue;
	        }
	        childFlexWeight = 1;
	        ratio = childFlexWeight / totalFlexWeight;
	        flexParentSize = toPoint(spaceForFlexChildren * ratio, elementCrossPaddedSize);
	        layoutElement(child, flexParentSize, true);
	        currentSize = child.getPendingCurrentSize();
	        mainSize = currentSize[mainCoordinate];
	        crossSize = currentSize[crossCoordinate];
	        totalFlexWeight -= childFlexWeight;
	        spaceForFlexChildren -= mainSize;
	        totalMainSize += mainSize;
	        maxCrossSize = max(maxCrossSize, crossSize);
	      }
	      childrenSize = toPoint(totalMainSize, maxCrossSize);
	      if (isRowLayout) {
	        elementMainPaddedSize = element.getPendingSize().layoutX(parentSize, childrenSize) - element.getPendingCurrentPadding().getWidth();
	        elementCrossPaddedSize = element.getPendingSize().layoutY(parentSize, childrenSize) - element.getPendingCurrentPadding().getHeight();
	      } else {
	        elementCrossPaddedSize = element.getPendingSize().layoutX(parentSize, childrenSize) - element.getPendingCurrentPadding().getWidth();
	        elementMainPaddedSize = element.getPendingSize().layoutY(parentSize, childrenSize) - element.getPendingCurrentPadding().getHeight();
	      }
	      if (secondPassSizeLayoutChildren) {
	        secondPassSizeForChildren = toPoint(elementMainPaddedSize, elementCrossPaddedSize);
	        for (n = 0, len2 = secondPassSizeLayoutChildren.length; n < len2; n++) {
	          child = secondPassSizeLayoutChildren[n];
	          layoutElement(child, secondPassSizeForChildren, true);
	        }
	      }
	      lastChildsNextMargin = 0;
	      childrenAlignment = element.getPendingChildrenAlignment();
	      crossAlignment = childrenAlignment[crossCoordinate];
	      hasCrossAlignment = !floatEq(0, crossAlignment);
	      mainPos = !elementMainAxisIsChildRelative && (hasMainAlignment = !floatEq(0, mainAlignment)) ? (mainAlignment = childrenAlignment[mainCoordinate], (elementMainPaddedSize - totalMainSize) * mainAlignment) : 0;
	      for (i = o = 0, len3 = children.length; o < len3; i = ++o) {
	        child = children[i];
	        margin = child.getPendingCurrentMargin();
	        if (i > 0) {
	          effectivePrevMargin = max(lastChildsNextMargin, margin[previousMargin]);
	          mainPos += effectivePrevMargin;
	        }
	        lastChildsNextMargin = margin[nextMargin];
	        currentSize = child.getPendingCurrentSize();
	        mainSize = !elementMainAxisIsChildRelative && i === children.length - 1 ? elementMainPaddedSize - mainPos : currentSize[mainCoordinate];
	        crossOffset = 0;
	        adjustedCrossSize = elementCrossPaddedSize;
	        if (hasCrossAlignment) {
	          childCrossSize = currentSize[crossCoordinate];
	          crossOffset = (elementCrossPaddedSize - childCrossSize) * crossAlignment;
	          adjustedCrossSize = childCrossSize;
	        }
	        adjustedParentSize = toPoint(mainSize, adjustedCrossSize);
	        locationX = child._layoutLocationX(adjustedParentSize);
	        locationY = child._layoutLocationY(adjustedParentSize);
	        if (isRowLayout) {
	          locationX += mainPos;
	          locationY += crossOffset;
	        } else {
	          locationY += mainPos;
	          locationX += crossOffset;
	        }
	        child._setLocationFromLayoutXY(locationX, locationY);
	        mainPos += mainSize;
	      }
	      state.childrenSize = toPoint(mainPos, maxCrossSize, currentPadding);
	      return state;
	    };

	    isSpace = function(charCode) {
	      return charCode === 32;
	    };

	    layoutChildrenRowGrid = function(isRowLayout, element, gridString, currentPadding, parentSize, children, secondPassSizeLayoutChildren) {
	      var gridCount, gridStep, lowerCaseACode, maxCrossSize, offset;
	      gridCount = gridString.length;
	      lowerCaseACode = 97;
	      gridStep = (isRowLayout ? parentSize.x : parentSize.y) / gridCount;
	      maxCrossSize = offset = 0;
	      eachRunAsCharCodes(gridString.toLowerCase(), function(charCode, count) {
	        var adjustedParentSize, child, gridSize, locationX, locationY;
	        gridSize = count * gridStep;
	        if (child = children[charCode - lowerCaseACode]) {
	          adjustedParentSize = isRowLayout ? parentSize.withX(gridSize) : parentSize.withY(gridSize);
	          layoutElement(child, adjustedParentSize, true);
	          locationX = child._layoutLocationX(adjustedParentSize);
	          locationY = child._layoutLocationY(adjustedParentSize);
	          maxCrossSize = max(maxCrossSize, isRowLayout ? (child._setLocationFromLayoutXY(offset + locationX, locationY), child.getPendingCurrentSize().y) : (child._setLocationFromLayoutXY(locationX, offset + locationY), child.getPendingCurrentSize().x));
	        }
	        return offset += gridSize;
	      });
	      return {
	        childrenSize: sizeWithPadding(offset, maxCrossSize, currentPadding)
	      };
	    };

	    alignChildren = function(state, parentSize, childrenSize) {
	      var child, childrenAlignment, childrenAlignmentX, childrenAlignmentY, firstChildIndexOfEachLine, firstChildOnLine, firstIndex, flowChildren, i, j, k, l, lastChildIndexOfEachLine, lastIndex, len, offsetX, offsetY, results, width, widthOfEachLine, widthOfEachLineFunction;
	      childrenAlignment = state.childrenAlignment, flowChildren = state.flowChildren, firstChildIndexOfEachLine = state.firstChildIndexOfEachLine, lastChildIndexOfEachLine = state.lastChildIndexOfEachLine, widthOfEachLine = state.widthOfEachLine, widthOfEachLineFunction = state.widthOfEachLineFunction;
	      widthOfEachLineFunction || (widthOfEachLineFunction = function(i) {
	        return widthOfEachLine[i];
	      });
	      childrenAlignmentX = childrenAlignment.x;
	      childrenAlignmentY = childrenAlignment.y;
	      results = [];
	      for (i = k = 0, len = firstChildIndexOfEachLine.length; k < len; i = ++k) {
	        firstIndex = firstChildIndexOfEachLine[i];
	        lastIndex = lastChildIndexOfEachLine[i];
	        width = widthOfEachLineFunction(i);
	        firstChildOnLine = flowChildren[firstIndex];
	        if (firstChildOnLine.getPendingLayoutSizeParentCircular() && firstChildOnLine.getPendingSize().getXParentRelative()) {
	          width = firstChildOnLine.getPendingCurrentSize().x;
	        }
	        offsetX = (parentSize.x - width) * childrenAlignmentX;
	        offsetY = (parentSize.y - childrenSize.y) * childrenAlignmentY;
	        if (!floatEq(offsetX, 0) || !floatEq(offsetY, 0)) {
	          results.push((function() {
	            var m, ref, ref1, results1;
	            results1 = [];
	            for (j = m = ref = firstIndex, ref1 = lastIndex; m <= ref1; j = m += 1) {
	              child = flowChildren[j];
	              l = child.getPendingCurrentLocation();
	              results1.push(child._setLocationFromLayout(point(l.x + offsetX, l.y + offsetY)));
	            }
	            return results1;
	          })());
	        } else {
	          results.push(void 0);
	        }
	      }
	      return results;
	    };

	    layoutElement = function(element, parentSize, skipLocation) {
	      var child, childI, childrenFlowState, childrenGrid, childrenLayout, childrenSize, currentMargin, currentPadding, finalLocation, firstPassChildren, firstPassSize, firstPassSizeForChildren, hasCustomLayoutChildrenFirstPass, hasCustomLayoutChildrenSecondPass, k, len, len1, len2, len3, m, n, o, pendingChildren, secondPassChildren, secondPassLocationLayoutChildren, secondPassSize, secondPassSizeForChildren, secondPassSizeLayoutChildren;
	      if (!(element._pendingState.__layoutPropertiesChanged || !shallowEq(element._lastParentSize, parentSize))) {
	        return element.getPendingCurrentSize();
	      }
	      element._lastParentSize = parentSize;
	      element._pendingState.__layoutPropertiesChanged = false;
	      if (!skipLocation) {
	        finalLocation = element._layoutLocation(parentSize);
	      }
	      firstPassSize = element._layoutSize(parentSize, nearInfiniteSize);
	      currentPadding = layoutPadding(element, parentSize);
	      currentMargin = layoutMargin(element, parentSize);
	      firstPassSizeForChildren = element._sizeForChildren(firstPassSize);
	      hasCustomLayoutChildrenFirstPass = isFunction(element.customLayoutChildrenFirstPass);
	      hasCustomLayoutChildrenSecondPass = isFunction(element.customLayoutChildrenSecondPass);
	      pendingChildren = element.getPendingChildren();
	      firstPassChildren = secondPassChildren = null;
	      childrenLayout = element.getPendingChildrenLayout();
	      if (childrenLayout || element.getPendingSize().getChildrenRelative()) {
	        firstPassChildren = pendingChildren;
	        for (childI = k = 0, len = pendingChildren.length; k < len; childI = ++k) {
	          child = pendingChildren[childI];
	          if (child.getPendingInFlow()) {
	            if (secondPassChildren) {
	              firstPassChildren.push(child);
	            }
	          } else {
	            if (!secondPassChildren) {
	              firstPassChildren = pendingChildren.slice(0, childI);
	              secondPassChildren = [];
	            }
	            secondPassChildren.push(child);
	          }
	        }
	        secondPassSizeLayoutChildren = [];
	        secondPassLocationLayoutChildren = [];
	        secondPassChildren || (secondPassChildren = []);
	      } else {
	        secondPassChildren = pendingChildren;
	      }
	      if (firstPassChildren || hasCustomLayoutChildrenFirstPass) {
	        childrenSize = (function() {
	          if (hasCustomLayoutChildrenFirstPass) {
	            return currentPadding.addedToSize(element.customLayoutChildrenFirstPass(firstPassSizeForChildren));
	          } else {
	            childrenGrid = element.getPendingChildrenGrid();
	            switch (childrenLayout) {
	              case "flow":
	                childrenFlowState = layoutChildrenFlow(element, currentPadding, firstPassSizeForChildren, firstPassChildren, secondPassSizeLayoutChildren);
	                return childrenFlowState.childrenSize;
	              case "column":
	                childrenFlowState = childrenGrid ? layoutChildrenRowGrid(false, element, childrenGrid, currentPadding, firstPassSizeForChildren, firstPassChildren, secondPassSizeLayoutChildren) : layoutChildrenFlex(false, element, currentPadding, firstPassSizeForChildren, firstPassChildren, parentSize);
	                return childrenFlowState.childrenSize;
	              case "row":
	                childrenFlowState = childrenGrid ? layoutChildrenRowGrid(true, element, childrenGrid, currentPadding, firstPassSizeForChildren, firstPassChildren, secondPassSizeLayoutChildren) : layoutChildrenFlex(true, element, currentPadding, firstPassSizeForChildren, firstPassChildren, parentSize);
	                return childrenFlowState.childrenSize;
	              default:
	                return layoutChildrenComputeArea(currentPadding, firstPassSizeForChildren, firstPassChildren, secondPassChildren, secondPassLocationLayoutChildren);
	            }
	          }
	        })();
	        secondPassSize = element._layoutSize(parentSize, childrenSize);
	        secondPassSizeForChildren = element._sizeForChildren(secondPassSize);
	        if (secondPassSizeLayoutChildren) {
	          for (m = 0, len1 = secondPassSizeLayoutChildren.length; m < len1; m++) {
	            child = secondPassSizeLayoutChildren[m];
	            layoutElement(child, secondPassSizeForChildren, true);
	          }
	        }
	        if (secondPassLocationLayoutChildren) {
	          for (n = 0, len2 = secondPassLocationLayoutChildren.length; n < len2; n++) {
	            child = secondPassLocationLayoutChildren[n];
	            child._setLocationFromLayout(child._layoutLocation(secondPassSizeForChildren));
	          }
	        }
	      } else {
	        secondPassSize = firstPassSize;
	        secondPassSizeForChildren = firstPassSizeForChildren;
	      }
	      if (childrenFlowState != null ? childrenFlowState.childrenAlignment : void 0) {
	        alignChildren(childrenFlowState, secondPassSizeForChildren, childrenSize);
	      } else if (hasCustomLayoutChildrenSecondPass) {
	        element.customLayoutChildrenSecondPass(secondPassSizeForChildren);
	      }
	      if (secondPassChildren) {
	        for (o = 0, len3 = secondPassChildren.length; o < len3; o++) {
	          child = secondPassChildren[o];
	          layoutElement(child, secondPassSizeForChildren);
	        }
	      }
	      element._setSizeFromLayout(secondPassSize);
	      if (!skipLocation) {
	        element._setLocationFromLayout(finalLocation);
	      }
	      return secondPassSize;
	    };

	    return StateEpochLayout;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic) {
	  var BaseObject, LayoutBase, isFunction, isPlainObject, log, nearInfinity, nearInfinityResult, point;
	  BaseObject = Foundation.BaseObject, isPlainObject = Foundation.isPlainObject, log = Foundation.log, isFunction = Foundation.isFunction, nearInfinity = Foundation.nearInfinity, nearInfinityResult = Foundation.nearInfinityResult;
	  point = Atomic.point;
	  return LayoutBase = (function(superClass) {
	    var nearInfinitePoint;

	    extend(LayoutBase, superClass);

	    LayoutBase.nearInfinity = nearInfinity;

	    LayoutBase.nearInfinityResult = nearInfinityResult;

	    LayoutBase.nearInfinitePoint = nearInfinitePoint = point(nearInfinity);

	    LayoutBase.nearInfiniteSize = nearInfinitePoint;

	    LayoutBase.InterpolatedLayout = null;

	    LayoutBase.LinearLayout = null;

	    LayoutBase.mergeLayouts = function(newLayout, oldLayout, forceFull) {
	      if (isPlainObject(newLayout)) {
	        return new LayoutBase.LinearLayout(newLayout, oldLayout, forceFull);
	      } else if (!newLayout || newLayout.getHasFullLayout() || !oldLayout) {
	        return newLayout;
	      } else if (newLayout instanceof LayoutBase.LinearLayout) {
	        return new LayoutBase.LinearLayout(newLayout.options, oldLayout, forceFull);
	      } else {
	        console.error({
	          newLayout: newLayout,
	          oldLayout: oldLayout
	        });
	        throw new Error("mergeLayout requires newLayout to be: null, a plain object, instanceof LinearLayout or newLayout.hasFullLayout == true");
	      }
	    };

	    LayoutBase.propGetter("options", "sizeChildRelative", "locationParentRelative", "sizeParentRelative", "widthParentRelative", "heightParentRelative", "hasXLayout", "hasYLayout", "hasWLayout", "hasHLayout", "hasFullLayout");

	    LayoutBase.getter({
	      parentRelative: function() {
	        return this._locationParentRelative || this._sizeParentRelative;
	      }
	    });

	    function LayoutBase() {
	      LayoutBase.__super__.constructor.apply(this, arguments);
	      this._hasFullLayout = this._hasXLayout && this._hasYLayout && this._hasWLayout && this._hasHLayout;
	    }

	    LayoutBase.prototype.sizeLayoutCircular = function(parentLayout) {
	      var hch, hcw, hh, hw, wch, wcw, wh, ww;
	      if (!(this._sizeParentRelative && (parentLayout != null ? parentLayout._sizeChildRelative : void 0))) {
	        return false;
	      }
	      ww = this.getWw();
	      hh = this.getHh();
	      hw = this.getHw();
	      wh = this.getWh();
	      wcw = parentLayout.getWcw();
	      hch = parentLayout.getHch();
	      wch = parentLayout.getWch();
	      hcw = parentLayout.getHcw();
	      return !!((ww && wcw) || (hh && hch) || (hw && wch) || (wh && hcw) || (wh && hch && hw && wcw) || (ww && wch && hh && hcw));
	    };

	    LayoutBase.prototype.locationLayoutCircular = function(parentLayout) {
	      var hch, hcw, wch, wcw, xh, xw, yh, yw;
	      if (!(this._locationParentRelative && (parentLayout != null ? parentLayout._sizeChildRelative : void 0))) {
	        return false;
	      }
	      xw = this.getXw();
	      yh = this.getYh();
	      yw = this.getYw();
	      xh = this.getXh();
	      wcw = parentLayout.getWcw();
	      hch = parentLayout.getHch();
	      wch = parentLayout.getWch();
	      hcw = parentLayout.getHcw();
	      return !!((xw && wcw) || (yh && hch) || (yw && wch) || (xh && hcw) || (xh && hch && yw && wcw) || (xw && wch && yh && hcw));
	    };

	    LayoutBase.prototype.areaLayoutCircular = function(parentLayout) {
	      var hch, hcw, hh, hw, wch, wcw, wh, ww;
	      if (!((this._locationParentRelative || this._sizeParentRelative) && (parentLayout != null ? parentLayout._sizeChildRelative : void 0))) {
	        return false;
	      }
	      ww = this.getWw() || this.getXw();
	      hh = this.getHh() || this.getYh();
	      hw = this.getHw() || this.getXw();
	      wh = this.getWh() || this.getYh();
	      wcw = parentLayout.getWcw();
	      hch = parentLayout.getHch();
	      wch = parentLayout.getWch();
	      hcw = parentLayout.getHcw();
	      return !!((ww && wcw) || (hh && hch) || (hw && wch) || (wh && hcw) || (wh && hch && hw && wcw) || (ww && wch && hh && hcw));
	    };

	    LayoutBase.prototype.interpolate = function(toLayout, p) {
	      if (p === 0) {
	        return this;
	      } else if (p === 1) {
	        return toLayout;
	      } else {
	        return new LayoutBase.InterpolatedLayout(this, toLayout, p);
	      }
	    };

	    return LayoutBase;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var BaseObject, ElementFactory, inspect, timeout;
	  BaseObject = Foundation.BaseObject, timeout = Foundation.timeout, inspect = Foundation.inspect;
	  return ElementFactory = (function(superClass) {
	    extend(ElementFactory, superClass);

	    ElementFactory.singletonClass();

	    function ElementFactory() {
	      ElementFactory.__super__.constructor.apply(this, arguments);
	      this._elementClassesByName = {};
	    }

	    ElementFactory.prototype.register = function(klass) {
	      var name;
	      name = klass.name;
	      if (this._elementClassesByName[name]) {
	        return timeout(100, function() {
	          return console.warn("ElementFactory: element with class-name " + name + " already exists. ClassPaths: Existing: " + (this._elementClassesByName[name].getClassPathName()) + ", Adding: " + (klass.getClassPathName()));
	        });
	      } else {
	        return this._elementClassesByName[name] = klass;
	      }
	    };

	    ElementFactory.prototype.classForElement = function(elementClassName) {
	      return this._elementClassesByName[elementClassName];
	    };

	    ElementFactory.prototype.newElement = function(elementClassName, props) {
	      var klass;
	      klass = this._elementClassesByName[elementClassName];
	      if (!klass) {
	        throw new Error("ElementFactor: class not found for " + (inspect(elementClassName)) + " (props: " + (inspect(props)) + ")");
	      }
	      return new this._elementClassesByName[elementClassName](props);
	    };

	    return ElementFactory;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var Layout;

	module.exports = Layout = __webpack_require__(157);

	Layout.InterpolatedLayout = __webpack_require__(158);

	Layout.InterpolatedPointLayout = __webpack_require__(159);

	Layout.LayoutBase = __webpack_require__(154);

	Layout.LinearLayout = __webpack_require__(161);

	Layout.PointLayoutBase = __webpack_require__(160);

	Layout.PointLayout = __webpack_require__(162);

	Layout.finishLoad(["InterpolatedLayout", "InterpolatedPointLayout", "LayoutBase", "LinearLayout", "PointLayoutBase", "PointLayout"]);


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Layout || (Engine.Layout = (function(superClass) {
	  extend(Layout, superClass);

	  function Layout() {
	    return Layout.__super__.constructor.apply(this, arguments);
	  }

	  Layout.namespace = Engine;

	  Layout.namespacePath = "Neptune.Art.Engine.Layout";

	  return Layout;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Layout);


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(154)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, LayoutBase) {
	  var Matrix, Point, Rectangle, clone, compact, flatten, inspect, inspectLean, isPlainObject, log, matrix, max, min, point, point0, rect, rubyOr, time;
	  rubyOr = Foundation.Ruby.or;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  point0 = Point.point0;
	  inspectLean = Foundation.inspectLean, max = Foundation.max, log = Foundation.log, flatten = Foundation.flatten, compact = Foundation.compact, time = Foundation.time, clone = Foundation.clone, inspect = Foundation.inspect, min = Foundation.min, max = Foundation.max, flatten = Foundation.flatten, isPlainObject = Foundation.isPlainObject;
	  return LayoutBase.InterpolatedLayout = (function(superClass) {
	    extend(InterpolatedLayout, superClass);

	    function InterpolatedLayout(layout1, layout2, p) {
	      this.layout1 = layout1;
	      this.layout2 = layout2;
	      this.p = p;
	      this._hasXLayout = this.layout1.getHasXLayout() || this.layout2.getHasXLayout();
	      this._hasYLayout = this.layout1.getHasYLayout() || this.layout2.getHasYLayout();
	      this._hasWLayout = this.layout1.getHasWLayout() || this.layout2.getHasWLayout();
	      this._hasHLayout = this.layout1.getHasHLayout() || this.layout2.getHasHLayout();
	      this._sizeChildRelative = this.layout1.getSizeChildRelative() || this.layout2.getSizeChildRelative();
	      this._locationParentRelative = this.layout1.getLocationParentRelative() || this.layout2.getLocationParentRelative();
	      this._sizeParentRelative = this.layout1.getSizeParentRelative() || this.layout2.getSizeParentRelative();
	      this._options = layout2.mergeOptions(layout1);
	      InterpolatedLayout.__super__.constructor.apply(this, arguments);
	    }

	    InterpolatedLayout.prototype.toString = function(showBracketedIfNotPresent) {
	      return ("(" + (this.layout1.toString(showBracketedIfNotPresent)) + " * " + (1 - this.p) + " + ") + ((this.layout2.toString(showBracketedIfNotPresent)) + " * " + this.p + ")");
	    };

	    InterpolatedLayout.prototype.inspect = function(inspector) {
	      var v;
	      v = this.inspect2();
	      if (inspector) {
	        inspector.put(v);
	      }
	      return v;
	    };

	    InterpolatedLayout.prototype.inspect2 = function() {
	      return this.toString();
	    };

	    InterpolatedLayout.getter({
	      x: function() {
	        return this.layout1.getX() + this.layout2.getX();
	      },
	      y: function() {
	        return this.layout1.getY() + this.layout2.getY();
	      },
	      w: function() {
	        return this.layout1.getW() + this.layout2.getW();
	      },
	      h: function() {
	        return this.layout1.getH() + this.layout2.getH();
	      },
	      xw: function() {
	        return this.layout1.getXw() + this.layout2.getXw();
	      },
	      xh: function() {
	        return this.layout1.getXh() + this.layout2.getXh();
	      },
	      yh: function() {
	        return this.layout1.getYh() + this.layout2.getYh();
	      },
	      yw: function() {
	        return this.layout1.getYw() + this.layout2.getYw();
	      },
	      ww: function() {
	        return this.layout1.getWw() + this.layout2.getWw();
	      },
	      wh: function() {
	        return this.layout1.getWh() + this.layout2.getWh();
	      },
	      hh: function() {
	        return this.layout1.getHh() + this.layout2.getHh();
	      },
	      hw: function() {
	        return this.layout1.getHw() + this.layout2.getHw();
	      },
	      wcw: function() {
	        return this.layout1.getWcw() + this.layout2.getWcw();
	      },
	      wch: function() {
	        return this.layout1.getWch() + this.layout2.getWch();
	      },
	      hch: function() {
	        return this.layout1.getHch() + this.layout2.getHch();
	      },
	      hcw: function() {
	        return this.layout1.getHcw() + this.layout2.getHcw();
	      }
	    });

	    InterpolatedLayout.prototype.mergeOptions = function(previousOptions) {
	      return this._options.mergeOptions(previousOptions);
	    };

	    InterpolatedLayout.prototype.interpolate1D = function(hasFrom, hasTo, from, to) {
	      if (hasFrom) {
	        if (hasTo) {
	          return (to - from) * this.p + from;
	        } else {
	          return from;
	        }
	      } else {
	        return to;
	      }
	    };

	    InterpolatedLayout.prototype.transformLocationX = function(parentSize) {
	      return this.interpolate1D(this.layout1.getHasXLayout(), this.layout2.getHasXLayout(), this.layout1.transformLocationX(parentSize), this.layout2.transformLocationX(parentSize));
	    };

	    InterpolatedLayout.prototype.transformLocationY = function(parentSize) {
	      return this.interpolate1D(this.layout1.getHasYLayout(), this.layout2.getHasYLayout(), this.layout1.transformLocationY(parentSize), this.layout2.transformLocationY(parentSize));
	    };

	    InterpolatedLayout.prototype.transformLocation = function(parentSize) {
	      return point(this.transformLocationX(parentSize), this.transformLocationY(parentSize));
	    };

	    InterpolatedLayout.prototype.transformSizeX = function(parentSize, childrenSize) {
	      return this.interpolate1D(this.layout1.getHasWLayout(), this.layout2.getHasWLayout(), this.layout1.transformSizeX(parentSize, childrenSize), this.layout2.transformSizeX(parentSize, childrenSize));
	    };

	    InterpolatedLayout.prototype.transformSizeY = function(parentSize, childrenSize) {
	      return this.interpolate1D(this.layout1.getHasHLayout(), this.layout2.getHasHLayout(), this.layout1.transformSizeY(parentSize, childrenSize), this.layout2.transformSizeY(parentSize, childrenSize));
	    };

	    InterpolatedLayout.prototype.transformSize = function(parentSize, childrenSize) {
	      if (childrenSize == null) {
	        childrenSize = point0;
	      }
	      return point(this.transformSizeX(parentSize, childrenSize), this.transformSizeY(parentSize, childrenSize));
	    };

	    return InterpolatedLayout;

	  })(LayoutBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(160)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, PointLayoutBase) {
	  var InterpolatedPointLayout, log;
	  log = Foundation.log;
	  return InterpolatedPointLayout = (function(superClass) {
	    var interpolate1D;

	    extend(InterpolatedPointLayout, superClass);

	    PointLayoutBase.InterpolatedPointLayout = InterpolatedPointLayout;

	    function InterpolatedPointLayout(layout1, layout2, p) {
	      InterpolatedPointLayout.__super__.constructor.apply(this, arguments);
	      this.layout1 = layout1;
	      this.layout2 = layout2;
	      this.p = p;
	      this._hasXLayout = this.layout1._hasXLayout || !this.layout2._hasXLayout;
	      this._hasYLayout = this.layout1._hasYLayout || !this.layout2._hasYLayout;
	      this._xRelativeToParentW = this.layout1._xRelativeToParentW || this.layout2._xRelativeToParentW;
	      this._xRelativeToParentH = this.layout1._xRelativeToParentH || this.layout2._xRelativeToParentH;
	      this._yRelativeToParentW = this.layout1._yRelativeToParentW || this.layout2._yRelativeToParentW;
	      this._yRelativeToParentH = this.layout1._yRelativeToParentH || this.layout2._yRelativeToParentH;
	      this._xRelativeToChildrenW = this.layout1._xRelativeToChildrenW || this.layout2._xRelativeToChildrenW;
	      this._xRelativeToChildrenH = this.layout1._xRelativeToChildrenH || this.layout2._xRelativeToChildrenH;
	      this._yRelativeToChildrenW = this.layout1._yRelativeToChildrenW || this.layout2._yRelativeToChildrenW;
	      this._yRelativeToChildrenH = this.layout1._yRelativeToChildrenH || this.layout2._yRelativeToChildrenH;
	      this.layoutX = function(ps, cs) {
	        return interpolate1D(p, layout1._hasXLayout, layout2._hasXLayout, layout1.layoutX(ps, cs), layout2.layoutX(ps, cs));
	      };
	      this.layoutY = function(ps, cs) {
	        return interpolate1D(p, layout1._hasYLayout, layout2._hasYLayout, layout1.layoutY(ps, cs), layout2.layoutY(ps, cs));
	      };
	    }

	    InterpolatedPointLayout.prototype.toString = function() {
	      return "(" + this.layout1 + " * " + this.p + " + " + this.layout2 + " * " + (1 - this.p) + ")";
	    };

	    InterpolatedPointLayout.interpolate1D = interpolate1D = function(p, hasFrom, hasTo, from, to) {
	      if (hasFrom) {
	        if (hasTo) {
	          return (to - from) * p + from;
	        } else {
	          return from;
	        }
	      } else {
	        return to;
	      }
	    };

	    return InterpolatedPointLayout;

	  })(PointLayoutBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(89), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation) {
	  var BaseObject, Point, PointLayoutBase, inspect, isFunction, isNumber, isPlainObject, log, nearInfinity, nearInfinityResult, point, point0;
	  point = Atomic.point, Point = Atomic.Point;
	  point0 = Point.point0;
	  BaseObject = Foundation.BaseObject, log = Foundation.log, inspect = Foundation.inspect, isFunction = Foundation.isFunction, isNumber = Foundation.isNumber, isPlainObject = Foundation.isPlainObject, nearInfinity = Foundation.nearInfinity, nearInfinityResult = Foundation.nearInfinityResult;
	  return PointLayoutBase = (function(superClass) {
	    var isChildrenHRelative, isChildrenWRelative, isParentHRelative, isParentWRelative, nearInfinityPoint, nearInfinityPointX, nearInfinityPointY;

	    extend(PointLayoutBase, superClass);

	    function PointLayoutBase(a, previousLayout) {
	      this._xRelativeToParentW = this._xRelativeToParentH = this._yRelativeToParentW = this._yRelativeToParentH = this._xRelativeToChildrenW = this._xRelativeToChildrenH = this._yRelativeToChildrenW = this._yRelativeToChildrenH = false;
	      this._hasXLayout = this._hasYLayout = false;
	      this.layoutX = this.layoutY = function() {
	        return 0;
	      };
	      this.layout = function(ps, cs) {
	        return point(this.layoutX(ps, cs), this.layoutY(ps, cs));
	      };
	    }

	    PointLayoutBase.prototype.interpolate = function(toLayout, p) {
	      if (p === 0) {
	        return this;
	      } else if (p === 1) {
	        return toLayout;
	      } else {
	        return new PointLayoutBase.InterpolatedPointLayout(this, toLayout, p);
	      }
	    };

	    PointLayoutBase.prototype.inspect = function(inspector) {
	      var v;
	      v = this.inspect2();
	      if (inspector != null) {
	        inspector.put(v);
	      }
	      return v;
	    };

	    PointLayoutBase.prototype.inspect2 = function() {
	      return this.toString();
	    };

	    PointLayoutBase.propGetter("xRelativeToParentW", "xRelativeToParentH", "yRelativeToParentW", "yRelativeToParentH", "xRelativeToChildrenW", "xRelativeToChildrenH", "yRelativeToChildrenW", "yRelativeToChildrenH", "hasXLayout", "hasYLayout");

	    PointLayoutBase.getter({
	      hasFullLayout: function() {
	        return this._hasXLayout && this._hasYLayout;
	      },
	      hasLayout: function() {
	        return this._hasXLayout || this._hasYLayout;
	      },
	      parentRelative: function() {
	        return this._xRelativeToParentH || this._xRelativeToParentW || this._yRelativeToParentH || this._yRelativeToParentW;
	      },
	      childrenRelative: function() {
	        return this._xRelativeToChildrenH || this._xRelativeToChildrenW || this._yRelativeToChildrenH || this._yRelativeToChildrenW;
	      },
	      xParentRelative: function() {
	        return this._xRelativeToParentH || this._xRelativeToParentW;
	      },
	      yParentRelative: function() {
	        return this._yRelativeToParentH || this._yRelativeToParentW;
	      },
	      xChildrenRelative: function() {
	        return this._xRelativeToChildrenH || this._xRelativeToChildrenW;
	      },
	      yChildrenRelative: function() {
	        return this._yRelativeToChildrenH || this._yRelativeToChildrenW;
	      }
	    });

	    PointLayoutBase.prototype.layoutIsCircular = function(parentLayout) {
	      var result, xcx, xcy, xpx, xpy, ycx, ycy, ypx, ypy;
	      if (!parentLayout) {
	        return false;
	      }
	      xpx = this._xRelativeToParentW;
	      xpy = this._xRelativeToParentH;
	      ypx = this._yRelativeToParentW;
	      ypy = this._yRelativeToParentH;
	      xcx = parentLayout.getXRelativeToChildrenW();
	      xcy = parentLayout.getXRelativeToChildrenH();
	      ycx = parentLayout.getYRelativeToChildrenW();
	      ycy = parentLayout.getYRelativeToChildrenH();
	      result = !!((xpx && xcx) || (xpy && ycx) || (ypy && ycy) || (ypx && xcy) || (xpy && ycy && ypx && xcy) || (xpx && xcy && ypy && ycx));
	      return result;
	    };

	    nearInfinityPoint = point(nearInfinity, nearInfinity);

	    nearInfinityPointX = point0.withX(nearInfinity);

	    nearInfinityPointY = point0.withY(nearInfinity);

	    PointLayoutBase.isParentWRelative = isParentWRelative = function(f, baseline, baselinePoint, testPoint) {
	      return f(testPoint, baselinePoint) !== baseline;
	    };

	    PointLayoutBase.isParentHRelative = isParentHRelative = function(f, baseline, baselinePoint, testPoint) {
	      return f(testPoint, baselinePoint) !== baseline;
	    };

	    PointLayoutBase.isChildrenWRelative = isChildrenWRelative = function(f, baseline, baselinePoint, testPoint) {
	      return f(baselinePoint, testPoint) !== baseline;
	    };

	    PointLayoutBase.isChildrenHRelative = isChildrenHRelative = function(f, baseline, baselinePoint, testPoint) {
	      return f(baselinePoint, testPoint) !== baseline;
	    };

	    PointLayoutBase.prototype._detectXRelativity = function() {
	      var layoutBaseline, layoutLength, nearInfinityBaseline;
	      this._xRelativeToParentW = this._xRelativeToParentH = this._xRelativeToChildrenW = this._xRelativeToChildrenH = false;
	      layoutLength = this.layoutX.length;
	      layoutBaseline = this.layoutX(point0, point0);
	      nearInfinityBaseline = this.layoutX(nearInfinityPoint, nearInfinityPoint);
	      if (layoutLength > 0) {
	        this._xRelativeToParentW = isParentWRelative(this.layoutX, layoutBaseline, point0, nearInfinityPointX) || isParentWRelative(this.layoutX, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointY);
	        this._xRelativeToParentH = isParentHRelative(this.layoutX, layoutBaseline, point0, nearInfinityPointY) || isParentHRelative(this.layoutX, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointX);
	        if (layoutLength === 1 && !this._xRelativeToParentW && !this._xRelativeToParentH) {
	          console.warn(this + ": horizontal/x/w layout function has 1 input, which suggests it should be parent-relative, but it doesn't appear to be. \n\nResolution: If the input is unused, remove it. Otherwise, alter your function to respond differently for parent-sizes of 0 and children-sizes of near-infinity.");
	        }
	      }
	      if (layoutLength > 1) {
	        this._xRelativeToChildrenW = isChildrenWRelative(this.layoutX, layoutBaseline, point0, nearInfinityPointX) || isChildrenWRelative(this.layoutX, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointY);
	        this._xRelativeToChildrenH = isChildrenHRelative(this.layoutX, layoutBaseline, point0, nearInfinityPointY) || isChildrenHRelative(this.layoutX, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointX);
	        if (!(this._xRelativeToChildrenW || this._xRelativeToChildrenH)) {
	          return console.warn(this + ": horizontal/x/w layout function has 2 inputs, which suggests it should be child-relative, but it doesn't appear to be. \n\nResolution: If the second input is unused, remove it. Otherwise, alter your function to respond differently for children-sizes of 0 vs near-infinity when parent-size is 0.");
	        }
	      }
	    };

	    PointLayoutBase.prototype._detectYRelativity = function() {
	      var layoutBaseline, layoutLength, nearInfinityBaseline;
	      this._yRelativeToParentW = this._yRelativeToParentH = this._yRelativeToChildrenW = this._yRelativeToChildrenH = false;
	      layoutLength = this.layoutY.length;
	      layoutBaseline = this.layoutY(point0, point0);
	      nearInfinityBaseline = this.layoutY(nearInfinityPoint, nearInfinityPoint);
	      if (layoutLength > 0) {
	        this._yRelativeToParentW = isParentWRelative(this.layoutY, layoutBaseline, point0, nearInfinityPointX) || isParentWRelative(this.layoutY, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointY);
	        this._yRelativeToParentH = isParentHRelative(this.layoutY, layoutBaseline, point0, nearInfinityPointY) || isParentHRelative(this.layoutY, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointX);
	        if (layoutLength === 1 && !this._yRelativeToParentW && !this._yRelativeToParentH) {
	          console.warn(this + ": vertical/y/h layout function has 1 input, which suggests it should be parent-relative, but it doesn't appear to be. \n\nResolution: If the input is unused, remove it. Otherwise, alter your function to respond differently for parent-sizes of 0 and children-sizes of near-infinity.");
	        }
	      }
	      if (layoutLength > 1) {
	        this._yRelativeToChildrenW = isChildrenWRelative(this.layoutY, layoutBaseline, point0, nearInfinityPointX) || isChildrenWRelative(this.layoutY, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointY);
	        this._yRelativeToChildrenH = isChildrenHRelative(this.layoutY, layoutBaseline, point0, nearInfinityPointY) || isChildrenHRelative(this.layoutY, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointX);
	        if (!(this._yRelativeToChildrenW || this._yRelativeToChildrenH)) {
	          return console.warn(this + ": vertical/y/h layout function has 2 inputs, which suggests it should be child-relative, but it doesn't appear to be. \n\nResolution: If the second input is unused, remove it. Otherwise, alter your function to respond differently for children-sizes of 0 vs near-infinity when parent-size is 0.");
	        }
	      }
	    };

	    PointLayoutBase.prototype._detectRelativity = function() {
	      this._detectXRelativity();
	      return this._detectYRelativity();
	    };

	    return PointLayoutBase;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(89), __webpack_require__(8), __webpack_require__(154)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation, LayoutBase) {
	  var Point, Rectangle, clone, compact, copyProps, expandPairOptions, flatten, hasOneOrMoreProps, inspect, inspectLean, isPlainObject, log, max, min, nearInfinity, needsMerging, pairSets, pairsExpansionMap, point, point0, propSets, propsAffecting, rect, rubyOr, time;
	  rubyOr = Foundation.Ruby.or;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle;
	  point0 = Point.point0;
	  inspectLean = Foundation.inspectLean, max = Foundation.max, log = Foundation.log, flatten = Foundation.flatten, compact = Foundation.compact, time = Foundation.time, clone = Foundation.clone, inspect = Foundation.inspect, min = Foundation.min, max = Foundation.max, flatten = Foundation.flatten, isPlainObject = Foundation.isPlainObject;
	  nearInfinity = LayoutBase.nearInfinity;
	  propsAffecting = {
	    x: ["x", "xw", "xh"],
	    y: ["y", "yw", "yh"],
	    w: ["w", "ww", "wh", "wcw", "wch"],
	    h: ["h", "hw", "hh", "hcw", "hch"]
	  };
	  propSets = {
	    sizeParentRelative: ["ww", "wh", "hw", "hh"],
	    widthParentRelative: ["ww", "wh"],
	    heightParentRelative: ["hw", "hh"],
	    locationParentRelative: ["xw", "xh", "yw", "yh"],
	    sizeChildRelative: ["wcw", "wch", "hcw", "hch"]
	  };
	  hasOneOrMoreProps = function(options, props) {
	    var i, len, prop;
	    for (i = 0, len = props.length; i < len; i++) {
	      prop = props[i];
	      if (typeof options[prop] === "number") {
	        return true;
	      }
	    }
	    return false;
	  };
	  copyProps = function(to, from, props) {
	    var i, len, prop, v;
	    for (i = 0, len = props.length; i < len; i++) {
	      prop = props[i];
	      if ((v = from[prop]) != null) {
	        to[prop] = v;
	      }
	    }
	    return to;
	  };
	  pairSets = {
	    s: ["s", "ss", "scs", "ssh"],
	    l: ["l", "ls", "lsh"]
	  };
	  pairsExpansionMap = {
	    s: ["w", "h"],
	    ss: ["ww", "hh"],
	    ssh: ["wh", "hw"],
	    scs: ["wcw", "hch"],
	    l: ["x", "y"],
	    ls: ["xw", "yh"],
	    lsh: ["xh", "yw"]
	  };
	  expandPairOptions = function(options) {
	    var newOptions, ref, srcProp, srcValue, toX, toY, x, y;
	    newOptions = null;
	    for (srcProp in pairsExpansionMap) {
	      ref = pairsExpansionMap[srcProp], toX = ref[0], toY = ref[1];
	      if (typeof (srcValue = options[srcProp]) !== null && srcValue !== void 0) {
	        newOptions || (newOptions = clone(options));
	        if (typeof srcValue === "number") {
	          x = y = srcValue;
	        } else {
	          x = srcValue.x, y = srcValue.y;
	        }
	        if (newOptions[toX] == null) {
	          newOptions[toX] = x;
	        }
	        if (newOptions[toY] == null) {
	          newOptions[toY] = y;
	        }
	        delete newOptions[srcProp];
	      }
	    }
	    return newOptions || options;
	  };
	  needsMerging = function(options, oldOptions) {
	    var propSet, propSetName;
	    for (propSetName in propsAffecting) {
	      propSet = propsAffecting[propSetName];
	      if (hasOneOrMoreProps(options, propSet) !== hasOneOrMoreProps(oldOptions, propSet)) {
	        return true;
	      }
	    }
	    return false;
	  };
	  return LayoutBase.LinearLayout = (function(superClass) {
	    var bracketUnless, mergeOptions;

	    extend(LinearLayout, superClass);

	    LinearLayout.mergeOptions = mergeOptions = function(options, oldOptions) {
	      var newOptions, propSet, propSetName, settingOptions;
	      options = options ? options.getOptions ? options.getOptions() : expandPairOptions(options) : void 0;
	      oldOptions = oldOptions ? oldOptions.getOptions ? oldOptions.getOptions() : expandPairOptions(oldOptions) : void 0;
	      if (!(options && oldOptions)) {
	        return options || oldOptions;
	      }
	      if (!needsMerging(options, oldOptions)) {
	        return options;
	      }
	      newOptions = {};
	      for (propSetName in propsAffecting) {
	        propSet = propsAffecting[propSetName];
	        settingOptions = hasOneOrMoreProps(options, propSet) ? options : oldOptions;
	        copyProps(newOptions, settingOptions, propSet);
	      }
	      if (options.min || oldOptions.min) {
	        newOptions.min = mergeOptions(options.min, oldOptions.min);
	      }
	      if (options.max || oldOptions.max) {
	        newOptions.max = mergeOptions(options.max, oldOptions.max);
	      }
	      return newOptions;
	    };

	    function LinearLayout(options, previousOptions, forceHasAllLayout) {
	      var maxOptions, minOptions;
	      if (options == null) {
	        options = {};
	      }
	      this._sizeSx = this._sizeSy = 1;
	      this._sizeShx = this._sizeShy = 0;
	      this._sizeTx = this._sizeTy = 0;
	      this._locationSx = 0;
	      this._locationSy = 0;
	      this._locationShx = 0;
	      this._locationShy = 0;
	      this._locationTx = 0;
	      this._locationTy = 0;
	      this._maxLayout = null;
	      this._minLayout = null;
	      this._wcw = this._hcw = this._wch = this._hch = 0;
	      this._options = options = mergeOptions(options, previousOptions);
	      this._hasXLayout = forceHasAllLayout || hasOneOrMoreProps(options, propsAffecting.x);
	      this._hasYLayout = forceHasAllLayout || hasOneOrMoreProps(options, propsAffecting.y);
	      this._hasWLayout = forceHasAllLayout || hasOneOrMoreProps(options, propsAffecting.w);
	      this._hasHLayout = forceHasAllLayout || hasOneOrMoreProps(options, propsAffecting.h);
	      this._sizeChildRelative = hasOneOrMoreProps(options, propSets.sizeChildRelative);
	      this._locationParentRelative = hasOneOrMoreProps(options, propSets.locationParentRelative);
	      this._sizeParentRelative = hasOneOrMoreProps(options, propSets.sizeParentRelative);
	      this._widthParentRelative = hasOneOrMoreProps(options, propSets.widthParentRelative);
	      this._heightParentRelative = hasOneOrMoreProps(options, propSets.heightParentRelative);
	      this.layout(this._options = options);
	      if (maxOptions = options.max) {
	        maxOptions = expandPairOptions(maxOptions);
	        this._maxLayout = new LinearLayout(maxOptions);
	      }
	      if (minOptions = options.min) {
	        minOptions = expandPairOptions(minOptions);
	        this._minLayout = new LinearLayout(minOptions);
	      }
	      LinearLayout.__super__.constructor.apply(this, arguments);
	    }

	    LinearLayout.prototype.mergeOptions = function(previousOptions) {
	      return mergeOptions(this, previousOptions);
	    };

	    LinearLayout.prototype.eq = function(ll) {
	      return this._locationSx === ll._locationSx && this._locationSy === ll._locationSy && this._locationShx === ll._locationShx && this._locationShy === ll._locationShy && this._locationTx === ll._locationTx && this._locationTy === ll._locationTy && this._sizeSx === ll._sizeSx && this._sizeSy === ll._sizeSy && this._sizeShx === ll._sizeShx && this._sizeShy === ll._sizeShy && this._sizeTx === ll._sizeTx && this._sizeTy === ll._sizeTy && this._wcw === ll._wcw && this._wch === ll._wch && this._hcw === ll._hcw && this._hch === ll._hch;
	    };

	    LinearLayout.prototype.layoutFromElement = function(o) {
	      var location, size;
	      if (o == null) {
	        o = this;
	      }
	      size = o.size, location = o.location;
	      this._sizeTx = size.x;
	      this._sizeTy = size.y;
	      this._sizeSx = this._sizeSy = 0;
	      this._sizeShx = this._sizeShy = 0;
	      this._locationTx = location.x;
	      this._locationTy = location.y;
	      this._locationSx = this._locationSy = 0;
	      return this._locationShx = this._locationShy = 0;
	    };

	    bracketUnless = function(bracketUnless, show, string) {
	      if (!bracketUnless) {
	        if (show) {
	          return "[" + string + "]";
	        }
	      } else {
	        return string;
	      }
	    };

	    LinearLayout.prototype.toStringSet = function(basePropName) {
	      var prop, v, vals;
	      vals = (function() {
	        var i, len, ref, results;
	        ref = propsAffecting[basePropName];
	        results = [];
	        for (i = 0, len = ref.length; i < len; i++) {
	          prop = ref[i];
	          if ((v = this[prop]) !== 0) {
	            results.push(prop + ": " + v);
	          }
	        }
	        return results;
	      }).call(this);
	      if (vals.length === 0) {
	        return basePropName + ": 0";
	      } else {
	        return vals.join(", ");
	      }
	    };

	    LinearLayout.prototype.pairSetIdentical = function(pairSetName) {
	      var ok, p1, p2, pair, pairSet, v, vals;
	      pairSet = pairSets[pairSetName];
	      pairsExpansionMap;
	      ok = true;
	      vals = (function() {
	        var i, len, ref, results;
	        results = [];
	        for (i = 0, len = pairSet.length; i < len; i++) {
	          pair = pairSet[i];
	          ref = pairsExpansionMap[pair], p1 = ref[0], p2 = ref[1];
	          if ((v = this[p1]) !== this[p2]) {
	            ok = false;
	            break;
	          }
	          if (v !== 0) {
	            results.push(pair + ": " + v);
	          } else {
	            results.push(void 0);
	          }
	        }
	        return results;
	      }).call(this);
	      if (!ok) {
	        return false;
	      }
	      vals = compact(vals);
	      if (vals.length === 0) {
	        return pairSetName + ": 0";
	      } else {
	        return vals.join(", ");
	      }
	    };

	    LinearLayout.prototype.toString = function(showBracketedIfNotPresent) {
	      var closeCap, openCap, pairValues;
	      openCap = "{";
	      closeCap = "}";
	      return openCap + compact(flatten([this._hasXLayout === this._hasYLayout && (pairValues = this.pairSetIdentical("l")) ? bracketUnless(this._hasXLayout && this._hasYLayout, showBracketedIfNotPresent, pairValues) : [bracketUnless(this._hasXLayout, showBracketedIfNotPresent, this.toStringSet("x")), bracketUnless(this._hasYLayout, showBracketedIfNotPresent, this.toStringSet("y"))], this._hasWLayout === this._hasHLayout && (pairValues = this.pairSetIdentical("s")) ? bracketUnless(this._hasWLayout && this._hasHLayout, showBracketedIfNotPresent, pairValues) : [bracketUnless(this._hasWLayout, showBracketedIfNotPresent, this.toStringSet("w")), bracketUnless(this._hasHLayout, showBracketedIfNotPresent, this.toStringSet("h"))], this._maxLayout ? "max: " + this._maxLayout.toString() : void 0, this._minLayout ? "min: " + this._minLayout.toString() : void 0])).join(', ') + closeCap;
	    };

	    LinearLayout.prototype.inspect = function(inspector) {
	      var v;
	      v = this.inspect2();
	      if (inspector) {
	        inspector.put(v);
	      }
	      return v;
	    };

	    LinearLayout.prototype.inspect2 = function() {
	      return this.toString();
	    };

	    LinearLayout.getter({
	      l: function() {
	        return point(this._locationTx, this._locationTy);
	      },
	      s: function() {
	        return point(this._sizeTx, this._sizeTy);
	      },
	      x: function() {
	        return this._locationTx;
	      },
	      xw: function() {
	        return this._locationSx;
	      },
	      xh: function() {
	        return this._locationShx;
	      },
	      y: function() {
	        return this._locationTy;
	      },
	      yh: function() {
	        return this._locationSy;
	      },
	      yw: function() {
	        return this._locationShy;
	      },
	      w: function() {
	        return this._sizeTx;
	      },
	      ww: function() {
	        return this._sizeSx;
	      },
	      wh: function() {
	        return this._sizeShx;
	      },
	      h: function() {
	        return this._sizeTy;
	      },
	      hh: function() {
	        return this._sizeSy;
	      },
	      hw: function() {
	        return this._sizeShy;
	      }
	    });

	    LinearLayout.propGetter("wcw", "wch", "hch", "hcw");

	    LinearLayout.prototype.layout = function(arg) {
	      var h, hch, hcw, hh, hw, w, wch, wcw, wh, ww, x, xh, xw, y, yh, yw;
	      x = arg.x, xw = arg.xw, xh = arg.xh, y = arg.y, yh = arg.yh, yw = arg.yw, w = arg.w, ww = arg.ww, wh = arg.wh, wcw = arg.wcw, wch = arg.wch, h = arg.h, hh = arg.hh, hw = arg.hw, hch = arg.hch, hcw = arg.hcw;
	      this.layoutHorizontalLocation(x, xw, xh);
	      this.layoutVerticalLocation(y, yh, yw);
	      this.layoutWidth(w, ww, wh, wcw, wch);
	      return this.layoutHeight(h, hh, hw, hch, hcw);
	    };

	    LinearLayout.prototype.layoutHorizontalLocation = function(x, xx, xy) {
	      if (!((x != null) || (xx != null) || (xy != null))) {
	        return;
	      }
	      this._locationTx = x || 0;
	      this._locationSx = xx || 0;
	      return this._locationShx = xy || 0;
	    };

	    LinearLayout.prototype.layoutVerticalLocation = function(y, yy, yx) {
	      if (!((y != null) || (yy != null) || (yx != null))) {
	        return;
	      }
	      this._locationTy = y || 0;
	      this._locationSy = yy || 0;
	      return this._locationShy = yx || 0;
	    };

	    LinearLayout.prototype.layoutWidth = function(w, wx, wy, wcw, wch) {
	      if (!((w != null) || (wx != null) || (wy != null) || (wch != null) || (wcw != null))) {
	        return;
	      }
	      this._wcw = wcw || 0;
	      this._wch = wch || 0;
	      this._sizeTx = w || 0;
	      this._sizeSx = wx || 0;
	      return this._sizeShx = wy || 0;
	    };

	    LinearLayout.prototype.layoutHeight = function(h, hy, hx, hch, hcw) {
	      if (!((h != null) || (hy != null) || (hx != null) || (hch != null) || (hcw != null))) {
	        return;
	      }
	      this._hcw = hcw || 0;
	      this._hch = hch || 0;
	      this._sizeTy = h || 0;
	      this._sizeSy = hy || 0;
	      return this._sizeShy = hx || 0;
	    };

	    LinearLayout.prototype.constrainSizeXByMaxLayout = function(parentSize, childrenSize, v) {
	      var ref;
	      if ((ref = this._maxLayout) != null ? ref._hasWLayout : void 0) {
	        return min(v, this._maxLayout.transformSizeX(parentSize, childrenSize));
	      } else {
	        return v;
	      }
	    };

	    LinearLayout.prototype.constrainSizeYByMaxLayout = function(parentSize, childrenSize, v) {
	      var ref;
	      if ((ref = this._maxLayout) != null ? ref._hasHLayout : void 0) {
	        return min(v, this._maxLayout.transformSizeY(parentSize, childrenSize));
	      } else {
	        return v;
	      }
	    };

	    LinearLayout.prototype.constrainSizeXByMinLayout = function(parentSize, childrenSize, v) {
	      var ref;
	      if ((ref = this._minLayout) != null ? ref._hasWLayout : void 0) {
	        return max(0, v, this._minLayout.transformSizeX(parentSize, childrenSize));
	      } else {
	        return max(0, v);
	      }
	    };

	    LinearLayout.prototype.constrainSizeYByMinLayout = function(parentSize, childrenSize, v) {
	      var ref;
	      if ((ref = this._minLayout) != null ? ref._hasHLayout : void 0) {
	        return max(0, v, this._minLayout.transformSizeY(parentSize, childrenSize));
	      } else {
	        return max(0, v);
	      }
	    };

	    LinearLayout.prototype.transformLocationX = function(parentSize) {
	      var ref, ref1, x;
	      x = parentSize.x * this._locationSx + parentSize.y * this._locationShx + this._locationTx;
	      if ((ref = this._maxLayout) != null ? ref._hasXLayout : void 0) {
	        x = min(x, this._maxLayout.transformLocationX(parentSize));
	      }
	      if ((ref1 = this._minLayout) != null ? ref1._hasXLayout : void 0) {
	        x = max(x, this._minLayout.transformLocationX(parentSize));
	      }
	      return x;
	    };

	    LinearLayout.prototype.transformLocationY = function(parentSize) {
	      var ref, ref1, y;
	      y = parentSize.y * this._locationSy + parentSize.x * this._locationShy + this._locationTy;
	      if ((ref = this._maxLayout) != null ? ref._hasYLayout : void 0) {
	        y = min(y, this._maxLayout.transformLocationY(parentSize));
	      }
	      if ((ref1 = this._minLayout) != null ? ref1._hasYLayout : void 0) {
	        y = max(y, this._minLayout.transformLocationY(parentSize));
	      }
	      return y;
	    };

	    LinearLayout.prototype.transformLocation = function(parentSize) {
	      return new Point(this.transformLocationX(parentSize), this.transformLocationY(parentSize));
	    };

	    LinearLayout.prototype.transformSizeX = function(parentSize, childrenSize) {
	      return this.constrainSizeXByMinLayout(parentSize, childrenSize, this.constrainSizeXByMaxLayout(parentSize, childrenSize, (parentSize.x * this._sizeSx + parentSize.y * this._sizeShx + this._sizeTx) + this._wcw * childrenSize.x + this._wch * childrenSize.y));
	    };

	    LinearLayout.prototype.transformSizeY = function(parentSize, childrenSize) {
	      return this.constrainSizeYByMinLayout(parentSize, childrenSize, this.constrainSizeYByMaxLayout(parentSize, childrenSize, (parentSize.y * this._sizeSy + parentSize.x * this._sizeShy + this._sizeTy) + this._hcw * childrenSize.x + this._hch * childrenSize.y));
	    };

	    LinearLayout.prototype.transformSize = function(parentSize, childrenSize) {
	      if (childrenSize == null) {
	        childrenSize = point0;
	      }
	      return new Point(this.transformSizeX(parentSize, childrenSize), this.transformSizeY(parentSize, childrenSize));
	    };

	    return LinearLayout;

	  })(LayoutBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(89), __webpack_require__(8), __webpack_require__(160)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation, PointLayoutBase) {
	  var BaseObject, Components, Point, PointLayout, inspect, inspectLean, isFunction, isNumber, isPlainObject, log, max, min, point, point0;
	  point = Atomic.point, Point = Atomic.Point;
	  point0 = Point.point0;
	  BaseObject = Foundation.BaseObject, log = Foundation.log, inspect = Foundation.inspect, inspectLean = Foundation.inspectLean, isFunction = Foundation.isFunction, isNumber = Foundation.isNumber, isPlainObject = Foundation.isPlainObject, min = Foundation.min, max = Foundation.max;
	  Components = (function() {
	    var applyComponentsFunctions, preprocessValue, x, xcw, xph, xpw, y, ych, yph, ypw;

	    function Components() {}

	    Components.setupPointLayout = function(linearLayout, options, previousLayout) {
	      var applyFunction, k, maxLayout, v;
	      maxLayout = options.max ? new PointLayout(options.max) : void 0;
	      this._reset();
	      for (k in options) {
	        v = options[k];
	        applyFunction = applyComponentsFunctions[k];
	        if (!applyFunction) {
	          throw new Error("invalid PointLayout component: " + (inspect(k)) + " in " + (inspect(options)));
	        }
	        applyFunction(v, linearLayout);
	      }
	      linearLayout.layoutX = linearLayout._hasXLayout ? this._buildXLayoutFromComponents(maxLayout) : (previousLayout != null ? previousLayout._hasXLayout : void 0) ? (linearLayout._hasXLayout = true, previousLayout.layoutX) : function() {
	        return 0;
	      };
	      linearLayout.layoutY = linearLayout._hasYLayout ? this._buildYLayoutFromComponents(maxLayout) : (previousLayout != null ? previousLayout._hasYLayout : void 0) ? (linearLayout._hasYLayout = true, previousLayout.layoutY) : function() {
	        return 0;
	      };
	      if (this.needToDetectXRelativity) {
	        linearLayout._detectXRelativity();
	      }
	      if (this.needToDetectYRelativity) {
	        return linearLayout._detectYRelativity();
	      }
	    };

	    Components._buildXLayoutFromComponents = function(maxLayout) {
	      var layoutX, x, xcw, xph, xpw;
	      x = this.x, xpw = this.xpw, xph = this.xph, xcw = this.xcw, layoutX = this.layoutX;
	      layoutX || (layoutX = xcw === 0 ? function(ps) {
	        return x + xpw * ps.x + xph * ps.y;
	      } : function(ps, cs) {
	        return x + xpw * ps.x + xph * ps.y + xcw * cs.x;
	      });
	      if (maxLayout != null ? maxLayout.getHasXLayout() : void 0) {
	        return function(ps, cs) {
	          return min(maxLayout.layoutX(ps), layoutX(ps, cs));
	        };
	      } else {
	        return layoutX;
	      }
	    };

	    Components._buildYLayoutFromComponents = function(maxLayout) {
	      var layoutY, y, ych, yph, ypw;
	      y = this.y, yph = this.yph, ypw = this.ypw, ych = this.ych, layoutY = this.layoutY;
	      layoutY || (layoutY = ych === 0 ? function(ps) {
	        return y + yph * ps.y + ypw * ps.x;
	      } : function(ps, cs) {
	        return y + yph * ps.y + ypw * ps.x + ych * cs.y;
	      });
	      if (maxLayout != null ? maxLayout.getHasYLayout() : void 0) {
	        return function(ps, cs) {
	          return min(maxLayout.layoutY(ps), layoutY(ps, cs));
	        };
	      } else {
	        return layoutY;
	      }
	    };

	    Components._reset = function() {
	      this.needToDetectXRelativity = false;
	      this.needToDetectYRelativity = false;
	      this.layoutX = null;
	      this.layoutY = null;
	      return this.x = this.xpw = this.xph = this.xcw = this.y = this.yph = this.ypw = this.ych = 0.0;
	    };

	    Components._reset();

	    preprocessValue = function(value, pointLayout) {
	      value || (value = 0);
	      if (!isNumber(value)) {
	        throw new Error("Each PointLayout component must be a number. Not " + (inspect(value)) + " from " + pointLayout);
	      }
	      return value;
	    };

	    Components._applyComponentsFunctions = applyComponentsFunctions = {
	      max: function(value, pointLayout) {},
	      plus: function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._hasYLayout = true;
	        Components.x += value;
	        return Components.y += value;
	      },
	      x: x = function(value, pointLayout) {
	        pointLayout._hasXLayout = true;
	        if (isFunction(value)) {
	          Components.layoutX = value;
	          return Components.needToDetectXRelativity = true;
	        } else {
	          value = preprocessValue(value, pointLayout);
	          return Components.x += value;
	        }
	      },
	      y: y = function(value, pointLayout) {
	        pointLayout._hasYLayout = true;
	        if (isFunction(value)) {
	          Components.layoutY = value;
	          return Components.needToDetectYRelativity = true;
	        } else {
	          value = preprocessValue(value, pointLayout);
	          return Components.y += value;
	        }
	      },
	      ps: function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._hasYLayout = pointLayout._xRelativeToParentW = pointLayout._yRelativeToParentH = true;
	        Components.xpw += value;
	        return Components.yph += value;
	      },
	      xpw: xpw = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._xRelativeToParentW = true;
	        return Components.xpw += value;
	      },
	      yph: yph = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasYLayout = pointLayout._yRelativeToParentH = true;
	        return Components.yph += value;
	      },
	      xph: xph = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._xRelativeToParentH = true;
	        return Components.xph += value;
	      },
	      ypw: ypw = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasYLayout = pointLayout._yRelativeToParentW = true;
	        return Components.ypw += value;
	      },
	      cs: function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._hasYLayout = pointLayout._xRelativeToChildrenW = pointLayout._yRelativeToChildrenH = true;
	        Components.xcw += value;
	        return Components.ych += value;
	      },
	      xcw: xcw = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._xRelativeToChildrenW = true;
	        return Components.xcw += value;
	      },
	      ych: ych = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasYLayout = pointLayout._yRelativeToChildrenH = true;
	        return Components.ych += value;
	      },
	      w: x,
	      h: y,
	      ww: xpw,
	      hh: yph,
	      xw: xpw,
	      yh: yph,
	      wh: xph,
	      hw: ypw,
	      xh: xph,
	      yw: ypw,
	      wpw: xpw,
	      hph: yph,
	      wcw: xcw,
	      hch: ych,
	      wph: xph,
	      hpw: ypw,
	      width: x,
	      height: y,
	      width_parentWidth: xpw,
	      height_parentHeight: yph,
	      width_childrenWidth: xcw,
	      height_childrenHeight: ych,
	      x_parentWidth: xpw,
	      y_parentHeight: yph,
	      x_childrenWidth: xcw,
	      y_childrenHeight: ych
	    };

	    return Components;

	  })();
	  return PointLayout = (function(superClass) {
	    extend(PointLayout, superClass);


	    /*
	    constructor inputs: (initializer, previousLayout)
	    
	    initializer:
	    
	      null/undefined:     constant layout returning 0
	      Point:              constant layout returning initializer
	      Number:             constant layout returning the number
	    
	      (ps, cs) -> Point:
	        layout is an abitrary function based on ps (parent-size) and cs (children-size) returning a point
	        NOTE: this is the least efficient option UNLESS the function directly returns ps or cs.
	        REASON: otherwise you are creating new points each time the function is called.
	    
	      x: (px, cs) -> number
	      y: (px, cs) -> number
	        Layout is two arbitraty functions, one for X and one for Y.
	        You can provide only one if you wish. If so, the other is set to: () -> 0
	    
	      options object:
	    
	         * layoutX is the sum of:
	        x:         k # -> k
	        xpw:       k # -> k * ps.w
	        xcw:       k # -> k * cs.w
	        plus:      k # -> k
	        ps:        k # -> k * ps.w
	        cs:        k # -> k * cs.w
	    
	         * layoutY is the sum of:
	        y:         k # -> k
	        yph:       k # -> k * ps.h
	        ych:       k # -> k * cs.h
	        plus:      k # -> k
	        ps:        k # -> k * ps.h
	        cs:        k # -> k * cs.h
	    
	         * Alaises
	        w:                        x
	        h:                        y
	        wpw:                      xpw
	        hph:                      yph
	        wcw:                      xcw
	        hch:                      ych
	    
	        width:                    x
	        height:                   y
	        width_parentWidth:        xpw
	        height_parentHeight:      yph
	        width_childrenWidth:      xcw
	        height_childrenHeight:    ych
	    
	        x_parentWidth:            xpw
	        y_parentHeight:           yph
	        x_childrenWidth:          xcw
	        y_childrenHeight:         ych
	    
	      NOTE: Not all possible combinations are supported.
	      Use custom functions for special cases.
	    
	    constructor option examples:
	    
	      ps:1, plus:100      # @layout = (ps) -> ps.add 100
	      ps:1, cs:1          # @layout = (cs, ps) -> ps.add cs
	      x:100, y:200        # @layout = -> point 100, 200
	      w:100, h:200        # @layout = -> point 100, 200
	      wpw:1, hch:1        # @layout = (ps, cs) -> point ps.x, cs.y
	    
	    NOTE: When providing custom functions, their dependency on parent or children size is auto-detected by:
	      Evaluating f(point0, point0) and comparing it with nearInfinity for each of the 4 input values respectively.
	      If your function varies at all in response to an input value, it should return something different for point0
	      vs nearInfinity.
	     */

	    function PointLayout(initializer, previousLayout) {
	      this.initializer = initializer;
	      PointLayout.__super__.constructor.apply(this, arguments);
	      this.initializer && (function() {
	        switch (typeof this.initializer) {
	          case "function":
	            return this._setupFromFunction(this.initializer);
	          case "object":
	            if (this.initializer.constructor === Object) {
	              return this._setupFromOptions(this.initializer, previousLayout);
	            } else {
	              return this._setupFromPoint(this.initializer);
	            }
	            break;
	          default:
	            return this._setupFromPoint(this.initializer);
	        }
	      }).call(this);
	    }

	    PointLayout.prototype.toString = function() {
	      return "PointLayout(" + (this.initializer ? inspectLean(this.initializer) : '0') + ")";
	    };

	    PointLayout.prototype._setupFromPoint = function(p) {
	      this._hasXLayout = this._hasYLayout = true;
	      p = point(p);
	      this.layoutX = function() {
	        return p.x;
	      };
	      this.layoutY = function() {
	        return p.y;
	      };
	      return this.layout = function() {
	        return p;
	      };
	    };

	    PointLayout.prototype._setupFromFunction = function(f) {
	      this._hasXLayout = this._hasYLayout = true;
	      if (f.length === 1) {
	        if (isNumber(f(point0))) {
	          this.layout = function(ps) {
	            return point(f(ps));
	          };
	          this.layoutX = f;
	          this.layoutY = f;
	        } else {
	          this.layout = f;
	          this.layoutX = function(ps) {
	            return f(ps).x;
	          };
	          this.layoutY = function(ps) {
	            return f(ps).y;
	          };
	        }
	      } else {
	        if (isNumber(f(point0, point0))) {
	          this.layout = function(ps, cs) {
	            return point(f(ps, cs));
	          };
	          this.layoutX = f;
	          this.layoutY = f;
	        } else {
	          this.layout = f;
	          this.layoutX = function(ps, cs) {
	            return f(ps, cs).x;
	          };
	          this.layoutY = function(ps, cs) {
	            return f(ps, cs).y;
	          };
	        }
	      }
	      return this._detectRelativity();
	    };

	    PointLayout.prototype._setupFromOptions = function(options, previousLayout) {
	      return Components.setupPointLayout(this, options, previousLayout);
	    };

	    return PointLayout;

	  })(PointLayoutBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(153), __webpack_require__(164)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, StateEpochLayout, DrawCacheManager) {
	  var DrawEpoch, Epoch, Point, drawCacheManager, globalCount, inspect, log, longestCommonSubsequence, point, requestAnimationFrame, select;
	  point = Atomic.point, Point = Atomic.Point;
	  log = Foundation.log, requestAnimationFrame = Foundation.requestAnimationFrame, longestCommonSubsequence = Foundation.longestCommonSubsequence, select = Foundation.select, inspect = Foundation.inspect, Epoch = Foundation.Epoch, globalCount = Foundation.globalCount;
	  drawCacheManager = DrawCacheManager.drawCacheManager;
	  return DrawEpoch = (function(superClass) {
	    extend(DrawEpoch, superClass);

	    function DrawEpoch() {
	      return DrawEpoch.__super__.constructor.apply(this, arguments);
	    }

	    DrawEpoch.singletonClass();

	    DrawEpoch.prototype.processEpochItems = function() {
	      DrawEpoch.__super__.processEpochItems.apply(this, arguments);
	      return drawCacheManager.advanceFrame();
	    };

	    return DrawEpoch;

	  })(Epoch);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(114), __webpack_require__(8), __webpack_require__(89), __webpack_require__(142)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ArtEngineCore, Foundation, Atomic, Canvas) {
	  var BaseObject, Bitmap, CacheBitmap, DrawCacheManager, Map, Matrix, Point, Rectangle, getGlobalEpochCycle, inspect, log, matrix, point, rect, remove, timeout;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  inspect = Foundation.inspect, BaseObject = Foundation.BaseObject, Map = Foundation.Map, timeout = Foundation.timeout, remove = Foundation.remove, log = Foundation.log;
	  Bitmap = Canvas.Bitmap;
	  getGlobalEpochCycle = function() {
	    return ArtEngineCore.GlobalEpochCycle.globalEpochCycle;
	  };

	  /*
	  PURPOSE
	  - Keep the maximum byte-size of the cache under a cap.
	  - recycle unused bitmaps since creating bitmaps is costly
	  
	  TODO
	  
	  Stop clearing cached sub-elements when drawing a new cached element.
	   - the DrawCacheManager will reclaim their bitmaps in time
	  
	  Stop tracking caching stats in Element
	  
	  Call advanceFrameTime every global draw-frame
	  Call doneWithCacheBitmap from _clearDrawCache(doNotUpdateDrawCacheManager) unless doNotUpdateDrawCacheManager is true
	  call allocateCacheBitmap when a new cache bitmap is used
	  call useCacheBitmap every time a the drawCache bitmap is used
	   */
	  CacheBitmap = (function(superClass) {
	    extend(CacheBitmap, superClass);

	    function CacheBitmap(element1, bitmap1, lastFrameUsed) {
	      this.element = element1;
	      this.bitmap = bitmap1;
	      this._reset(lastFrameUsed);
	    }

	    CacheBitmap.prototype._reset = function(lastFrameUsed) {
	      this.useCount = 0;
	      return this.lastFrameUsed = lastFrameUsed || 0;
	    };

	    CacheBitmap.prototype.recycle = function(newElement, lastFrameUsed) {
	      this.elementDoneWithCacheBitmap();
	      this.element = newElement;
	      this._reset(lastFrameUsed);
	      this.bitmap.clear();
	      return this.bitmap;
	    };

	    CacheBitmap.prototype.use = function(currentFrameNumber) {
	      this.lastFrameUsed = currentFrameNumber;
	      return this.useCount++;
	    };

	    CacheBitmap.prototype.elementDoneWithCacheBitmap = function() {
	      if (this.element && this.element._drawCacheBitmap === this.bitmap) {
	        this.element.__clearDrawCacheCallbackFromDrawCacheManager();
	      }
	      return this.element = null;
	    };

	    CacheBitmap.getter({
	      byteSize: function() {
	        return this.bitmap.getByteSize();
	      }
	    });

	    return CacheBitmap;

	  })(BaseObject);
	  return DrawCacheManager = (function(superClass) {
	    var byteSizeFromSize, usableBitmap;

	    extend(DrawCacheManager, superClass);

	    DrawCacheManager.byteSizeFromSize = byteSizeFromSize = function(size) {
	      return size.x * size.y * 4;
	    };

	    DrawCacheManager.singletonClass();

	    DrawCacheManager.usableBitmap = usableBitmap = function(bitmap, w, h) {
	      var ref, x, y;
	      ref = bitmap.size, x = ref.x, y = ref.y;
	      return w <= x && h <= y && x * y < w * h * 2;
	    };

	    function DrawCacheManager() {
	      DrawCacheManager.__super__.constructor.apply(this, arguments);
	      this._currentFrameNumber = 0;
	      this._maxCacheByteSize = 64 * 1024 * 1024;
	      this._cacheByteSize = 0;
	      this._unusedCacheByteSize = 0;
	      this._cachedBitmaps = new Map;
	      this._bitmapsCreated = 0;
	      this._unusedCacheBitmaps = [];
	    }

	    DrawCacheManager.getter({
	      currentFrameNumber: function() {
	        return this._currentFrameNumber;
	      },
	      recycleableSortedCacheBitmaps: function() {
	        var currentFrameNumber, recyclable;
	        recyclable = [];
	        currentFrameNumber = this._currentFrameNumber;
	        this._cachedBitmaps.each(function(k, v) {
	          if (v.lastFrameUsed < currentFrameNumber - 1) {
	            return recyclable.push(v);
	          }
	        });
	        return recyclable.sort(function(a, b) {
	          return a.lastFrameUsed - b.lastFrameUsed;
	        });
	      }
	    });

	    DrawCacheManager.prototype.doneWithCacheBitmap = function(element) {
	      var cachedBitmap;
	      if (cachedBitmap = this._cachedBitmaps.remove(element)) {
	        cachedBitmap.elementDoneWithCacheBitmap();
	        this._unusedCacheByteSize += cachedBitmap.getByteSize();
	        return this._unusedCacheBitmaps.push(cachedBitmap);
	      }
	    };

	    DrawCacheManager.prototype.useDrawCache = function(element) {
	      var ref;
	      return (ref = this._cachedBitmaps.get(element)) != null ? ref.use(this._currentFrameNumber) : void 0;
	    };

	    DrawCacheManager.prototype.allocateCacheBitmap = function(element, size) {
	      this.doneWithCacheBitmap(element);
	      return this._recycleUnusedCacheBitmap(element, size) || this._createCacheBitmap(element, size);
	    };

	    DrawCacheManager.prototype.advanceFrame = function() {
	      var cfn;
	      this._currentFrameNumber++;
	      return cfn = this._currentFrameNumber;
	    };

	    DrawCacheManager.prototype._recycleInUseCacheBitmap = function(element, size) {
	      var recyclableCacheBitmap;
	      if (recyclableCacheBitmap = this._findRecycleableCacheBitmap(size)) {
	        this._cachedBitmaps.set(element, this._cachedBitmaps.remove(recyclableCacheBitmap.element));
	        getGlobalEpochCycle().logEvent("recycleUsedCacheBitmap", "recycleUsedCacheBitmap");
	        return recyclableCacheBitmap.recycle(element, this._currentFrameNumber);
	      }
	    };

	    DrawCacheManager.prototype._recycleUnusedCacheBitmap = function(element, size) {
	      var unusedCacheBitmap;
	      if (unusedCacheBitmap = this._getUnusedCacheBitmap(size)) {
	        getGlobalEpochCycle().logEvent("recycleUnusedCacheBitmap", "recycleUnusedCacheBitmap");
	        unusedCacheBitmap.recycle(element, this._currentFrameNumber);
	        this._cachedBitmaps.set(element, unusedCacheBitmap);
	        return unusedCacheBitmap.bitmap;
	      }
	    };

	    DrawCacheManager.prototype._createCacheBitmap = function(element, size) {
	      var bitmap, cacheBitmap, cachedBitmap;
	      if (!this._roomInCacheForNewBitmap(size)) {
	        this._evictCacheBitmaps(size);
	      }
	      this._bitmapsCreated++;
	      getGlobalEpochCycle().logEvent("createCacheBitmap", "createCacheBitmap");
	      bitmap = element.getBitmapFactory().newBitmap(size);
	      cachedBitmap = this._cachedBitmaps.set(element, cacheBitmap = new CacheBitmap(element, bitmap, this._currentFrameNumber));
	      this._cacheByteSize += cachedBitmap.getByteSize();
	      return bitmap;
	    };

	    DrawCacheManager.prototype._getUnusedCacheBitmap = function(size) {
	      var cachedBitmap, i, j, len, ref;
	      ref = this._unusedCacheBitmaps;
	      for (i = j = 0, len = ref.length; j < len; i = ++j) {
	        cachedBitmap = ref[i];
	        if (!(cachedBitmap.bitmap.size.eq(size))) {
	          continue;
	        }
	        this._unusedCacheBitmaps = remove(this._unusedCacheBitmaps, i);
	        this._unusedCacheByteSize -= cachedBitmap.getByteSize();
	        return cachedBitmap;
	      }
	      return void 0;
	    };

	    DrawCacheManager.prototype._findRecycleableCacheBitmap = function(size) {
	      var currentFrameNumber;
	      currentFrameNumber = this._currentFrameNumber;
	      return this._cachedBitmaps.findFirst((function(_this) {
	        return function(cachedBitmap) {
	          return cachedBitmap.lastFrameUsed < currentFrameNumber - 1 && cachedBitmap.bitmap.size.eq(size);
	        };
	      })(this));
	    };

	    DrawCacheManager.prototype._roomInCacheForNewBitmap = function(size) {
	      var byteSize;
	      byteSize = byteSizeFromSize(size);
	      return byteSize + this._cacheByteSize <= this._maxCacheByteSize;
	    };

	    DrawCacheManager.prototype._evictCacheBitmaps = function(size) {
	      var byteSize, cachedBitmap, evictionByteSize, j, len, maxCacheByteSize, ref;
	      byteSize = byteSizeFromSize(size);
	      maxCacheByteSize = this._maxCacheByteSize;
	      evictionByteSize = 0;
	      ref = this.recycleableSortedCacheBitmaps;
	      for (j = 0, len = ref.length; j < len; j++) {
	        cachedBitmap = ref[j];
	        if (cachedBitmap = this._cachedBitmaps.remove(cachedBitmap.element)) {
	          cachedBitmap.elementDoneWithCacheBitmap();
	          byteSize = cachedBitmap.getByteSize();
	          evictionByteSize += byteSize;
	          this._cacheByteSize -= byteSize;
	          if (this._cacheByteSize + byteSize <= maxCacheByteSize) {
	            break;
	          }
	        }
	      }
	      return null;
	    };

	    return DrawCacheManager;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var DrawCacheManager, DrawEpoch, DummyEpoch, Epoch, EventEpoch, Foundation, GlobalEpochCycle, IdleEpoch, Map, StateEpoch, arrayWithout, currentSecond, drawCacheManager, drawEpoch, dummyEpoch, durationString, eventEpoch, fastBind, fluxEpoch, globalCount, idleEpoch, isPlainObject, log, miniInspect, reactEpoch, requestAnimationFrame, stateEpoch, time, toMs,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(8);

	EventEpoch = __webpack_require__(100).EventEpoch;

	StateEpoch = __webpack_require__(152);

	DrawEpoch = __webpack_require__(163);

	IdleEpoch = __webpack_require__(166);

	DrawCacheManager = __webpack_require__(164);

	log = Foundation.log, requestAnimationFrame = Foundation.requestAnimationFrame, Map = Foundation.Map, miniInspect = Foundation.miniInspect, time = Foundation.time, arrayWithout = Foundation.arrayWithout, currentSecond = Foundation.currentSecond, Epoch = Foundation.Epoch, globalCount = Foundation.globalCount, isPlainObject = Foundation.isPlainObject, durationString = Foundation.durationString, fastBind = Foundation.fastBind;

	toMs = function(s) {
	  return (s * 1000).toFixed(1) + "ms";
	};

	eventEpoch = EventEpoch.eventEpoch;

	drawEpoch = DrawEpoch.drawEpoch;

	stateEpoch = StateEpoch.stateEpoch;

	idleEpoch = IdleEpoch.idleEpoch;

	drawCacheManager = DrawCacheManager.drawCacheManager;

	DummyEpoch = (function(superClass) {
	  extend(DummyEpoch, superClass);

	  function DummyEpoch() {
	    return DummyEpoch.__super__.constructor.apply(this, arguments);
	  }

	  DummyEpoch.singletonClass();

	  return DummyEpoch;

	})(Epoch);

	dummyEpoch = DummyEpoch.dummyEpoch;

	fluxEpoch = reactEpoch = dummyEpoch;

	module.exports = GlobalEpochCycle = (function(superClass) {
	  var timerStack;

	  extend(GlobalEpochCycle, superClass);

	  GlobalEpochCycle.singletonClass();

	  GlobalEpochCycle.classGetter({
	    activeCanvasElements: function() {
	      return this.globalEpochCycle.activeCanvasElements;
	    }
	  });

	  function GlobalEpochCycle() {
	    var boundQueueNextEpoch;
	    GlobalEpochCycle.__super__.constructor.apply(this, arguments);
	    this.cycleQueued = false;
	    this.processingCycle = false;
	    this.activeCanvasElements = [];
	    this._fluxOnIdleOkUntil = currentSecond();
	    this._resetThisCyclesStats();
	    boundQueueNextEpoch = fastBind(this.queueNextEpoch, this);
	    idleEpoch.queueNextEpoch = stateEpoch.queueNextEpoch = drawEpoch.queueNextEpoch = eventEpoch.queueNextEpoch = boundQueueNextEpoch;
	    eventEpoch.flushEpochNow = (function(_this) {
	      return function() {
	        return _this.flushEpochNow();
	      };
	    })(this);
	    eventEpoch.logEvent = (function(_this) {
	      return function(name, id) {
	        var ref;
	        return (ref = _this.globalEpochStats) != null ? ref.logEvent(name, id) : void 0;
	      };
	    })(this);
	  }

	  GlobalEpochCycle.prototype.allowFluxOnIdle = function(nextNSeconds) {
	    return this._fluxOnIdleOkUntil = currentSecond() + nextNSeconds;
	  };

	  GlobalEpochCycle.prototype._resetThisCyclesStats = function() {
	    return this.performanceSamples = {};
	  };

	  GlobalEpochCycle.prototype.addPerformanceSample = function(name, value) {
	    if (!this.performanceSamples) {
	      throw new Error("@performanceSamples not set");
	    }
	    return this.performanceSamples[name] = (this.performanceSamples[name] || 0) + value;
	  };

	  timerStack = [];

	  GlobalEpochCycle.prototype.timePerformance = function(name, f) {
	    var start, subTimeTotal, timeResult, tsl;
	    start = currentSecond();
	    timerStack.push(0);
	    f();
	    subTimeTotal = timerStack.pop();
	    timeResult = currentSecond() - start;
	    if ((tsl = timerStack.length) > 0) {
	      timerStack[tsl - 1] += timeResult;
	    }
	    return this.addPerformanceSample(name, timeResult - subTimeTotal);
	  };

	  GlobalEpochCycle.getter({
	    numActivePointers: function() {
	      var canvasElement, count, i, len, ref;
	      count = 0;
	      ref = this.activeCanvasElements;
	      for (i = 0, len = ref.length; i < len; i++) {
	        canvasElement = ref[i];
	        count += canvasElement.getNumActivePointers();
	      }
	      return count;
	    },
	    idle: function() {
	      return reactEpoch.getEpochLength() === 0 && stateEpoch.getEpochLength() === 0 && eventEpoch.getEpochLength() === 0;
	    },
	    epochLength: function() {
	      return idleEpoch.getEpochLength() + eventEpoch.getEpochLength() + stateEpoch.getEpochLength() + reactEpoch.getEpochLength() + fluxEpoch.getEpochLength();
	    }
	  });

	  GlobalEpochCycle.getter({
	    idleEpoch: function() {
	      return idleEpoch;
	    },
	    eventEpoch: function() {
	      return eventEpoch;
	    },
	    stateEpoch: function() {
	      return stateEpoch;
	    },
	    drawEpoch: function() {
	      return drawEpoch;
	    },
	    reactEpoch: function() {
	      return reactEpoch;
	    },
	    fluxEpoch: function() {
	      return fluxEpoch;
	    }
	  });

	  GlobalEpochCycle.prototype.includeReact = function(epoch) {
	    return (reactEpoch = epoch).queueNextEpoch = (function(_this) {
	      return function() {
	        return _this.queueNextEpoch();
	      };
	    })(this);
	  };

	  GlobalEpochCycle.prototype.includeFlux = function(epoch) {
	    return (fluxEpoch = epoch).queueNextEpoch = (function(_this) {
	      return function() {
	        return _this.queueNextEpoch();
	      };
	    })(this);
	  };

	  GlobalEpochCycle.prototype.logEvent = function(name, id) {
	    var ref;
	    return (ref = this.globalEpochStats) != null ? ref.logEvent(name, id) : void 0;
	  };

	  GlobalEpochCycle.prototype.dettachCanvasElement = function(toRemoveCe) {
	    return this.activeCanvasElements = arrayWithout(this.activeCanvasElements, toRemoveCe);
	  };

	  GlobalEpochCycle.prototype.attachCanvasElement = function(toAddCe) {
	    return this.activeCanvasElements.push(toAddCe);
	  };

	  GlobalEpochCycle.prototype.processFluxEpoch = function() {
	    return this.timePerformance("flux", (function(_this) {
	      return function() {
	        return fluxEpoch.processEpoch();
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.processIdleEpoch = function() {
	    return this.timePerformance("idle", (function(_this) {
	      return function() {
	        return idleEpoch != null ? idleEpoch.processEpoch() : void 0;
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.processEventEpoch = function() {
	    return this.timePerformance("event", (function(_this) {
	      return function() {
	        return eventEpoch.processEpoch();
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.processReactEpoch = function() {
	    return this.timePerformance("react", (function(_this) {
	      return function() {
	        return reactEpoch.processEpoch();
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.processStateEpoch = function() {
	    return this.timePerformance("aim", (function(_this) {
	      return function() {
	        return stateEpoch.processEpoch();
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.processDrawEpoch = function() {
	    return this.timePerformance("draw", (function(_this) {
	      return function() {
	        return drawEpoch.processEpoch();
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.flushEpochNow = function() {
	    if (this.processingCycle) {
	      return;
	    }
	    this.processingCycle = true;
	    this._processCycleExceptDraw();
	    return this.processingCycle = false;
	  };

	  GlobalEpochCycle.prototype._processCycleExceptDraw = function() {
	    this.processFluxEpoch();
	    if (this.getIdle()) {
	      this.processIdleEpoch();
	    }
	    this.processEventEpoch();
	    reactEpoch.updateGlobalCounts();
	    this.processReactEpoch();
	    globalCount("reactEpochAfter", reactEpoch.getEpochLength());
	    stateEpoch.updateGlobalCounts();
	    this.processStateEpoch();
	    return globalCount("stateEpochAfter", stateEpoch.getEpochLength());
	  };

	  GlobalEpochCycle.prototype.processEpochItems = function(items) {
	    var drawCount, gc, globalEpochFrameTime, i, k, k2, keys, len, reactWastedWork, reactWork, ref, sorted, startTime, v, v2;
	    Foundation.resetGlobalCounts();
	    startTime = currentSecond();
	    this._resetThisCyclesStats();
	    this.processingCycle = true;
	    this._processCycleExceptDraw();
	    if (stateEpoch.getEpochLength() > 0) {
	      this.processStateEpoch();
	    }
	    drawCount = drawEpoch.epochLength;
	    this.processDrawEpoch();
	    this.processingCycle = false;
	    if (this.getEpochLength() > 0) {
	      this.queueNextEpoch();
	    }
	    if (drawCount > 0) {
	      globalEpochFrameTime = currentSecond() - startTime;
	      gc = Foundation.globalCounts;
	      if (false) {
	        keys = Object.keys(gc).sort();
	        sorted = {};
	        for (i = 0, len = keys.length; i < len; i++) {
	          k = keys[i];
	          v = gc[k];
	          if (v > 0 && v < 1) {
	            v = toMs(v);
	          }
	          if (isPlainObject(v)) {
	            for (k2 in v) {
	              v2 = v[k2];
	              if (v2 > 0 && v2 < 1) {
	                v[k2] = toMs(v2);
	              }
	            }
	          }
	          sorted[k] = v;
	        }
	        log({
	          globalCounts: sorted,
	          fps: (1 / globalEpochFrameTime).toFixed(1)
	        });
	        reactWork = (gc["ReactComponent_Created"] || 0) + (gc["ReactVirtualElement_Created"] || 0);
	        reactWastedWork = (gc["ReactComponent_UpdateFromTemporaryComponent_NoChange"] || 0) + (gc["ReactVirtualElement_UpdateFromTemporaryVirtualElement_NoChange"] || 0);
	        if (reactWork > 0) {
	          log({
	            reactWork: reactWork,
	            reactWastedWork: reactWastedWork,
	            reactEfficiency: 1 - reactWastedWork / reactWork
	          });
	        }
	      }
	      return (ref = this.globalEpochStats) != null ? ref.add(startTime, globalEpochFrameTime, this.performanceSamples) : void 0;
	    }
	  };

	  return GlobalEpochCycle;

	})(Epoch);


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var Epoch, IdleEpoch, log;
	  log = Foundation.log, Epoch = Foundation.Epoch;
	  return IdleEpoch = (function(superClass) {
	    extend(IdleEpoch, superClass);

	    function IdleEpoch() {
	      return IdleEpoch.__super__.constructor.apply(this, arguments);
	    }

	    IdleEpoch.singletonClass();

	    IdleEpoch.prototype.queue = function(event) {
	      return this.queueItem(event);
	    };

	    return IdleEpoch;

	  })(Epoch);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var BaseObject, EngineStat, Map, Stat, arrayWithout, currentSecond, log, miniInspect;
	  log = Foundation.log, Map = Foundation.Map, miniInspect = Foundation.miniInspect, currentSecond = Foundation.currentSecond, arrayWithout = Foundation.arrayWithout, BaseObject = Foundation.BaseObject, Stat = Foundation.Stat;
	  return EngineStat = (function(superClass) {
	    extend(EngineStat, superClass);

	    function EngineStat() {
	      this.reset();
	    }

	    EngineStat.prototype.reset = function() {
	      return this.stats = {};
	    };

	    EngineStat.prototype.add = function(statName, value) {
	      var base;
	      return ((base = this.stats)[statName] || (base[statName] = new Stat)).add(value);
	    };

	    EngineStat.prototype.length = function(statName) {
	      var stat;
	      if (stat = this.stats[statName]) {
	        return stat.length;
	      } else {
	        return 0;
	      }
	    };

	    EngineStat.prototype.log = function() {
	      var greatestPow10LessThanMax, k, ref, smallestMultipleGreaterThanMax, toLog, v;
	      toLog = {};
	      ref = this.stats;
	      for (k in ref) {
	        v = ref[k];
	        greatestPow10LessThanMax = Math.pow(10, Math.floor(Math.log10(v.max)));
	        smallestMultipleGreaterThanMax = (Math.ceil(v.max / greatestPow10LessThanMax)) * greatestPow10LessThanMax;
	        toLog[k] = {
	          min: v.min.toPrecision(5) / 1,
	          av: v.average.toPrecision(5) / 1,
	          max: v.max.toPrecision(5) / 1,
	          hist: v.histogram(10, 0, smallestMultipleGreaterThanMax),
	          histMax: smallestMultipleGreaterThanMax
	        };
	      }
	      return log(toLog);
	    };

	    return EngineStat;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var DevTools;

	module.exports = DevTools = __webpack_require__(169);

	DevTools.GlobalEpochStats = __webpack_require__(170);

	DevTools.finishLoad(["GlobalEpochStats"]);


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.DevTools || (Engine.DevTools = (function(superClass) {
	  extend(DevTools, superClass);

	  function DevTools() {
	    return DevTools.__super__.constructor.apply(this, arguments);
	  }

	  DevTools.namespace = Engine;

	  DevTools.namespacePath = "Neptune.Art.Engine.DevTools";

	  return DevTools;

	})(Neptune.Base));

	Engine.addNamespace(Engine.DevTools);


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(142), __webpack_require__(171), __webpack_require__(113)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, FoundationDevTools, EngineCore) {
	  var GlobalEpochCycle, GlobalEpochStat, GlobalEpochStats, Map, Matrix, aimColor, color, currentSecond, floor, globalEpochCycle, log, max, min, miniInspect, peek, point, reactColor, rect, timeout;
	  log = Foundation.log, Map = Foundation.Map, miniInspect = Foundation.miniInspect, currentSecond = Foundation.currentSecond, max = Foundation.max, min = Foundation.min, timeout = Foundation.timeout, peek = Foundation.peek;
	  point = Atomic.point, rect = Atomic.rect, Matrix = Atomic.Matrix, color = Atomic.color;
	  GlobalEpochCycle = EngineCore.GlobalEpochCycle;
	  globalEpochCycle = GlobalEpochCycle.globalEpochCycle;
	  floor = Math.floor;
	  reactColor = color("gold");
	  aimColor = color("#9c3");
	  GlobalEpochStat = (function(superClass) {
	    var statColors, statFields;

	    extend(GlobalEpochStat, superClass);

	    function GlobalEpochStat(sampleTime1, total1, sampleSet1) {
	      this.sampleTime = sampleTime1;
	      this.total = total1;
	      this.sampleSet = sampleSet1;
	    }

	    GlobalEpochStat.statFields = statFields = ["total", "draw", "aim", "aimLayout", "aimTL", "aimRR", "react", "reactAim", "reactLC", "reactRender", "event", "flux"];

	    GlobalEpochStat.statColors = statColors = {
	      total: "gray",
	      draw: "#39c",
	      aim: aimColor,
	      aimLayout: aimColor.withLightness(aimColor.lightness * .9),
	      aimTL: aimColor.withLightness(aimColor.lightness * .8),
	      aimRR: aimColor.withLightness(aimColor.lightness * .7),
	      react: reactColor,
	      reactAim: reactColor.withLightness(reactColor.lightness * .9),
	      reactLC: reactColor.withLightness(reactColor.lightness * .8),
	      reactRender: reactColor.withLightness(reactColor.lightness * .7),
	      event: "#ff6347",
	      flux: "#d936a3"
	    };

	    GlobalEpochStat.prototype.getStacked = function(sampleName) {
	      var i, sn, sum;
	      if (sampleName === "total") {
	        return this.total;
	      }
	      sum = 0;
	      for (i = statFields.length - 1; i >= 0; i += -1) {
	        sn = statFields[i];
	        sum += this.sampleSet[sn] || 0;
	        if (sn === sampleName) {
	          break;
	        }
	      }
	      return sum;
	    };

	    GlobalEpochStat.prototype.drawSample = function(bitmap, drawMatrix, sampleWidth, sampleField, h) {
	      var sample, sampleTime, x, y;
	      sampleTime = this.sampleTime;
	      sample = this.getStacked(sampleField);
	      x = floor(drawMatrix.transformX(sampleTime, sample));
	      y = floor(drawMatrix.transformY(sampleTime, sample));
	      return bitmap.drawRectangle(null, rect(x, y, sampleWidth, h - y), {
	        color: statColors[sampleField]
	      });
	    };

	    return GlobalEpochStat;

	  })(Foundation.BaseObject);
	  return GlobalEpochStats = (function(superClass) {
	    extend(GlobalEpochStats, superClass);

	    GlobalEpochStats.classGetter({
	      enabled: function() {
	        return !!globalEpochCycle.globalEpochStats;
	      }
	    });

	    GlobalEpochStats.enable = function() {
	      log("Enabled globalEpochStats");
	      globalEpochCycle.globalEpochStats = new this;
	      return true;
	    };

	    GlobalEpochStats.toggle = function() {
	      if (this.enabled) {
	        return this.disable();
	      } else {
	        return this.enable();
	      }
	    };

	    GlobalEpochStats.disable = function() {
	      log("Disabled globalEpochStats");
	      globalEpochCycle.globalEpochStats = null;
	      return false;
	    };

	    function GlobalEpochStats() {
	      this.reset();
	    }

	    GlobalEpochStats.prototype.reset = function() {
	      this.maxMs = 2 / 60;
	      this.stats = [];
	      this.nextEventIdIndex = 0;
	      this.eventsById = {};
	      this.eventLegend = {};
	      this._minSampleTime = null;
	      return this._maxSampleTime = null;
	    };

	    GlobalEpochStats.prototype.add = function(sampleTime, total, sampleSet) {
	      var ges;
	      this.stats.push(ges = new GlobalEpochStat(sampleTime, total, sampleSet));
	      this.maxMs = max(this.maxMs, total * 1.5);
	      this.logAndResetWhenIdle();
	      return this.addSampleTime(sampleTime);
	    };

	    GlobalEpochStats.prototype.addSampleTime = function(time) {
	      this._minSampleTime = min(time, this._minSampleTime || time);
	      return this._maxSampleTime = max(time, this._maxSampleTime || time);
	    };

	    GlobalEpochStats.prototype.logEvent = function(name, id) {
	      var base, clr, colors, ebi, now;
	      now = currentSecond();
	      this.addSampleTime(now);
	      colors = {
	        generateDrawCache: "green",
	        animation: "#77f",
	        animationAborted: "#f77",
	        animationDone: "#77f",
	        "default": "gray"
	      };
	      clr = colors[name] || colors["default"];
	      ebi = (base = this.eventsById)[id] || (base[id] = {
	        startTime: now,
	        endTime: now,
	        index: this.nextEventIdIndex++,
	        events: [],
	        name: name,
	        clr: clr
	      });
	      ebi.startTime = min(now, ebi.startTime);
	      ebi.endTime = max(now, ebi.endTime);
	      this.eventLegend[name] = clr;
	      return ebi.events.push({
	        time: now,
	        name: name,
	        clr: clr
	      });
	    };

	    GlobalEpochStats.getter({
	      minSampleTime: function() {
	        return this._minSampleTime;
	      },
	      maxSampleTime: function() {
	        return this._maxSampleTime;
	      },
	      sampleTimeRange: function() {
	        return this.maxSampleTime - this.minSampleTime;
	      }
	    });

	    GlobalEpochStats.prototype.drawAllSamplesForOneField = function(bitmap, drawMatrix, sampleField) {
	      var h, i, len, sampleTimeRange, sampleWidth, size, stat, stats, w;
	      size = bitmap.size;
	      w = size.w, h = size.h;
	      sampleTimeRange = this.sampleTimeRange, stats = this.stats;
	      sampleWidth = floor((w / sampleTimeRange) / 60);
	      for (i = 0, len = stats.length; i < len; i++) {
	        stat = stats[i];
	        stat.drawSample(bitmap, drawMatrix, sampleWidth, sampleField, h);
	      }
	      return null;
	    };

	    GlobalEpochStats.prototype.getDrawMatrix = function(size) {
	      var h, legendWidth, maxMs, minSampleTime, sampleTimeRange, sampleWidth, w, xScale, yScale;
	      w = size.w, h = size.h;
	      legendWidth = 80;
	      w -= legendWidth;
	      sampleTimeRange = this.sampleTimeRange, minSampleTime = this.minSampleTime, maxMs = this.maxMs;
	      sampleWidth = floor((w / sampleTimeRange) / 60);
	      xScale = (w - sampleWidth) / sampleTimeRange;
	      yScale = h / maxMs;
	      return Matrix.scale(1, -1).translate(-minSampleTime, 0).scale(xScale, yScale).translate(legendWidth, h);
	    };

	    GlobalEpochStats.prototype.drawLabeledHLine = function(bitmap, x1, x2, y, clr, label) {
	      bitmap.drawRectangle(null, rect(x1, y, x2 - x1, 1), {
	        color: color(clr)
	      });
	      return bitmap.drawText(point(x1, y - 5), label, {
	        size: 14,
	        color: color(clr)
	      });
	    };

	    GlobalEpochStats.prototype.drawEvents = function(bitmap, drawMatrix) {
	      var clr, endTime, eventTimeLineHeight, events, h, id, index, name, ref, ref1, ref2, results, startTime, time, w, x, x1, x2, y;
	      ref = bitmap.size, w = ref.w, h = ref.h;
	      eventTimeLineHeight = floor(h / 20);
	      ref1 = this.eventsById;
	      results = [];
	      for (id in ref1) {
	        ref2 = ref1[id], index = ref2.index, startTime = ref2.startTime, endTime = ref2.endTime, clr = ref2.clr, events = ref2.events, name = ref2.name;
	        x1 = floor(drawMatrix.transformX(startTime, 0));
	        x2 = floor(drawMatrix.transformX(endTime, 0));
	        y = (index + 1) * eventTimeLineHeight;
	        this.drawLabeledHLine(bitmap, x1, x2, y, clr, name);
	        results.push((function() {
	          var i, len, ref3, results1;
	          results1 = [];
	          for (i = 0, len = events.length; i < len; i++) {
	            ref3 = events[i], time = ref3.time, name = ref3.name, clr = ref3.clr;
	            x = floor(drawMatrix.transformX(time, 0));
	            results1.push(bitmap.drawRectangle(null, rect(x, y, 1, eventTimeLineHeight * (1 / 3)), {
	              color: clr
	            }));
	          }
	          return results1;
	        })());
	      }
	      return results;
	    };

	    GlobalEpochStats.prototype.log = function() {
	      var averageFps, averageFrameTimeMs, averageFrameTimeMsY, bitmap, ce, clr, drawMatrix, field, fiveMsY, h, i, j, legend, len, len1, missedFrames, perfectFrameCount, ref, ref1, sampleField, size, tenMsY, totalFrames, w, y;
	      if (!(this.stats.length > 0)) {
	        return;
	      }
	      !FoundationDevTools.DomConsole.enabled && (ce = GlobalEpochCycle.activeCanvasElements[0]);
	      bitmap = new Canvas.Bitmap(size = ce ? ce.canvasBitmap.size : point(1000, 600));
	      w = size.w, h = size.h;
	      bitmap.clear("#fff");
	      drawMatrix = this.getDrawMatrix(size);
	      y = floor(drawMatrix.transformY(0, 1 / 60));
	      tenMsY = floor(drawMatrix.transformY(0, 1 / 100));
	      fiveMsY = floor(drawMatrix.transformY(0, 1 / 200));
	      bitmap.drawRectangle(null, rect(0, y, w, 1), {
	        color: "#0007"
	      });
	      ref = GlobalEpochStat.statFields;
	      for (i = 0, len = ref.length; i < len; i++) {
	        sampleField = ref[i];
	        this.drawAllSamplesForOneField(bitmap, drawMatrix, sampleField);
	      }
	      legend = {};
	      this.drawLabeledHLine(bitmap, 40, w, tenMsY, "#0007", "10ms");
	      this.drawLabeledHLine(bitmap, 40, w, fiveMsY, "#0007", "5ms");
	      this.drawEvents(bitmap, drawMatrix);
	      totalFrames = this.stats.length;
	      averageFrameTimeMs = this.sampleTimeRange / totalFrames;
	      perfectFrameCount = this.sampleTimeRange * 60 + .5 | 0;
	      missedFrames = perfectFrameCount - totalFrames;
	      averageFrameTimeMsY = floor(drawMatrix.transformY(0, averageFrameTimeMs));
	      if ((averageFps = 1 / averageFrameTimeMs + .5 | 0) < 55) {
	        this.drawLabeledHLine(bitmap, 40, w, y, "#0007", "60fps - 16.7ms");
	      }
	      this.drawLabeledHLine(bitmap, 40, w, averageFrameTimeMsY, "#0007", "average: " + averageFps + "fps (miss-rate: " + ((100 * missedFrames / perfectFrameCount).toPrecision(2)) + "% " + missedFrames + "/" + perfectFrameCount + ")");
	      y = 0;
	      ref1 = GlobalEpochStat.statFields;
	      for (j = 0, len1 = ref1.length; j < len1; j++) {
	        field = ref1[j];
	        clr = GlobalEpochStat.statColors[field];
	        bitmap.drawRectangle(null, rect(0, y, 75, 23), {
	          color: clr
	        });
	        bitmap.drawText(point(5, y + 18), field, {
	          size: 16,
	          color: color("white")
	        });
	        y += 25;
	      }
	      bitmap.drawBorder(null, bitmap.size, "#eee");
	      if (ce) {
	        log("showing GlobalEpochStats");
	        return ce.canvasBitmap.drawBitmap(null, bitmap, {
	          opacity: .9
	        });
	      } else {
	        return log(bitmap);
	      }
	    };

	    GlobalEpochStats.prototype.logAndResetWhenIdle = function() {
	      var samples;
	      samples = this.stats.length;
	      if (samples > 0) {
	        return timeout(1000, (function(_this) {
	          return function() {
	            if (samples === _this.stats.length && GlobalEpochStats.enabled) {
	              _this.log();
	              return _this.reset();
	            }
	          };
	        })(this));
	      }
	    };

	    return GlobalEpochStats;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	var DevTools;

	module.exports = DevTools = __webpack_require__(172);

	DevTools.DomConsole = __webpack_require__(173);

	DevTools.Profiler = __webpack_require__(181);

	DevTools.Test = __webpack_require__(184);

	DevTools.finishLoad([]);


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(11);

	module.exports = Art.DevTools || (Art.DevTools = (function(superClass) {
	  extend(DevTools, superClass);

	  function DevTools() {
	    return DevTools.__super__.constructor.apply(this, arguments);
	  }

	  DevTools.namespace = Art;

	  DevTools.namespacePath = "Neptune.Art.DevTools";

	  return DevTools;

	})(Neptune.Base));

	Art.addNamespace(Art.DevTools);


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var DomConsole;

	module.exports = DomConsole = __webpack_require__(174);

	DomConsole.Chart = __webpack_require__(175);

	DomConsole.Main = __webpack_require__(176);

	DomConsole.finishLoad(["Chart", "Main"]);


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var DevTools,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	DevTools = __webpack_require__(172);

	module.exports = DevTools.DomConsole || (DevTools.DomConsole = (function(superClass) {
	  extend(DomConsole, superClass);

	  function DomConsole() {
	    return DomConsole.__super__.constructor.apply(this, arguments);
	  }

	  DomConsole.namespace = DevTools;

	  DomConsole.namespacePath = "Neptune.Art.DevTools.DomConsole";

	  return DomConsole;

	})(Neptune.Base));

	DevTools.addNamespace(DevTools.DomConsole);


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(89), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation) {
	  var Chart, Matrix, color, inspect, log, point, rect;
	  point = Atomic.point, color = Atomic.color, rect = Atomic.rect, Matrix = Atomic.Matrix;
	  inspect = Foundation.inspect, log = Foundation.log;
	  return Chart = (function() {
	    function Chart() {}

	    Chart.bar = function(numbers, options) {
	      var barArea, barColor, barWidth, bgColor, chartBgColor, drawArea, drawMatrix, fontSize, height, i, j, k, len, len1, margin, maxNumber, minWidth, out, percent, pixelsPerPoint, pos, range, size, textColor;
	      if (options == null) {
	        options = {};
	      }
	      range = options.range;
	      pixelsPerPoint = options.pixelsPerPoint || 2;
	      fontSize = options.fontSize || 10;
	      margin = options.margin || (range ? fontSize * 1.4 : 0);
	      bgColor = color(options.bgColor || color(1, 1, 1, 0));
	      chartBgColor = color(options.chartBgColor || "#fff7f0");
	      barColor = color(options.barColor || "rgba(0,0,0,.5)");
	      textColor = color(options.textColor || "orange");
	      minWidth = options.minWidth || 50;
	      size = options.size || point(numbers.length * 4, 50 + 2 * margin);
	      if (options.barWidth) {
	        size = size.withX(numbers.length * options.barWidth);
	      }
	      if (size.x < minWidth) {
	        size = size.withX(minWidth);
	      }
	      barWidth = size.x / numbers.length;
	      drawMatrix = Matrix.scale(pixelsPerPoint);
	      out = new Art.Canvas.Bitmap(size.mul(pixelsPerPoint));
	      out.pixelsPerPoint = pixelsPerPoint;
	      out.clear(bgColor);
	      drawArea = rect(0, margin, size.w, size.h - 2 * margin);
	      out.drawRectangle(drawMatrix, drawArea, chartBgColor);
	      pos = drawArea.left;
	      maxNumber = 0;
	      for (j = 0, len = numbers.length; j < len; j++) {
	        i = numbers[j];
	        if (i > maxNumber) {
	          maxNumber = i;
	        }
	      }
	      for (k = 0, len1 = numbers.length; k < len1; k++) {
	        i = numbers[k];
	        percent = i / maxNumber;
	        height = drawArea.h * percent;
	        barArea = rect(pos, drawArea.bottom - height, barWidth, height).round();
	        out.drawRectangle(drawMatrix, barArea, barColor);
	        pos += barWidth;
	      }
	      if (range) {
	        out.drawText(Matrix.translate(0, fontSize).mul(drawMatrix), "max: " + maxNumber, {
	          size: fontSize,
	          color: textColor
	        });
	        out.drawText(Matrix.translate(0, size.y).mul(drawMatrix), range[0], {
	          size: fontSize,
	          color: textColor
	        });
	        out.drawText(Matrix.translate(size).mul(drawMatrix), range[1], {
	          size: fontSize,
	          color: textColor,
	          align: "right"
	        });
	      }
	      return out;
	    };

	    return Chart;

	  })();
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	 * SASS
	 * compile it with: http://sassmeister.com/
	 */
	var slice = [].slice,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(177);

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(50), __webpack_require__(8), __webpack_require__(89), __webpack_require__(174)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, Foundation, Atomic, DomConsole) {
	  var BaseObject, Color, Map, Matrix, Point, Rectangle, clone, color, colorRegex, createWithPostCreate, domConsoleId, flatten, htmlEscape, insertBetweenEveryElement, inspect, isArray, isFunction, isImage, isNumber, isString, matrix, merge, nextTick, packageLogArgs, point, rect, timeout, wrapDomElement;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, matrix = Atomic.matrix, Matrix = Atomic.Matrix, rect = Atomic.rect, Rectangle = Atomic.Rectangle;
	  BaseObject = Foundation.BaseObject, inspect = Foundation.inspect, clone = Foundation.clone, merge = Foundation.merge, Map = Foundation.Map, nextTick = Foundation.nextTick, timeout = Foundation.timeout, flatten = Foundation.flatten, isArray = Foundation.isArray, isString = Foundation.isString, isFunction = Foundation.isFunction, isNumber = Foundation.isNumber, createWithPostCreate = Foundation.createWithPostCreate, colorRegex = Foundation.colorRegex;
	  isImage = function(o) {
	    return o && ((typeof o.toImage === "function") || o.constructor === HTMLImageElement);
	  };
	  htmlEscape = function(str) {
	    return str;
	  };
	  insertBetweenEveryElement = function(array, el) {
	    var first, j, len, res, v;
	    res = [];
	    first = true;
	    for (j = 0, len = array.length; j < len; j++) {
	      v = array[j];
	      if (first) {
	        first = false;
	      } else {
	        res.push(el);
	      }
	      res.push(v);
	    }
	    return res;
	  };
	  domConsoleId = 'Art-Dom-Console';
	  DomConsole.enable = function() {
	    Foundation.Log.alternativeLogger = DomConsole.Console.console;
	    DomConsole.enabled = true;
	    return DomConsole.Console.console.show();
	  };
	  DomConsole.disable = function() {
	    DomConsole.enabled = false;
	    Foundation.Log.alternativeLogger = null;
	    DomConsole.Console.console.hide();
	    return DomConsole.Console.console.reset();
	  };
	  DomConsole.hide = function() {
	    return DomConsole.Console.console.hide();
	  };
	  DomConsole.show = function() {
	    return DomConsole.Console.console.show();
	  };
	  DomConsole.reset = function() {
	    return DomConsole.Console.console.reset();
	  };
	  DomConsole.logCore = function(m, callStack, contextName) {
	    return DomConsole.Console.console.logCore(m, callStack, contextName);
	  };
	  DomConsole.logF = function(options) {
	    return DomConsole.Console.console.logF(options);
	  };
	  DomConsole.log = function() {
	    var args, ref;
	    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return (ref = DomConsole.Console.console).log.apply(ref, args);
	  };
	  packageLogArgs = function(args) {
	    if (args.length === 1) {
	      return args[0];
	    } else {
	      return args;
	    }
	  };
	  wrapDomElement = function(a, withB) {
	    var bElement;
	    bElement = $(withB);
	    bElement.append(a);
	    return bElement;
	  };
	  return createWithPostCreate(DomConsole.Console = (function(superClass) {
	    extend(Console, superClass);

	    Console.singletonClass();

	    Console.postCreate = function() {
	      self.domConsole = DomConsole.singleton;
	      return Console.__super__.constructor.postCreate.apply(this, arguments);
	    };

	    function Console() {
	      window.domConsole = this;
	      this._devicePixelRatio = Foundation.Browser.Dom.getDevicePixelRatio();
	      this.initDom();
	    }

	    Console.prototype.initCss = function() {
	      return $('<link>').appendTo($('head')).attr({
	        type: 'text/css',
	        rel: 'stylesheet'
	      });
	    };

	    Console.prototype.reset = function() {
	      return this.domContainer.html("");
	    };

	    Console.prototype.hide = function() {
	      return this.domContainer.hide();
	    };

	    Console.prototype.show = function() {
	      return this.domContainer.show();
	    };

	    Console.prototype.initDom = function() {
	      var delay, domEl, fixMochaStats, maxAttempts, mocha;
	      this.initCss();
	      domEl = $("<div></div>", {
	        id: domConsoleId,
	        "class": "domConsole"
	      });
	      domEl.on("click", ".collapsable", (function(_this) {
	        return function(e) {
	          var $target;
	          $target = $(e.target).closest(".collapsable");
	          $target.siblings().show();
	          return $target.hide();
	        };
	      })(this));
	      if ((mocha = $("#mocha")).length > 0) {
	        maxAttempts = 8;
	        delay = 125 / 2;
	        fixMochaStats = function() {
	          var ms;
	          if (!maxAttempts--) {
	            console.log("fixMochaStats... giving up; sorry for the ugly screen");
	            return;
	          }
	          delay *= 2;
	          ms = $("#mocha-stats");
	          if (ms.length === 0) {
	            console.log("fixMochaStats... (waiting " + delay + "ms for #mocha-stats div to appear: " + maxAttempts + ")");
	            return timeout(delay, fixMochaStats);
	          } else {
	            return ms.css({
	              "right": "530px"
	            });
	          }
	        };
	        timeout(delay, function() {
	          return fixMochaStats();
	        });
	        mocha.css({
	          "margin-right": "530px"
	        });
	      }
	      domEl.appendTo($("body"));
	      return this.domContainer = $("#" + domConsoleId);
	    };

	    Console.prototype.appendLog = function(domElement) {
	      this.domContainer.append(domElement);
	      return nextTick((function(_this) {
	        return function() {
	          return _this.domContainer.scrollTop(_this.domContainer[0].scrollHeight);
	        };
	      })(this));
	    };

	    Console.prototype.newLogLine = function() {
	      return $("<div/>", {
	        "class": "logLine"
	      });
	    };

	    Console.prototype.log = function() {
	      var args;
	      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	      this.logCore(packageLogArgs(args));
	      return args[args.length - 1];
	    };

	    Console.prototype.logF = function(options) {
	      this.logCore(options.log, null, null, options);
	      return options.log;
	    };

	    Console.prototype.format = function(domEl, options) {
	      if (options && options.tag) {
	        domEl = wrapDomElement(domEl, "<" + options.tag + "/>");
	      }
	      return domEl;
	    };

	    Console.prototype.arrayKidsToDomArray = function(arrayOfInspectedObjects, tagName, options, addCommasAndBrackets) {
	      var child, kids;
	      options.maxDepth--;
	      kids = (function() {
	        var j, len, results;
	        results = [];
	        for (j = 0, len = arrayOfInspectedObjects.length; j < len; j++) {
	          child = arrayOfInspectedObjects[j];
	          results.push($(tagName, {
	            "class": "value"
	          }).append(this.toDom(child, options)));
	        }
	        return results;
	      }).call(this);
	      options.maxDepth++;
	      if (addCommasAndBrackets) {
	        kids = this.addCommasAndBrackets(kids, "[", "]");
	      }
	      return kids;
	    };

	    Console.prototype.arrayToDomBasic = function(arrayOfInspectedObjects, options) {
	      if (options.maxDepth === 0) {
	        return $("<span/>", {
	          "class": "array maxdepth"
	        }).text(arrayOfInspectedObjects.length === 0 ? "[]" : "[... " + arrayOfInspectedObjects.length + "]");
	      }
	      return $("<span/>", {
	        "class": "array"
	      }).append(this.arrayKidsToDomArray(arrayOfInspectedObjects, "<span/>", options, true));
	    };

	    Console.prototype.arrayToDom = function(arrayOfInspectedObjects, options) {
	      if (options.treeView) {
	        return this.arrayToDomTreeView(arrayOfInspectedObjects, options);
	      } else {
	        return this.arrayToDomBasic(arrayOfInspectedObjects, options);
	      }
	    };

	    Console.prototype.addCommasAndBrackets = function(kids, leftBracket, rightBracket, typeName) {
	      var i, j, kid, len;
	      for (i = j = 0, len = kids.length; j < len; i = ++j) {
	        kid = kids[i];
	        if (i + 1 < kids.length) {
	          kid.append(", ");
	        }
	      }
	      return flatten(leftBracket, typeName, kids, rightBracket);
	    };

	    Console.prototype.mapKidsToDomArray = function(inspectedObject, tagName, options, addCommasAndBrackets) {
	      var k, kids, v;
	      options.maxDepth--;
	      kids = (function() {
	        var ref, results;
	        ref = inspectedObject.children;
	        results = [];
	        for (k in ref) {
	          v = ref[k];
	          results.push($(tagName).append([
	            $("<span/>", {
	              "class": "key"
	            }).append(k + ": "), $("<span/>", {
	              "class": "value"
	            }).append(this.toDom(v, options))
	          ]));
	        }
	        return results;
	      }).call(this);
	      options.maxDepth++;
	      if (addCommasAndBrackets) {
	        if (inspectedObject.instanceOf) {
	          return this.addCommasAndBrackets(kids, "&lt;", "&gt;", inspectedObject.instanceOf + " ");
	        } else {
	          return this.addCommasAndBrackets(kids, "{", "}");
	        }
	      } else {
	        if (inspectedObject.instanceOf) {
	          return flatten(inspectedObject.instanceOf + " ", kids);
	        } else {
	          return kids;
	        }
	      }
	    };

	    Console.prototype.objectToDomBasic = function(inspectedObject, options) {
	      var inside;
	      if (options.maxDepth === 0) {
	        inside = inspectedObject.length === 0 ? "" : "... " + inspectedObject.length;
	        if (inspectedObject.instanceOf) {
	          return this.instanceOfDomElement(inspectedObject, inside);
	        } else {
	          return $("<span/>", {
	            "class": "object maxdepth"
	          }).text("{" + inside + "}");
	        }
	      }
	      return $("<span/>", {
	        "class": "object"
	      }).append(this.mapKidsToDomArray(inspectedObject, "<span/>", options, true));
	    };

	    Console.prototype.treeViewCollapsable = function(collapsablePair, options) {
	      collapsablePair[options.collapsed ? 0 : 1].hide();
	      return collapsablePair;
	    };

	    Console.prototype.instanceOfDomElement = function(inspectedObject, inside) {
	      return $("<span/>", {
	        "class": "object maxdepth"
	      }).text("<" + inspectedObject.instanceOf + (inside || "") + ">");
	    };

	    Console.prototype.arrayToDomTreeView = function(arrayOfInspectedObjects, options) {
	      var el;
	      if (arrayOfInspectedObjects.length === 0) {
	        el = $("<span/>", {
	          "class": "array"
	        });
	        return el.append("[]");
	      }
	      return this.treeViewCollapsable([
	        $("<ul/>", {
	          "class": "collapsable open array"
	        }).append(this.arrayKidsToDomArray(arrayOfInspectedObjects, "<li/>", options)), $(this.arrayToDomBasic(arrayOfInspectedObjects, merge(options, {
	          maxDepth: 0,
	          treeView: false
	        }))).addClass("collapsable closed")
	      ], options);
	    };

	    Console.prototype.objectToDomTreeView = function(inspectedObject, options) {
	      var el;
	      if (inspectedObject.length === 0) {
	        if (inspectedObject.instanceOf) {
	          return this.instanceOfDomElement(inspectedObject);
	        } else {
	          el = $("<span/>", {
	            "class": "object"
	          });
	          return el.append("{}");
	        }
	      }
	      return this.treeViewCollapsable([
	        $("<ul/>", {
	          "class": "object open collapsable"
	        }).append(this.mapKidsToDomArray(inspectedObject, "<li/>", options)), $(this.objectToDomBasic(inspectedObject, merge(options, {
	          maxDepth: 0,
	          treeView: false
	        }))).addClass("collapsable closed")
	      ], options);
	    };

	    Console.prototype.objectToDom = function(inspectedObject, options) {
	      if (options.treeView) {
	        return this.objectToDomTreeView(inspectedObject, options);
	      } else {
	        return this.objectToDomBasic(inspectedObject, options);
	      }
	    };

	    Console.prototype.literalToDom = function(inspectedObject) {
	      return $("<span/>", {
	        "class": "literal"
	      }).text(inspectedObject.toString());
	    };

	    Console.prototype.literalWithInspectedToDom = function(inspectedObject) {
	      return $("<span/>", {
	        "class": "inspected literal"
	      }).append(inspectedObject.inspected);
	    };

	    Console.prototype.colorToDom = function(clr) {
	      var clrString, displayString, style;
	      displayString = isString(clrString = clr) ? (clr = color(clr), "'" + clrString + "'") : clr.toString();
	      style = "background-color: " + clr + "; padding:0 5px; color: " + (clr.perceptualLightness < .8 && clr.a > .25 ? 'white' : 'black') + ";";
	      return $("<span/>", {
	        "class": "inspected",
	        style: style
	      }).append("" + displayString);
	    };

	    Console.prototype.toDom = function(inspectedObject, options) {
	      var children, domEl, image, inspectedString, maxImageDisplaySize, minImageDisplaySize, scale, size;
	      if (options == null) {
	        options = {};
	      }
	      if (image = inspectedObject.image) {
	        minImageDisplaySize = point(0);
	        maxImageDisplaySize = point(1024, 512).mul(this._devicePixelRatio);
	        domEl = $(inspectedObject.image).clone();
	        size = point(image.width, image.height);
	        scale = 1 / this._devicePixelRatio;
	        if (!size.gte(minImageDisplaySize)) {
	          scale *= Math.ceil(minImageDisplaySize.div(size).min());
	        } else if (!size.lt(maxImageDisplaySize)) {
	          scale *= maxImageDisplaySize.div(size).min();
	        }
	        domEl.css("width", (image.naturalWidth * scale | 0) + "px");
	        domEl.css("height", (image.naturalHeight * scale | 0) + "px");
	        return domEl;
	      } else if (inspectedObject.inspected) {
	        console.log(inspectedObject.inspected);
	        if (inspectedObject.originalObject instanceof Color) {
	          return this.colorToDom(inspectedObject.originalObject);
	        } else {
	          return this.literalWithInspectedToDom(inspectedObject);
	        }
	      } else if (children = inspectedObject.children) {
	        if (isArray(children)) {
	          return this.arrayToDom(children, options);
	        } else {
	          return this.objectToDom(inspectedObject, options);
	        }
	      } else if (isString(inspectedString = inspectedObject.string) && inspectedString.match(colorRegex)) {
	        return this.colorToDom(inspectedString);
	      } else {
	        return this.literalToDom(inspectedObject);
	      }
	    };

	    Console.prototype.logCore = function(m, callStack, name, options) {
	      var domEl, inspector, maxDepth;
	      if (options == null) {
	        options = {};
	      }
	      console.log(m);
	      options.treeView = true;
	      maxDepth = options.maxDepth;
	      if (!isNumber(maxDepth)) {
	        maxDepth = 10;
	      }
	      inspector = new Foundation.Inspect.Inspector2({
	        withImages: true,
	        maxDepth: maxDepth
	      });
	      domEl = this.newLogLine();
	      if (typeof m === "string") {
	        return this.appendLog(this.format(domEl.append($("<pre/>").text(m)), options));
	      }
	      return inspector.inspect(m, (function(_this) {
	        return function(inspected) {
	          domEl.append(_this.toDom(inspected, options));
	          return _this.appendLog(_this.format(domEl, options));
	        };
	      })(this));
	    };

	    return Console;

	  })(BaseObject));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(178);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(180)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../../node_modules/css-loader/index.js!./style.css", function() {
				var newContent = require("!!./../../../../../node_modules/css-loader/index.js!./style.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(179)();
	// imports


	// module
	exports.push([module.id, "@charset \"UTF-8\";\n.domConsole {\n  position: fixed;\n  top: 0;\n  right: 0;\n  width: 500px;\n  bottom: 0;\n  border-left: 1px solid #aaaaaa;\n  padding: 5px;\n  overflow: auto;\n  background-color: white; }\n  .domConsole img {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -o-crisp-edges;\n    image-rendering: -webkit-optimize-contrast;\n    image-rendering: crisp-edges;\n    -ms-interpolation-mode: nearest-neighbor;\n    border: 1px solid rgba(255, 255, 255, 0); }\n    .domConsole img:hover {\n      border: 1px solid #bbbbbb; }\n  .domConsole ul {\n    list-style-type: none; }\n  .domConsole .collapsable {\n    cursor: pointer;\n    margin: 0;\n    padding: 0;\n    padding-left: 12px;\n    margin-bottom: 5px;\n    position: relative;\n    border-left: 1px solid transparent; }\n    .domConsole .collapsable:before {\n      content: \"\\25BE\";\n      position: absolute;\n      left: 2px;\n      top: 0;\n      bottom: 0; }\n    .domConsole .collapsable:hover {\n      border-left: 1px solid #cccc44;\n      border-radius: 5px; }\n  .domConsole .collapsable.closed.array:before {\n    content: \"\\25B9\"; }\n  .domConsole .collapsable.open.array:before {\n    content: \"\\25BF\"; }\n  .domConsole .collapsable.closed.object:before {\n    content: \"\\25B8\"; }\n  .domConsole .collapsable.open.object:before {\n    content: \"\\25BE\"; }\n  .domConsole pre {\n    margin: 0;\n    color: #555555; }\n  .domConsole .logLine {\n    font-family: \"Courier\";\n    font-size: 12px;\n    color: #aaaaaa;\n    border-right: 2px solid transparent; }\n    .domConsole .logLine .literal {\n      color: green; }\n    .domConsole .logLine .object .key {\n      color: #bbbb00; }\n    .domConsole .logLine:hover {\n      border-right: 2px solid #e0e0e0; }\n  .domConsole h1 {\n    margin-bottom: 20px;\n    margin-top: 40px; }\n  .domConsole h2 {\n    margin-bottom: 15px;\n    margin-top: 30px; }\n  .domConsole h3 {\n    margin-bottom: 10px;\n    margin-top: 20px; }\n  .domConsole h1 .logLine {\n    font-size: 24px;\n    border-bottom: 4px solid #e0e0e0; }\n  .domConsole h2 .logLine {\n    font-size: 20px;\n    border-bottom: 3px solid #e0e0e0; }\n  .domConsole h3 .logLine {\n    font-size: 16px;\n    border-bottom: 2px solid #e0e0e0; }\n", ""]);

	// exports


/***/ },
/* 179 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var Profiler;

	module.exports = Profiler = __webpack_require__(182);

	Profiler.Main = __webpack_require__(183);

	Profiler.finishLoad(["Main"]);


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	var DevTools,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	DevTools = __webpack_require__(172);

	module.exports = DevTools.Profiler || (DevTools.Profiler = (function(superClass) {
	  extend(Profiler, superClass);

	  function Profiler() {
	    return Profiler.__super__.constructor.apply(this, arguments);
	  }

	  Profiler.namespace = DevTools;

	  Profiler.namespacePath = "Neptune.Art.DevTools.Profiler";

	  return Profiler;

	})(Neptune.Base));

	DevTools.addNamespace(DevTools.Profiler);


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(182), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Profiler, Foundation) {
	  var BaseObject, Map, blankNode, clone, flatten, flattenPathCountsRecursive, inspect, merge;
	  BaseObject = Foundation.BaseObject, inspect = Foundation.inspect, clone = Foundation.clone, merge = Foundation.merge, Map = Foundation.Map;
	  flatten = Foundation.Array.flatten;
	  flattenPathCountsRecursive = function(pathCounts, pathSoFar) {
	    var a, k, r, v;
	    a = (function() {
	      var results;
	      results = [];
	      for (k in pathCounts) {
	        v = pathCounts[k];
	        if (!(k !== "count")) {
	          continue;
	        }
	        r = flattenPathCountsRecursive(v, pathSoFar.concat([k]));
	        results.push(r);
	      }
	      return results;
	    })();
	    if (pathCounts.count) {
	      a.push({
	        count: pathCounts.count,
	        path: pathSoFar
	      });
	    }
	    return flatten(a);
	  };
	  blankNode = function() {
	    return {
	      count: 0,
	      callers: {}
	    };
	  };
	  Profiler.pathCounts = blankNode();
	  Profiler.reset = function() {
	    return Profiler.pathCounts = blankNode();
	  };
	  Profiler.addPathCounts = function(path) {
	    var base, i, len, pathCounts, v;
	    pathCounts = Profiler.pathCounts;
	    for (i = 0, len = path.length; i < len; i++) {
	      v = path[i];
	      pathCounts = (base = pathCounts.callers)[v] || (base[v] = blankNode());
	    }
	    return pathCounts.count++;
	  };
	  Profiler.sample = function() {
	    var cleanCs, cs, csLine;
	    cs = Foundation.callStack(1);
	    cleanCs = (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = cs.length; i < len; i++) {
	        csLine = cs[i];
	        results.push(csLine.fileWithLocation);
	      }
	      return results;
	    })();
	    return Profiler.addPathCounts(cleanCs);
	  };
	  Profiler.flattenPathCounts = function(pathCounts) {
	    if (pathCounts == null) {
	      pathCounts = Profiler.pathCounts;
	    }
	    return flattenPathCountsRecursive(pathCounts, []);
	  };
	  Profiler.updateCounts = function(pathCounts) {
	    var callers, count, i, k, keys, len;
	    if (pathCounts == null) {
	      pathCounts = Profiler.pathCounts;
	    }
	    callers = pathCounts.callers;
	    keys = Object.keys(callers);
	    if (keys.length === 0) {
	      return pathCounts.count;
	    }
	    count = 0;
	    for (i = 0, len = keys.length; i < len; i++) {
	      k = keys[i];
	      count += Profiler.updateCounts(callers[k]);
	    }
	    return pathCounts.count = count;
	  };
	  Profiler.compactR = Profiler.compact = function(pathCounts) {
	    if (pathCounts == null) {
	      pathCounts = Profiler.pathCounts;
	    }
	  };
	  Profiler.toArrays = function(pathCounts) {
	    var i, k, keys, len, r, ref, results, rr, total, v;
	    if (pathCounts == null) {
	      pathCounts = Profiler.pathCounts;
	    }
	    ref = pathCounts.callers;
	    results = [];
	    for (k in ref) {
	      v = ref[k];
	      keys = Object.keys(v.callers);
	      if (keys.length === 0) {
	        results.push([v.count, k, []]);
	      } else if (keys.length === 1) {
	        r = Profiler.toArrays(v);
	        rr = r[0];
	        results.push([rr[0], k, rr]);
	      } else {
	        total = 0;
	        r = Profiler.toArrays(v);
	        for (i = 0, len = r.length; i < len; i++) {
	          rr = r[i];
	          total += rr[0];
	        }
	        r = r.sort(function(a, b) {
	          return b[0] - a[0];
	        });
	        results.push([total, k, r]);
	      }
	    }
	    return results;
	  };
	  Profiler.toCompactArraysR = function(arrays) {
	    var i, len, results, t;
	    results = [];
	    for (i = 0, len = arrays.length; i < len; i++) {
	      t = arrays[i];
	      results.push([t[0] + " " + t[1]].concat((t[2] && Profiler.toCompactArraysR(t[2])) || []));
	    }
	    return results;
	  };
	  Profiler.toCompactArrays = function(arrays) {
	    if (arrays == null) {
	      arrays = Profiler.toArrays();
	    }
	    return Profiler.toCompactArraysR(arrays);
	  };
	  return Profiler.logAll = function() {
	    var i, len, ref, results, v;
	    ref = Profiler.flattenPathCounts();
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      v = ref[i];
	      results.push(Art.Foundation.Log.log(v));
	    }
	    return results;
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var Test;

	module.exports = Test = __webpack_require__(185);

	Test.ArtChai = __webpack_require__(186);

	Test.MochaBrowserReporter = __webpack_require__(231);

	Test.Mocha = __webpack_require__(239);

	Test.finishLoad(["ArtChai", "MochaBrowserReporter", "Mocha"]);


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var DevTools,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	DevTools = __webpack_require__(172);

	module.exports = DevTools.Test || (DevTools.Test = (function(superClass) {
	  extend(Test, superClass);

	  function Test() {
	    return Test.__super__.constructor.apply(this, arguments);
	  }

	  Test.namespace = DevTools;

	  Test.namespacePath = "Neptune.Art.DevTools.Test";

	  return Test;

	})(Neptune.Base));

	DevTools.addNamespace(DevTools.Test);


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var Chai, Foundation, assert, eq, eqFailure, floatEq, inspect, inspectLean, log, withinFailure;

	assert = (Chai = __webpack_require__(187)).assert;

	Foundation = __webpack_require__(8);

	log = Foundation.log, eq = Foundation.eq, inspect = Foundation.inspect, inspectLean = Foundation.inspectLean, floatEq = Foundation.floatEq;

	assert = Chai.assert;

	eqFailure = function(a, b, optionalInfo, method) {
	  var aInspected, bInspected, message;
	  aInspected = inspectLean(a);
	  bInspected = inspectLean(b);
	  if (aInspected === bInspected) {
	    aInspected = inspectLean(a, {
	      noCustomInspectors: true
	    });
	    bInspected = inspectLean(b, {
	      noCustomInspectors: true
	    });
	  }
	  message = "expected\n  " + aInspected + "\nto equal (" + method + ")\n  " + bInspected + "\n";
	  if (optionalInfo) {
	    message += "info: " + optionalInfo + "\n";
	  }
	  return assert.fail(a, b, message);
	};

	withinFailure = function(a, b, c, optionalInfo, method) {
	  var aInspected, bInspected, cInspected, message;
	  aInspected = inspectLean(a);
	  bInspected = inspectLean(b);
	  cInspected = inspectLean(c);
	  if (aInspected === bInspected || aInspected === cInspected) {
	    aInspected = inspectLean(a, {
	      noCustomInspectors: true
	    });
	    bInspected = inspectLean(b, {
	      noCustomInspectors: true
	    });
	    cInspected = inspectLean(c, {
	      noCustomInspectors: true
	    });
	  }
	  message = "expected\n  " + aInspected + "\nto be >=\n  " + bInspected + "\nand <=\n  " + cInspected;
	  if (optionalInfo) {
	    message += "\ninfo: " + optionalInfo + "\n";
	  }
	  return assert.fail([a, c], b, message);
	};

	assert["instanceof"] = function(klass, obj, optionalInfo) {
	  var message;
	  if (!(obj instanceof klass)) {
	    message = "expected\n  " + (inspect(obj)) + "\nto be an instance of\n  " + (inspect(klass)) + "\n";
	    if (optionalInfo) {
	      message += "info: " + optionalInfo + "\n";
	    }
	    return assert.fail(klass, obj, message);
	  }
	};

	assert.floatEq = function(a, b, optionalInfo) {
	  if (!floatEq(a, b)) {
	    return eqFailure(a, b, optionalInfo, "floatEq");
	  }
	};

	assert.eq = function(a, b, optionalInfo) {
	  if (!eq(a, b, true)) {
	    return eqFailure(a, b, optionalInfo, "eq");
	  }
	};

	assert.within = function(a, b, c, optionalInfo) {
	  var useMethods;
	  useMethods = a && a.gte && a.lte;
	  if (!(useMethods ? a.gte(b) && a.lte(c) : a >= b && a <= c)) {
	    return withinFailure(a, b, c, optionalInfo, "within");
	  }
	};

	assert.neq = function(a, b, optionalInfo) {
	  var message;
	  if (eq(a, b, true)) {
	    message = "expected\n  " + (inspect(a)) + "\nto NOT equal (eq)\n  " + (inspect(b)) + "\n";
	    if (optionalInfo) {
	      message += "info: " + optionalInfo + "\n";
	    }
	    return assert.fail("1", "2", message);
	  }
	};

	module.exports = Chai;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(188);


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var used = []
	  , exports = module.exports = {};

	/*!
	 * Chai version
	 */

	exports.version = '3.4.1';

	/*!
	 * Assertion Error
	 */

	exports.AssertionError = __webpack_require__(189);

	/*!
	 * Utils for plugins (not exported)
	 */

	var util = __webpack_require__(190);

	/**
	 * # .use(function)
	 *
	 * Provides a way to extend the internals of Chai
	 *
	 * @param {Function}
	 * @returns {this} for chaining
	 * @api public
	 */

	exports.use = function (fn) {
	  if (!~used.indexOf(fn)) {
	    fn(this, util);
	    used.push(fn);
	  }

	  return this;
	};

	/*!
	 * Utility Functions
	 */

	exports.util = util;

	/*!
	 * Configuration
	 */

	var config = __webpack_require__(203);
	exports.config = config;

	/*!
	 * Primary `Assertion` prototype
	 */

	var assertion = __webpack_require__(226);
	exports.use(assertion);

	/*!
	 * Core Assertions
	 */

	var core = __webpack_require__(227);
	exports.use(core);

	/*!
	 * Expect interface
	 */

	var expect = __webpack_require__(228);
	exports.use(expect);

	/*!
	 * Should interface
	 */

	var should = __webpack_require__(229);
	exports.use(should);

	/*!
	 * Assert interface
	 */

	var assert = __webpack_require__(230);
	exports.use(assert);


/***/ },
/* 189 */
/***/ function(module, exports) {

	/*!
	 * assertion-error
	 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
	 * MIT Licensed
	 */

	/*!
	 * Return a function that will copy properties from
	 * one object to another excluding any originally
	 * listed. Returned function will create a new `{}`.
	 *
	 * @param {String} excluded properties ...
	 * @return {Function}
	 */

	function exclude () {
	  var excludes = [].slice.call(arguments);

	  function excludeProps (res, obj) {
	    Object.keys(obj).forEach(function (key) {
	      if (!~excludes.indexOf(key)) res[key] = obj[key];
	    });
	  }

	  return function extendExclude () {
	    var args = [].slice.call(arguments)
	      , i = 0
	      , res = {};

	    for (; i < args.length; i++) {
	      excludeProps(res, args[i]);
	    }

	    return res;
	  };
	};

	/*!
	 * Primary Exports
	 */

	module.exports = AssertionError;

	/**
	 * ### AssertionError
	 *
	 * An extension of the JavaScript `Error` constructor for
	 * assertion and validation scenarios.
	 *
	 * @param {String} message
	 * @param {Object} properties to include (optional)
	 * @param {callee} start stack function (optional)
	 */

	function AssertionError (message, _props, ssf) {
	  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
	    , props = extend(_props || {});

	  // default values
	  this.message = message || 'Unspecified AssertionError';
	  this.showDiff = false;

	  // copy from properties
	  for (var key in props) {
	    this[key] = props[key];
	  }

	  // capture stack trace
	  ssf = ssf || arguments.callee;
	  if (ssf && Error.captureStackTrace) {
	    Error.captureStackTrace(this, ssf);
	  } else {
	    this.stack = new Error().stack;
	  }
	}

	/*!
	 * Inherit from Error.prototype
	 */

	AssertionError.prototype = Object.create(Error.prototype);

	/*!
	 * Statically set name
	 */

	AssertionError.prototype.name = 'AssertionError';

	/*!
	 * Ensure correct constructor
	 */

	AssertionError.prototype.constructor = AssertionError;

	/**
	 * Allow errors to be converted to JSON for static transfer.
	 *
	 * @param {Boolean} include stack (default: `true`)
	 * @return {Object} object that can be `JSON.stringify`
	 */

	AssertionError.prototype.toJSON = function (stack) {
	  var extend = exclude('constructor', 'toJSON', 'stack')
	    , props = extend({ name: this.name }, this);

	  // include stack if exists and not turned off
	  if (false !== stack && this.stack) {
	    props.stack = this.stack;
	  }

	  return props;
	};


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Main exports
	 */

	var exports = module.exports = {};

	/*!
	 * test utility
	 */

	exports.test = __webpack_require__(191);

	/*!
	 * type utility
	 */

	exports.type = __webpack_require__(193);

	/*!
	 * expectTypes utility
	 */
	exports.expectTypes = __webpack_require__(195);

	/*!
	 * message utility
	 */

	exports.getMessage = __webpack_require__(196);

	/*!
	 * actual utility
	 */

	exports.getActual = __webpack_require__(197);

	/*!
	 * Inspect util
	 */

	exports.inspect = __webpack_require__(198);

	/*!
	 * Object Display util
	 */

	exports.objDisplay = __webpack_require__(202);

	/*!
	 * Flag utility
	 */

	exports.flag = __webpack_require__(192);

	/*!
	 * Flag transferring utility
	 */

	exports.transferFlags = __webpack_require__(204);

	/*!
	 * Deep equal utility
	 */

	exports.eql = __webpack_require__(205);

	/*!
	 * Deep path value
	 */

	exports.getPathValue = __webpack_require__(217);

	/*!
	 * Deep path info
	 */

	exports.getPathInfo = __webpack_require__(218);

	/*!
	 * Check if a property exists
	 */

	exports.hasProperty = __webpack_require__(219);

	/*!
	 * Function name
	 */

	exports.getName = __webpack_require__(199);

	/*!
	 * add Property
	 */

	exports.addProperty = __webpack_require__(220);

	/*!
	 * add Method
	 */

	exports.addMethod = __webpack_require__(221);

	/*!
	 * overwrite Property
	 */

	exports.overwriteProperty = __webpack_require__(222);

	/*!
	 * overwrite Method
	 */

	exports.overwriteMethod = __webpack_require__(223);

	/*!
	 * Add a chainable method
	 */

	exports.addChainableMethod = __webpack_require__(224);

	/*!
	 * Overwrite chainable method
	 */

	exports.overwriteChainableMethod = __webpack_require__(225);


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - test utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependancies
	 */

	var flag = __webpack_require__(192);

	/**
	 * # test(object, expression)
	 *
	 * Test and object for expression.
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 */

	module.exports = function (obj, args) {
	  var negate = flag(obj, 'negate')
	    , expr = args[0];
	  return negate ? !expr : expr;
	};


/***/ },
/* 192 */
/***/ function(module, exports) {

	/*!
	 * Chai - flag utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### flag(object, key, [value])
	 *
	 * Get or set a flag value on an object. If a
	 * value is provided it will be set, else it will
	 * return the currently set value or `undefined` if
	 * the value is not set.
	 *
	 *     utils.flag(this, 'foo', 'bar'); // setter
	 *     utils.flag(this, 'foo'); // getter, returns `bar`
	 *
	 * @param {Object} object constructed Assertion
	 * @param {String} key
	 * @param {Mixed} value (optional)
	 * @name flag
	 * @api private
	 */

	module.exports = function (obj, key, value) {
	  var flags = obj.__flags || (obj.__flags = Object.create(null));
	  if (arguments.length === 3) {
	    flags[key] = value;
	  } else {
	    return flags[key];
	  }
	};


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(194);


/***/ },
/* 194 */
/***/ function(module, exports) {

	/*!
	 * type-detect
	 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Primary Exports
	 */

	var exports = module.exports = getType;

	/**
	 * ### typeOf (obj)
	 *
	 * Use several different techniques to determine
	 * the type of object being tested.
	 *
	 *
	 * @param {Mixed} object
	 * @return {String} object type
	 * @api public
	 */
	var objectTypeRegexp = /^\[object (.*)\]$/;

	function getType(obj) {
	  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();
	  // Let "new String('')" return 'object'
	  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';
	  // PhantomJS has type "DOMWindow" for null
	  if (obj === null) return 'null';
	  // PhantomJS has type "DOMWindow" for undefined
	  if (obj === undefined) return 'undefined';
	  return type;
	}

	exports.Library = Library;

	/**
	 * ### Library
	 *
	 * Create a repository for custom type detection.
	 *
	 * ```js
	 * var lib = new type.Library;
	 * ```
	 *
	 */

	function Library() {
	  if (!(this instanceof Library)) return new Library();
	  this.tests = {};
	}

	/**
	 * #### .of (obj)
	 *
	 * Expose replacement `typeof` detection to the library.
	 *
	 * ```js
	 * if ('string' === lib.of('hello world')) {
	 *   // ...
	 * }
	 * ```
	 *
	 * @param {Mixed} object to test
	 * @return {String} type
	 */

	Library.prototype.of = getType;

	/**
	 * #### .define (type, test)
	 *
	 * Add a test to for the `.test()` assertion.
	 *
	 * Can be defined as a regular expression:
	 *
	 * ```js
	 * lib.define('int', /^[0-9]+$/);
	 * ```
	 *
	 * ... or as a function:
	 *
	 * ```js
	 * lib.define('bln', function (obj) {
	 *   if ('boolean' === lib.of(obj)) return true;
	 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
	 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
	 *   return !! ~blns.indexOf(obj);
	 * });
	 * ```
	 *
	 * @param {String} type
	 * @param {RegExp|Function} test
	 * @api public
	 */

	Library.prototype.define = function(type, test) {
	  if (arguments.length === 1) return this.tests[type];
	  this.tests[type] = test;
	  return this;
	};

	/**
	 * #### .test (obj, test)
	 *
	 * Assert that an object is of type. Will first
	 * check natives, and if that does not pass it will
	 * use the user defined custom tests.
	 *
	 * ```js
	 * assert(lib.test('1', 'int'));
	 * assert(lib.test('yes', 'bln'));
	 * ```
	 *
	 * @param {Mixed} object
	 * @param {String} type
	 * @return {Boolean} result
	 * @api public
	 */

	Library.prototype.test = function(obj, type) {
	  if (type === getType(obj)) return true;
	  var test = this.tests[type];

	  if (test && 'regexp' === getType(test)) {
	    return test.test(obj);
	  } else if (test && 'function' === getType(test)) {
	    return test(obj);
	  } else {
	    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
	  }
	};


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - expectTypes utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### expectTypes(obj, types)
	 *
	 * Ensures that the object being tested against is of a valid type.
	 *
	 *     utils.expectTypes(this, ['array', 'object', 'string']);
	 *
	 * @param {Mixed} obj constructed Assertion
	 * @param {Array} type A list of allowed types for this assertion
	 * @name expectTypes
	 * @api public
	 */

	var AssertionError = __webpack_require__(189);
	var flag = __webpack_require__(192);
	var type = __webpack_require__(193);

	module.exports = function (obj, types) {
	  var obj = flag(obj, 'object');
	  types = types.map(function (t) { return t.toLowerCase(); });
	  types.sort();

	  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'
	  var str = types.map(function (t, index) {
	    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';
	    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
	    return or + art + ' ' + t;
	  }).join(', ');

	  if (!types.some(function (expected) { return type(obj) === expected; })) {
	    throw new AssertionError(
	      'object tested must be ' + str + ', but ' + type(obj) + ' given'
	    );
	  }
	};


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - message composition utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependancies
	 */

	var flag = __webpack_require__(192)
	  , getActual = __webpack_require__(197)
	  , inspect = __webpack_require__(198)
	  , objDisplay = __webpack_require__(202);

	/**
	 * ### .getMessage(object, message, negateMessage)
	 *
	 * Construct the error message based on flags
	 * and template tags. Template tags will return
	 * a stringified inspection of the object referenced.
	 *
	 * Message template tags:
	 * - `#{this}` current asserted object
	 * - `#{act}` actual value
	 * - `#{exp}` expected value
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 * @name getMessage
	 * @api public
	 */

	module.exports = function (obj, args) {
	  var negate = flag(obj, 'negate')
	    , val = flag(obj, 'object')
	    , expected = args[3]
	    , actual = getActual(obj, args)
	    , msg = negate ? args[2] : args[1]
	    , flagMsg = flag(obj, 'message');

	  if(typeof msg === "function") msg = msg();
	  msg = msg || '';
	  msg = msg
	    .replace(/#{this}/g, objDisplay(val))
	    .replace(/#{act}/g, objDisplay(actual))
	    .replace(/#{exp}/g, objDisplay(expected));

	  return flagMsg ? flagMsg + ': ' + msg : msg;
	};


/***/ },
/* 197 */
/***/ function(module, exports) {

	/*!
	 * Chai - getActual utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * # getActual(object, [actual])
	 *
	 * Returns the `actual` value for an Assertion
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 */

	module.exports = function (obj, args) {
	  return args.length > 4 ? args[4] : obj._obj;
	};


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	// This is (almost) directly from Node.js utils
	// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js

	var getName = __webpack_require__(199);
	var getProperties = __webpack_require__(200);
	var getEnumerableProperties = __webpack_require__(201);

	module.exports = inspect;

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
	 *    properties of objects.
	 * @param {Number} depth Depth in which to descend in object. Default is 2.
	 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
	 *    output. Default is false (no coloring).
	 */
	function inspect(obj, showHidden, depth, colors) {
	  var ctx = {
	    showHidden: showHidden,
	    seen: [],
	    stylize: function (str) { return str; }
	  };
	  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
	}

	// Returns true if object is a DOM element.
	var isDOMElement = function (object) {
	  if (typeof HTMLElement === 'object') {
	    return object instanceof HTMLElement;
	  } else {
	    return object &&
	      typeof object === 'object' &&
	      object.nodeType === 1 &&
	      typeof object.nodeName === 'string';
	  }
	};

	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (value && typeof value.inspect === 'function' &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes);
	    if (typeof ret !== 'string') {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // If this is a DOM element, try to get the outer HTML.
	  if (isDOMElement(value)) {
	    if ('outerHTML' in value) {
	      return value.outerHTML;
	      // This value does not have an outerHTML attribute,
	      //   it could still be an XML element
	    } else {
	      // Attempt to serialize it
	      try {
	        if (document.xmlVersion) {
	          var xmlSerializer = new XMLSerializer();
	          return xmlSerializer.serializeToString(value);
	        } else {
	          // Firefox 11- do not support outerHTML
	          //   It does, however, support innerHTML
	          //   Use the following to render the element
	          var ns = "http://www.w3.org/1999/xhtml";
	          var container = document.createElementNS(ns, '_');

	          container.appendChild(value.cloneNode(false));
	          html = container.innerHTML
	            .replace('><', '>' + value.innerHTML + '<');
	          container.innerHTML = '';
	          return html;
	        }
	      } catch (err) {
	        // This could be a non-native DOM implementation,
	        //   continue with the normal flow:
	        //   printing the element as if it is an object.
	      }
	    }
	  }

	  // Look up the keys of the object.
	  var visibleKeys = getEnumerableProperties(value);
	  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;

	  // Some type of object without properties can be shortcutted.
	  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
	  // a `stack` plus `description` property; ignore those for consistency.
	  if (keys.length === 0 || (isError(value) && (
	      (keys.length === 1 && keys[0] === 'stack') ||
	      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
	     ))) {
	    if (typeof value === 'function') {
	      var name = getName(value);
	      var nameSuffix = name ? ': ' + name : '';
	      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (typeof value === 'function') {
	    var name = getName(value);
	    var nameSuffix = name ? ': ' + name : '';
	    base = ' [Function' + nameSuffix + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    return formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  switch (typeof value) {
	    case 'undefined':
	      return ctx.stylize('undefined', 'undefined');

	    case 'string':
	      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                               .replace(/'/g, "\\'")
	                                               .replace(/\\"/g, '"') + '\'';
	      return ctx.stylize(simple, 'string');

	    case 'number':
	      if (value === 0 && (1/value) === -Infinity) {
	        return ctx.stylize('-0', 'number');
	      }
	      return ctx.stylize('' + value, 'number');

	    case 'boolean':
	      return ctx.stylize('' + value, 'boolean');
	  }
	  // For some reason typeof null is "object", so special case here.
	  if (value === null) {
	    return ctx.stylize('null', 'null');
	  }
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str;
	  if (value.__lookupGetter__) {
	    if (value.__lookupGetter__(key)) {
	      if (value.__lookupSetter__(key)) {
	        str = ctx.stylize('[Getter/Setter]', 'special');
	      } else {
	        str = ctx.stylize('[Getter]', 'special');
	      }
	    } else {
	      if (value.__lookupSetter__(key)) {
	        str = ctx.stylize('[Setter]', 'special');
	      }
	    }
	  }
	  if (visibleKeys.indexOf(key) < 0) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(value[key]) < 0) {
	      if (recurseTimes === null) {
	        str = formatValue(ctx, value[key], null);
	      } else {
	        str = formatValue(ctx, value[key], recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (typeof name === 'undefined') {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}

	function isArray(ar) {
	  return Array.isArray(ar) ||
	         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
	}

	function isRegExp(re) {
	  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
	}

	function isDate(d) {
	  return typeof d === 'object' && objectToString(d) === '[object Date]';
	}

	function isError(e) {
	  return typeof e === 'object' && objectToString(e) === '[object Error]';
	}

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


/***/ },
/* 199 */
/***/ function(module, exports) {

	/*!
	 * Chai - getName utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * # getName(func)
	 *
	 * Gets the name of a function, in a cross-browser way.
	 *
	 * @param {Function} a function (usually a constructor)
	 */

	module.exports = function (func) {
	  if (func.name) return func.name;

	  var match = /^\s?function ([^(]*)\(/.exec(func);
	  return match && match[1] ? match[1] : "";
	};


/***/ },
/* 200 */
/***/ function(module, exports) {

	/*!
	 * Chai - getProperties utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### .getProperties(object)
	 *
	 * This allows the retrieval of property names of an object, enumerable or not,
	 * inherited or not.
	 *
	 * @param {Object} object
	 * @returns {Array}
	 * @name getProperties
	 * @api public
	 */

	module.exports = function getProperties(object) {
	  var result = Object.getOwnPropertyNames(object);

	  function addProperty(property) {
	    if (result.indexOf(property) === -1) {
	      result.push(property);
	    }
	  }

	  var proto = Object.getPrototypeOf(object);
	  while (proto !== null) {
	    Object.getOwnPropertyNames(proto).forEach(addProperty);
	    proto = Object.getPrototypeOf(proto);
	  }

	  return result;
	};


/***/ },
/* 201 */
/***/ function(module, exports) {

	/*!
	 * Chai - getEnumerableProperties utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### .getEnumerableProperties(object)
	 *
	 * This allows the retrieval of enumerable property names of an object,
	 * inherited or not.
	 *
	 * @param {Object} object
	 * @returns {Array}
	 * @name getEnumerableProperties
	 * @api public
	 */

	module.exports = function getEnumerableProperties(object) {
	  var result = [];
	  for (var name in object) {
	    result.push(name);
	  }
	  return result;
	};


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - flag utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependancies
	 */

	var inspect = __webpack_require__(198);
	var config = __webpack_require__(203);

	/**
	 * ### .objDisplay (object)
	 *
	 * Determines if an object or an array matches
	 * criteria to be inspected in-line for error
	 * messages or should be truncated.
	 *
	 * @param {Mixed} javascript object to inspect
	 * @name objDisplay
	 * @api public
	 */

	module.exports = function (obj) {
	  var str = inspect(obj)
	    , type = Object.prototype.toString.call(obj);

	  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
	    if (type === '[object Function]') {
	      return !obj.name || obj.name === ''
	        ? '[Function]'
	        : '[Function: ' + obj.name + ']';
	    } else if (type === '[object Array]') {
	      return '[ Array(' + obj.length + ') ]';
	    } else if (type === '[object Object]') {
	      var keys = Object.keys(obj)
	        , kstr = keys.length > 2
	          ? keys.splice(0, 2).join(', ') + ', ...'
	          : keys.join(', ');
	      return '{ Object (' + kstr + ') }';
	    } else {
	      return str;
	    }
	  } else {
	    return str;
	  }
	};


/***/ },
/* 203 */
/***/ function(module, exports) {

	module.exports = {

	  /**
	   * ### config.includeStack
	   *
	   * User configurable property, influences whether stack trace
	   * is included in Assertion error message. Default of false
	   * suppresses stack trace in the error message.
	   *
	   *     chai.config.includeStack = true;  // enable stack on error
	   *
	   * @param {Boolean}
	   * @api public
	   */

	   includeStack: false,

	  /**
	   * ### config.showDiff
	   *
	   * User configurable property, influences whether or not
	   * the `showDiff` flag should be included in the thrown
	   * AssertionErrors. `false` will always be `false`; `true`
	   * will be true when the assertion has requested a diff
	   * be shown.
	   *
	   * @param {Boolean}
	   * @api public
	   */

	  showDiff: true,

	  /**
	   * ### config.truncateThreshold
	   *
	   * User configurable property, sets length threshold for actual and
	   * expected values in assertion errors. If this threshold is exceeded, for
	   * example for large data structures, the value is replaced with something
	   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
	   *
	   * Set it to zero if you want to disable truncating altogether.
	   *
	   * This is especially userful when doing assertions on arrays: having this
	   * set to a reasonable large value makes the failure messages readily
	   * inspectable.
	   *
	   *     chai.config.truncateThreshold = 0;  // disable truncating
	   *
	   * @param {Number}
	   * @api public
	   */

	  truncateThreshold: 40

	};


/***/ },
/* 204 */
/***/ function(module, exports) {

	/*!
	 * Chai - transferFlags utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### transferFlags(assertion, object, includeAll = true)
	 *
	 * Transfer all the flags for `assertion` to `object`. If
	 * `includeAll` is set to `false`, then the base Chai
	 * assertion flags (namely `object`, `ssfi`, and `message`)
	 * will not be transferred.
	 *
	 *
	 *     var newAssertion = new Assertion();
	 *     utils.transferFlags(assertion, newAssertion);
	 *
	 *     var anotherAsseriton = new Assertion(myObj);
	 *     utils.transferFlags(assertion, anotherAssertion, false);
	 *
	 * @param {Assertion} assertion the assertion to transfer the flags from
	 * @param {Object} object the object to transfer the flags to; usually a new assertion
	 * @param {Boolean} includeAll
	 * @name transferFlags
	 * @api private
	 */

	module.exports = function (assertion, object, includeAll) {
	  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

	  if (!object.__flags) {
	    object.__flags = Object.create(null);
	  }

	  includeAll = arguments.length === 3 ? includeAll : true;

	  for (var flag in flags) {
	    if (includeAll ||
	        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {
	      object.__flags[flag] = flags[flag];
	    }
	  }
	};


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(206);


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * deep-eql
	 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependencies
	 */

	var type = __webpack_require__(207);

	/*!
	 * Buffer.isBuffer browser shim
	 */

	var Buffer;
	try { Buffer = __webpack_require__(209).Buffer; }
	catch(ex) {
	  Buffer = {};
	  Buffer.isBuffer = function() { return false; }
	}

	/*!
	 * Primary Export
	 */

	module.exports = deepEqual;

	/**
	 * Assert super-strict (egal) equality between
	 * two objects of any type.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @param {Array} memoised (optional)
	 * @return {Boolean} equal match
	 */

	function deepEqual(a, b, m) {
	  if (sameValue(a, b)) {
	    return true;
	  } else if ('date' === type(a)) {
	    return dateEqual(a, b);
	  } else if ('regexp' === type(a)) {
	    return regexpEqual(a, b);
	  } else if (Buffer.isBuffer(a)) {
	    return bufferEqual(a, b);
	  } else if ('arguments' === type(a)) {
	    return argumentsEqual(a, b, m);
	  } else if (!typeEqual(a, b)) {
	    return false;
	  } else if (('object' !== type(a) && 'object' !== type(b))
	  && ('array' !== type(a) && 'array' !== type(b))) {
	    return sameValue(a, b);
	  } else {
	    return objectEqual(a, b, m);
	  }
	}

	/*!
	 * Strict (egal) equality test. Ensures that NaN always
	 * equals NaN and `-0` does not equal `+0`.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} equal match
	 */

	function sameValue(a, b) {
	  if (a === b) return a !== 0 || 1 / a === 1 / b;
	  return a !== a && b !== b;
	}

	/*!
	 * Compare the types of two given objects and
	 * return if they are equal. Note that an Array
	 * has a type of `array` (not `object`) and arguments
	 * have a type of `arguments` (not `array`/`object`).
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */

	function typeEqual(a, b) {
	  return type(a) === type(b);
	}

	/*!
	 * Compare two Date objects by asserting that
	 * the time values are equal using `saveValue`.
	 *
	 * @param {Date} a
	 * @param {Date} b
	 * @return {Boolean} result
	 */

	function dateEqual(a, b) {
	  if ('date' !== type(b)) return false;
	  return sameValue(a.getTime(), b.getTime());
	}

	/*!
	 * Compare two regular expressions by converting them
	 * to string and checking for `sameValue`.
	 *
	 * @param {RegExp} a
	 * @param {RegExp} b
	 * @return {Boolean} result
	 */

	function regexpEqual(a, b) {
	  if ('regexp' !== type(b)) return false;
	  return sameValue(a.toString(), b.toString());
	}

	/*!
	 * Assert deep equality of two `arguments` objects.
	 * Unfortunately, these must be sliced to arrays
	 * prior to test to ensure no bad behavior.
	 *
	 * @param {Arguments} a
	 * @param {Arguments} b
	 * @param {Array} memoize (optional)
	 * @return {Boolean} result
	 */

	function argumentsEqual(a, b, m) {
	  if ('arguments' !== type(b)) return false;
	  a = [].slice.call(a);
	  b = [].slice.call(b);
	  return deepEqual(a, b, m);
	}

	/*!
	 * Get enumerable properties of a given object.
	 *
	 * @param {Object} a
	 * @return {Array} property names
	 */

	function enumerable(a) {
	  var res = [];
	  for (var key in a) res.push(key);
	  return res;
	}

	/*!
	 * Simple equality for flat iterable objects
	 * such as Arrays or Node.js buffers.
	 *
	 * @param {Iterable} a
	 * @param {Iterable} b
	 * @return {Boolean} result
	 */

	function iterableEqual(a, b) {
	  if (a.length !==  b.length) return false;

	  var i = 0;
	  var match = true;

	  for (; i < a.length; i++) {
	    if (a[i] !== b[i]) {
	      match = false;
	      break;
	    }
	  }

	  return match;
	}

	/*!
	 * Extension to `iterableEqual` specifically
	 * for Node.js Buffers.
	 *
	 * @param {Buffer} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */

	function bufferEqual(a, b) {
	  if (!Buffer.isBuffer(b)) return false;
	  return iterableEqual(a, b);
	}

	/*!
	 * Block for `objectEqual` ensuring non-existing
	 * values don't get in.
	 *
	 * @param {Mixed} object
	 * @return {Boolean} result
	 */

	function isValue(a) {
	  return a !== null && a !== undefined;
	}

	/*!
	 * Recursively check the equality of two objects.
	 * Once basic sameness has been established it will
	 * defer to `deepEqual` for each enumerable key
	 * in the object.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */

	function objectEqual(a, b, m) {
	  if (!isValue(a) || !isValue(b)) {
	    return false;
	  }

	  if (a.prototype !== b.prototype) {
	    return false;
	  }

	  var i;
	  if (m) {
	    for (i = 0; i < m.length; i++) {
	      if ((m[i][0] === a && m[i][1] === b)
	      ||  (m[i][0] === b && m[i][1] === a)) {
	        return true;
	      }
	    }
	  } else {
	    m = [];
	  }

	  try {
	    var ka = enumerable(a);
	    var kb = enumerable(b);
	  } catch (ex) {
	    return false;
	  }

	  ka.sort();
	  kb.sort();

	  if (!iterableEqual(ka, kb)) {
	    return false;
	  }

	  m.push([ a, b ]);

	  var key;
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], m)) {
	      return false;
	    }
	  }

	  return true;
	}


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(208);


/***/ },
/* 208 */
/***/ function(module, exports) {

	/*!
	 * type-detect
	 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Primary Exports
	 */

	var exports = module.exports = getType;

	/*!
	 * Detectable javascript natives
	 */

	var natives = {
	    '[object Array]': 'array'
	  , '[object RegExp]': 'regexp'
	  , '[object Function]': 'function'
	  , '[object Arguments]': 'arguments'
	  , '[object Date]': 'date'
	};

	/**
	 * ### typeOf (obj)
	 *
	 * Use several different techniques to determine
	 * the type of object being tested.
	 *
	 *
	 * @param {Mixed} object
	 * @return {String} object type
	 * @api public
	 */

	function getType (obj) {
	  var str = Object.prototype.toString.call(obj);
	  if (natives[str]) return natives[str];
	  if (obj === null) return 'null';
	  if (obj === undefined) return 'undefined';
	  if (obj === Object(obj)) return 'object';
	  return typeof obj;
	}

	exports.Library = Library;

	/**
	 * ### Library
	 *
	 * Create a repository for custom type detection.
	 *
	 * ```js
	 * var lib = new type.Library;
	 * ```
	 *
	 */

	function Library () {
	  this.tests = {};
	}

	/**
	 * #### .of (obj)
	 *
	 * Expose replacement `typeof` detection to the library.
	 *
	 * ```js
	 * if ('string' === lib.of('hello world')) {
	 *   // ...
	 * }
	 * ```
	 *
	 * @param {Mixed} object to test
	 * @return {String} type
	 */

	Library.prototype.of = getType;

	/**
	 * #### .define (type, test)
	 *
	 * Add a test to for the `.test()` assertion.
	 *
	 * Can be defined as a regular expression:
	 *
	 * ```js
	 * lib.define('int', /^[0-9]+$/);
	 * ```
	 *
	 * ... or as a function:
	 *
	 * ```js
	 * lib.define('bln', function (obj) {
	 *   if ('boolean' === lib.of(obj)) return true;
	 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
	 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
	 *   return !! ~blns.indexOf(obj);
	 * });
	 * ```
	 *
	 * @param {String} type
	 * @param {RegExp|Function} test
	 * @api public
	 */

	Library.prototype.define = function (type, test) {
	  if (arguments.length === 1) return this.tests[type];
	  this.tests[type] = test;
	  return this;
	};

	/**
	 * #### .test (obj, test)
	 *
	 * Assert that an object is of type. Will first
	 * check natives, and if that does not pass it will
	 * use the user defined custom tests.
	 *
	 * ```js
	 * assert(lib.test('1', 'int'));
	 * assert(lib.test('yes', 'bln'));
	 * ```
	 *
	 * @param {Mixed} object
	 * @param {String} type
	 * @return {Boolean} result
	 * @api public
	 */

	Library.prototype.test = function (obj, type) {
	  if (type === getType(obj)) return true;
	  var test = this.tests[type];

	  if (test && 'regexp' === getType(test)) {
	    return test.test(obj);
	  } else if (test && 'function' === getType(test)) {
	    return test(obj);
	  } else {
	    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
	  }
	};


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(214)
	var ieee754 = __webpack_require__(215)
	var isArray = __webpack_require__(216)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    this.length = 0
	    this.parent = undefined
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	} else {
	  // pre-set for values that may exist in the future
	  Buffer.prototype.length = undefined
	  Buffer.prototype.parent = undefined
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(210).Buffer, (function() { return this; }())))

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var base64 = __webpack_require__(211)
	var ieee754 = __webpack_require__(212)
	var isArray = __webpack_require__(213)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Note:
	 *
	 * - Implementation must support adding new properties to `Uint8Array` instances.
	 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *    incorrect length in some situations.
	 *
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	 * get the Object implementation, which is slower but will work correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  function Foo () {}
	  try {
	    var buf = new ArrayBuffer(0)
	    var arr = new Uint8Array(buf)
	    arr.foo = function () { return 42 }
	    arr.constructor = Foo
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Foo && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
	    return fromTypedArray(that, object)
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  var res = ''
	  var tmp = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
	      tmp = ''
	    } else {
	      tmp += '%' + buf[i].toString(16)
	    }
	  }

	  return res + decodeUtf8Char(tmp)
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start

	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	  var i = 0

	  for (; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (leadSurrogate) {
	        // 2 leads in a row
	        if (codePoint < 0xDC00) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          leadSurrogate = codePoint
	          continue
	        } else {
	          // valid surrogate pair
	          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
	          leadSurrogate = null
	        }
	      } else {
	        // no lead yet

	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else {
	          // valid lead
	          leadSurrogate = codePoint
	          continue
	        }
	      }
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	      leadSurrogate = null
	    }

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x200000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(210).Buffer))

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 212 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 213 */
/***/ function(module, exports) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 215 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 216 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getPathValue utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * @see https://github.com/logicalparadox/filtr
	 * MIT Licensed
	 */

	var getPathInfo = __webpack_require__(218);

	/**
	 * ### .getPathValue(path, object)
	 *
	 * This allows the retrieval of values in an
	 * object given a string path.
	 *
	 *     var obj = {
	 *         prop1: {
	 *             arr: ['a', 'b', 'c']
	 *           , str: 'Hello'
	 *         }
	 *       , prop2: {
	 *             arr: [ { nested: 'Universe' } ]
	 *           , str: 'Hello again!'
	 *         }
	 *     }
	 *
	 * The following would be the results.
	 *
	 *     getPathValue('prop1.str', obj); // Hello
	 *     getPathValue('prop1.att[2]', obj); // b
	 *     getPathValue('prop2.arr[0].nested', obj); // Universe
	 *
	 * @param {String} path
	 * @param {Object} object
	 * @returns {Object} value or `undefined`
	 * @name getPathValue
	 * @api public
	 */
	module.exports = function(path, obj) {
	  var info = getPathInfo(path, obj);
	  return info.value;
	}; 


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getPathInfo utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var hasProperty = __webpack_require__(219);

	/**
	 * ### .getPathInfo(path, object)
	 *
	 * This allows the retrieval of property info in an
	 * object given a string path.
	 *
	 * The path info consists of an object with the
	 * following properties:
	 *
	 * * parent - The parent object of the property referenced by `path`
	 * * name - The name of the final property, a number if it was an array indexer
	 * * value - The value of the property, if it exists, otherwise `undefined`
	 * * exists - Whether the property exists or not
	 *
	 * @param {String} path
	 * @param {Object} object
	 * @returns {Object} info
	 * @name getPathInfo
	 * @api public
	 */

	module.exports = function getPathInfo(path, obj) {
	  var parsed = parsePath(path),
	      last = parsed[parsed.length - 1];

	  var info = {
	    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,
	    name: last.p || last.i,
	    value: _getPathValue(parsed, obj)
	  };
	  info.exists = hasProperty(info.name, info.parent);

	  return info;
	};


	/*!
	 * ## parsePath(path)
	 *
	 * Helper function used to parse string object
	 * paths. Use in conjunction with `_getPathValue`.
	 *
	 *      var parsed = parsePath('myobject.property.subprop');
	 *
	 * ### Paths:
	 *
	 * * Can be as near infinitely deep and nested
	 * * Arrays are also valid using the formal `myobject.document[3].property`.
	 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
	 *
	 * @param {String} path
	 * @returns {Object} parsed
	 * @api private
	 */

	function parsePath (path) {
	  var str = path.replace(/([^\\])\[/g, '$1.[')
	    , parts = str.match(/(\\\.|[^.]+?)+/g);
	  return parts.map(function (value) {
	    var re = /^\[(\d+)\]$/
	      , mArr = re.exec(value);
	    if (mArr) return { i: parseFloat(mArr[1]) };
	    else return { p: value.replace(/\\([.\[\]])/g, '$1') };
	  });
	}


	/*!
	 * ## _getPathValue(parsed, obj)
	 *
	 * Helper companion function for `.parsePath` that returns
	 * the value located at the parsed address.
	 *
	 *      var value = getPathValue(parsed, obj);
	 *
	 * @param {Object} parsed definition from `parsePath`.
	 * @param {Object} object to search against
	 * @param {Number} object to search against
	 * @returns {Object|Undefined} value
	 * @api private
	 */

	function _getPathValue (parsed, obj, index) {
	  var tmp = obj
	    , res;

	  index = (index === undefined ? parsed.length : index);

	  for (var i = 0, l = index; i < l; i++) {
	    var part = parsed[i];
	    if (tmp) {
	      if ('undefined' !== typeof part.p)
	        tmp = tmp[part.p];
	      else if ('undefined' !== typeof part.i)
	        tmp = tmp[part.i];
	      if (i == (l - 1)) res = tmp;
	    } else {
	      res = undefined;
	    }
	  }
	  return res;
	}


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - hasProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var type = __webpack_require__(193);

	/**
	 * ### .hasProperty(object, name)
	 *
	 * This allows checking whether an object has
	 * named property or numeric array index.
	 *
	 * Basically does the same thing as the `in`
	 * operator but works properly with natives
	 * and null/undefined values.
	 *
	 *     var obj = {
	 *         arr: ['a', 'b', 'c']
	 *       , str: 'Hello'
	 *     }
	 *
	 * The following would be the results.
	 *
	 *     hasProperty('str', obj);  // true
	 *     hasProperty('constructor', obj);  // true
	 *     hasProperty('bar', obj);  // false
	 *     
	 *     hasProperty('length', obj.str); // true
	 *     hasProperty(1, obj.str);  // true
	 *     hasProperty(5, obj.str);  // false
	 *
	 *     hasProperty('length', obj.arr);  // true
	 *     hasProperty(2, obj.arr);  // true
	 *     hasProperty(3, obj.arr);  // false
	 *
	 * @param {Objuect} object
	 * @param {String|Number} name
	 * @returns {Boolean} whether it exists
	 * @name getPathInfo
	 * @api public
	 */

	var literals = {
	    'number': Number
	  , 'string': String
	};

	module.exports = function hasProperty(name, obj) {
	  var ot = type(obj);

	  // Bad Object, obviously no props at all
	  if(ot === 'null' || ot === 'undefined')
	    return false;

	  // The `in` operator does not work with certain literals
	  // box these before the check
	  if(literals[ot] && typeof obj !== 'object')
	    obj = new literals[ot](obj);

	  return name in obj;
	};


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var config = __webpack_require__(203);
	var flag = __webpack_require__(192);

	/**
	 * ### addProperty (ctx, name, getter)
	 *
	 * Adds a property to the prototype of an object.
	 *
	 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.instanceof(Foo);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addProperty('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.be.foo;
	 *
	 * @param {Object} ctx object to which the property is added
	 * @param {String} name of property to add
	 * @param {Function} getter function to be used for name
	 * @name addProperty
	 * @api public
	 */

	module.exports = function (ctx, name, getter) {
	  Object.defineProperty(ctx, name,
	    { get: function addProperty() {
	        var old_ssfi = flag(this, 'ssfi');
	        if (old_ssfi && config.includeStack === false)
	          flag(this, 'ssfi', addProperty);

	        var result = getter.call(this);
	        return result === undefined ? this : result;
	      }
	    , configurable: true
	  });
	};


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var config = __webpack_require__(203);

	/**
	 * ### .addMethod (ctx, name, method)
	 *
	 * Adds a method to the prototype of an object.
	 *
	 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.equal(str);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addMethod('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(fooStr).to.be.foo('bar');
	 *
	 * @param {Object} ctx object to which the method is added
	 * @param {String} name of method to add
	 * @param {Function} method function to be used for name
	 * @name addMethod
	 * @api public
	 */
	var flag = __webpack_require__(192);

	module.exports = function (ctx, name, method) {
	  ctx[name] = function () {
	    var old_ssfi = flag(this, 'ssfi');
	    if (old_ssfi && config.includeStack === false)
	      flag(this, 'ssfi', ctx[name]);
	    var result = method.apply(this, arguments);
	    return result === undefined ? this : result;
	  };
	};


/***/ },
/* 222 */
/***/ function(module, exports) {

	/*!
	 * Chai - overwriteProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### overwriteProperty (ctx, name, fn)
	 *
	 * Overwites an already existing property getter and provides
	 * access to previous value. Must return function to use as getter.
	 *
	 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
	 *       return function () {
	 *         var obj = utils.flag(this, 'object');
	 *         if (obj instanceof Foo) {
	 *           new chai.Assertion(obj.name).to.equal('bar');
	 *         } else {
	 *           _super.call(this);
	 *         }
	 *       }
	 *     });
	 *
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteProperty('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.be.ok;
	 *
	 * @param {Object} ctx object whose property is to be overwritten
	 * @param {String} name of property to overwrite
	 * @param {Function} getter function that returns a getter function to be used for name
	 * @name overwriteProperty
	 * @api public
	 */

	module.exports = function (ctx, name, getter) {
	  var _get = Object.getOwnPropertyDescriptor(ctx, name)
	    , _super = function () {};

	  if (_get && 'function' === typeof _get.get)
	    _super = _get.get

	  Object.defineProperty(ctx, name,
	    { get: function () {
	        var result = getter(_super).call(this);
	        return result === undefined ? this : result;
	      }
	    , configurable: true
	  });
	};


/***/ },
/* 223 */
/***/ function(module, exports) {

	/*!
	 * Chai - overwriteMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### overwriteMethod (ctx, name, fn)
	 *
	 * Overwites an already existing method and provides
	 * access to previous function. Must return function
	 * to be used for name.
	 *
	 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
	 *       return function (str) {
	 *         var obj = utils.flag(this, 'object');
	 *         if (obj instanceof Foo) {
	 *           new chai.Assertion(obj.value).to.equal(str);
	 *         } else {
	 *           _super.apply(this, arguments);
	 *         }
	 *       }
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteMethod('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.equal('bar');
	 *
	 * @param {Object} ctx object whose method is to be overwritten
	 * @param {String} name of method to overwrite
	 * @param {Function} method function that returns a function to be used for name
	 * @name overwriteMethod
	 * @api public
	 */

	module.exports = function (ctx, name, method) {
	  var _method = ctx[name]
	    , _super = function () { return this; };

	  if (_method && 'function' === typeof _method)
	    _super = _method;

	  ctx[name] = function () {
	    var result = method(_super).apply(this, arguments);
	    return result === undefined ? this : result;
	  }
	};


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addChainingMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependencies
	 */

	var transferFlags = __webpack_require__(204);
	var flag = __webpack_require__(192);
	var config = __webpack_require__(203);

	/*!
	 * Module variables
	 */

	// Check whether `__proto__` is supported
	var hasProtoSupport = '__proto__' in Object;

	// Without `__proto__` support, this module will need to add properties to a function.
	// However, some Function.prototype methods cannot be overwritten,
	// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).
	var excludeNames = /^(?:length|name|arguments|caller)$/;

	// Cache `Function` properties
	var call  = Function.prototype.call,
	    apply = Function.prototype.apply;

	/**
	 * ### addChainableMethod (ctx, name, method, chainingBehavior)
	 *
	 * Adds a method to an object, such that the method can also be chained.
	 *
	 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.equal(str);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
	 *
	 * The result can then be used as both a method assertion, executing both `method` and
	 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
	 *
	 *     expect(fooStr).to.be.foo('bar');
	 *     expect(fooStr).to.be.foo.equal('foo');
	 *
	 * @param {Object} ctx object to which the method is added
	 * @param {String} name of method to add
	 * @param {Function} method function to be used for `name`, when called
	 * @param {Function} chainingBehavior function to be called every time the property is accessed
	 * @name addChainableMethod
	 * @api public
	 */

	module.exports = function (ctx, name, method, chainingBehavior) {
	  if (typeof chainingBehavior !== 'function') {
	    chainingBehavior = function () { };
	  }

	  var chainableBehavior = {
	      method: method
	    , chainingBehavior: chainingBehavior
	  };

	  // save the methods so we can overwrite them later, if we need to.
	  if (!ctx.__methods) {
	    ctx.__methods = {};
	  }
	  ctx.__methods[name] = chainableBehavior;

	  Object.defineProperty(ctx, name,
	    { get: function () {
	        chainableBehavior.chainingBehavior.call(this);

	        var assert = function assert() {
	          var old_ssfi = flag(this, 'ssfi');
	          if (old_ssfi && config.includeStack === false)
	            flag(this, 'ssfi', assert);
	          var result = chainableBehavior.method.apply(this, arguments);
	          return result === undefined ? this : result;
	        };

	        // Use `__proto__` if available
	        if (hasProtoSupport) {
	          // Inherit all properties from the object by replacing the `Function` prototype
	          var prototype = assert.__proto__ = Object.create(this);
	          // Restore the `call` and `apply` methods from `Function`
	          prototype.call = call;
	          prototype.apply = apply;
	        }
	        // Otherwise, redefine all properties (slow!)
	        else {
	          var asserterNames = Object.getOwnPropertyNames(ctx);
	          asserterNames.forEach(function (asserterName) {
	            if (!excludeNames.test(asserterName)) {
	              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
	              Object.defineProperty(assert, asserterName, pd);
	            }
	          });
	        }

	        transferFlags(this, assert);
	        return assert;
	      }
	    , configurable: true
	  });
	};


/***/ },
/* 225 */
/***/ function(module, exports) {

	/*!
	 * Chai - overwriteChainableMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)
	 *
	 * Overwites an already existing chainable method
	 * and provides access to the previous function or
	 * property.  Must return functions to be used for
	 * name.
	 *
	 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',
	 *       function (_super) {
	 *       }
	 *     , function (_super) {
	 *       }
	 *     );
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.have.length(3);
	 *     expect(myFoo).to.have.length.above(3);
	 *
	 * @param {Object} ctx object whose method / property is to be overwritten
	 * @param {String} name of method / property to overwrite
	 * @param {Function} method function that returns a function to be used for name
	 * @param {Function} chainingBehavior function that returns a function to be used for property
	 * @name overwriteChainableMethod
	 * @api public
	 */

	module.exports = function (ctx, name, method, chainingBehavior) {
	  var chainableBehavior = ctx.__methods[name];

	  var _chainingBehavior = chainableBehavior.chainingBehavior;
	  chainableBehavior.chainingBehavior = function () {
	    var result = chainingBehavior(_chainingBehavior).call(this);
	    return result === undefined ? this : result;
	  };

	  var _method = chainableBehavior.method;
	  chainableBehavior.method = function () {
	    var result = method(_method).apply(this, arguments);
	    return result === undefined ? this : result;
	  };
	};


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * http://chaijs.com
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var config = __webpack_require__(203);

	module.exports = function (_chai, util) {
	  /*!
	   * Module dependencies.
	   */

	  var AssertionError = _chai.AssertionError
	    , flag = util.flag;

	  /*!
	   * Module export.
	   */

	  _chai.Assertion = Assertion;

	  /*!
	   * Assertion Constructor
	   *
	   * Creates object for chaining.
	   *
	   * @api private
	   */

	  function Assertion (obj, msg, stack) {
	    flag(this, 'ssfi', stack || arguments.callee);
	    flag(this, 'object', obj);
	    flag(this, 'message', msg);
	  }

	  Object.defineProperty(Assertion, 'includeStack', {
	    get: function() {
	      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
	      return config.includeStack;
	    },
	    set: function(value) {
	      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
	      config.includeStack = value;
	    }
	  });

	  Object.defineProperty(Assertion, 'showDiff', {
	    get: function() {
	      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
	      return config.showDiff;
	    },
	    set: function(value) {
	      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
	      config.showDiff = value;
	    }
	  });

	  Assertion.addProperty = function (name, fn) {
	    util.addProperty(this.prototype, name, fn);
	  };

	  Assertion.addMethod = function (name, fn) {
	    util.addMethod(this.prototype, name, fn);
	  };

	  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
	    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
	  };

	  Assertion.overwriteProperty = function (name, fn) {
	    util.overwriteProperty(this.prototype, name, fn);
	  };

	  Assertion.overwriteMethod = function (name, fn) {
	    util.overwriteMethod(this.prototype, name, fn);
	  };

	  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
	    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
	  };

	  /**
	   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
	   *
	   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
	   *
	   * @name assert
	   * @param {Philosophical} expression to be tested
	   * @param {String|Function} message or function that returns message to display if expression fails
	   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
	   * @param {Mixed} expected value (remember to check for negation)
	   * @param {Mixed} actual (optional) will default to `this.obj`
	   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
	   * @api private
	   */

	  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
	    var ok = util.test(this, arguments);
	    if (true !== showDiff) showDiff = false;
	    if (true !== config.showDiff) showDiff = false;

	    if (!ok) {
	      var msg = util.getMessage(this, arguments)
	        , actual = util.getActual(this, arguments);
	      throw new AssertionError(msg, {
	          actual: actual
	        , expected: expected
	        , showDiff: showDiff
	      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
	    }
	  };

	  /*!
	   * ### ._obj
	   *
	   * Quick reference to stored `actual` value for plugin developers.
	   *
	   * @api private
	   */

	  Object.defineProperty(Assertion.prototype, '_obj',
	    { get: function () {
	        return flag(this, 'object');
	      }
	    , set: function (val) {
	        flag(this, 'object', val);
	      }
	  });
	};


/***/ },
/* 227 */
/***/ function(module, exports) {

	/*!
	 * chai
	 * http://chaijs.com
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	module.exports = function (chai, _) {
	  var Assertion = chai.Assertion
	    , toString = Object.prototype.toString
	    , flag = _.flag;

	  /**
	   * ### Language Chains
	   *
	   * The following are provided as chainable getters to
	   * improve the readability of your assertions. They
	   * do not provide testing capabilities unless they
	   * have been overwritten by a plugin.
	   *
	   * **Chains**
	   *
	   * - to
	   * - be
	   * - been
	   * - is
	   * - that
	   * - which
	   * - and
	   * - has
	   * - have
	   * - with
	   * - at
	   * - of
	   * - same
	   *
	   * @name language chains
	   * @api public
	   */

	  [ 'to', 'be', 'been'
	  , 'is', 'and', 'has', 'have'
	  , 'with', 'that', 'which', 'at'
	  , 'of', 'same' ].forEach(function (chain) {
	    Assertion.addProperty(chain, function () {
	      return this;
	    });
	  });

	  /**
	   * ### .not
	   *
	   * Negates any of assertions following in the chain.
	   *
	   *     expect(foo).to.not.equal('bar');
	   *     expect(goodFn).to.not.throw(Error);
	   *     expect({ foo: 'baz' }).to.have.property('foo')
	   *       .and.not.equal('bar');
	   *
	   * @name not
	   * @api public
	   */

	  Assertion.addProperty('not', function () {
	    flag(this, 'negate', true);
	  });

	  /**
	   * ### .deep
	   *
	   * Sets the `deep` flag, later used by the `equal` and
	   * `property` assertions.
	   *
	   *     expect(foo).to.deep.equal({ bar: 'baz' });
	   *     expect({ foo: { bar: { baz: 'quux' } } })
	   *       .to.have.deep.property('foo.bar.baz', 'quux');
	   *
	   * `.deep.property` special characters can be escaped
	   * by adding two slashes before the `.` or `[]`.
	   *
	   *     var deepCss = { '.link': { '[target]': 42 }};
	   *     expect(deepCss).to.have.deep.property('\\.link.\\[target\\]', 42);
	   *
	   * @name deep
	   * @api public
	   */

	  Assertion.addProperty('deep', function () {
	    flag(this, 'deep', true);
	  });

	  /**
	   * ### .any
	   *
	   * Sets the `any` flag, (opposite of the `all` flag)
	   * later used in the `keys` assertion.
	   *
	   *     expect(foo).to.have.any.keys('bar', 'baz');
	   *
	   * @name any
	   * @api public
	   */

	  Assertion.addProperty('any', function () {
	    flag(this, 'any', true);
	    flag(this, 'all', false)
	  });


	  /**
	   * ### .all
	   *
	   * Sets the `all` flag (opposite of the `any` flag)
	   * later used by the `keys` assertion.
	   *
	   *     expect(foo).to.have.all.keys('bar', 'baz');
	   *
	   * @name all
	   * @api public
	   */

	  Assertion.addProperty('all', function () {
	    flag(this, 'all', true);
	    flag(this, 'any', false);
	  });

	  /**
	   * ### .a(type)
	   *
	   * The `a` and `an` assertions are aliases that can be
	   * used either as language chains or to assert a value's
	   * type.
	   *
	   *     // typeof
	   *     expect('test').to.be.a('string');
	   *     expect({ foo: 'bar' }).to.be.an('object');
	   *     expect(null).to.be.a('null');
	   *     expect(undefined).to.be.an('undefined');
	   *     expect(new Error).to.be.an('error');
	   *     expect(new Promise).to.be.a('promise');
	   *     expect(new Float32Array()).to.be.a('float32array');
	   *     expect(Symbol()).to.be.a('symbol');
	   *
	   *     // es6 overrides
	   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');
	   *
	   *     // language chain
	   *     expect(foo).to.be.an.instanceof(Foo);
	   *
	   * @name a
	   * @alias an
	   * @param {String} type
	   * @param {String} message _optional_
	   * @api public
	   */

	  function an (type, msg) {
	    if (msg) flag(this, 'message', msg);
	    type = type.toLowerCase();
	    var obj = flag(this, 'object')
	      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';

	    this.assert(
	        type === _.type(obj)
	      , 'expected #{this} to be ' + article + type
	      , 'expected #{this} not to be ' + article + type
	    );
	  }

	  Assertion.addChainableMethod('an', an);
	  Assertion.addChainableMethod('a', an);

	  /**
	   * ### .include(value)
	   *
	   * The `include` and `contain` assertions can be used as either property
	   * based language chains or as methods to assert the inclusion of an object
	   * in an array or a substring in a string. When used as language chains,
	   * they toggle the `contains` flag for the `keys` assertion.
	   *
	   *     expect([1,2,3]).to.include(2);
	   *     expect('foobar').to.contain('foo');
	   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');
	   *
	   * @name include
	   * @alias contain
	   * @alias includes
	   * @alias contains
	   * @param {Object|String|Number} obj
	   * @param {String} message _optional_
	   * @api public
	   */

	  function includeChainingBehavior () {
	    flag(this, 'contains', true);
	  }

	  function include (val, msg) {
	    _.expectTypes(this, ['array', 'object', 'string']);

	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    var expected = false;

	    if (_.type(obj) === 'array' && _.type(val) === 'object') {
	      for (var i in obj) {
	        if (_.eql(obj[i], val)) {
	          expected = true;
	          break;
	        }
	      }
	    } else if (_.type(val) === 'object') {
	      if (!flag(this, 'negate')) {
	        for (var k in val) new Assertion(obj).property(k, val[k]);
	        return;
	      }
	      var subset = {};
	      for (var k in val) subset[k] = obj[k];
	      expected = _.eql(subset, val);
	    } else {
	      expected = (obj != undefined) && ~obj.indexOf(val);
	    }
	    this.assert(
	        expected
	      , 'expected #{this} to include ' + _.inspect(val)
	      , 'expected #{this} to not include ' + _.inspect(val));
	  }

	  Assertion.addChainableMethod('include', include, includeChainingBehavior);
	  Assertion.addChainableMethod('contain', include, includeChainingBehavior);
	  Assertion.addChainableMethod('contains', include, includeChainingBehavior);
	  Assertion.addChainableMethod('includes', include, includeChainingBehavior);

	  /**
	   * ### .ok
	   *
	   * Asserts that the target is truthy.
	   *
	   *     expect('everything').to.be.ok;
	   *     expect(1).to.be.ok;
	   *     expect(false).to.not.be.ok;
	   *     expect(undefined).to.not.be.ok;
	   *     expect(null).to.not.be.ok;
	   *
	   * @name ok
	   * @api public
	   */

	  Assertion.addProperty('ok', function () {
	    this.assert(
	        flag(this, 'object')
	      , 'expected #{this} to be truthy'
	      , 'expected #{this} to be falsy');
	  });

	  /**
	   * ### .true
	   *
	   * Asserts that the target is `true`.
	   *
	   *     expect(true).to.be.true;
	   *     expect(1).to.not.be.true;
	   *
	   * @name true
	   * @api public
	   */

	  Assertion.addProperty('true', function () {
	    this.assert(
	        true === flag(this, 'object')
	      , 'expected #{this} to be true'
	      , 'expected #{this} to be false'
	      , this.negate ? false : true
	    );
	  });

	  /**
	   * ### .false
	   *
	   * Asserts that the target is `false`.
	   *
	   *     expect(false).to.be.false;
	   *     expect(0).to.not.be.false;
	   *
	   * @name false
	   * @api public
	   */

	  Assertion.addProperty('false', function () {
	    this.assert(
	        false === flag(this, 'object')
	      , 'expected #{this} to be false'
	      , 'expected #{this} to be true'
	      , this.negate ? true : false
	    );
	  });

	  /**
	   * ### .null
	   *
	   * Asserts that the target is `null`.
	   *
	   *     expect(null).to.be.null;
	   *     expect(undefined).to.not.be.null;
	   *
	   * @name null
	   * @api public
	   */

	  Assertion.addProperty('null', function () {
	    this.assert(
	        null === flag(this, 'object')
	      , 'expected #{this} to be null'
	      , 'expected #{this} not to be null'
	    );
	  });

	  /**
	   * ### .undefined
	   *
	   * Asserts that the target is `undefined`.
	   *
	   *     expect(undefined).to.be.undefined;
	   *     expect(null).to.not.be.undefined;
	   *
	   * @name undefined
	   * @api public
	   */

	  Assertion.addProperty('undefined', function () {
	    this.assert(
	        undefined === flag(this, 'object')
	      , 'expected #{this} to be undefined'
	      , 'expected #{this} not to be undefined'
	    );
	  });

	  /**
	   * ### .NaN
	   * Asserts that the target is `NaN`.
	   *
	   *     expect('foo').to.be.NaN;
	   *     expect(4).not.to.be.NaN;
	   *
	   * @name NaN
	   * @api public
	   */

	  Assertion.addProperty('NaN', function () {
	    this.assert(
	        isNaN(flag(this, 'object'))
	        , 'expected #{this} to be NaN'
	        , 'expected #{this} not to be NaN'
	    );
	  });

	  /**
	   * ### .exist
	   *
	   * Asserts that the target is neither `null` nor `undefined`.
	   *
	   *     var foo = 'hi'
	   *       , bar = null
	   *       , baz;
	   *
	   *     expect(foo).to.exist;
	   *     expect(bar).to.not.exist;
	   *     expect(baz).to.not.exist;
	   *
	   * @name exist
	   * @api public
	   */

	  Assertion.addProperty('exist', function () {
	    this.assert(
	        null != flag(this, 'object')
	      , 'expected #{this} to exist'
	      , 'expected #{this} to not exist'
	    );
	  });


	  /**
	   * ### .empty
	   *
	   * Asserts that the target's length is `0`. For arrays and strings, it checks
	   * the `length` property. For objects, it gets the count of
	   * enumerable keys.
	   *
	   *     expect([]).to.be.empty;
	   *     expect('').to.be.empty;
	   *     expect({}).to.be.empty;
	   *
	   * @name empty
	   * @api public
	   */

	  Assertion.addProperty('empty', function () {
	    var obj = flag(this, 'object')
	      , expected = obj;

	    if (Array.isArray(obj) || 'string' === typeof object) {
	      expected = obj.length;
	    } else if (typeof obj === 'object') {
	      expected = Object.keys(obj).length;
	    }

	    this.assert(
	        !expected
	      , 'expected #{this} to be empty'
	      , 'expected #{this} not to be empty'
	    );
	  });

	  /**
	   * ### .arguments
	   *
	   * Asserts that the target is an arguments object.
	   *
	   *     function test () {
	   *       expect(arguments).to.be.arguments;
	   *     }
	   *
	   * @name arguments
	   * @alias Arguments
	   * @api public
	   */

	  function checkArguments () {
	    var obj = flag(this, 'object')
	      , type = Object.prototype.toString.call(obj);
	    this.assert(
	        '[object Arguments]' === type
	      , 'expected #{this} to be arguments but got ' + type
	      , 'expected #{this} to not be arguments'
	    );
	  }

	  Assertion.addProperty('arguments', checkArguments);
	  Assertion.addProperty('Arguments', checkArguments);

	  /**
	   * ### .equal(value)
	   *
	   * Asserts that the target is strictly equal (`===`) to `value`.
	   * Alternately, if the `deep` flag is set, asserts that
	   * the target is deeply equal to `value`.
	   *
	   *     expect('hello').to.equal('hello');
	   *     expect(42).to.equal(42);
	   *     expect(1).to.not.equal(true);
	   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });
	   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });
	   *
	   * @name equal
	   * @alias equals
	   * @alias eq
	   * @alias deep.equal
	   * @param {Mixed} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertEqual (val, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'deep')) {
	      return this.eql(val);
	    } else {
	      this.assert(
	          val === obj
	        , 'expected #{this} to equal #{exp}'
	        , 'expected #{this} to not equal #{exp}'
	        , val
	        , this._obj
	        , true
	      );
	    }
	  }

	  Assertion.addMethod('equal', assertEqual);
	  Assertion.addMethod('equals', assertEqual);
	  Assertion.addMethod('eq', assertEqual);

	  /**
	   * ### .eql(value)
	   *
	   * Asserts that the target is deeply equal to `value`.
	   *
	   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });
	   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);
	   *
	   * @name eql
	   * @alias eqls
	   * @param {Mixed} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertEql(obj, msg) {
	    if (msg) flag(this, 'message', msg);
	    this.assert(
	        _.eql(obj, flag(this, 'object'))
	      , 'expected #{this} to deeply equal #{exp}'
	      , 'expected #{this} to not deeply equal #{exp}'
	      , obj
	      , this._obj
	      , true
	    );
	  }

	  Assertion.addMethod('eql', assertEql);
	  Assertion.addMethod('eqls', assertEql);

	  /**
	   * ### .above(value)
	   *
	   * Asserts that the target is greater than `value`.
	   *
	   *     expect(10).to.be.above(5);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a minimum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.above(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
	   *
	   * @name above
	   * @alias gt
	   * @alias greaterThan
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertAbove (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len > n
	        , 'expected #{this} to have a length above #{exp} but got #{act}'
	        , 'expected #{this} to not have a length above #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj > n
	        , 'expected #{this} to be above ' + n
	        , 'expected #{this} to be at most ' + n
	      );
	    }
	  }

	  Assertion.addMethod('above', assertAbove);
	  Assertion.addMethod('gt', assertAbove);
	  Assertion.addMethod('greaterThan', assertAbove);

	  /**
	   * ### .least(value)
	   *
	   * Asserts that the target is greater than or equal to `value`.
	   *
	   *     expect(10).to.be.at.least(10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a minimum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.of.at.least(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);
	   *
	   * @name least
	   * @alias gte
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertLeast (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len >= n
	        , 'expected #{this} to have a length at least #{exp} but got #{act}'
	        , 'expected #{this} to have a length below #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj >= n
	        , 'expected #{this} to be at least ' + n
	        , 'expected #{this} to be below ' + n
	      );
	    }
	  }

	  Assertion.addMethod('least', assertLeast);
	  Assertion.addMethod('gte', assertLeast);

	  /**
	   * ### .below(value)
	   *
	   * Asserts that the target is less than `value`.
	   *
	   *     expect(5).to.be.below(10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a maximum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.below(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
	   *
	   * @name below
	   * @alias lt
	   * @alias lessThan
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertBelow (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len < n
	        , 'expected #{this} to have a length below #{exp} but got #{act}'
	        , 'expected #{this} to not have a length below #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj < n
	        , 'expected #{this} to be below ' + n
	        , 'expected #{this} to be at least ' + n
	      );
	    }
	  }

	  Assertion.addMethod('below', assertBelow);
	  Assertion.addMethod('lt', assertBelow);
	  Assertion.addMethod('lessThan', assertBelow);

	  /**
	   * ### .most(value)
	   *
	   * Asserts that the target is less than or equal to `value`.
	   *
	   *     expect(5).to.be.at.most(5);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a maximum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.of.at.most(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);
	   *
	   * @name most
	   * @alias lte
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertMost (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len <= n
	        , 'expected #{this} to have a length at most #{exp} but got #{act}'
	        , 'expected #{this} to have a length above #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj <= n
	        , 'expected #{this} to be at most ' + n
	        , 'expected #{this} to be above ' + n
	      );
	    }
	  }

	  Assertion.addMethod('most', assertMost);
	  Assertion.addMethod('lte', assertMost);

	  /**
	   * ### .within(start, finish)
	   *
	   * Asserts that the target is within a range.
	   *
	   *     expect(7).to.be.within(5,10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a length range. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.within(2,4);
	   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
	   *
	   * @name within
	   * @param {Number} start lowerbound inclusive
	   * @param {Number} finish upperbound inclusive
	   * @param {String} message _optional_
	   * @api public
	   */

	  Assertion.addMethod('within', function (start, finish, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object')
	      , range = start + '..' + finish;
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len >= start && len <= finish
	        , 'expected #{this} to have a length within ' + range
	        , 'expected #{this} to not have a length within ' + range
	      );
	    } else {
	      this.assert(
	          obj >= start && obj <= finish
	        , 'expected #{this} to be within ' + range
	        , 'expected #{this} to not be within ' + range
	      );
	    }
	  });

	  /**
	   * ### .instanceof(constructor)
	   *
	   * Asserts that the target is an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , Chai = new Tea('chai');
	   *
	   *     expect(Chai).to.be.an.instanceof(Tea);
	   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);
	   *
	   * @name instanceof
	   * @param {Constructor} constructor
	   * @param {String} message _optional_
	   * @alias instanceOf
	   * @api public
	   */

	  function assertInstanceOf (constructor, msg) {
	    if (msg) flag(this, 'message', msg);
	    var name = _.getName(constructor);
	    this.assert(
	        flag(this, 'object') instanceof constructor
	      , 'expected #{this} to be an instance of ' + name
	      , 'expected #{this} to not be an instance of ' + name
	    );
	  };

	  Assertion.addMethod('instanceof', assertInstanceOf);
	  Assertion.addMethod('instanceOf', assertInstanceOf);

	  /**
	   * ### .property(name, [value])
	   *
	   * Asserts that the target has a property `name`, optionally asserting that
	   * the value of that property is strictly equal to  `value`.
	   * If the `deep` flag is set, you can use dot- and bracket-notation for deep
	   * references into objects and arrays.
	   *
	   *     // simple referencing
	   *     var obj = { foo: 'bar' };
	   *     expect(obj).to.have.property('foo');
	   *     expect(obj).to.have.property('foo', 'bar');
	   *
	   *     // deep referencing
	   *     var deepObj = {
	   *         green: { tea: 'matcha' }
	   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]
	   *     };
	   *
	   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');
	   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');
	   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');
	   *
	   * You can also use an array as the starting point of a `deep.property`
	   * assertion, or traverse nested arrays.
	   *
	   *     var arr = [
	   *         [ 'chai', 'matcha', 'konacha' ]
	   *       , [ { tea: 'chai' }
	   *         , { tea: 'matcha' }
	   *         , { tea: 'konacha' } ]
	   *     ];
	   *
	   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');
	   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');
	   *
	   * Furthermore, `property` changes the subject of the assertion
	   * to be the value of that property from the original object. This
	   * permits for further chainable assertions on that property.
	   *
	   *     expect(obj).to.have.property('foo')
	   *       .that.is.a('string');
	   *     expect(deepObj).to.have.property('green')
	   *       .that.is.an('object')
	   *       .that.deep.equals({ tea: 'matcha' });
	   *     expect(deepObj).to.have.property('teas')
	   *       .that.is.an('array')
	   *       .with.deep.property('[2]')
	   *         .that.deep.equals({ tea: 'konacha' });
	   *
	   * Note that dots and bracket in `name` must be backslash-escaped when
	   * the `deep` flag is set, while they must NOT be escaped when the `deep`
	   * flag is not set.
	   *
	   *     // simple referencing
	   *     var css = { '.link[target]': 42 };
	   *     expect(css).to.have.property('.link[target]', 42);
	   *
	   *     // deep referencing
	   *     var deepCss = { '.link': { '[target]': 42 }};
	   *     expect(deepCss).to.have.deep.property('\\.link.\\[target\\]', 42);
	   *
	   * @name property
	   * @alias deep.property
	   * @param {String} name
	   * @param {Mixed} value (optional)
	   * @param {String} message _optional_
	   * @returns value of property for chaining
	   * @api public
	   */

	  Assertion.addMethod('property', function (name, val, msg) {
	    if (msg) flag(this, 'message', msg);

	    var isDeep = !!flag(this, 'deep')
	      , descriptor = isDeep ? 'deep property ' : 'property '
	      , negate = flag(this, 'negate')
	      , obj = flag(this, 'object')
	      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null
	      , hasProperty = isDeep
	        ? pathInfo.exists
	        : _.hasProperty(name, obj)
	      , value = isDeep
	        ? pathInfo.value
	        : obj[name];

	    if (negate && arguments.length > 1) {
	      if (undefined === value) {
	        msg = (msg != null) ? msg + ': ' : '';
	        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));
	      }
	    } else {
	      this.assert(
	          hasProperty
	        , 'expected #{this} to have a ' + descriptor + _.inspect(name)
	        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
	    }

	    if (arguments.length > 1) {
	      this.assert(
	          val === value
	        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
	        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'
	        , val
	        , value
	      );
	    }

	    flag(this, 'object', value);
	  });


	  /**
	   * ### .ownProperty(name)
	   *
	   * Asserts that the target has an own property `name`.
	   *
	   *     expect('test').to.have.ownProperty('length');
	   *
	   * @name ownProperty
	   * @alias haveOwnProperty
	   * @param {String} name
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertOwnProperty (name, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    this.assert(
	        obj.hasOwnProperty(name)
	      , 'expected #{this} to have own property ' + _.inspect(name)
	      , 'expected #{this} to not have own property ' + _.inspect(name)
	    );
	  }

	  Assertion.addMethod('ownProperty', assertOwnProperty);
	  Assertion.addMethod('haveOwnProperty', assertOwnProperty);

	  /**
	   * ### .ownPropertyDescriptor(name[, descriptor[, message]])
	   *
	   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.
	   *
	   *     expect('test').to.have.ownPropertyDescriptor('length');
	   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });
	   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });
	   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);
	   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');
	   *
	   * @name ownPropertyDescriptor
	   * @alias haveOwnPropertyDescriptor
	   * @param {String} name
	   * @param {Object} descriptor _optional_
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertOwnPropertyDescriptor (name, descriptor, msg) {
	    if (typeof descriptor === 'string') {
	      msg = descriptor;
	      descriptor = null;
	    }
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
	    if (actualDescriptor && descriptor) {
	      this.assert(
	          _.eql(descriptor, actualDescriptor)
	        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)
	        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)
	        , descriptor
	        , actualDescriptor
	        , true
	      );
	    } else {
	      this.assert(
	          actualDescriptor
	        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)
	        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)
	      );
	    }
	    flag(this, 'object', actualDescriptor);
	  }

	  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
	  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);

	  /**
	   * ### .length
	   *
	   * Sets the `doLength` flag later used as a chain precursor to a value
	   * comparison for the `length` property.
	   *
	   *     expect('foo').to.have.length.above(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
	   *     expect('foo').to.have.length.below(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
	   *     expect('foo').to.have.length.within(2,4);
	   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
	   *
	   * *Deprecation notice:* Using `length` as an assertion will be deprecated
	   * in version 2.4.0 and removed in 3.0.0. Code using the old style of
	   * asserting for `length` property value using `length(value)` should be
	   * switched to use `lengthOf(value)` instead.
	   *
	   * @name length
	   * @api public
	   */

	  /**
	   * ### .lengthOf(value[, message])
	   *
	   * Asserts that the target's `length` property has
	   * the expected value.
	   *
	   *     expect([ 1, 2, 3]).to.have.lengthOf(3);
	   *     expect('foobar').to.have.lengthOf(6);
	   *
	   * @name lengthOf
	   * @param {Number} length
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertLengthChain () {
	    flag(this, 'doLength', true);
	  }

	  function assertLength (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).to.have.property('length');
	    var len = obj.length;

	    this.assert(
	        len == n
	      , 'expected #{this} to have a length of #{exp} but got #{act}'
	      , 'expected #{this} to not have a length of #{act}'
	      , n
	      , len
	    );
	  }

	  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
	  Assertion.addMethod('lengthOf', assertLength);

	  /**
	   * ### .match(regexp)
	   *
	   * Asserts that the target matches a regular expression.
	   *
	   *     expect('foobar').to.match(/^foo/);
	   *
	   * @name match
	   * @alias matches
	   * @param {RegExp} RegularExpression
	   * @param {String} message _optional_
	   * @api public
	   */
	  function assertMatch(re, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    this.assert(
	        re.exec(obj)
	      , 'expected #{this} to match ' + re
	      , 'expected #{this} not to match ' + re
	    );
	  }

	  Assertion.addMethod('match', assertMatch);
	  Assertion.addMethod('matches', assertMatch);

	  /**
	   * ### .string(string)
	   *
	   * Asserts that the string target contains another string.
	   *
	   *     expect('foobar').to.have.string('bar');
	   *
	   * @name string
	   * @param {String} string
	   * @param {String} message _optional_
	   * @api public
	   */

	  Assertion.addMethod('string', function (str, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).is.a('string');

	    this.assert(
	        ~obj.indexOf(str)
	      , 'expected #{this} to contain ' + _.inspect(str)
	      , 'expected #{this} to not contain ' + _.inspect(str)
	    );
	  });


	  /**
	   * ### .keys(key1, [key2], [...])
	   *
	   * Asserts that the target contains any or all of the passed-in keys.
	   * Use in combination with `any`, `all`, `contains`, or `have` will affect
	   * what will pass.
	   *
	   * When used in conjunction with `any`, at least one key that is passed
	   * in must exist in the target object. This is regardless whether or not
	   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`
	   * should be used in the assertion. If neither are used, the assertion is
	   * defaulted to `all`.
	   *
	   * When both `all` and `contain` are used, the target object must have at
	   * least all of the passed-in keys but may have more keys not listed.
	   *
	   * When both `all` and `have` are used, the target object must both contain
	   * all of the passed-in keys AND the number of keys in the target object must
	   * match the number of keys passed in (in other words, a target object must
	   * have all and only all of the passed-in keys).
	   *
	   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');
	   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');
	   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');
	   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);
	   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});
	   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);
	   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});
	   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);
	   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});
	   *
	   *
	   * @name keys
	   * @alias key
	   * @param {...String|Array|Object} keys
	   * @api public
	   */

	  function assertKeys (keys) {
	    var obj = flag(this, 'object')
	      , str
	      , ok = true
	      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';

	    switch (_.type(keys)) {
	      case "array":
	        if (arguments.length > 1) throw (new Error(mixedArgsMsg));
	        break;
	      case "object":
	        if (arguments.length > 1) throw (new Error(mixedArgsMsg));
	        keys = Object.keys(keys);
	        break;
	      default:
	        keys = Array.prototype.slice.call(arguments);
	    }

	    if (!keys.length) throw new Error('keys required');

	    var actual = Object.keys(obj)
	      , expected = keys
	      , len = keys.length
	      , any = flag(this, 'any')
	      , all = flag(this, 'all');

	    if (!any && !all) {
	      all = true;
	    }

	    // Has any
	    if (any) {
	      var intersection = expected.filter(function(key) {
	        return ~actual.indexOf(key);
	      });
	      ok = intersection.length > 0;
	    }

	    // Has all
	    if (all) {
	      ok = keys.every(function(key){
	        return ~actual.indexOf(key);
	      });
	      if (!flag(this, 'negate') && !flag(this, 'contains')) {
	        ok = ok && keys.length == actual.length;
	      }
	    }

	    // Key string
	    if (len > 1) {
	      keys = keys.map(function(key){
	        return _.inspect(key);
	      });
	      var last = keys.pop();
	      if (all) {
	        str = keys.join(', ') + ', and ' + last;
	      }
	      if (any) {
	        str = keys.join(', ') + ', or ' + last;
	      }
	    } else {
	      str = _.inspect(keys[0]);
	    }

	    // Form
	    str = (len > 1 ? 'keys ' : 'key ') + str;

	    // Have / include
	    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;

	    // Assertion
	    this.assert(
	        ok
	      , 'expected #{this} to ' + str
	      , 'expected #{this} to not ' + str
	      , expected.slice(0).sort()
	      , actual.sort()
	      , true
	    );
	  }

	  Assertion.addMethod('keys', assertKeys);
	  Assertion.addMethod('key', assertKeys);

	  /**
	   * ### .throw(constructor)
	   *
	   * Asserts that the function target will throw a specific error, or specific type of error
	   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test
	   * for the error's message.
	   *
	   *     var err = new ReferenceError('This is a bad function.');
	   *     var fn = function () { throw err; }
	   *     expect(fn).to.throw(ReferenceError);
	   *     expect(fn).to.throw(Error);
	   *     expect(fn).to.throw(/bad function/);
	   *     expect(fn).to.not.throw('good function');
	   *     expect(fn).to.throw(ReferenceError, /bad function/);
	   *     expect(fn).to.throw(err);
	   *
	   * Please note that when a throw expectation is negated, it will check each
	   * parameter independently, starting with error constructor type. The appropriate way
	   * to check for the existence of a type of error but for a message that does not match
	   * is to use `and`.
	   *
	   *     expect(fn).to.throw(ReferenceError)
	   *        .and.not.throw(/good function/);
	   *
	   * @name throw
	   * @alias throws
	   * @alias Throw
	   * @param {ErrorConstructor} constructor
	   * @param {String|RegExp} expected error message
	   * @param {String} message _optional_
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @returns error for chaining (null if no error)
	   * @api public
	   */

	  function assertThrows (constructor, errMsg, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).is.a('function');

	    var thrown = false
	      , desiredError = null
	      , name = null
	      , thrownError = null;

	    if (arguments.length === 0) {
	      errMsg = null;
	      constructor = null;
	    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {
	      errMsg = constructor;
	      constructor = null;
	    } else if (constructor && constructor instanceof Error) {
	      desiredError = constructor;
	      constructor = null;
	      errMsg = null;
	    } else if (typeof constructor === 'function') {
	      name = constructor.prototype.name;
	      if (!name || (name === 'Error' && constructor !== Error)) {
	        name = constructor.name || (new constructor()).name;
	      }
	    } else {
	      constructor = null;
	    }

	    try {
	      obj();
	    } catch (err) {
	      // first, check desired error
	      if (desiredError) {
	        this.assert(
	            err === desiredError
	          , 'expected #{this} to throw #{exp} but #{act} was thrown'
	          , 'expected #{this} to not throw #{exp}'
	          , (desiredError instanceof Error ? desiredError.toString() : desiredError)
	          , (err instanceof Error ? err.toString() : err)
	        );

	        flag(this, 'object', err);
	        return this;
	      }

	      // next, check constructor
	      if (constructor) {
	        this.assert(
	            err instanceof constructor
	          , 'expected #{this} to throw #{exp} but #{act} was thrown'
	          , 'expected #{this} to not throw #{exp} but #{act} was thrown'
	          , name
	          , (err instanceof Error ? err.toString() : err)
	        );

	        if (!errMsg) {
	          flag(this, 'object', err);
	          return this;
	        }
	      }

	      // next, check message
	      var message = 'error' === _.type(err) && "message" in err
	        ? err.message
	        : '' + err;

	      if ((message != null) && errMsg && errMsg instanceof RegExp) {
	        this.assert(
	            errMsg.exec(message)
	          , 'expected #{this} to throw error matching #{exp} but got #{act}'
	          , 'expected #{this} to throw error not matching #{exp}'
	          , errMsg
	          , message
	        );

	        flag(this, 'object', err);
	        return this;
	      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {
	        this.assert(
	            ~message.indexOf(errMsg)
	          , 'expected #{this} to throw error including #{exp} but got #{act}'
	          , 'expected #{this} to throw error not including #{act}'
	          , errMsg
	          , message
	        );

	        flag(this, 'object', err);
	        return this;
	      } else {
	        thrown = true;
	        thrownError = err;
	      }
	    }

	    var actuallyGot = ''
	      , expectedThrown = name !== null
	        ? name
	        : desiredError
	          ? '#{exp}' //_.inspect(desiredError)
	          : 'an error';

	    if (thrown) {
	      actuallyGot = ' but #{act} was thrown'
	    }

	    this.assert(
	        thrown === true
	      , 'expected #{this} to throw ' + expectedThrown + actuallyGot
	      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot
	      , (desiredError instanceof Error ? desiredError.toString() : desiredError)
	      , (thrownError instanceof Error ? thrownError.toString() : thrownError)
	    );

	    flag(this, 'object', thrownError);
	  };

	  Assertion.addMethod('throw', assertThrows);
	  Assertion.addMethod('throws', assertThrows);
	  Assertion.addMethod('Throw', assertThrows);

	  /**
	   * ### .respondTo(method)
	   *
	   * Asserts that the object or class target will respond to a method.
	   *
	   *     Klass.prototype.bar = function(){};
	   *     expect(Klass).to.respondTo('bar');
	   *     expect(obj).to.respondTo('bar');
	   *
	   * To check if a constructor will respond to a static function,
	   * set the `itself` flag.
	   *
	   *     Klass.baz = function(){};
	   *     expect(Klass).itself.to.respondTo('baz');
	   *
	   * @name respondTo
	   * @alias respondsTo
	   * @param {String} method
	   * @param {String} message _optional_
	   * @api public
	   */

	  function respondTo (method, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object')
	      , itself = flag(this, 'itself')
	      , context = ('function' === _.type(obj) && !itself)
	        ? obj.prototype[method]
	        : obj[method];

	    this.assert(
	        'function' === typeof context
	      , 'expected #{this} to respond to ' + _.inspect(method)
	      , 'expected #{this} to not respond to ' + _.inspect(method)
	    );
	  }

	  Assertion.addMethod('respondTo', respondTo);
	  Assertion.addMethod('respondsTo', respondTo);

	  /**
	   * ### .itself
	   *
	   * Sets the `itself` flag, later used by the `respondTo` assertion.
	   *
	   *     function Foo() {}
	   *     Foo.bar = function() {}
	   *     Foo.prototype.baz = function() {}
	   *
	   *     expect(Foo).itself.to.respondTo('bar');
	   *     expect(Foo).itself.not.to.respondTo('baz');
	   *
	   * @name itself
	   * @api public
	   */

	  Assertion.addProperty('itself', function () {
	    flag(this, 'itself', true);
	  });

	  /**
	   * ### .satisfy(method)
	   *
	   * Asserts that the target passes a given truth test.
	   *
	   *     expect(1).to.satisfy(function(num) { return num > 0; });
	   *
	   * @name satisfy
	   * @alias satisfies
	   * @param {Function} matcher
	   * @param {String} message _optional_
	   * @api public
	   */

	  function satisfy (matcher, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    var result = matcher(obj);
	    this.assert(
	        result
	      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
	      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
	      , this.negate ? false : true
	      , result
	    );
	  }

	  Assertion.addMethod('satisfy', satisfy);
	  Assertion.addMethod('satisfies', satisfy);

	  /**
	   * ### .closeTo(expected, delta)
	   *
	   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
	   *
	   *     expect(1.5).to.be.closeTo(1, 0.5);
	   *
	   * @name closeTo
	   * @alias approximately
	   * @param {Number} expected
	   * @param {Number} delta
	   * @param {String} message _optional_
	   * @api public
	   */

	  function closeTo(expected, delta, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');

	    new Assertion(obj, msg).is.a('number');
	    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {
	      throw new Error('the arguments to closeTo or approximately must be numbers');
	    }

	    this.assert(
	        Math.abs(obj - expected) <= delta
	      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
	      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
	    );
	  }

	  Assertion.addMethod('closeTo', closeTo);
	  Assertion.addMethod('approximately', closeTo);

	  function isSubsetOf(subset, superset, cmp) {
	    return subset.every(function(elem) {
	      if (!cmp) return superset.indexOf(elem) !== -1;

	      return superset.some(function(elem2) {
	        return cmp(elem, elem2);
	      });
	    })
	  }

	  /**
	   * ### .members(set)
	   *
	   * Asserts that the target is a superset of `set`,
	   * or that the target and `set` have the same strictly-equal (===) members.
	   * Alternately, if the `deep` flag is set, set members are compared for deep
	   * equality.
	   *
	   *     expect([1, 2, 3]).to.include.members([3, 2]);
	   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);
	   *
	   *     expect([4, 2]).to.have.members([2, 4]);
	   *     expect([5, 2]).to.not.have.members([5, 2, 1]);
	   *
	   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);
	   *
	   * @name members
	   * @param {Array} set
	   * @param {String} message _optional_
	   * @api public
	   */

	  Assertion.addMethod('members', function (subset, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');

	    new Assertion(obj).to.be.an('array');
	    new Assertion(subset).to.be.an('array');

	    var cmp = flag(this, 'deep') ? _.eql : undefined;

	    if (flag(this, 'contains')) {
	      return this.assert(
	          isSubsetOf(subset, obj, cmp)
	        , 'expected #{this} to be a superset of #{act}'
	        , 'expected #{this} to not be a superset of #{act}'
	        , obj
	        , subset
	      );
	    }

	    this.assert(
	        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)
	        , 'expected #{this} to have the same members as #{act}'
	        , 'expected #{this} to not have the same members as #{act}'
	        , obj
	        , subset
	    );
	  });

	  /**
	   * ### .oneOf(list)
	   *
	   * Assert that a value appears somewhere in the top level of array `list`.
	   *
	   *     expect('a').to.be.oneOf(['a', 'b', 'c']);
	   *     expect(9).to.not.be.oneOf(['z']);
	   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);
	   *
	   *     var three = [3];
	   *     // for object-types, contents are not compared
	   *     expect(three).to.not.be.oneOf([1, 2, [3]]);
	   *     // comparing references works
	   *     expect(three).to.be.oneOf([1, 2, three]);
	   *
	   * @name oneOf
	   * @param {Array<*>} list
	   * @param {String} message _optional_
	   * @api public
	   */

	  function oneOf (list, msg) {
	    if (msg) flag(this, 'message', msg);
	    var expected = flag(this, 'object');
	    new Assertion(list).to.be.an('array');

	    this.assert(
	        list.indexOf(expected) > -1
	      , 'expected #{this} to be one of #{exp}'
	      , 'expected #{this} to not be one of #{exp}'
	      , list
	      , expected
	    );
	  }

	  Assertion.addMethod('oneOf', oneOf);


	  /**
	   * ### .change(function)
	   *
	   * Asserts that a function changes an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val += 3 };
	   *     var noChangeFn = function() { return 'foo' + 'bar'; }
	   *     expect(fn).to.change(obj, 'val');
	   *     expect(noChangFn).to.not.change(obj, 'val')
	   *
	   * @name change
	   * @alias changes
	   * @alias Change
	   * @param {String} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertChanges (object, prop, msg) {
	    if (msg) flag(this, 'message', msg);
	    var fn = flag(this, 'object');
	    new Assertion(object, msg).to.have.property(prop);
	    new Assertion(fn).is.a('function');

	    var initial = object[prop];
	    fn();

	    this.assert(
	      initial !== object[prop]
	      , 'expected .' + prop + ' to change'
	      , 'expected .' + prop + ' to not change'
	    );
	  }

	  Assertion.addChainableMethod('change', assertChanges);
	  Assertion.addChainableMethod('changes', assertChanges);

	  /**
	   * ### .increase(function)
	   *
	   * Asserts that a function increases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 15 };
	   *     expect(fn).to.increase(obj, 'val');
	   *
	   * @name increase
	   * @alias increases
	   * @alias Increase
	   * @param {String} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertIncreases (object, prop, msg) {
	    if (msg) flag(this, 'message', msg);
	    var fn = flag(this, 'object');
	    new Assertion(object, msg).to.have.property(prop);
	    new Assertion(fn).is.a('function');

	    var initial = object[prop];
	    fn();

	    this.assert(
	      object[prop] - initial > 0
	      , 'expected .' + prop + ' to increase'
	      , 'expected .' + prop + ' to not increase'
	    );
	  }

	  Assertion.addChainableMethod('increase', assertIncreases);
	  Assertion.addChainableMethod('increases', assertIncreases);

	  /**
	   * ### .decrease(function)
	   *
	   * Asserts that a function decreases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 5 };
	   *     expect(fn).to.decrease(obj, 'val');
	   *
	   * @name decrease
	   * @alias decreases
	   * @alias Decrease
	   * @param {String} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertDecreases (object, prop, msg) {
	    if (msg) flag(this, 'message', msg);
	    var fn = flag(this, 'object');
	    new Assertion(object, msg).to.have.property(prop);
	    new Assertion(fn).is.a('function');

	    var initial = object[prop];
	    fn();

	    this.assert(
	      object[prop] - initial < 0
	      , 'expected .' + prop + ' to decrease'
	      , 'expected .' + prop + ' to not decrease'
	    );
	  }

	  Assertion.addChainableMethod('decrease', assertDecreases);
	  Assertion.addChainableMethod('decreases', assertDecreases);

	  /**
	   * ### .extensible
	   *
	   * Asserts that the target is extensible (can have new properties added to
	   * it).
	   *
	   *     var nonExtensibleObject = Object.preventExtensions({});
	   *     var sealedObject = Object.seal({});
	   *     var frozenObject = Object.freeze({});
	   *
	   *     expect({}).to.be.extensible;
	   *     expect(nonExtensibleObject).to.not.be.extensible;
	   *     expect(sealedObject).to.not.be.extensible;
	   *     expect(frozenObject).to.not.be.extensible;
	   *
	   * @name extensible
	   * @api public
	   */

	  Assertion.addProperty('extensible', function() {
	    var obj = flag(this, 'object');

	    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.
	    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
	    // The following provides ES6 behavior when a TypeError is thrown under ES5.

	    var isExtensible;

	    try {
	      isExtensible = Object.isExtensible(obj);
	    } catch (err) {
	      if (err instanceof TypeError) isExtensible = false;
	      else throw err;
	    }

	    this.assert(
	      isExtensible
	      , 'expected #{this} to be extensible'
	      , 'expected #{this} to not be extensible'
	    );
	  });

	  /**
	   * ### .sealed
	   *
	   * Asserts that the target is sealed (cannot have new properties added to it
	   * and its existing properties cannot be removed).
	   *
	   *     var sealedObject = Object.seal({});
	   *     var frozenObject = Object.freeze({});
	   *
	   *     expect(sealedObject).to.be.sealed;
	   *     expect(frozenObject).to.be.sealed;
	   *     expect({}).to.not.be.sealed;
	   *
	   * @name sealed
	   * @api public
	   */

	  Assertion.addProperty('sealed', function() {
	    var obj = flag(this, 'object');

	    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.
	    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.
	    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
	    // The following provides ES6 behavior when a TypeError is thrown under ES5.

	    var isSealed;

	    try {
	      isSealed = Object.isSealed(obj);
	    } catch (err) {
	      if (err instanceof TypeError) isSealed = true;
	      else throw err;
	    }

	    this.assert(
	      isSealed
	      , 'expected #{this} to be sealed'
	      , 'expected #{this} to not be sealed'
	    );
	  });

	  /**
	   * ### .frozen
	   *
	   * Asserts that the target is frozen (cannot have new properties added to it
	   * and its existing properties cannot be modified).
	   *
	   *     var frozenObject = Object.freeze({});
	   *
	   *     expect(frozenObject).to.be.frozen;
	   *     expect({}).to.not.be.frozen;
	   *
	   * @name frozen
	   * @api public
	   */

	  Assertion.addProperty('frozen', function() {
	    var obj = flag(this, 'object');

	    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.
	    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.
	    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
	    // The following provides ES6 behavior when a TypeError is thrown under ES5.

	    var isFrozen;

	    try {
	      isFrozen = Object.isFrozen(obj);
	    } catch (err) {
	      if (err instanceof TypeError) isFrozen = true;
	      else throw err;
	    }

	    this.assert(
	      isFrozen
	      , 'expected #{this} to be frozen'
	      , 'expected #{this} to not be frozen'
	    );
	  });
	};


/***/ },
/* 228 */
/***/ function(module, exports) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	module.exports = function (chai, util) {
	  chai.expect = function (val, message) {
	    return new chai.Assertion(val, message);
	  };

	  /**
	   * ### .fail(actual, expected, [message], [operator])
	   *
	   * Throw a failure.
	   *
	   * @name fail
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @param {String} operator
	   * @api public
	   */

	  chai.expect.fail = function (actual, expected, message, operator) {
	    message = message || 'expect.fail()';
	    throw new chai.AssertionError(message, {
	        actual: actual
	      , expected: expected
	      , operator: operator
	    }, chai.expect.fail);
	  };
	};


/***/ },
/* 229 */
/***/ function(module, exports) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	module.exports = function (chai, util) {
	  var Assertion = chai.Assertion;

	  function loadShould () {
	    // explicitly define this method as function as to have it's name to include as `ssfi`
	    function shouldGetter() {
	      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {
	        return new Assertion(this.valueOf(), null, shouldGetter);
	      }
	      return new Assertion(this, null, shouldGetter);
	    }
	    function shouldSetter(value) {
	      // See https://github.com/chaijs/chai/issues/86: this makes
	      // `whatever.should = someValue` actually set `someValue`, which is
	      // especially useful for `global.should = require('chai').should()`.
	      //
	      // Note that we have to use [[DefineProperty]] instead of [[Put]]
	      // since otherwise we would trigger this very setter!
	      Object.defineProperty(this, 'should', {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	    }
	    // modify Object.prototype to have `should`
	    Object.defineProperty(Object.prototype, 'should', {
	      set: shouldSetter
	      , get: shouldGetter
	      , configurable: true
	    });

	    var should = {};

	    /**
	     * ### .fail(actual, expected, [message], [operator])
	     *
	     * Throw a failure.
	     *
	     * @name fail
	     * @param {Mixed} actual
	     * @param {Mixed} expected
	     * @param {String} message
	     * @param {String} operator
	     * @api public
	     */

	    should.fail = function (actual, expected, message, operator) {
	      message = message || 'should.fail()';
	      throw new chai.AssertionError(message, {
	          actual: actual
	        , expected: expected
	        , operator: operator
	      }, should.fail);
	    };

	    should.equal = function (val1, val2, msg) {
	      new Assertion(val1, msg).to.equal(val2);
	    };

	    should.Throw = function (fn, errt, errs, msg) {
	      new Assertion(fn, msg).to.Throw(errt, errs);
	    };

	    should.exist = function (val, msg) {
	      new Assertion(val, msg).to.exist;
	    }

	    // negation
	    should.not = {}

	    should.not.equal = function (val1, val2, msg) {
	      new Assertion(val1, msg).to.not.equal(val2);
	    };

	    should.not.Throw = function (fn, errt, errs, msg) {
	      new Assertion(fn, msg).to.not.Throw(errt, errs);
	    };

	    should.not.exist = function (val, msg) {
	      new Assertion(val, msg).to.not.exist;
	    }

	    should['throw'] = should['Throw'];
	    should.not['throw'] = should.not['Throw'];

	    return should;
	  };

	  chai.should = loadShould;
	  chai.Should = loadShould;
	};


/***/ },
/* 230 */
/***/ function(module, exports) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */


	module.exports = function (chai, util) {

	  /*!
	   * Chai dependencies.
	   */

	  var Assertion = chai.Assertion
	    , flag = util.flag;

	  /*!
	   * Module export.
	   */

	  /**
	   * ### assert(expression, message)
	   *
	   * Write your own test expressions.
	   *
	   *     assert('foo' !== 'bar', 'foo is not bar');
	   *     assert(Array.isArray([]), 'empty arrays are arrays');
	   *
	   * @param {Mixed} expression to test for truthiness
	   * @param {String} message to display on error
	   * @name assert
	   * @api public
	   */

	  var assert = chai.assert = function (express, errmsg) {
	    var test = new Assertion(null, null, chai.assert);
	    test.assert(
	        express
	      , errmsg
	      , '[ negation message unavailable ]'
	    );
	  };

	  /**
	   * ### .fail(actual, expected, [message], [operator])
	   *
	   * Throw a failure. Node.js `assert` module-compatible.
	   *
	   * @name fail
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @param {String} operator
	   * @api public
	   */

	  assert.fail = function (actual, expected, message, operator) {
	    message = message || 'assert.fail()';
	    throw new chai.AssertionError(message, {
	        actual: actual
	      , expected: expected
	      , operator: operator
	    }, assert.fail);
	  };

	  /**
	   * ### .isOk(object, [message])
	   *
	   * Asserts that `object` is truthy.
	   *
	   *     assert.isOk('everything', 'everything is ok');
	   *     assert.isOk(false, 'this will fail');
	   *
	   * @name isOk
	   * @alias ok
	   * @param {Mixed} object to test
	   * @param {String} message
	   * @api public
	   */

	  assert.isOk = function (val, msg) {
	    new Assertion(val, msg).is.ok;
	  };

	  /**
	   * ### .isNotOk(object, [message])
	   *
	   * Asserts that `object` is falsy.
	   *
	   *     assert.isNotOk('everything', 'this will fail');
	   *     assert.isNotOk(false, 'this will pass');
	   *
	   * @name isNotOk
	   * @alias notOk
	   * @param {Mixed} object to test
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotOk = function (val, msg) {
	    new Assertion(val, msg).is.not.ok;
	  };

	  /**
	   * ### .equal(actual, expected, [message])
	   *
	   * Asserts non-strict equality (`==`) of `actual` and `expected`.
	   *
	   *     assert.equal(3, '3', '== coerces values to strings');
	   *
	   * @name equal
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.equal = function (act, exp, msg) {
	    var test = new Assertion(act, msg, assert.equal);

	    test.assert(
	        exp == flag(test, 'object')
	      , 'expected #{this} to equal #{exp}'
	      , 'expected #{this} to not equal #{act}'
	      , exp
	      , act
	    );
	  };

	  /**
	   * ### .notEqual(actual, expected, [message])
	   *
	   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
	   *
	   *     assert.notEqual(3, 4, 'these numbers are not equal');
	   *
	   * @name notEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.notEqual = function (act, exp, msg) {
	    var test = new Assertion(act, msg, assert.notEqual);

	    test.assert(
	        exp != flag(test, 'object')
	      , 'expected #{this} to not equal #{exp}'
	      , 'expected #{this} to equal #{act}'
	      , exp
	      , act
	    );
	  };

	  /**
	   * ### .strictEqual(actual, expected, [message])
	   *
	   * Asserts strict equality (`===`) of `actual` and `expected`.
	   *
	   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
	   *
	   * @name strictEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.strictEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.equal(exp);
	  };

	  /**
	   * ### .notStrictEqual(actual, expected, [message])
	   *
	   * Asserts strict inequality (`!==`) of `actual` and `expected`.
	   *
	   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
	   *
	   * @name notStrictEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.notStrictEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.not.equal(exp);
	  };

	  /**
	   * ### .deepEqual(actual, expected, [message])
	   *
	   * Asserts that `actual` is deeply equal to `expected`.
	   *
	   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
	   *
	   * @name deepEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.deepEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.eql(exp);
	  };

	  /**
	   * ### .notDeepEqual(actual, expected, [message])
	   *
	   * Assert that `actual` is not deeply equal to `expected`.
	   *
	   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
	   *
	   * @name notDeepEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.notDeepEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.not.eql(exp);
	  };

	   /**
	   * ### .isAbove(valueToCheck, valueToBeAbove, [message])
	   *
	   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`
	   *
	   *     assert.isAbove(5, 2, '5 is strictly greater than 2');
	   *
	   * @name isAbove
	   * @param {Mixed} valueToCheck
	   * @param {Mixed} valueToBeAbove
	   * @param {String} message
	   * @api public
	   */

	  assert.isAbove = function (val, abv, msg) {
	    new Assertion(val, msg).to.be.above(abv);
	  };

	   /**
	   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])
	   *
	   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`
	   *
	   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');
	   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');
	   *
	   * @name isAtLeast
	   * @param {Mixed} valueToCheck
	   * @param {Mixed} valueToBeAtLeast
	   * @param {String} message
	   * @api public
	   */

	  assert.isAtLeast = function (val, atlst, msg) {
	    new Assertion(val, msg).to.be.least(atlst);
	  };

	   /**
	   * ### .isBelow(valueToCheck, valueToBeBelow, [message])
	   *
	   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`
	   *
	   *     assert.isBelow(3, 6, '3 is strictly less than 6');
	   *
	   * @name isBelow
	   * @param {Mixed} valueToCheck
	   * @param {Mixed} valueToBeBelow
	   * @param {String} message
	   * @api public
	   */

	  assert.isBelow = function (val, blw, msg) {
	    new Assertion(val, msg).to.be.below(blw);
	  };

	   /**
	   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])
	   *
	   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`
	   *
	   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');
	   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');
	   *
	   * @name isAtMost
	   * @param {Mixed} valueToCheck
	   * @param {Mixed} valueToBeAtMost
	   * @param {String} message
	   * @api public
	   */

	  assert.isAtMost = function (val, atmst, msg) {
	    new Assertion(val, msg).to.be.most(atmst);
	  };

	  /**
	   * ### .isTrue(value, [message])
	   *
	   * Asserts that `value` is true.
	   *
	   *     var teaServed = true;
	   *     assert.isTrue(teaServed, 'the tea has been served');
	   *
	   * @name isTrue
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isTrue = function (val, msg) {
	    new Assertion(val, msg).is['true'];
	  };

	  /**
	   * ### .isNotTrue(value, [message])
	   *
	   * Asserts that `value` is not true.
	   *
	   *     var tea = 'tasty chai';
	   *     assert.isNotTrue(tea, 'great, time for tea!');
	   *
	   * @name isNotTrue
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotTrue = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(true);
	  };

	  /**
	   * ### .isFalse(value, [message])
	   *
	   * Asserts that `value` is false.
	   *
	   *     var teaServed = false;
	   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
	   *
	   * @name isFalse
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isFalse = function (val, msg) {
	    new Assertion(val, msg).is['false'];
	  };

	  /**
	   * ### .isNotFalse(value, [message])
	   *
	   * Asserts that `value` is not false.
	   *
	   *     var tea = 'tasty chai';
	   *     assert.isNotFalse(tea, 'great, time for tea!');
	   *
	   * @name isNotFalse
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotFalse = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(false);
	  };

	  /**
	   * ### .isNull(value, [message])
	   *
	   * Asserts that `value` is null.
	   *
	   *     assert.isNull(err, 'there was no error');
	   *
	   * @name isNull
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNull = function (val, msg) {
	    new Assertion(val, msg).to.equal(null);
	  };

	  /**
	   * ### .isNotNull(value, [message])
	   *
	   * Asserts that `value` is not null.
	   *
	   *     var tea = 'tasty chai';
	   *     assert.isNotNull(tea, 'great, time for tea!');
	   *
	   * @name isNotNull
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotNull = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(null);
	  };

	  /**
	   * ### .isNaN
	   * Asserts that value is NaN
	   *
	   *    assert.isNaN('foo', 'foo is NaN');
	   *
	   * @name isNaN
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNaN = function (val, msg) {
	    new Assertion(val, msg).to.be.NaN;
	  };

	  /**
	   * ### .isNotNaN
	   * Asserts that value is not NaN
	   *
	   *    assert.isNotNaN(4, '4 is not NaN');
	   *
	   * @name isNotNaN
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	  assert.isNotNaN = function (val, msg) {
	    new Assertion(val, msg).not.to.be.NaN;
	  };

	  /**
	   * ### .isUndefined(value, [message])
	   *
	   * Asserts that `value` is `undefined`.
	   *
	   *     var tea;
	   *     assert.isUndefined(tea, 'no tea defined');
	   *
	   * @name isUndefined
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isUndefined = function (val, msg) {
	    new Assertion(val, msg).to.equal(undefined);
	  };

	  /**
	   * ### .isDefined(value, [message])
	   *
	   * Asserts that `value` is not `undefined`.
	   *
	   *     var tea = 'cup of chai';
	   *     assert.isDefined(tea, 'tea has been defined');
	   *
	   * @name isDefined
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isDefined = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(undefined);
	  };

	  /**
	   * ### .isFunction(value, [message])
	   *
	   * Asserts that `value` is a function.
	   *
	   *     function serveTea() { return 'cup of tea'; };
	   *     assert.isFunction(serveTea, 'great, we can have tea now');
	   *
	   * @name isFunction
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isFunction = function (val, msg) {
	    new Assertion(val, msg).to.be.a('function');
	  };

	  /**
	   * ### .isNotFunction(value, [message])
	   *
	   * Asserts that `value` is _not_ a function.
	   *
	   *     var serveTea = [ 'heat', 'pour', 'sip' ];
	   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
	   *
	   * @name isNotFunction
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotFunction = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('function');
	  };

	  /**
	   * ### .isObject(value, [message])
	   *
	   * Asserts that `value` is an object (as revealed by
	   * `Object.prototype.toString`).
	   *
	   *     var selection = { name: 'Chai', serve: 'with spices' };
	   *     assert.isObject(selection, 'tea selection is an object');
	   *
	   * @name isObject
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isObject = function (val, msg) {
	    new Assertion(val, msg).to.be.a('object');
	  };

	  /**
	   * ### .isNotObject(value, [message])
	   *
	   * Asserts that `value` is _not_ an object.
	   *
	   *     var selection = 'chai'
	   *     assert.isNotObject(selection, 'tea selection is not an object');
	   *     assert.isNotObject(null, 'null is not an object');
	   *
	   * @name isNotObject
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotObject = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('object');
	  };

	  /**
	   * ### .isArray(value, [message])
	   *
	   * Asserts that `value` is an array.
	   *
	   *     var menu = [ 'green', 'chai', 'oolong' ];
	   *     assert.isArray(menu, 'what kind of tea do we want?');
	   *
	   * @name isArray
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isArray = function (val, msg) {
	    new Assertion(val, msg).to.be.an('array');
	  };

	  /**
	   * ### .isNotArray(value, [message])
	   *
	   * Asserts that `value` is _not_ an array.
	   *
	   *     var menu = 'green|chai|oolong';
	   *     assert.isNotArray(menu, 'what kind of tea do we want?');
	   *
	   * @name isNotArray
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotArray = function (val, msg) {
	    new Assertion(val, msg).to.not.be.an('array');
	  };

	  /**
	   * ### .isString(value, [message])
	   *
	   * Asserts that `value` is a string.
	   *
	   *     var teaOrder = 'chai';
	   *     assert.isString(teaOrder, 'order placed');
	   *
	   * @name isString
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isString = function (val, msg) {
	    new Assertion(val, msg).to.be.a('string');
	  };

	  /**
	   * ### .isNotString(value, [message])
	   *
	   * Asserts that `value` is _not_ a string.
	   *
	   *     var teaOrder = 4;
	   *     assert.isNotString(teaOrder, 'order placed');
	   *
	   * @name isNotString
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotString = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('string');
	  };

	  /**
	   * ### .isNumber(value, [message])
	   *
	   * Asserts that `value` is a number.
	   *
	   *     var cups = 2;
	   *     assert.isNumber(cups, 'how many cups');
	   *
	   * @name isNumber
	   * @param {Number} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNumber = function (val, msg) {
	    new Assertion(val, msg).to.be.a('number');
	  };

	  /**
	   * ### .isNotNumber(value, [message])
	   *
	   * Asserts that `value` is _not_ a number.
	   *
	   *     var cups = '2 cups please';
	   *     assert.isNotNumber(cups, 'how many cups');
	   *
	   * @name isNotNumber
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotNumber = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('number');
	  };

	  /**
	   * ### .isBoolean(value, [message])
	   *
	   * Asserts that `value` is a boolean.
	   *
	   *     var teaReady = true
	   *       , teaServed = false;
	   *
	   *     assert.isBoolean(teaReady, 'is the tea ready');
	   *     assert.isBoolean(teaServed, 'has tea been served');
	   *
	   * @name isBoolean
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isBoolean = function (val, msg) {
	    new Assertion(val, msg).to.be.a('boolean');
	  };

	  /**
	   * ### .isNotBoolean(value, [message])
	   *
	   * Asserts that `value` is _not_ a boolean.
	   *
	   *     var teaReady = 'yep'
	   *       , teaServed = 'nope';
	   *
	   *     assert.isNotBoolean(teaReady, 'is the tea ready');
	   *     assert.isNotBoolean(teaServed, 'has tea been served');
	   *
	   * @name isNotBoolean
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotBoolean = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('boolean');
	  };

	  /**
	   * ### .typeOf(value, name, [message])
	   *
	   * Asserts that `value`'s type is `name`, as determined by
	   * `Object.prototype.toString`.
	   *
	   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
	   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
	   *     assert.typeOf('tea', 'string', 'we have a string');
	   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
	   *     assert.typeOf(null, 'null', 'we have a null');
	   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
	   *
	   * @name typeOf
	   * @param {Mixed} value
	   * @param {String} name
	   * @param {String} message
	   * @api public
	   */

	  assert.typeOf = function (val, type, msg) {
	    new Assertion(val, msg).to.be.a(type);
	  };

	  /**
	   * ### .notTypeOf(value, name, [message])
	   *
	   * Asserts that `value`'s type is _not_ `name`, as determined by
	   * `Object.prototype.toString`.
	   *
	   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
	   *
	   * @name notTypeOf
	   * @param {Mixed} value
	   * @param {String} typeof name
	   * @param {String} message
	   * @api public
	   */

	  assert.notTypeOf = function (val, type, msg) {
	    new Assertion(val, msg).to.not.be.a(type);
	  };

	  /**
	   * ### .instanceOf(object, constructor, [message])
	   *
	   * Asserts that `value` is an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , chai = new Tea('chai');
	   *
	   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
	   *
	   * @name instanceOf
	   * @param {Object} object
	   * @param {Constructor} constructor
	   * @param {String} message
	   * @api public
	   */

	  assert.instanceOf = function (val, type, msg) {
	    new Assertion(val, msg).to.be.instanceOf(type);
	  };

	  /**
	   * ### .notInstanceOf(object, constructor, [message])
	   *
	   * Asserts `value` is not an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , chai = new String('chai');
	   *
	   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
	   *
	   * @name notInstanceOf
	   * @param {Object} object
	   * @param {Constructor} constructor
	   * @param {String} message
	   * @api public
	   */

	  assert.notInstanceOf = function (val, type, msg) {
	    new Assertion(val, msg).to.not.be.instanceOf(type);
	  };

	  /**
	   * ### .include(haystack, needle, [message])
	   *
	   * Asserts that `haystack` includes `needle`. Works
	   * for strings and arrays.
	   *
	   *     assert.include('foobar', 'bar', 'foobar contains string "bar"');
	   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');
	   *
	   * @name include
	   * @param {Array|String} haystack
	   * @param {Mixed} needle
	   * @param {String} message
	   * @api public
	   */

	  assert.include = function (exp, inc, msg) {
	    new Assertion(exp, msg, assert.include).include(inc);
	  };

	  /**
	   * ### .notInclude(haystack, needle, [message])
	   *
	   * Asserts that `haystack` does not include `needle`. Works
	   * for strings and arrays.
	   *
	   *     assert.notInclude('foobar', 'baz', 'string not include substring');
	   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');
	   *
	   * @name notInclude
	   * @param {Array|String} haystack
	   * @param {Mixed} needle
	   * @param {String} message
	   * @api public
	   */

	  assert.notInclude = function (exp, inc, msg) {
	    new Assertion(exp, msg, assert.notInclude).not.include(inc);
	  };

	  /**
	   * ### .match(value, regexp, [message])
	   *
	   * Asserts that `value` matches the regular expression `regexp`.
	   *
	   *     assert.match('foobar', /^foo/, 'regexp matches');
	   *
	   * @name match
	   * @param {Mixed} value
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @api public
	   */

	  assert.match = function (exp, re, msg) {
	    new Assertion(exp, msg).to.match(re);
	  };

	  /**
	   * ### .notMatch(value, regexp, [message])
	   *
	   * Asserts that `value` does not match the regular expression `regexp`.
	   *
	   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
	   *
	   * @name notMatch
	   * @param {Mixed} value
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @api public
	   */

	  assert.notMatch = function (exp, re, msg) {
	    new Assertion(exp, msg).to.not.match(re);
	  };

	  /**
	   * ### .property(object, property, [message])
	   *
	   * Asserts that `object` has a property named by `property`.
	   *
	   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
	   *
	   * @name property
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */

	  assert.property = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.have.property(prop);
	  };

	  /**
	   * ### .notProperty(object, property, [message])
	   *
	   * Asserts that `object` does _not_ have a property named by `property`.
	   *
	   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
	   *
	   * @name notProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */

	  assert.notProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.not.have.property(prop);
	  };

	  /**
	   * ### .deepProperty(object, property, [message])
	   *
	   * Asserts that `object` has a property named by `property`, which can be a
	   * string using dot- and bracket-notation for deep reference.
	   *
	   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');
	   *
	   * @name deepProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */

	  assert.deepProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.have.deep.property(prop);
	  };

	  /**
	   * ### .notDeepProperty(object, property, [message])
	   *
	   * Asserts that `object` does _not_ have a property named by `property`, which
	   * can be a string using dot- and bracket-notation for deep reference.
	   *
	   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
	   *
	   * @name notDeepProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */

	  assert.notDeepProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.not.have.deep.property(prop);
	  };

	  /**
	   * ### .propertyVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property` with value given
	   * by `value`.
	   *
	   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
	   *
	   * @name propertyVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.propertyVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.have.property(prop, val);
	  };

	  /**
	   * ### .propertyNotVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property`, but with a value
	   * different from that given by `value`.
	   *
	   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');
	   *
	   * @name propertyNotVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.propertyNotVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.not.have.property(prop, val);
	  };

	  /**
	   * ### .deepPropertyVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property` with value given
	   * by `value`. `property` can use dot- and bracket-notation for deep
	   * reference.
	   *
	   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
	   *
	   * @name deepPropertyVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.deepPropertyVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.have.deep.property(prop, val);
	  };

	  /**
	   * ### .deepPropertyNotVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property`, but with a value
	   * different from that given by `value`. `property` can use dot- and
	   * bracket-notation for deep reference.
	   *
	   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
	   *
	   * @name deepPropertyNotVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.deepPropertyNotVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.not.have.deep.property(prop, val);
	  };

	  /**
	   * ### .lengthOf(object, length, [message])
	   *
	   * Asserts that `object` has a `length` property with the expected value.
	   *
	   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
	   *     assert.lengthOf('foobar', 6, 'string has length of 6');
	   *
	   * @name lengthOf
	   * @param {Mixed} object
	   * @param {Number} length
	   * @param {String} message
	   * @api public
	   */

	  assert.lengthOf = function (exp, len, msg) {
	    new Assertion(exp, msg).to.have.length(len);
	  };

	  /**
	   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])
	   *
	   * Asserts that `function` will throw an error that is an instance of
	   * `constructor`, or alternately that it will throw an error with message
	   * matching `regexp`.
	   *
	   *     assert.throws(fn, 'function throws a reference error');
	   *     assert.throws(fn, /function throws a reference error/);
	   *     assert.throws(fn, ReferenceError);
	   *     assert.throws(fn, ReferenceError, 'function throws a reference error');
	   *     assert.throws(fn, ReferenceError, /function throws a reference error/);
	   *
	   * @name throws
	   * @alias throw
	   * @alias Throw
	   * @param {Function} function
	   * @param {ErrorConstructor} constructor
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @api public
	   */

	  assert.throws = function (fn, errt, errs, msg) {
	    if ('string' === typeof errt || errt instanceof RegExp) {
	      errs = errt;
	      errt = null;
	    }

	    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);
	    return flag(assertErr, 'object');
	  };

	  /**
	   * ### .doesNotThrow(function, [constructor/regexp], [message])
	   *
	   * Asserts that `function` will _not_ throw an error that is an instance of
	   * `constructor`, or alternately that it will not throw an error with message
	   * matching `regexp`.
	   *
	   *     assert.doesNotThrow(fn, Error, 'function does not throw');
	   *
	   * @name doesNotThrow
	   * @param {Function} function
	   * @param {ErrorConstructor} constructor
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @api public
	   */

	  assert.doesNotThrow = function (fn, type, msg) {
	    if ('string' === typeof type) {
	      msg = type;
	      type = null;
	    }

	    new Assertion(fn, msg).to.not.Throw(type);
	  };

	  /**
	   * ### .operator(val1, operator, val2, [message])
	   *
	   * Compares two values using `operator`.
	   *
	   *     assert.operator(1, '<', 2, 'everything is ok');
	   *     assert.operator(1, '>', 2, 'this will fail');
	   *
	   * @name operator
	   * @param {Mixed} val1
	   * @param {String} operator
	   * @param {Mixed} val2
	   * @param {String} message
	   * @api public
	   */

	  assert.operator = function (val, operator, val2, msg) {
	    var ok;
	    switch(operator) {
	      case '==':
	        ok = val == val2;
	        break;
	      case '===':
	        ok = val === val2;
	        break;
	      case '>':
	        ok = val > val2;
	        break;
	      case '>=':
	        ok = val >= val2;
	        break;
	      case '<':
	        ok = val < val2;
	        break;
	      case '<=':
	        ok = val <= val2;
	        break;
	      case '!=':
	        ok = val != val2;
	        break;
	      case '!==':
	        ok = val !== val2;
	        break;
	      default:
	        throw new Error('Invalid operator "' + operator + '"');
	    }
	    var test = new Assertion(ok, msg);
	    test.assert(
	        true === flag(test, 'object')
	      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
	      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
	  };

	  /**
	   * ### .closeTo(actual, expected, delta, [message])
	   *
	   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
	   *
	   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
	   *
	   * @name closeTo
	   * @param {Number} actual
	   * @param {Number} expected
	   * @param {Number} delta
	   * @param {String} message
	   * @api public
	   */

	  assert.closeTo = function (act, exp, delta, msg) {
	    new Assertion(act, msg).to.be.closeTo(exp, delta);
	  };

	  /**
	   * ### .approximately(actual, expected, delta, [message])
	   *
	   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
	   *
	   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');
	   *
	   * @name approximately
	   * @param {Number} actual
	   * @param {Number} expected
	   * @param {Number} delta
	   * @param {String} message
	   * @api public
	   */

	  assert.approximately = function (act, exp, delta, msg) {
	    new Assertion(act, msg).to.be.approximately(exp, delta);
	  };

	  /**
	   * ### .sameMembers(set1, set2, [message])
	   *
	   * Asserts that `set1` and `set2` have the same members.
	   * Order is not taken into account.
	   *
	   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
	   *
	   * @name sameMembers
	   * @param {Array} set1
	   * @param {Array} set2
	   * @param {String} message
	   * @api public
	   */

	  assert.sameMembers = function (set1, set2, msg) {
	    new Assertion(set1, msg).to.have.same.members(set2);
	  }

	  /**
	   * ### .sameDeepMembers(set1, set2, [message])
	   *
	   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.
	   * Order is not taken into account.
	   *
	   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');
	   *
	   * @name sameDeepMembers
	   * @param {Array} set1
	   * @param {Array} set2
	   * @param {String} message
	   * @api public
	   */

	  assert.sameDeepMembers = function (set1, set2, msg) {
	    new Assertion(set1, msg).to.have.same.deep.members(set2);
	  }

	  /**
	   * ### .includeMembers(superset, subset, [message])
	   *
	   * Asserts that `subset` is included in `superset`.
	   * Order is not taken into account.
	   *
	   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');
	   *
	   * @name includeMembers
	   * @param {Array} superset
	   * @param {Array} subset
	   * @param {String} message
	   * @api public
	   */

	  assert.includeMembers = function (superset, subset, msg) {
	    new Assertion(superset, msg).to.include.members(subset);
	  }

	  /**
	   * ### .oneOf(inList, list, [message])
	   *
	   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.
	   *
	   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');
	   *
	   * @name oneOf
	   * @param {*} inList
	   * @param {Array<*>} list
	   * @param {String} message
	   * @api public
	   */

	  assert.oneOf = function (inList, list, msg) {
	    new Assertion(inList, msg).to.be.oneOf(list);
	  }

	   /**
	   * ### .changes(function, object, property)
	   *
	   * Asserts that a function changes the value of a property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 22 };
	   *     assert.changes(fn, obj, 'val');
	   *
	   * @name changes
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.changes = function (fn, obj, prop) {
	    new Assertion(fn).to.change(obj, prop);
	  }

	   /**
	   * ### .doesNotChange(function, object, property)
	   *
	   * Asserts that a function does not changes the value of a property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { console.log('foo'); };
	   *     assert.doesNotChange(fn, obj, 'val');
	   *
	   * @name doesNotChange
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.doesNotChange = function (fn, obj, prop) {
	    new Assertion(fn).to.not.change(obj, prop);
	  }

	   /**
	   * ### .increases(function, object, property)
	   *
	   * Asserts that a function increases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 13 };
	   *     assert.increases(fn, obj, 'val');
	   *
	   * @name increases
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.increases = function (fn, obj, prop) {
	    new Assertion(fn).to.increase(obj, prop);
	  }

	   /**
	   * ### .doesNotIncrease(function, object, property)
	   *
	   * Asserts that a function does not increase object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 8 };
	   *     assert.doesNotIncrease(fn, obj, 'val');
	   *
	   * @name doesNotIncrease
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.doesNotIncrease = function (fn, obj, prop) {
	    new Assertion(fn).to.not.increase(obj, prop);
	  }

	   /**
	   * ### .decreases(function, object, property)
	   *
	   * Asserts that a function decreases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 5 };
	   *     assert.decreases(fn, obj, 'val');
	   *
	   * @name decreases
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.decreases = function (fn, obj, prop) {
	    new Assertion(fn).to.decrease(obj, prop);
	  }

	   /**
	   * ### .doesNotDecrease(function, object, property)
	   *
	   * Asserts that a function does not decreases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 15 };
	   *     assert.doesNotDecrease(fn, obj, 'val');
	   *
	   * @name doesNotDecrease
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.doesNotDecrease = function (fn, obj, prop) {
	    new Assertion(fn).to.not.decrease(obj, prop);
	  }

	  /*!
	   * ### .ifError(object)
	   *
	   * Asserts if value is not a false value, and throws if it is a true value.
	   * This is added to allow for chai to be a drop-in replacement for Node's
	   * assert class.
	   *
	   *     var err = new Error('I am a custom error');
	   *     assert.ifError(err); // Rethrows err!
	   *
	   * @name ifError
	   * @param {Object} object
	   * @api public
	   */

	  assert.ifError = function (val) {
	    if (val) {
	      throw(val);
	    }
	  };

	  /**
	   * ### .isExtensible(object)
	   *
	   * Asserts that `object` is extensible (can have new properties added to it).
	   *
	   *     assert.isExtensible({});
	   *
	   * @name isExtensible
	   * @alias extensible
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.isExtensible = function (obj, msg) {
	    new Assertion(obj, msg).to.be.extensible;
	  };

	  /**
	   * ### .isNotExtensible(object)
	   *
	   * Asserts that `object` is _not_ extensible.
	   *
	   *     var nonExtensibleObject = Object.preventExtensions({});
	   *     var sealedObject = Object.seal({});
	   *     var frozenObject = Object.freese({});
	   *
	   *     assert.isNotExtensible(nonExtensibleObject);
	   *     assert.isNotExtensible(sealedObject);
	   *     assert.isNotExtensible(frozenObject);
	   *
	   * @name isNotExtensible
	   * @alias notExtensible
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.isNotExtensible = function (obj, msg) {
	    new Assertion(obj, msg).to.not.be.extensible;
	  };

	  /**
	   * ### .isSealed(object)
	   *
	   * Asserts that `object` is sealed (cannot have new properties added to it
	   * and its existing properties cannot be removed).
	   *
	   *     var sealedObject = Object.seal({});
	   *     var frozenObject = Object.seal({});
	   *
	   *     assert.isSealed(sealedObject);
	   *     assert.isSealed(frozenObject);
	   *
	   * @name isSealed
	   * @alias sealed
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.isSealed = function (obj, msg) {
	    new Assertion(obj, msg).to.be.sealed;
	  };

	  /**
	   * ### .isNotSealed(object)
	   *
	   * Asserts that `object` is _not_ sealed.
	   *
	   *     assert.isNotSealed({});
	   *
	   * @name isNotSealed
	   * @alias notSealed
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.isNotSealed = function (obj, msg) {
	    new Assertion(obj, msg).to.not.be.sealed;
	  };

	  /**
	   * ### .isFrozen(object)
	   *
	   * Asserts that `object` is frozen (cannot have new properties added to it
	   * and its existing properties cannot be modified).
	   *
	   *     var frozenObject = Object.freeze({});
	   *     assert.frozen(frozenObject);
	   *
	   * @name isFrozen
	   * @alias frozen
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.isFrozen = function (obj, msg) {
	    new Assertion(obj, msg).to.be.frozen;
	  };

	  /**
	   * ### .isNotFrozen(object)
	   *
	   * Asserts that `object` is _not_ frozen.
	   *
	   *     assert.isNotFrozen({});
	   *
	   * @name isNotFrozen
	   * @alias notFrozen
	   * @param {Object} object
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.isNotFrozen = function (obj, msg) {
	    new Assertion(obj, msg).to.not.be.frozen;
	  };

	  /*!
	   * Aliases.
	   */

	  (function alias(name, as){
	    assert[as] = assert[name];
	    return alias;
	  })
	  ('isOk', 'ok')
	  ('isNotOk', 'notOk')
	  ('throws', 'throw')
	  ('throws', 'Throw')
	  ('isExtensible', 'extensible')
	  ('isNotExtensible', 'notExtensible')
	  ('isSealed', 'sealed')
	  ('isNotSealed', 'notSealed')
	  ('isFrozen', 'frozen')
	  ('isNotFrozen', 'notFrozen');
	};


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	var Promise, Reporter, SuiteReporter, fastBind, findSourceReferenceUrlRegexp, log, mapStackTrace, promisedMapStackTrace, ref;

	ref = __webpack_require__(8), log = ref.log, fastBind = ref.fastBind, Promise = ref.Promise, findSourceReferenceUrlRegexp = ref.findSourceReferenceUrlRegexp;

	mapStackTrace = __webpack_require__(232).mapStackTrace;

	promisedMapStackTrace = function(stack) {
	  var deQueriedStack;
	  deQueriedStack = stack.replace(/\?[a-zA-Z0-9]+=[^:]*/, "");
	  return new Promise(function(resolve) {
	    return mapStackTrace(deQueriedStack, resolve);
	  });
	};

	SuiteReporter = (function() {
	  function SuiteReporter(suite1) {
	    this.suite = suite1;
	    this.failedTests = [];
	    this.passedTests = [];
	    this.tests = [];
	  }

	  SuiteReporter.prototype.addTest = function(test) {
	    return this.tests.push(test);
	  };

	  SuiteReporter.prototype.addFailure = function(test, err) {
	    var stack;
	    return this.failedTests.push(promisedMapStackTrace(stack = err.stack).then(function(mappedStack) {
	      return [test, err, mappedStack];
	    }));
	  };

	  SuiteReporter.prototype.addPass = function(test) {
	    return this.passedTests.push(test);
	  };

	  SuiteReporter.prototype.mergeStackTraces = function(normalStackTrace, mappedStackTrace) {
	    var i, j, len, line, mappedLine, normalStackTraceArray, output, ref1, rest, sourceRefRegex, url;
	    normalStackTraceArray = normalStackTrace.split('\n');
	    output = normalStackTraceArray.slice(0, 1);
	    rest = normalStackTraceArray.slice(1);
	    sourceRefRegex = /\([^)]+\:\d+\:\d+\)/;
	    if (rest.length === (mappedStackTrace != null ? mappedStackTrace.length : void 0)) {
	      for (i = j = 0, len = rest.length; j < len; i = ++j) {
	        line = rest[i];
	        mappedLine = mappedStackTrace[i];
	        url = (ref1 = mappedLine.match(sourceRefRegex)) != null ? ref1[0] : void 0;
	        if (url) {
	          rest[i] = line.replace(sourceRefRegex, url);
	        }
	      }
	    }
	    return normalStackTraceArray[0] + "\n" + (rest.join("\n"));
	  };

	  SuiteReporter.prototype.outputFailedTests = function(failedTests) {
	    var err, j, len, mappedStackTrace, ref1, test;
	    console.group("Failures");
	    for (j = 0, len = failedTests.length; j < len; j++) {
	      ref1 = failedTests[j], test = ref1[0], err = ref1[1], mappedStackTrace = ref1[2];
	      console.error(this.mergeStackTraces(test.err.stack, mappedStackTrace));
	      console.log({
	        Expected: err.expected,
	        Actual: err.actual
	      });
	    }
	    return console.groupEnd();
	  };

	  SuiteReporter.prototype.outputPassedTest = function(passedTests) {
	    var j, len, test;
	    console.groupCollapsed("Passes");
	    for (j = 0, len = passedTests.length; j < len; j++) {
	      test = passedTests[j];
	      console.log(test.title);
	    }
	    return console.groupEnd();
	  };

	  SuiteReporter.prototype.output = function() {
	    var passedTests, title;
	    title = this.suite.title + " (" + (this.tests.length - this.failedTests.length) + "/" + this.tests.length + " passed)";
	    passedTests = this.passedTests;
	    return Promise.all(this.failedTests).then((function(_this) {
	      return function(failedTests) {
	        if (failedTests.length === 0) {
	          console.groupCollapsed(title);
	        } else {
	          console.group(title);
	          _this.outputFailedTests(failedTests);
	        }
	        _this.outputPassedTest(passedTests);
	        return console.groupEnd();
	      };
	    })(this), function(err) {
	      return console.err("promise error", err);
	    });
	  };

	  return SuiteReporter;

	})();

	module.exports = Reporter = (function() {
	  function Reporter(runner, options) {
	    this.runner = runner;
	    new Mocha.reporters.HTML(this.runner);
	    this.registerHandlers();
	  }

	  Reporter.prototype.registerHandlers = function() {
	    this.runner.on('pass', (function(_this) {
	      return function(test) {
	        return _this.suiteReporter.addPass(test);
	      };
	    })(this));
	    this.runner.on('test', (function(_this) {
	      return function(test) {
	        return _this.suiteReporter.addTest(test);
	      };
	    })(this));
	    this.runner.on('fail', (function(_this) {
	      return function(test, err) {
	        return _this.suiteReporter.addFailure(test, err);
	      };
	    })(this));
	    this.runner.on('suite', (function(_this) {
	      return function(suite) {
	        return _this.suiteReporter = new SuiteReporter(suite);
	      };
	    })(this));
	    return this.runner.on('suite end', (function(_this) {
	      return function(suite) {
	        var ref1;
	        if ((ref1 = _this.suiteReporter) != null) {
	          ref1.output();
	        }
	        return _this.suiteReporter = null;
	      };
	    })(this));
	  };

	  return Reporter;

	})();


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * sourcemapped-stacktrace.js
	 * created by James Salter <iteration@gmail.com> (2014)
	 *
	 * https://github.com/novocaine/sourcemapped-stacktrace
	 *
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	/*global define */

	// note we only include source-map-consumer, not the whole source-map library,
	// which includes gear for generating source maps that we don't need
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(233)], __WEBPACK_AMD_DEFINE_RESULT__ = function(source_map_consumer) {
	  /**
	   * Re-map entries in a stacktrace using sourcemaps if available.
	   *
	   * @param {Array} stack - Array of strings from the browser's stack
	   *                        representation. Currently only Chrome
	   *                        format is supported.
	   * @param {function} done - Callback invoked with the transformed stacktrace
	   *                          (an Array of Strings) passed as the first
	   *                          argument
	   */
	  var mapStackTrace = function(stack, done) {
	    var lines;
	    var mapForUri = {};
	    var rows = {};
	    var fields;
	    var uri;
	    var expected_fields;
	    var regex;

	    var fetcher = new Fetcher(function() {
	      var result = processSourceMaps(lines, rows, fetcher.mapForUri);
	      done(result);
	    });

	    if (isChrome()) {
	      regex = /^ +at.+\((.*):([0-9]+):([0-9]+)/;
	      expected_fields = 4;
	      // (skip first line containing exception message)
	      skip_lines = 1;
	    } else if (isFirefox()) {
	      regex = /@(.*):([0-9]+):([0-9]+)/;
	      expected_fields = 4;
	      skip_lines = 0;
	    } else {
	      throw new Error("unknown browser :(");
	    }

	    lines = stack.split("\n").slice(skip_lines);

	    for (var i=0; i < lines.length; i++) {
	      fields = lines[i].match(regex);
	      if (fields && fields.length === expected_fields) {
	        rows[i] = fields;
	        uri = fields[1];
	        fetcher.fetchScript(uri);
	      }
	    }
	  };

	  var isChrome = function() {
	    return navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
	  };
	  
	  var isFirefox = function() {
	    return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
	  };
	  var Fetcher = function(done) {
	    this.sem = 0;
	    this.mapForUri = {};
	    this.done = done;
	  };

	  Fetcher.prototype.fetchScript = function(uri) {
	    if (!(uri in this.mapForUri)) {
	      this.sem++;
	      this.mapForUri[uri] = null;
	    } else {
	      return;
	    }

	    var xhr = createXMLHTTPObject();
	    var that = this;
	    xhr.onreadystatechange = function(e) {
	      that.onScriptLoad.call(that, e, uri);
	    };
	    xhr.open("GET", uri, true);
	    xhr.send();
	  };

	  var absUrlRegex = new RegExp('^(?:[a-z]+:)?//', 'i');

	  Fetcher.prototype.onScriptLoad = function(e, uri) {
	    if (e.target.readyState !== 4) {
	      return;
	    }

	    if (e.target.status === 200 ||
	      (uri.slice(0, 7) === "file://" && e.target.status === 0))
	    {
	      // find .map in file.
	      //
	      // attempt to find it at the very end of the file, but tolerate trailing
	      // whitespace inserted by some packers.
	      var match = e.target.responseText.match("//# sourceMappingURL=(.*)[\\s]*$", "m");
	      if (match && match.length === 2) {
	        // get the map
	        var mapUri = match[1];

	        var embeddedSourceMap = mapUri.match("data:application/json;base64,(.*)");

	        if (embeddedSourceMap && embeddedSourceMap[1]) {
	          this.mapForUri[uri] = atob(embeddedSourceMap[1]);
	          this.done(this.mapForUri);
	        } else {
	          if (!absUrlRegex.test(mapUri)) {
	            // relative url; according to sourcemaps spec is 'source origin'
	            var origin;
	            var lastSlash = uri.lastIndexOf('/');
	            if (lastSlash !== -1) {
	              origin = uri.slice(0, lastSlash + 1);
	              mapUri = origin + mapUri;
	              // note if lastSlash === -1, actual script uri has no slash
	              // somehow, so no way to use it as a prefix... we give up and try
	              // as absolute
	            }
	          }

	          var xhrMap = createXMLHTTPObject();
	          var that = this;
	          xhrMap.onreadystatechange = function() {
	            if (xhrMap.readyState === 4) {
	              that.sem--;
	              if (xhrMap.status === 200 ||
	                (mapUri.slice(0, 7) === "file://" && xhrMap.status === 0)) {
	                that.mapForUri[uri] = xhrMap.responseText;
	              }
	              if (that.sem === 0) {
	                that.done(that.mapForUri);
	              }
	            }
	          };

	          xhrMap.open("GET", mapUri, true);
	          xhrMap.send();
	        }
	      } else {
	        // no map
	        this.sem--;
	      }
	    } else {
	      // HTTP error fetching uri of the script
	      this.sem--;
	    }

	    if (this.sem === 0) {
	      this.done(this.mapForUri);
	    }
	  };

	  var processSourceMaps = function(lines, rows, mapForUri) {
	    var result = [];
	    var map;
	    for (var i=0; i < lines.length; i++) {
	      var row = rows[i];
	      if (row) {
	        var uri = row[1];
	        var line = parseInt(row[2], 10);
	        var column = parseInt(row[3], 10);
	        map = mapForUri[uri];

	        if (map) {
	          // we think we have a map for that uri. call source-map library
	          var smc = new source_map_consumer.SourceMapConsumer(map);
	          var origPos = smc.originalPositionFor(
	            { line: line, column: column });
	          result.push(formatOriginalPosition(origPos.source,
	            origPos.line, origPos.column, origPos.name));
	        } else {
	          // we can't find a map for that url, but we parsed the row.
	          // reformat unchanged line for consistency with the sourcemapped
	          // lines.
	          result.push(formatOriginalPosition(uri, line, column, "(unknown)"));
	        }
	      } else {
	        // we weren't able to parse the row, push back what we were given
	        result.push(lines[i]);
	      }
	    }

	    return result;
	  };

	  var formatOriginalPosition = function(source, line, column, name) {
	    // mimic chrome's format
	    return "    at " + (name ? name : "(unknown)") +
	      " (" + source + ":" + line + ":" + column + ")";
	  };

	  // xmlhttprequest boilerplate
	  var XMLHttpFactories = [
		function () {return new XMLHttpRequest();},
		function () {return new ActiveXObject("Msxml2.XMLHTTP");},
		function () {return new ActiveXObject("Msxml3.XMLHTTP");},
		function () {return new ActiveXObject("Microsoft.XMLHTTP");}
	  ];

	  function createXMLHTTPObject() {
	      var xmlhttp = false;
	      for (var i=0;i<XMLHttpFactories.length;i++) {
	          try {
	              xmlhttp = XMLHttpFactories[i]();
	          }
	          catch (e) {
	              continue;
	          }
	          break;
	      }
	      return xmlhttp;
	  }

	  return {
	    mapStackTrace: mapStackTrace
	  }
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var util = __webpack_require__(234);
	  var binarySearch = __webpack_require__(235);
	  var ArraySet = __webpack_require__(236).ArraySet;
	  var base64VLQ = __webpack_require__(237);

	  /**
	   * A SourceMapConsumer instance represents a parsed source map which we can
	   * query for information about the original file positions by giving it a file
	   * position in the generated source.
	   *
	   * The only parameter is the raw source map (either as a JSON string, or
	   * already parsed to an object). According to the spec, source maps have the
	   * following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - sources: An array of URLs to the original source files.
	   *   - names: An array of identifiers which can be referrenced by individual mappings.
	   *   - sourceRoot: Optional. The URL root from which all sources are relative.
	   *   - sourcesContent: Optional. An array of contents of the original source files.
	   *   - mappings: A string of base64 VLQs which contain the actual mappings.
	   *   - file: Optional. The generated file this source map is associated with.
	   *
	   * Here is an example source map, taken from the source map spec[0]:
	   *
	   *     {
	   *       version : 3,
	   *       file: "out.js",
	   *       sourceRoot : "",
	   *       sources: ["foo.js", "bar.js"],
	   *       names: ["src", "maps", "are", "fun"],
	   *       mappings: "AA,AB;;ABCDE;"
	   *     }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	   */
	  function SourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    var version = util.getArg(sourceMap, 'version');
	    var sources = util.getArg(sourceMap, 'sources');
	    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	    // requires the array) to play nice here.
	    var names = util.getArg(sourceMap, 'names', []);
	    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	    var mappings = util.getArg(sourceMap, 'mappings');
	    var file = util.getArg(sourceMap, 'file', null);

	    // Once again, Sass deviates from the spec and supplies the version as a
	    // string rather than a number, so we use loose equality checking here.
	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }

	    // Pass `true` below to allow duplicate names and sources. While source maps
	    // are intended to be compressed and deduplicated, the TypeScript compiler
	    // sometimes generates source maps with duplicates in them. See Github issue
	    // #72 and bugzil.la/889492.
	    this._names = ArraySet.fromArray(names, true);
	    this._sources = ArraySet.fromArray(sources, true);

	    this.sourceRoot = sourceRoot;
	    this.sourcesContent = sourcesContent;
	    this._mappings = mappings;
	    this.file = file;
	  }

	  /**
	   * Create a SourceMapConsumer from a SourceMapGenerator.
	   *
	   * @param SourceMapGenerator aSourceMap
	   *        The source map that will be consumed.
	   * @returns SourceMapConsumer
	   */
	  SourceMapConsumer.fromSourceMap =
	    function SourceMapConsumer_fromSourceMap(aSourceMap) {
	      var smc = Object.create(SourceMapConsumer.prototype);

	      smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	      smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	      smc.sourceRoot = aSourceMap._sourceRoot;
	      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                              smc.sourceRoot);
	      smc.file = aSourceMap._file;

	      smc.__generatedMappings = aSourceMap._mappings.slice()
	        .sort(util.compareByGeneratedPositions);
	      smc.__originalMappings = aSourceMap._mappings.slice()
	        .sort(util.compareByOriginalPositions);

	      return smc;
	    };

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  SourceMapConsumer.prototype._version = 3;

	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(SourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      return this._sources.toArray().map(function (s) {
	        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	      }, this);
	    }
	  });

	  // `__generatedMappings` and `__originalMappings` are arrays that hold the
	  // parsed mapping coordinates from the source map's "mappings" attribute. They
	  // are lazily instantiated, accessed via the `_generatedMappings` and
	  // `_originalMappings` getters respectively, and we only parse the mappings
	  // and create these arrays once queried for a source location. We jump through
	  // these hoops because there can be many thousands of mappings, and parsing
	  // them is expensive, so we only want to do it if we must.
	  //
	  // Each object in the arrays is of the form:
	  //
	  //     {
	  //       generatedLine: The line number in the generated code,
	  //       generatedColumn: The column number in the generated code,
	  //       source: The path to the original source file that generated this
	  //               chunk of code,
	  //       originalLine: The line number in the original source that
	  //                     corresponds to this chunk of generated code,
	  //       originalColumn: The column number in the original source that
	  //                       corresponds to this chunk of generated code,
	  //       name: The name of the original symbol which generated this chunk of
	  //             code.
	  //     }
	  //
	  // All properties except for `generatedLine` and `generatedColumn` can be
	  // `null`.
	  //
	  // `_generatedMappings` is ordered by the generated positions.
	  //
	  // `_originalMappings` is ordered by the original positions.

	  SourceMapConsumer.prototype.__generatedMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	    get: function () {
	      if (!this.__generatedMappings) {
	        this.__generatedMappings = [];
	        this.__originalMappings = [];
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__generatedMappings;
	    }
	  });

	  SourceMapConsumer.prototype.__originalMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	    get: function () {
	      if (!this.__originalMappings) {
	        this.__generatedMappings = [];
	        this.__originalMappings = [];
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__originalMappings;
	    }
	  });

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  SourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      var generatedLine = 1;
	      var previousGeneratedColumn = 0;
	      var previousOriginalLine = 0;
	      var previousOriginalColumn = 0;
	      var previousSource = 0;
	      var previousName = 0;
	      var mappingSeparator = /^[,;]/;
	      var str = aStr;
	      var mapping;
	      var temp;

	      while (str.length > 0) {
	        if (str.charAt(0) === ';') {
	          generatedLine++;
	          str = str.slice(1);
	          previousGeneratedColumn = 0;
	        }
	        else if (str.charAt(0) === ',') {
	          str = str.slice(1);
	        }
	        else {
	          mapping = {};
	          mapping.generatedLine = generatedLine;

	          // Generated column.
	          temp = base64VLQ.decode(str);
	          mapping.generatedColumn = previousGeneratedColumn + temp.value;
	          previousGeneratedColumn = mapping.generatedColumn;
	          str = temp.rest;

	          if (str.length > 0 && !mappingSeparator.test(str.charAt(0))) {
	            // Original source.
	            temp = base64VLQ.decode(str);
	            mapping.source = this._sources.at(previousSource + temp.value);
	            previousSource += temp.value;
	            str = temp.rest;
	            if (str.length === 0 || mappingSeparator.test(str.charAt(0))) {
	              throw new Error('Found a source, but no line and column');
	            }

	            // Original line.
	            temp = base64VLQ.decode(str);
	            mapping.originalLine = previousOriginalLine + temp.value;
	            previousOriginalLine = mapping.originalLine;
	            // Lines are stored 0-based
	            mapping.originalLine += 1;
	            str = temp.rest;
	            if (str.length === 0 || mappingSeparator.test(str.charAt(0))) {
	              throw new Error('Found a source and line, but no column');
	            }

	            // Original column.
	            temp = base64VLQ.decode(str);
	            mapping.originalColumn = previousOriginalColumn + temp.value;
	            previousOriginalColumn = mapping.originalColumn;
	            str = temp.rest;

	            if (str.length > 0 && !mappingSeparator.test(str.charAt(0))) {
	              // Original name.
	              temp = base64VLQ.decode(str);
	              mapping.name = this._names.at(previousName + temp.value);
	              previousName += temp.value;
	              str = temp.rest;
	            }
	          }

	          this.__generatedMappings.push(mapping);
	          if (typeof mapping.originalLine === 'number') {
	            this.__originalMappings.push(mapping);
	          }
	        }
	      }

	      this.__generatedMappings.sort(util.compareByGeneratedPositions);
	      this.__originalMappings.sort(util.compareByOriginalPositions);
	    };

	  /**
	   * Find the mapping that best matches the hypothetical "needle" mapping that
	   * we are searching for in the given "haystack" of mappings.
	   */
	  SourceMapConsumer.prototype._findMapping =
	    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                           aColumnName, aComparator) {
	      // To return the position we are searching for, we must first find the
	      // mapping for the given position and then return the opposite position it
	      // points to. Because the mappings are sorted, we can use binary search to
	      // find the best mapping.

	      if (aNeedle[aLineName] <= 0) {
	        throw new TypeError('Line must be greater than or equal to 1, got '
	                            + aNeedle[aLineName]);
	      }
	      if (aNeedle[aColumnName] < 0) {
	        throw new TypeError('Column must be greater than or equal to 0, got '
	                            + aNeedle[aColumnName]);
	      }

	      return binarySearch.search(aNeedle, aMappings, aComparator);
	    };

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  SourceMapConsumer.prototype.originalPositionFor =
	    function SourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };

	      var mapping = this._findMapping(needle,
	                                      this._generatedMappings,
	                                      "generatedLine",
	                                      "generatedColumn",
	                                      util.compareByGeneratedPositions);

	      if (mapping && mapping.generatedLine === needle.generatedLine) {
	        var source = util.getArg(mapping, 'source', null);
	        if (source != null && this.sourceRoot != null) {
	          source = util.join(this.sourceRoot, source);
	        }
	        return {
	          source: source,
	          line: util.getArg(mapping, 'originalLine', null),
	          column: util.getArg(mapping, 'originalColumn', null),
	          name: util.getArg(mapping, 'name', null)
	        };
	      }

	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    };

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * availible.
	   */
	  SourceMapConsumer.prototype.sourceContentFor =
	    function SourceMapConsumer_sourceContentFor(aSource) {
	      if (!this.sourcesContent) {
	        return null;
	      }

	      if (this.sourceRoot != null) {
	        aSource = util.relative(this.sourceRoot, aSource);
	      }

	      if (this._sources.has(aSource)) {
	        return this.sourcesContent[this._sources.indexOf(aSource)];
	      }

	      var url;
	      if (this.sourceRoot != null
	          && (url = util.urlParse(this.sourceRoot))) {
	        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	        // many users. We can help them out when they expect file:// URIs to
	        // behave like it would if they were running a local HTTP server. See
	        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	        if (url.scheme == "file"
	            && this._sources.has(fileUriAbsPath)) {
	          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	        }

	        if ((!url.path || url.path == "/")
	            && this._sources.has("/" + aSource)) {
	          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	        }
	      }

	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    };

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  SourceMapConsumer.prototype.generatedPositionFor =
	    function SourceMapConsumer_generatedPositionFor(aArgs) {
	      var needle = {
	        source: util.getArg(aArgs, 'source'),
	        originalLine: util.getArg(aArgs, 'line'),
	        originalColumn: util.getArg(aArgs, 'column')
	      };

	      if (this.sourceRoot != null) {
	        needle.source = util.relative(this.sourceRoot, needle.source);
	      }

	      var mapping = this._findMapping(needle,
	                                      this._originalMappings,
	                                      "originalLine",
	                                      "originalColumn",
	                                      util.compareByOriginalPositions);

	      if (mapping) {
	        return {
	          line: util.getArg(mapping, 'generatedLine', null),
	          column: util.getArg(mapping, 'generatedColumn', null)
	        };
	      }

	      return {
	        line: null,
	        column: null
	      };
	    };

	  SourceMapConsumer.GENERATED_ORDER = 1;
	  SourceMapConsumer.ORIGINAL_ORDER = 2;

	  /**
	   * Iterate over each mapping between an original source/line/column and a
	   * generated line/column in this source map.
	   *
	   * @param Function aCallback
	   *        The function that is called with each mapping.
	   * @param Object aContext
	   *        Optional. If specified, this object will be the value of `this` every
	   *        time that `aCallback` is called.
	   * @param aOrder
	   *        Either `SourceMapConsumer.GENERATED_ORDER` or
	   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	   *        iterate over the mappings sorted by the generated file's line/column
	   *        order or the original's source/line/column order, respectively. Defaults to
	   *        `SourceMapConsumer.GENERATED_ORDER`.
	   */
	  SourceMapConsumer.prototype.eachMapping =
	    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	      var context = aContext || null;
	      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

	      var mappings;
	      switch (order) {
	      case SourceMapConsumer.GENERATED_ORDER:
	        mappings = this._generatedMappings;
	        break;
	      case SourceMapConsumer.ORIGINAL_ORDER:
	        mappings = this._originalMappings;
	        break;
	      default:
	        throw new Error("Unknown order of iteration.");
	      }

	      var sourceRoot = this.sourceRoot;
	      mappings.map(function (mapping) {
	        var source = mapping.source;
	        if (source != null && sourceRoot != null) {
	          source = util.join(sourceRoot, source);
	        }
	        return {
	          source: source,
	          generatedLine: mapping.generatedLine,
	          generatedColumn: mapping.generatedColumn,
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: mapping.name
	        };
	      }).forEach(aCallback, context);
	    };

	  exports.SourceMapConsumer = SourceMapConsumer;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  /**
	   * This is a helper function for getting values from parameter/options
	   * objects.
	   *
	   * @param args The object we are extracting values from
	   * @param name The name of the property we are getting.
	   * @param defaultValue An optional value to return if the property is missing
	   * from the object. If this is not specified and the property is missing, an
	   * error will be thrown.
	   */
	  function getArg(aArgs, aName, aDefaultValue) {
	    if (aName in aArgs) {
	      return aArgs[aName];
	    } else if (arguments.length === 3) {
	      return aDefaultValue;
	    } else {
	      throw new Error('"' + aName + '" is a required argument.');
	    }
	  }
	  exports.getArg = getArg;

	  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	  var dataUrlRegexp = /^data:.+\,.+$/;

	  function urlParse(aUrl) {
	    var match = aUrl.match(urlRegexp);
	    if (!match) {
	      return null;
	    }
	    return {
	      scheme: match[1],
	      auth: match[2],
	      host: match[3],
	      port: match[4],
	      path: match[5]
	    };
	  }
	  exports.urlParse = urlParse;

	  function urlGenerate(aParsedUrl) {
	    var url = '';
	    if (aParsedUrl.scheme) {
	      url += aParsedUrl.scheme + ':';
	    }
	    url += '//';
	    if (aParsedUrl.auth) {
	      url += aParsedUrl.auth + '@';
	    }
	    if (aParsedUrl.host) {
	      url += aParsedUrl.host;
	    }
	    if (aParsedUrl.port) {
	      url += ":" + aParsedUrl.port
	    }
	    if (aParsedUrl.path) {
	      url += aParsedUrl.path;
	    }
	    return url;
	  }
	  exports.urlGenerate = urlGenerate;

	  /**
	   * Normalizes a path, or the path portion of a URL:
	   *
	   * - Replaces consequtive slashes with one slash.
	   * - Removes unnecessary '.' parts.
	   * - Removes unnecessary '<dir>/..' parts.
	   *
	   * Based on code in the Node.js 'path' core module.
	   *
	   * @param aPath The path or url to normalize.
	   */
	  function normalize(aPath) {
	    var path = aPath;
	    var url = urlParse(aPath);
	    if (url) {
	      if (!url.path) {
	        return aPath;
	      }
	      path = url.path;
	    }
	    var isAbsolute = (path.charAt(0) === '/');

	    var parts = path.split(/\/+/);
	    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	      part = parts[i];
	      if (part === '.') {
	        parts.splice(i, 1);
	      } else if (part === '..') {
	        up++;
	      } else if (up > 0) {
	        if (part === '') {
	          // The first part is blank if the path is absolute. Trying to go
	          // above the root is a no-op. Therefore we can remove all '..' parts
	          // directly after the root.
	          parts.splice(i + 1, up);
	          up = 0;
	        } else {
	          parts.splice(i, 2);
	          up--;
	        }
	      }
	    }
	    path = parts.join('/');

	    if (path === '') {
	      path = isAbsolute ? '/' : '.';
	    }

	    if (url) {
	      url.path = path;
	      return urlGenerate(url);
	    }
	    return path;
	  }
	  exports.normalize = normalize;

	  /**
	   * Joins two paths/URLs.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be joined with the root.
	   *
	   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	   *   first.
	   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	   *   is updated with the result and aRoot is returned. Otherwise the result
	   *   is returned.
	   *   - If aPath is absolute, the result is aPath.
	   *   - Otherwise the two paths are joined with a slash.
	   * - Joining for example 'http://' and 'www.example.com' is also supported.
	   */
	  function join(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }
	    if (aPath === "") {
	      aPath = ".";
	    }
	    var aPathUrl = urlParse(aPath);
	    var aRootUrl = urlParse(aRoot);
	    if (aRootUrl) {
	      aRoot = aRootUrl.path || '/';
	    }

	    // `join(foo, '//www.example.org')`
	    if (aPathUrl && !aPathUrl.scheme) {
	      if (aRootUrl) {
	        aPathUrl.scheme = aRootUrl.scheme;
	      }
	      return urlGenerate(aPathUrl);
	    }

	    if (aPathUrl || aPath.match(dataUrlRegexp)) {
	      return aPath;
	    }

	    // `join('http://', 'www.example.com')`
	    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	      aRootUrl.host = aPath;
	      return urlGenerate(aRootUrl);
	    }

	    var joined = aPath.charAt(0) === '/'
	      ? aPath
	      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	    if (aRootUrl) {
	      aRootUrl.path = joined;
	      return urlGenerate(aRootUrl);
	    }
	    return joined;
	  }
	  exports.join = join;

	  /**
	   * Make a path relative to a URL or another path.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be made relative to aRoot.
	   */
	  function relative(aRoot, aPath) {
	    aRoot = aRoot.replace(/\/$/, '');

	    // XXX: It is possible to remove this block, and the tests still pass!
	    var url = urlParse(aRoot);
	    if (aPath.charAt(0) == "/" && url && url.path == "/") {
	      return aPath.slice(1);
	    }

	    return aPath.indexOf(aRoot + '/') === 0
	      ? aPath.substr(aRoot.length + 1)
	      : aPath;
	  }
	  exports.relative = relative;

	  /**
	   * Because behavior goes wacky when you set `__proto__` on objects, we
	   * have to prefix all the strings in our set with an arbitrary character.
	   *
	   * See https://github.com/mozilla/source-map/pull/31 and
	   * https://github.com/mozilla/source-map/issues/30
	   *
	   * @param String aStr
	   */
	  function toSetString(aStr) {
	    return '$' + aStr;
	  }
	  exports.toSetString = toSetString;

	  function fromSetString(aStr) {
	    return aStr.substr(1);
	  }
	  exports.fromSetString = fromSetString;

	  function strcmp(aStr1, aStr2) {
	    var s1 = aStr1 || "";
	    var s2 = aStr2 || "";
	    return (s1 > s2) - (s1 < s2);
	  }

	  /**
	   * Comparator between two mappings where the original positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same original source/line/column, but different generated
	   * line and column the same. Useful when searching for a mapping with a
	   * stubbed out mapping.
	   */
	  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	    var cmp;

	    cmp = strcmp(mappingA.source, mappingB.source);
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp || onlyCompareOriginal) {
	      return cmp;
	    }

	    cmp = strcmp(mappingA.name, mappingB.name);
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp) {
	      return cmp;
	    }

	    return mappingA.generatedColumn - mappingB.generatedColumn;
	  };
	  exports.compareByOriginalPositions = compareByOriginalPositions;

	  /**
	   * Comparator between two mappings where the generated positions are
	   * compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same generated line and column, but different
	   * source/name/original line and column the same. Useful when searching for a
	   * mapping with a stubbed out mapping.
	   */
	  function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {
	    var cmp;

	    cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp || onlyCompareGenerated) {
	      return cmp;
	    }

	    cmp = strcmp(mappingA.source, mappingB.source);
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp) {
	      return cmp;
	    }

	    return strcmp(mappingA.name, mappingB.name);
	  };
	  exports.compareByGeneratedPositions = compareByGeneratedPositions;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  /**
	   * Recursive implementation of binary search.
	   *
	   * @param aLow Indices here and lower do not contain the needle.
	   * @param aHigh Indices here and higher do not contain the needle.
	   * @param aNeedle The element being searched for.
	   * @param aHaystack The non-empty array being searched.
	   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	   */
	  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
	    // This function terminates when one of the following is true:
	    //
	    //   1. We find the exact element we are looking for.
	    //
	    //   2. We did not find the exact element, but we can return the next
	    //      closest element that is less than that element.
	    //
	    //   3. We did not find the exact element, and there is no next-closest
	    //      element which is less than the one we are searching for, so we
	    //      return null.
	    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	    var cmp = aCompare(aNeedle, aHaystack[mid], true);
	    if (cmp === 0) {
	      // Found the element we are looking for.
	      return aHaystack[mid];
	    }
	    else if (cmp > 0) {
	      // aHaystack[mid] is greater than our needle.
	      if (aHigh - mid > 1) {
	        // The element is in the upper half.
	        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);
	      }
	      // We did not find an exact match, return the next closest one
	      // (termination case 2).
	      return aHaystack[mid];
	    }
	    else {
	      // aHaystack[mid] is less than our needle.
	      if (mid - aLow > 1) {
	        // The element is in the lower half.
	        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);
	      }
	      // The exact needle element was not found in this haystack. Determine if
	      // we are in termination case (2) or (3) and return the appropriate thing.
	      return aLow < 0
	        ? null
	        : aHaystack[aLow];
	    }
	  }

	  /**
	   * This is an implementation of binary search which will always try and return
	   * the next lowest value checked if there is no exact hit. This is because
	   * mappings between original and generated line/col pairs are single points,
	   * and there is an implicit region between each of them, so a miss just means
	   * that you aren't on the very start of a region.
	   *
	   * @param aNeedle The element you are looking for.
	   * @param aHaystack The array that is being searched.
	   * @param aCompare A function which takes the needle and an element in the
	   *     array and returns -1, 0, or 1 depending on whether the needle is less
	   *     than, equal to, or greater than the element, respectively.
	   */
	  exports.search = function search(aNeedle, aHaystack, aCompare) {
	    return aHaystack.length > 0
	      ? recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare)
	      : null;
	  };

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var util = __webpack_require__(234);

	  /**
	   * A data structure which is a combination of an array and a set. Adding a new
	   * member is O(1), testing for membership is O(1), and finding the index of an
	   * element is O(1). Removing elements from the set is not supported. Only
	   * strings are supported for membership.
	   */
	  function ArraySet() {
	    this._array = [];
	    this._set = {};
	  }

	  /**
	   * Static method for creating ArraySet instances from an existing array.
	   */
	  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	    var set = new ArraySet();
	    for (var i = 0, len = aArray.length; i < len; i++) {
	      set.add(aArray[i], aAllowDuplicates);
	    }
	    return set;
	  };

	  /**
	   * Add the given string to this set.
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	    var isDuplicate = this.has(aStr);
	    var idx = this._array.length;
	    if (!isDuplicate || aAllowDuplicates) {
	      this._array.push(aStr);
	    }
	    if (!isDuplicate) {
	      this._set[util.toSetString(aStr)] = idx;
	    }
	  };

	  /**
	   * Is the given string a member of this set?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.has = function ArraySet_has(aStr) {
	    return Object.prototype.hasOwnProperty.call(this._set,
	                                                util.toSetString(aStr));
	  };

	  /**
	   * What is the index of the given string in the array?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	    if (this.has(aStr)) {
	      return this._set[util.toSetString(aStr)];
	    }
	    throw new Error('"' + aStr + '" is not in the set.');
	  };

	  /**
	   * What is the element at the given index?
	   *
	   * @param Number aIdx
	   */
	  ArraySet.prototype.at = function ArraySet_at(aIdx) {
	    if (aIdx >= 0 && aIdx < this._array.length) {
	      return this._array[aIdx];
	    }
	    throw new Error('No element indexed by ' + aIdx);
	  };

	  /**
	   * Returns the array representation of this set (which has the proper indices
	   * indicated by indexOf). Note that this is a copy of the internal array used
	   * for storing the members so that no one can mess with internal state.
	   */
	  ArraySet.prototype.toArray = function ArraySet_toArray() {
	    return this._array.slice();
	  };

	  exports.ArraySet = ArraySet;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var base64 = __webpack_require__(238);

	  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
	  // length quantities we use in the source map spec, the first bit is the sign,
	  // the next four bits are the actual value, and the 6th bit is the
	  // continuation bit. The continuation bit tells us whether there are more
	  // digits in this value following this digit.
	  //
	  //   Continuation
	  //   |    Sign
	  //   |    |
	  //   V    V
	  //   101011

	  var VLQ_BASE_SHIFT = 5;

	  // binary: 100000
	  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

	  // binary: 011111
	  var VLQ_BASE_MASK = VLQ_BASE - 1;

	  // binary: 100000
	  var VLQ_CONTINUATION_BIT = VLQ_BASE;

	  /**
	   * Converts from a two-complement value to a value where the sign bit is
	   * is placed in the least significant bit.  For example, as decimals:
	   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	   */
	  function toVLQSigned(aValue) {
	    return aValue < 0
	      ? ((-aValue) << 1) + 1
	      : (aValue << 1) + 0;
	  }

	  /**
	   * Converts to a two-complement value from a value where the sign bit is
	   * is placed in the least significant bit.  For example, as decimals:
	   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	   */
	  function fromVLQSigned(aValue) {
	    var isNegative = (aValue & 1) === 1;
	    var shifted = aValue >> 1;
	    return isNegative
	      ? -shifted
	      : shifted;
	  }

	  /**
	   * Returns the base 64 VLQ encoded value.
	   */
	  exports.encode = function base64VLQ_encode(aValue) {
	    var encoded = "";
	    var digit;

	    var vlq = toVLQSigned(aValue);

	    do {
	      digit = vlq & VLQ_BASE_MASK;
	      vlq >>>= VLQ_BASE_SHIFT;
	      if (vlq > 0) {
	        // There are still more digits in this value, so we must make sure the
	        // continuation bit is marked.
	        digit |= VLQ_CONTINUATION_BIT;
	      }
	      encoded += base64.encode(digit);
	    } while (vlq > 0);

	    return encoded;
	  };

	  /**
	   * Decodes the next base 64 VLQ value from the given string and returns the
	   * value and the rest of the string.
	   */
	  exports.decode = function base64VLQ_decode(aStr) {
	    var i = 0;
	    var strLen = aStr.length;
	    var result = 0;
	    var shift = 0;
	    var continuation, digit;

	    do {
	      if (i >= strLen) {
	        throw new Error("Expected more digits in base 64 VLQ value.");
	      }
	      digit = base64.decode(aStr.charAt(i++));
	      continuation = !!(digit & VLQ_CONTINUATION_BIT);
	      digit &= VLQ_BASE_MASK;
	      result = result + (digit << shift);
	      shift += VLQ_BASE_SHIFT;
	    } while (continuation);

	    return {
	      value: fromVLQSigned(result),
	      rest: aStr.slice(i)
	    };
	  };

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var charToIntMap = {};
	  var intToCharMap = {};

	  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	    .split('')
	    .forEach(function (ch, index) {
	      charToIntMap[ch] = index;
	      intToCharMap[index] = ch;
	    });

	  /**
	   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	   */
	  exports.encode = function base64_encode(aNumber) {
	    if (aNumber in intToCharMap) {
	      return intToCharMap[aNumber];
	    }
	    throw new TypeError("Must be between 0 and 63: " + aNumber);
	  };

	  /**
	   * Decode a single base 64 digit to an integer.
	   */
	  exports.decode = function base64_decode(aChar) {
	    if (aChar in charToIntMap) {
	      return charToIntMap[aChar];
	    }
	    throw new TypeError("Not a valid base 64 digit: " + aChar);
	  };

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	var DomConsole, MyMocha, NestedSuites, chai, log;

	if (!document.getElementById("mocha")) {
	  document.write("<div id=\"mocha\"></div>");
	}

	chai = __webpack_require__(186);

	self.assert = chai.assert;

	__webpack_require__(240);

	__webpack_require__(242);

	DomConsole = __webpack_require__(173);

	log = __webpack_require__(8).log;

	mocha.setup({
	  reporter: __webpack_require__(231)

	  /*
	  Use mocha as normal, but if you added dots (.) in your suite names, this will
	  break them out into nested test suites and group suites with the same path together.
	  It also alphabetizes them.
	  
	  Ex:
	  
	    suite "Art.Foundation.Async", asyncTests
	    suite "Art.Foundation.Binary", binaryTests
	    suite "Art.Atomic", atomicTests
	  
	  Becomes:
	  
	    suite "Art", ->
	      suite "Atomic", atomicTests
	      suite "Foundation", ->
	        suite "Async", asyncTests
	        suite "Binary", binaryTests
	   */
	});

	NestedSuites = (function() {
	  function NestedSuites() {
	    this.suites = {};
	    this.suiteFunctions = {};
	  }

	  NestedSuites.prototype.addSuite = function(name, f) {
	    var base, i, len, results, splitName, suiteMap, suitePart;
	    ((base = this.suiteFunctions)[name] || (base[name] = [])).push(f);
	    splitName = name.split('.');
	    suiteMap = this.suites;
	    results = [];
	    for (i = 0, len = splitName.length; i < len; i++) {
	      suitePart = splitName[i];
	      results.push(suiteMap = (suiteMap[suitePart] || (suiteMap[suitePart] = {})));
	    }
	    return results;
	  };

	  NestedSuites.prototype._createMochaSuites = function(suites, suitePath) {
	    var i, len, ref, results, subSuites, suitePart;
	    if (suites == null) {
	      suites = this.suites;
	    }
	    if (suitePath == null) {
	      suitePath = null;
	    }
	    ref = Object.keys(suites);
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      suitePart = ref[i];
	      subSuites = suites[suitePart];
	      results.push((function(_this) {
	        return function(suitePart, subSuites) {
	          var path;
	          path = suitePath ? suitePath + "." + suitePart : suitePart;
	          return suite(suitePart, function() {
	            var f, functions, j, len1, results1;
	            _this._createMochaSuites(subSuites, path);
	            if (functions = _this.suiteFunctions[path]) {
	              results1 = [];
	              for (j = 0, len1 = functions.length; j < len1; j++) {
	                f = functions[j];
	                results1.push(f());
	              }
	              return results1;
	            }
	          });
	        };
	      })(this)(suitePart, subSuites));
	    }
	    return results;
	  };

	  NestedSuites.prototype.groupTestSuites = function(defineAllTests) {
	    self.suite = (function(_this) {
	      return function(name, f) {
	        return _this.addSuite(name, f);
	      };
	    })(this);
	    defineAllTests(chai);
	    mocha.setup('tdd');
	    return this._createMochaSuites();
	  };

	  return NestedSuites;

	})();

	module.exports = MyMocha = (function() {
	  function MyMocha() {}

	  MyMocha.assert = chai.assert;

	  MyMocha.run = function(defineAllTests) {
	    DomConsole.enable();
	    (new NestedSuites).groupTestSuites(defineAllTests);
	    return mocha.run();
	  };

	  return MyMocha;

	})();


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(241);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(180)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../css-loader/index.js!./mocha.css", function() {
				var newContent = require("!!./../css-loader/index.js!./mocha.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(179)();
	// imports


	// module
	exports.push([module.id, "@charset \"utf-8\";\n\nbody {\n  margin:0;\n}\n\n#mocha {\n  font: 20px/1.5 \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  margin: 60px 50px;\n}\n\n#mocha ul,\n#mocha li {\n  margin: 0;\n  padding: 0;\n}\n\n#mocha ul {\n  list-style: none;\n}\n\n#mocha h1,\n#mocha h2 {\n  margin: 0;\n}\n\n#mocha h1 {\n  margin-top: 15px;\n  font-size: 1em;\n  font-weight: 200;\n}\n\n#mocha h1 a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha h1 a:hover {\n  text-decoration: underline;\n}\n\n#mocha .suite .suite h1 {\n  margin-top: 0;\n  font-size: .8em;\n}\n\n#mocha .hidden {\n  display: none;\n}\n\n#mocha h2 {\n  font-size: 12px;\n  font-weight: normal;\n  cursor: pointer;\n}\n\n#mocha .suite {\n  margin-left: 15px;\n}\n\n#mocha .test {\n  margin-left: 15px;\n  overflow: hidden;\n}\n\n#mocha .test.pending:hover h2::after {\n  content: '(pending)';\n  font-family: arial, sans-serif;\n}\n\n#mocha .test.pass.medium .duration {\n  background: #c09853;\n}\n\n#mocha .test.pass.slow .duration {\n  background: #b94a48;\n}\n\n#mocha .test.pass::before {\n  content: '\\2713';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #00d6b2;\n}\n\n#mocha .test.pass .duration {\n  font-size: 9px;\n  margin-left: 5px;\n  padding: 2px 5px;\n  color: #fff;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -moz-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  -ms-border-radius: 5px;\n  -o-border-radius: 5px;\n  border-radius: 5px;\n}\n\n#mocha .test.pass.fast .duration {\n  display: none;\n}\n\n#mocha .test.pending {\n  color: #0b97c4;\n}\n\n#mocha .test.pending::before {\n  content: '\\25E6';\n  color: #0b97c4;\n}\n\n#mocha .test.fail {\n  color: #c00;\n}\n\n#mocha .test.fail pre {\n  color: black;\n}\n\n#mocha .test.fail::before {\n  content: '\\2716';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #c00;\n}\n\n#mocha .test pre.error {\n  color: #c00;\n  max-height: 300px;\n  overflow: auto;\n}\n\n#mocha .test .html-error {\n  overflow: auto;\n  color: black;\n  line-height: 1.5;\n  display: block;\n  float: left;\n  clear: left;\n  font: 12px/1.5 monaco, monospace;\n  margin: 5px;\n  padding: 15px;\n  border: 1px solid #eee;\n  max-width: 85%; /*(1)*/\n  max-width: calc(100% - 42px); /*(2)*/\n  max-height: 300px;\n  word-wrap: break-word;\n  border-bottom-color: #ddd;\n  -webkit-border-radius: 3px;\n  -webkit-box-shadow: 0 1px 3px #eee;\n  -moz-border-radius: 3px;\n  -moz-box-shadow: 0 1px 3px #eee;\n  border-radius: 3px;\n}\n\n#mocha .test .html-error pre.error {\n  border: none;\n  -webkit-border-radius: none;\n  -webkit-box-shadow: none;\n  -moz-border-radius: none;\n  -moz-box-shadow: none;\n  padding: 0;\n  margin: 0;\n  margin-top: 18px;\n  max-height: none;\n}\n\n/**\n * (1): approximate for browsers not supporting calc\n * (2): 42 = 2*15 + 2*10 + 2*1 (padding + margin + border)\n *      ^^ seriously\n */\n#mocha .test pre {\n  display: block;\n  float: left;\n  clear: left;\n  font: 12px/1.5 monaco, monospace;\n  margin: 5px;\n  padding: 15px;\n  border: 1px solid #eee;\n  max-width: 85%; /*(1)*/\n  max-width: calc(100% - 42px); /*(2)*/\n  word-wrap: break-word;\n  border-bottom-color: #ddd;\n  -webkit-border-radius: 3px;\n  -webkit-box-shadow: 0 1px 3px #eee;\n  -moz-border-radius: 3px;\n  -moz-box-shadow: 0 1px 3px #eee;\n  border-radius: 3px;\n}\n\n#mocha .test h2 {\n  position: relative;\n}\n\n#mocha .test a.replay {\n  position: absolute;\n  top: 3px;\n  right: 0;\n  text-decoration: none;\n  vertical-align: middle;\n  display: block;\n  width: 15px;\n  height: 15px;\n  line-height: 15px;\n  text-align: center;\n  background: #eee;\n  font-size: 15px;\n  -moz-border-radius: 15px;\n  border-radius: 15px;\n  -webkit-transition: opacity 200ms;\n  -moz-transition: opacity 200ms;\n  transition: opacity 200ms;\n  opacity: 0.3;\n  color: #888;\n}\n\n#mocha .test:hover a.replay {\n  opacity: 1;\n}\n\n#mocha-report.pass .test.fail {\n  display: none;\n}\n\n#mocha-report.fail .test.pass {\n  display: none;\n}\n\n#mocha-report.pending .test.pass,\n#mocha-report.pending .test.fail {\n  display: none;\n}\n#mocha-report.pending .test.pass.pending {\n  display: block;\n}\n\n#mocha-error {\n  color: #c00;\n  font-size: 1.5em;\n  font-weight: 100;\n  letter-spacing: 1px;\n}\n\n#mocha-stats {\n  position: fixed;\n  top: 15px;\n  right: 10px;\n  font-size: 12px;\n  margin: 0;\n  color: #888;\n  z-index: 1;\n}\n\n#mocha-stats .progress {\n  float: right;\n  padding-top: 0;\n}\n\n#mocha-stats em {\n  color: black;\n}\n\n#mocha-stats a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha-stats a:hover {\n  border-bottom: 1px solid #eee;\n}\n\n#mocha-stats li {\n  display: inline-block;\n  margin: 0 5px;\n  list-style: none;\n  padding-top: 11px;\n}\n\n#mocha-stats canvas {\n  width: 40px;\n  height: 40px;\n}\n\n#mocha code .comment { color: #ddd; }\n#mocha code .init { color: #2f6fad; }\n#mocha code .string { color: #5890ad; }\n#mocha code .keyword { color: #8a6343; }\n#mocha code .number { color: #2f6fad; }\n\n@media screen and (max-device-width: 480px) {\n  #mocha {\n    margin: 60px 0px;\n  }\n\n  #mocha #stats {\n    position: absolute;\n  }\n}\n", ""]);

	// exports


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(243)(__webpack_require__(244))

/***/ },
/* 243 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(src) {
		if (typeof execScript === "function")
			execScript(src);
		else
			eval.call(null, src);
	}

/***/ },
/* 244 */
/***/ function(module, exports) {

	module.exports = "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (process){\nmodule.exports = process.env.COV\n  ? require('./lib-cov/mocha')\n  : require('./lib/mocha');\n\n}).call(this,require('_process'))\n},{\"./lib-cov/mocha\":undefined,\"./lib/mocha\":14,\"_process\":51}],2:[function(require,module,exports){\n/* eslint-disable no-unused-vars */\nmodule.exports = function(type) {\n  return function() {};\n};\n\n},{}],3:[function(require,module,exports){\n/**\n * Module exports.\n */\n\nexports.EventEmitter = EventEmitter;\n\n/**\n * Object#hasOwnProperty reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Check if a value is an array.\n *\n * @api private\n * @param {*} val The value to test.\n * @return {boolean} true if the value is a boolean, otherwise false.\n */\nfunction isArray(val) {\n  return objToString.call(val) === '[object Array]';\n}\n\n/**\n * Event emitter constructor.\n *\n * @api public\n */\nfunction EventEmitter() {}\n\n/**\n * Add a listener.\n *\n * @api public\n * @param {string} name Event name.\n * @param {Function} fn Event handler.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.on = function(name, fn) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = fn;\n  } else if (isArray(this.$events[name])) {\n    this.$events[name].push(fn);\n  } else {\n    this.$events[name] = [this.$events[name], fn];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n/**\n * Adds a volatile listener.\n *\n * @api public\n * @param {string} name Event name.\n * @param {Function} fn Event handler.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.once = function(name, fn) {\n  var self = this;\n\n  function on() {\n    self.removeListener(name, on);\n    fn.apply(this, arguments);\n  }\n\n  on.listener = fn;\n  this.on(name, on);\n\n  return this;\n};\n\n/**\n * Remove a listener.\n *\n * @api public\n * @param {string} name Event name.\n * @param {Function} fn Event handler.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.removeListener = function(name, fn) {\n  if (this.$events && this.$events[name]) {\n    var list = this.$events[name];\n\n    if (isArray(list)) {\n      var pos = -1;\n\n      for (var i = 0, l = list.length; i < l; i++) {\n        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n          pos = i;\n          break;\n        }\n      }\n\n      if (pos < 0) {\n        return this;\n      }\n\n      list.splice(pos, 1);\n\n      if (!list.length) {\n        delete this.$events[name];\n      }\n    } else if (list === fn || (list.listener && list.listener === fn)) {\n      delete this.$events[name];\n    }\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners for an event.\n *\n * @api public\n * @param {string} name Event name.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.removeAllListeners = function(name) {\n  if (name === undefined) {\n    this.$events = {};\n    return this;\n  }\n\n  if (this.$events && this.$events[name]) {\n    this.$events[name] = null;\n  }\n\n  return this;\n};\n\n/**\n * Get all listeners for a given event.\n *\n * @api public\n * @param {string} name Event name.\n * @return {EventEmitter} Emitter instance.\n */\nEventEmitter.prototype.listeners = function(name) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = [];\n  }\n\n  if (!isArray(this.$events[name])) {\n    this.$events[name] = [this.$events[name]];\n  }\n\n  return this.$events[name];\n};\n\n/**\n * Emit an event.\n *\n * @api public\n * @param {string} name Event name.\n * @return {boolean} true if at least one handler was invoked, else false.\n */\nEventEmitter.prototype.emit = function(name) {\n  if (!this.$events) {\n    return false;\n  }\n\n  var handler = this.$events[name];\n\n  if (!handler) {\n    return false;\n  }\n\n  var args = Array.prototype.slice.call(arguments, 1);\n\n  if (typeof handler === 'function') {\n    handler.apply(this, args);\n  } else if (isArray(handler)) {\n    var listeners = handler.slice();\n\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n  } else {\n    return false;\n  }\n\n  return true;\n};\n\n},{}],4:[function(require,module,exports){\n/**\n * Expose `Progress`.\n */\n\nmodule.exports = Progress;\n\n/**\n * Initialize a new `Progress` indicator.\n */\nfunction Progress() {\n  this.percent = 0;\n  this.size(0);\n  this.fontSize(11);\n  this.font('helvetica, arial, sans-serif');\n}\n\n/**\n * Set progress size to `size`.\n *\n * @api public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.size = function(size) {\n  this._size = size;\n  return this;\n};\n\n/**\n * Set text to `text`.\n *\n * @api public\n * @param {string} text\n * @return {Progress} Progress instance.\n */\nProgress.prototype.text = function(text) {\n  this._text = text;\n  return this;\n};\n\n/**\n * Set font size to `size`.\n *\n * @api public\n * @param {number} size\n * @return {Progress} Progress instance.\n */\nProgress.prototype.fontSize = function(size) {\n  this._fontSize = size;\n  return this;\n};\n\n/**\n * Set font to `family`.\n *\n * @param {string} family\n * @return {Progress} Progress instance.\n */\nProgress.prototype.font = function(family) {\n  this._font = family;\n  return this;\n};\n\n/**\n * Update percentage to `n`.\n *\n * @param {number} n\n * @return {Progress} Progress instance.\n */\nProgress.prototype.update = function(n) {\n  this.percent = n;\n  return this;\n};\n\n/**\n * Draw on `ctx`.\n *\n * @param {CanvasRenderingContext2d} ctx\n * @return {Progress} Progress instance.\n */\nProgress.prototype.draw = function(ctx) {\n  try {\n    var percent = Math.min(this.percent, 100);\n    var size = this._size;\n    var half = size / 2;\n    var x = half;\n    var y = half;\n    var rad = half - 1;\n    var fontSize = this._fontSize;\n\n    ctx.font = fontSize + 'px ' + this._font;\n\n    var angle = Math.PI * 2 * (percent / 100);\n    ctx.clearRect(0, 0, size, size);\n\n    // outer circle\n    ctx.strokeStyle = '#9f9f9f';\n    ctx.beginPath();\n    ctx.arc(x, y, rad, 0, angle, false);\n    ctx.stroke();\n\n    // inner circle\n    ctx.strokeStyle = '#eee';\n    ctx.beginPath();\n    ctx.arc(x, y, rad - 1, 0, angle, true);\n    ctx.stroke();\n\n    // text\n    var text = this._text || (percent | 0) + '%';\n    var w = ctx.measureText(text).width;\n\n    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);\n  } catch (err) {\n    // don't fail if we can't render progress\n  }\n  return this;\n};\n\n},{}],5:[function(require,module,exports){\n(function (global){\nexports.isatty = function isatty() {\n  return true;\n};\n\nexports.getWindowSize = function getWindowSize() {\n  if ('innerHeight' in global) {\n    return [global.innerHeight, global.innerWidth];\n  }\n  // In a Web Worker, the DOM Window is not available.\n  return [640, 480];\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],6:[function(require,module,exports){\n/**\n * Expose `Context`.\n */\n\nmodule.exports = Context;\n\n/**\n * Initialize a new `Context`.\n *\n * @api private\n */\nfunction Context() {}\n\n/**\n * Set or get the context `Runnable` to `runnable`.\n *\n * @api private\n * @param {Runnable} runnable\n * @return {Context}\n */\nContext.prototype.runnable = function(runnable) {\n  if (!arguments.length) {\n    return this._runnable;\n  }\n  this.test = this._runnable = runnable;\n  return this;\n};\n\n/**\n * Set test timeout `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {Context} self\n */\nContext.prototype.timeout = function(ms) {\n  if (!arguments.length) {\n    return this.runnable().timeout();\n  }\n  this.runnable().timeout(ms);\n  return this;\n};\n\n/**\n * Set test timeout `enabled`.\n *\n * @api private\n * @param {boolean} enabled\n * @return {Context} self\n */\nContext.prototype.enableTimeouts = function(enabled) {\n  this.runnable().enableTimeouts(enabled);\n  return this;\n};\n\n/**\n * Set test slowness threshold `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {Context} self\n */\nContext.prototype.slow = function(ms) {\n  this.runnable().slow(ms);\n  return this;\n};\n\n/**\n * Mark a test as skipped.\n *\n * @api private\n * @return {Context} self\n */\nContext.prototype.skip = function() {\n  this.runnable().skip();\n  return this;\n};\n\n/**\n * Inspect the context void of `._runnable`.\n *\n * @api private\n * @return {string}\n */\nContext.prototype.inspect = function() {\n  return JSON.stringify(this, function(key, val) {\n    return key === 'runnable' || key === 'test' ? undefined : val;\n  }, 2);\n};\n\n},{}],7:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Runnable = require('./runnable');\nvar inherits = require('./utils').inherits;\n\n/**\n * Expose `Hook`.\n */\n\nmodule.exports = Hook;\n\n/**\n * Initialize a new `Hook` with the given `title` and callback `fn`.\n *\n * @param {String} title\n * @param {Function} fn\n * @api private\n */\nfunction Hook(title, fn) {\n  Runnable.call(this, title, fn);\n  this.type = 'hook';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\ninherits(Hook, Runnable);\n\n/**\n * Get or set the test `err`.\n *\n * @param {Error} err\n * @return {Error}\n * @api public\n */\nHook.prototype.error = function(err) {\n  if (!arguments.length) {\n    err = this._error;\n    this._error = null;\n    return err;\n  }\n\n  this._error = err;\n};\n\n},{\"./runnable\":35,\"./utils\":39}],8:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite');\nvar Test = require('../test');\nvar escapeRe = require('escape-string-regexp');\n\n/**\n * BDD-style interface:\n *\n *      describe('Array', function() {\n *        describe('#indexOf()', function() {\n *          it('should return -1 when not present', function() {\n *            // ...\n *          });\n *\n *          it('should return the index when present', function() {\n *            // ...\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha) {\n    var common = require('./common')(suites, context);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`\n     * and callback `fn` containing nested suites\n     * and/or tests.\n     */\n\n    context.describe = context.context = function(title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.file = file;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n      return suite;\n    };\n\n    /**\n     * Pending describe.\n     */\n\n    context.xdescribe = context.xcontext = context.describe.skip = function(title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.pending = true;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n    };\n\n    /**\n     * Exclusive suite.\n     */\n\n    context.describe.only = function(title, fn) {\n      var suite = context.describe(title, fn);\n      mocha.grep(suite.fullTitle());\n      return suite;\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.it = context.specify = function(title, fn) {\n      var suite = suites[0];\n      if (suite.pending) {\n        fn = null;\n      }\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.it.only = function(title, fn) {\n      var test = context.it(title, fn);\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n      return test;\n    };\n\n    /**\n     * Pending test case.\n     */\n\n    context.xit = context.xspecify = context.it.skip = function(title) {\n      context.it(title);\n    };\n  });\n};\n\n},{\"../suite\":37,\"../test\":38,\"./common\":9,\"escape-string-regexp\":68}],9:[function(require,module,exports){\n'use strict';\n\n/**\n * Functions common to more than one interface.\n *\n * @param {Suite[]} suites\n * @param {Context} context\n * @return {Object} An object containing common functions.\n */\nmodule.exports = function(suites, context) {\n  return {\n    /**\n     * This is only present if flag --delay is passed into Mocha. It triggers\n     * root suite execution.\n     *\n     * @param {Suite} suite The root wuite.\n     * @return {Function} A function which runs the root suite\n     */\n    runWithSuite: function runWithSuite(suite) {\n      return function run() {\n        suite.run();\n      };\n    },\n\n    /**\n     * Execute before running tests.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    before: function(name, fn) {\n      suites[0].beforeAll(name, fn);\n    },\n\n    /**\n     * Execute after running tests.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    after: function(name, fn) {\n      suites[0].afterAll(name, fn);\n    },\n\n    /**\n     * Execute before each test case.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    beforeEach: function(name, fn) {\n      suites[0].beforeEach(name, fn);\n    },\n\n    /**\n     * Execute after each test case.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     */\n    afterEach: function(name, fn) {\n      suites[0].afterEach(name, fn);\n    },\n\n    test: {\n      /**\n       * Pending test case.\n       *\n       * @param {string} title\n       */\n      skip: function(title) {\n        context.test(title);\n      }\n    }\n  };\n};\n\n},{}],10:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite');\nvar Test = require('../test');\n\n/**\n * TDD-style interface:\n *\n *     exports.Array = {\n *       '#indexOf()': {\n *         'should return -1 when the value is not present': function() {\n *\n *         },\n *\n *         'should return the correct index when the value is present': function() {\n *\n *         }\n *       }\n *     };\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on('require', visit);\n\n  function visit(obj, file) {\n    var suite;\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        var fn = obj[key];\n        switch (key) {\n          case 'before':\n            suites[0].beforeAll(fn);\n            break;\n          case 'after':\n            suites[0].afterAll(fn);\n            break;\n          case 'beforeEach':\n            suites[0].beforeEach(fn);\n            break;\n          case 'afterEach':\n            suites[0].afterEach(fn);\n            break;\n          default:\n            var test = new Test(key, fn);\n            test.file = file;\n            suites[0].addTest(test);\n        }\n      } else {\n        suite = Suite.create(suites[0], key);\n        suites.unshift(suite);\n        visit(obj[key]);\n        suites.shift();\n      }\n    }\n  }\n};\n\n},{\"../suite\":37,\"../test\":38}],11:[function(require,module,exports){\nexports.bdd = require('./bdd');\nexports.tdd = require('./tdd');\nexports.qunit = require('./qunit');\nexports.exports = require('./exports');\n\n},{\"./bdd\":8,\"./exports\":10,\"./qunit\":12,\"./tdd\":13}],12:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite');\nvar Test = require('../test');\nvar escapeRe = require('escape-string-regexp');\n\n/**\n * QUnit-style interface:\n *\n *     suite('Array');\n *\n *     test('#length', function() {\n *       var arr = [1,2,3];\n *       ok(arr.length == 3);\n *     });\n *\n *     test('#indexOf()', function() {\n *       var arr = [1,2,3];\n *       ok(arr.indexOf(1) == 0);\n *       ok(arr.indexOf(2) == 1);\n *       ok(arr.indexOf(3) == 2);\n *     });\n *\n *     suite('String');\n *\n *     test('#length', function() {\n *       ok('foo'.length == 3);\n *     });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha) {\n    var common = require('./common')(suites, context);\n\n    context.before = common.before;\n    context.after = common.after;\n    context.beforeEach = common.beforeEach;\n    context.afterEach = common.afterEach;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n    /**\n     * Describe a \"suite\" with the given `title`.\n     */\n\n    context.suite = function(title) {\n      if (suites.length > 1) {\n        suites.shift();\n      }\n      var suite = Suite.create(suites[0], title);\n      suite.file = file;\n      suites.unshift(suite);\n      return suite;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.suite.only = function(title, fn) {\n      var suite = context.suite(title, fn);\n      mocha.grep(suite.fullTitle());\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.test = function(title, fn) {\n      var test = new Test(title, fn);\n      test.file = file;\n      suites[0].addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn) {\n      var test = context.test(title, fn);\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n    };\n\n    context.test.skip = common.test.skip;\n  });\n};\n\n},{\"../suite\":37,\"../test\":38,\"./common\":9,\"escape-string-regexp\":68}],13:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite');\nvar Test = require('../test');\nvar escapeRe = require('escape-string-regexp');\n\n/**\n * TDD-style interface:\n *\n *      suite('Array', function() {\n *        suite('#indexOf()', function() {\n *          suiteSetup(function() {\n *\n *          });\n *\n *          test('should return -1 when not present', function() {\n *\n *          });\n *\n *          test('should return the index when present', function() {\n *\n *          });\n *\n *          suiteTeardown(function() {\n *\n *          });\n *        });\n *      });\n *\n * @param {Suite} suite Root suite.\n */\nmodule.exports = function(suite) {\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha) {\n    var common = require('./common')(suites, context);\n\n    context.setup = common.beforeEach;\n    context.teardown = common.afterEach;\n    context.suiteSetup = common.before;\n    context.suiteTeardown = common.after;\n    context.run = mocha.options.delay && common.runWithSuite(suite);\n\n    /**\n     * Describe a \"suite\" with the given `title` and callback `fn` containing\n     * nested suites and/or tests.\n     */\n    context.suite = function(title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.file = file;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n      return suite;\n    };\n\n    /**\n     * Pending suite.\n     */\n    context.suite.skip = function(title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.pending = true;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n    context.suite.only = function(title, fn) {\n      var suite = context.suite(title, fn);\n      mocha.grep(suite.fullTitle());\n    };\n\n    /**\n     * Describe a specification or test-case with the given `title` and\n     * callback `fn` acting as a thunk.\n     */\n    context.test = function(title, fn) {\n      var suite = suites[0];\n      if (suite.pending) {\n        fn = null;\n      }\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn) {\n      var test = context.test(title, fn);\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n    };\n\n    context.test.skip = common.test.skip;\n  });\n};\n\n},{\"../suite\":37,\"../test\":38,\"./common\":9,\"escape-string-regexp\":68}],14:[function(require,module,exports){\n(function (process,global,__dirname){\n/*!\n * mocha\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar escapeRe = require('escape-string-regexp');\nvar path = require('path');\nvar reporters = require('./reporters');\nvar utils = require('./utils');\n\n/**\n * Expose `Mocha`.\n */\n\nexports = module.exports = Mocha;\n\n/**\n * To require local UIs and reporters when running in node.\n */\n\nif (!process.browser) {\n  var cwd = process.cwd();\n  module.paths.push(cwd, path.join(cwd, 'node_modules'));\n}\n\n/**\n * Expose internals.\n */\n\nexports.utils = utils;\nexports.interfaces = require('./interfaces');\nexports.reporters = reporters;\nexports.Runnable = require('./runnable');\nexports.Context = require('./context');\nexports.Runner = require('./runner');\nexports.Suite = require('./suite');\nexports.Hook = require('./hook');\nexports.Test = require('./test');\n\n/**\n * Return image `name` path.\n *\n * @api private\n * @param {string} name\n * @return {string}\n */\nfunction image(name) {\n  return path.join(__dirname, '../images', name + '.png');\n}\n\n/**\n * Set up mocha with `options`.\n *\n * Options:\n *\n *   - `ui` name \"bdd\", \"tdd\", \"exports\" etc\n *   - `reporter` reporter instance, defaults to `mocha.reporters.spec`\n *   - `globals` array of accepted globals\n *   - `timeout` timeout in milliseconds\n *   - `bail` bail on the first test failure\n *   - `slow` milliseconds to wait before considering a test slow\n *   - `ignoreLeaks` ignore global leaks\n *   - `fullTrace` display the full stack-trace on failing\n *   - `grep` string or regexp to filter tests with\n *\n * @param {Object} options\n * @api public\n */\nfunction Mocha(options) {\n  options = options || {};\n  this.files = [];\n  this.options = options;\n  if (options.grep) {\n    this.grep(new RegExp(options.grep));\n  }\n  if (options.fgrep) {\n    this.grep(options.fgrep);\n  }\n  this.suite = new exports.Suite('', new exports.Context());\n  this.ui(options.ui);\n  this.bail(options.bail);\n  this.reporter(options.reporter, options.reporterOptions);\n  if (typeof options.timeout !== 'undefined' && options.timeout !== null) {\n    this.timeout(options.timeout);\n  }\n  this.useColors(options.useColors);\n  if (options.enableTimeouts !== null) {\n    this.enableTimeouts(options.enableTimeouts);\n  }\n  if (options.slow) {\n    this.slow(options.slow);\n  }\n\n  this.suite.on('pre-require', function(context) {\n    exports.afterEach = context.afterEach || context.teardown;\n    exports.after = context.after || context.suiteTeardown;\n    exports.beforeEach = context.beforeEach || context.setup;\n    exports.before = context.before || context.suiteSetup;\n    exports.describe = context.describe || context.suite;\n    exports.it = context.it || context.test;\n    exports.setup = context.setup || context.beforeEach;\n    exports.suiteSetup = context.suiteSetup || context.before;\n    exports.suiteTeardown = context.suiteTeardown || context.after;\n    exports.suite = context.suite || context.describe;\n    exports.teardown = context.teardown || context.afterEach;\n    exports.test = context.test || context.it;\n    exports.run = context.run;\n  });\n}\n\n/**\n * Enable or disable bailing on the first failure.\n *\n * @api public\n * @param {boolean} [bail]\n */\nMocha.prototype.bail = function(bail) {\n  if (!arguments.length) {\n    bail = true;\n  }\n  this.suite.bail(bail);\n  return this;\n};\n\n/**\n * Add test `file`.\n *\n * @api public\n * @param {string} file\n */\nMocha.prototype.addFile = function(file) {\n  this.files.push(file);\n  return this;\n};\n\n/**\n * Set reporter to `reporter`, defaults to \"spec\".\n *\n * @param {String|Function} reporter name or constructor\n * @param {Object} reporterOptions optional options\n * @api public\n * @param {string|Function} reporter name or constructor\n * @param {Object} reporterOptions optional options\n */\nMocha.prototype.reporter = function(reporter, reporterOptions) {\n  if (typeof reporter === 'function') {\n    this._reporter = reporter;\n  } else {\n    reporter = reporter || 'spec';\n    var _reporter;\n    // Try to load a built-in reporter.\n    if (reporters[reporter]) {\n      _reporter = reporters[reporter];\n    }\n    // Try to load reporters from process.cwd() and node_modules\n    if (!_reporter) {\n      try {\n        _reporter = require(reporter);\n      } catch (err) {\n        err.message.indexOf('Cannot find module') !== -1\n          ? console.warn('\"' + reporter + '\" reporter not found')\n          : console.warn('\"' + reporter + '\" reporter blew up with error:\\n' + err.stack);\n      }\n    }\n    if (!_reporter && reporter === 'teamcity') {\n      console.warn('The Teamcity reporter was moved to a package named '\n        + 'mocha-teamcity-reporter '\n        + '(https://npmjs.org/package/mocha-teamcity-reporter).');\n    }\n    if (!_reporter) {\n      throw new Error('invalid reporter \"' + reporter + '\"');\n    }\n    this._reporter = _reporter;\n  }\n  this.options.reporterOptions = reporterOptions;\n  return this;\n};\n\n/**\n * Set test UI `name`, defaults to \"bdd\".\n *\n * @api public\n * @param {string} bdd\n */\nMocha.prototype.ui = function(name) {\n  name = name || 'bdd';\n  this._ui = exports.interfaces[name];\n  if (!this._ui) {\n    try {\n      this._ui = require(name);\n    } catch (err) {\n      throw new Error('invalid interface \"' + name + '\"');\n    }\n  }\n  this._ui = this._ui(this.suite);\n  return this;\n};\n\n/**\n * Load registered files.\n *\n * @api private\n */\nMocha.prototype.loadFiles = function(fn) {\n  var self = this;\n  var suite = this.suite;\n  var pending = this.files.length;\n  this.files.forEach(function(file) {\n    file = path.resolve(file);\n    suite.emit('pre-require', global, file, self);\n    suite.emit('require', require(file), file, self);\n    suite.emit('post-require', global, file, self);\n    --pending || (fn && fn());\n  });\n};\n\n/**\n * Enable growl support.\n *\n * @api private\n */\nMocha.prototype._growl = function(runner, reporter) {\n  var notify = require('growl');\n\n  runner.on('end', function() {\n    var stats = reporter.stats;\n    if (stats.failures) {\n      var msg = stats.failures + ' of ' + runner.total + ' tests failed';\n      notify(msg, { name: 'mocha', title: 'Failed', image: image('error') });\n    } else {\n      notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', {\n        name: 'mocha',\n        title: 'Passed',\n        image: image('ok')\n      });\n    }\n  });\n};\n\n/**\n * Add regexp to grep, if `re` is a string it is escaped.\n *\n * @param {RegExp|String} re\n * @return {Mocha}\n * @api public\n * @param {RegExp|string} re\n * @return {Mocha}\n */\nMocha.prototype.grep = function(re) {\n  this.options.grep = typeof re === 'string' ? new RegExp(escapeRe(re)) : re;\n  return this;\n};\n\n/**\n * Invert `.grep()` matches.\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.invert = function() {\n  this.options.invert = true;\n  return this;\n};\n\n/**\n * Ignore global leaks.\n *\n * @param {Boolean} ignore\n * @return {Mocha}\n * @api public\n * @param {boolean} ignore\n * @return {Mocha}\n */\nMocha.prototype.ignoreLeaks = function(ignore) {\n  this.options.ignoreLeaks = Boolean(ignore);\n  return this;\n};\n\n/**\n * Enable global leak checking.\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.checkLeaks = function() {\n  this.options.ignoreLeaks = false;\n  return this;\n};\n\n/**\n * Display long stack-trace on failing\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.fullTrace = function() {\n  this.options.fullStackTrace = true;\n  return this;\n};\n\n/**\n * Enable growl support.\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.growl = function() {\n  this.options.growl = true;\n  return this;\n};\n\n/**\n * Ignore `globals` array or string.\n *\n * @param {Array|String} globals\n * @return {Mocha}\n * @api public\n * @param {Array|string} globals\n * @return {Mocha}\n */\nMocha.prototype.globals = function(globals) {\n  this.options.globals = (this.options.globals || []).concat(globals);\n  return this;\n};\n\n/**\n * Emit color output.\n *\n * @param {Boolean} colors\n * @return {Mocha}\n * @api public\n * @param {boolean} colors\n * @return {Mocha}\n */\nMocha.prototype.useColors = function(colors) {\n  if (colors !== undefined) {\n    this.options.useColors = colors;\n  }\n  return this;\n};\n\n/**\n * Use inline diffs rather than +/-.\n *\n * @param {Boolean} inlineDiffs\n * @return {Mocha}\n * @api public\n * @param {boolean} inlineDiffs\n * @return {Mocha}\n */\nMocha.prototype.useInlineDiffs = function(inlineDiffs) {\n  this.options.useInlineDiffs = inlineDiffs !== undefined && inlineDiffs;\n  return this;\n};\n\n/**\n * Set the timeout in milliseconds.\n *\n * @param {Number} timeout\n * @return {Mocha}\n * @api public\n * @param {number} timeout\n * @return {Mocha}\n */\nMocha.prototype.timeout = function(timeout) {\n  this.suite.timeout(timeout);\n  return this;\n};\n\n/**\n * Set slowness threshold in milliseconds.\n *\n * @param {Number} slow\n * @return {Mocha}\n * @api public\n * @param {number} slow\n * @return {Mocha}\n */\nMocha.prototype.slow = function(slow) {\n  this.suite.slow(slow);\n  return this;\n};\n\n/**\n * Enable timeouts.\n *\n * @param {Boolean} enabled\n * @return {Mocha}\n * @api public\n * @param {boolean} enabled\n * @return {Mocha}\n */\nMocha.prototype.enableTimeouts = function(enabled) {\n  this.suite.enableTimeouts(arguments.length && enabled !== undefined ? enabled : true);\n  return this;\n};\n\n/**\n * Makes all tests async (accepting a callback)\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.asyncOnly = function() {\n  this.options.asyncOnly = true;\n  return this;\n};\n\n/**\n * Disable syntax highlighting (in browser).\n *\n * @api public\n */\nMocha.prototype.noHighlighting = function() {\n  this.options.noHighlighting = true;\n  return this;\n};\n\n/**\n * Enable uncaught errors to propagate (in browser).\n *\n * @return {Mocha}\n * @api public\n */\nMocha.prototype.allowUncaught = function() {\n  this.options.allowUncaught = true;\n  return this;\n};\n\n/**\n * Delay root suite execution.\n * @returns {Mocha}\n */\nMocha.prototype.delay = function delay() {\n  this.options.delay = true;\n  return this;\n};\n\n/**\n * Run tests and invoke `fn()` when complete.\n *\n * @api public\n * @param {Function} fn\n * @return {Runner}\n */\nMocha.prototype.run = function(fn) {\n  if (this.files.length) {\n    this.loadFiles();\n  }\n  var suite = this.suite;\n  var options = this.options;\n  options.files = this.files;\n  var runner = new exports.Runner(suite, options.delay);\n  var reporter = new this._reporter(runner, options);\n  runner.ignoreLeaks = options.ignoreLeaks !== false;\n  runner.fullStackTrace = options.fullStackTrace;\n  runner.asyncOnly = options.asyncOnly;\n  runner.allowUncaught = options.allowUncaught;\n  if (options.grep) {\n    runner.grep(options.grep, options.invert);\n  }\n  if (options.globals) {\n    runner.globals(options.globals);\n  }\n  if (options.growl) {\n    this._growl(runner, reporter);\n  }\n  if (options.useColors !== undefined) {\n    exports.reporters.Base.useColors = options.useColors;\n  }\n  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;\n\n  function done(failures) {\n    if (reporter.done) {\n      reporter.done(failures, fn);\n    } else {\n      fn && fn(failures);\n    }\n  }\n\n  return runner.run(done);\n};\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},\"/lib\")\n},{\"./context\":6,\"./hook\":7,\"./interfaces\":11,\"./reporters\":22,\"./runnable\":35,\"./runner\":36,\"./suite\":37,\"./test\":38,\"./utils\":39,\"_process\":51,\"escape-string-regexp\":68,\"growl\":69,\"path\":41}],15:[function(require,module,exports){\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @api public\n * @param {string|number} val\n * @param {Object} options\n * @return {string|number}\n */\nmodule.exports = function(val, options) {\n  options = options || {};\n  if (typeof val === 'string') {\n    return parse(val);\n  }\n  // https://github.com/mochajs/mocha/pull/1035\n  return options['long'] ? longFormat(val) : shortFormat(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @api private\n * @param {string} str\n * @return {number}\n */\nfunction parse(str) {\n  var match = (/^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i).exec(str);\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 's':\n      return n * s;\n    case 'ms':\n      return n;\n    default:\n      // No default case\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {string}\n */\nfunction shortFormat(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @api private\n * @param {number} ms\n * @return {string}\n */\nfunction longFormat(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n *\n * @api private\n * @param {number} ms\n * @param {number} n\n * @param {string} name\n */\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n},{}],16:[function(require,module,exports){\n\n/**\n * Expose `Pending`.\n */\n\nmodule.exports = Pending;\n\n/**\n * Initialize a new `Pending` error with the given message.\n *\n * @param {string} message\n */\nfunction Pending(message) {\n  this.message = message;\n}\n\n},{}],17:[function(require,module,exports){\n(function (process,global){\n/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar diff = require('diff');\nvar ms = require('../ms');\nvar utils = require('../utils');\nvar supportsColor = process.browser ? null : require('supports-color');\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Save timer references to avoid Sinon interfering.\n * See: https://github.com/mochajs/mocha/issues/237\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = tty.isatty(1) && tty.isatty(2);\n\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors = !process.browser && (supportsColor || (process.env.MOCHA_COLORS !== undefined));\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: '✓',\n  err: '✖',\n  dot: '․'\n};\n\n// With node.js on Windows: use symbols available in terminal default fonts\nif (process.platform === 'win32') {\n  exports.symbols.ok = '\\u221A';\n  exports.symbols.err = '\\u00D7';\n  exports.symbols.dot = '.';\n}\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @param {string} type\n * @param {string} str\n * @return {string}\n * @api private\n */\nvar color = exports.color = function(type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  exports.window.width = process.stdout.getWindowSize\n      ? process.stdout.getWindowSize(1)[0]\n      : tty.getWindowSize()[1];\n}\n\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function() {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n\n  show: function() {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n\n  deleteLine: function() {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n\n  beginningOfLine: function() {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n\n  CR: function() {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\n/**\n * Outut the given `failures` as a list.\n *\n * @param {Array} failures\n * @api public\n */\n\nexports.list = function(failures) {\n  console.log();\n  failures.forEach(function(test, i) {\n    // format\n    var fmt = color('error title', '  %s) %s:\\n')\n      + color('error message', '     %s')\n      + color('error stack', '\\n%s\\n');\n\n    // msg\n    var msg;\n    var err = test.err;\n    var message;\n    if (err.message) {\n      message = err.message;\n    } else if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else {\n      message = '';\n    }\n    var stack = err.stack || message;\n    var index = stack.indexOf(message);\n    var actual = err.actual;\n    var expected = err.expected;\n    var escape = true;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index);\n      // remove msg from stack\n      stack = stack.slice(index + 1);\n    }\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n    // explicitly show diff\n    if (err.showDiff !== false && sameType(actual, expected) && expected !== undefined) {\n      escape = false;\n      if (!(utils.isString(actual) && utils.isString(expected))) {\n        err.actual = actual = utils.stringify(actual);\n        err.expected = expected = utils.stringify(expected);\n      }\n\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      if (exports.inlineDiffs) {\n        msg += inlineDiff(err, escape);\n      } else {\n        msg += unifiedDiff(err, escape);\n      }\n    }\n\n    // indent stack trace\n    stack = stack.replace(/^/gm, '  ');\n\n    console.log(fmt, (i + 1), test.fullTitle(), msg, stack);\n  });\n};\n\n/**\n * Initialize a new `Base` reporter.\n *\n * All other reporters generally\n * inherit from this reporter, providing\n * stats such as test duration, number\n * of tests passed / failed etc.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Base(runner) {\n  var stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 };\n  var failures = this.failures = [];\n\n  if (!runner) {\n    return;\n  }\n  this.runner = runner;\n\n  runner.stats = stats;\n\n  runner.on('start', function() {\n    stats.start = new Date();\n  });\n\n  runner.on('suite', function(suite) {\n    stats.suites = stats.suites || 0;\n    suite.root || stats.suites++;\n  });\n\n  runner.on('test end', function() {\n    stats.tests = stats.tests || 0;\n    stats.tests++;\n  });\n\n  runner.on('pass', function(test) {\n    stats.passes = stats.passes || 0;\n\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n\n    stats.passes++;\n  });\n\n  runner.on('fail', function(test, err) {\n    stats.failures = stats.failures || 0;\n    stats.failures++;\n    test.err = err;\n    failures.push(test);\n  });\n\n  runner.on('end', function() {\n    stats.end = new Date();\n    stats.duration = new Date() - stats.start;\n  });\n\n  runner.on('pending', function() {\n    stats.pending++;\n  });\n}\n\n/**\n * Output common epilogue used by many of\n * the bundled reporters.\n *\n * @api public\n */\nBase.prototype.epilogue = function() {\n  var stats = this.stats;\n  var fmt;\n\n  console.log();\n\n  // passes\n  fmt = color('bright pass', ' ')\n    + color('green', ' %d passing')\n    + color('light', ' (%s)');\n\n  console.log(fmt,\n    stats.passes || 0,\n    ms(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ')\n      + color('pending', ' %d pending');\n\n    console.log(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n\n    console.log(fmt, stats.failures);\n\n    Base.list(this.failures);\n    console.log();\n  }\n\n  console.log();\n};\n\n/**\n * Pad the given `str` to `len`.\n *\n * @api private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n/**\n * Returns an inline diff between 2 strings with coloured ANSI output\n *\n * @api private\n * @param {Error} err with actual/expected\n * @param {boolean} escape\n * @return {string} Diff\n */\nfunction inlineDiff(err, escape) {\n  var msg = errorDiff(err, 'WordsWithSpace', escape);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines.map(function(str, i) {\n      return pad(++i, width) + ' |' + ' ' + str;\n    }).join('\\n');\n  }\n\n  // legend\n  msg = '\\n'\n    + color('diff removed', 'actual')\n    + ' '\n    + color('diff added', 'expected')\n    + '\\n\\n'\n    + msg\n    + '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns a unified diff between two strings.\n *\n * @api private\n * @param {Error} err with actual/expected\n * @param {boolean} escape\n * @return {string} The diff.\n */\nfunction unifiedDiff(err, escape) {\n  var indent = '      ';\n  function cleanUp(line) {\n    if (escape) {\n      line = escapeInvisibles(line);\n    }\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n    if (line.match(/\\@\\@/)) {\n      return null;\n    }\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n    return indent + line;\n  }\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n  var msg = diff.createPatch('string', err.actual, err.expected);\n  var lines = msg.split('\\n').splice(4);\n  return '\\n      '\n    + colorLines('diff added', '+ expected') + ' '\n    + colorLines('diff removed', '- actual')\n    + '\\n\\n'\n    + lines.map(cleanUp).filter(notBlank).join('\\n');\n}\n\n/**\n * Return a character diff for `err`.\n *\n * @api private\n * @param {Error} err\n * @param {string} type\n * @param {boolean} escape\n * @return {string}\n */\nfunction errorDiff(err, type, escape) {\n  var actual = escape ? escapeInvisibles(err.actual) : err.actual;\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;\n  return diff['diff' + type](actual, expected).map(function(str) {\n    if (str.added) {\n      return colorLines('diff added', str.value);\n    }\n    if (str.removed) {\n      return colorLines('diff removed', str.value);\n    }\n    return str.value;\n  }).join('');\n}\n\n/**\n * Returns a string with all invisible characters in plain text\n *\n * @api private\n * @param {string} line\n * @return {string}\n */\nfunction escapeInvisibles(line) {\n  return line.replace(/\\t/g, '<tab>')\n    .replace(/\\r/g, '<CR>')\n    .replace(/\\n/g, '<LF>\\n');\n}\n\n/**\n * Color lines for `str`, using the color `name`.\n *\n * @api private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\nfunction colorLines(name, str) {\n  return str.split('\\n').map(function(str) {\n    return color(name, str);\n  }).join('\\n');\n}\n\n/**\n * Object#toString reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Check that a / b have the same type.\n *\n * @api private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../ms\":15,\"../utils\":39,\"_process\":51,\"diff\":67,\"supports-color\":41,\"tty\":5}],18:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\n\n/**\n * Expose `Doc`.\n */\n\nexports = module.exports = Doc;\n\n/**\n * Initialize a new `Doc` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\nfunction Doc(runner) {\n  Base.call(this, runner);\n\n  var indents = 2;\n\n  function indent() {\n    return Array(indents).join('  ');\n  }\n\n  runner.on('suite', function(suite) {\n    if (suite.root) {\n      return;\n    }\n    ++indents;\n    console.log('%s<section class=\"suite\">', indent());\n    ++indents;\n    console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));\n    console.log('%s<dl>', indent());\n  });\n\n  runner.on('suite end', function(suite) {\n    if (suite.root) {\n      return;\n    }\n    console.log('%s</dl>', indent());\n    --indents;\n    console.log('%s</section>', indent());\n    --indents;\n  });\n\n  runner.on('pass', function(test) {\n    console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));\n    var code = utils.escape(utils.clean(test.fn.toString()));\n    console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);\n  });\n\n  runner.on('fail', function(test, err) {\n    console.log('%s  <dt class=\"error\">%s</dt>', indent(), utils.escape(test.title));\n    var code = utils.escape(utils.clean(test.fn.toString()));\n    console.log('%s  <dd class=\"error\"><pre><code>%s</code></pre></dd>', indent(), code);\n    console.log('%s  <dd class=\"error\">%s</dd>', indent(), utils.escape(err));\n  });\n}\n\n},{\"../utils\":39,\"./base\":17}],19:[function(require,module,exports){\n(function (process){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\n\n/**\n * Expose `Dot`.\n */\n\nexports = module.exports = Dot;\n\n/**\n * Initialize a new `Dot` matrix test reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction Dot(runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var width = Base.window.width * .75 | 0;\n  var n = -1;\n\n  runner.on('start', function() {\n    process.stdout.write('\\n');\n  });\n\n  runner.on('pending', function() {\n    if (++n % width === 0) {\n      process.stdout.write('\\n  ');\n    }\n    process.stdout.write(color('pending', Base.symbols.dot));\n  });\n\n  runner.on('pass', function(test) {\n    if (++n % width === 0) {\n      process.stdout.write('\\n  ');\n    }\n    if (test.speed === 'slow') {\n      process.stdout.write(color('bright yellow', Base.symbols.dot));\n    } else {\n      process.stdout.write(color(test.speed, Base.symbols.dot));\n    }\n  });\n\n  runner.on('fail', function() {\n    if (++n % width === 0) {\n      process.stdout.write('\\n  ');\n    }\n    process.stdout.write(color('fail', Base.symbols.dot));\n  });\n\n  runner.on('end', function() {\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Dot, Base);\n\n}).call(this,require('_process'))\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],20:[function(require,module,exports){\n(function (process,__dirname){\n/**\n * Module dependencies.\n */\n\nvar JSONCov = require('./json-cov');\nvar readFileSync = require('fs').readFileSync;\nvar join = require('path').join;\n\n/**\n * Expose `HTMLCov`.\n */\n\nexports = module.exports = HTMLCov;\n\n/**\n * Initialize a new `JsCoverage` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction HTMLCov(runner) {\n  var jade = require('jade');\n  var file = join(__dirname, '/templates/coverage.jade');\n  var str = readFileSync(file, 'utf8');\n  var fn = jade.compile(str, { filename: file });\n  var self = this;\n\n  JSONCov.call(this, runner, false);\n\n  runner.on('end', function() {\n    process.stdout.write(fn({\n      cov: self.cov,\n      coverageClass: coverageClass\n    }));\n  });\n}\n\n/**\n * Return coverage class for a given coverage percentage.\n *\n * @api private\n * @param {number} coveragePctg\n * @return {string}\n */\nfunction coverageClass(coveragePctg) {\n  if (coveragePctg >= 75) {\n    return 'high';\n  }\n  if (coveragePctg >= 50) {\n    return 'medium';\n  }\n  if (coveragePctg >= 25) {\n    return 'low';\n  }\n  return 'terrible';\n}\n\n}).call(this,require('_process'),\"/lib/reporters\")\n},{\"./json-cov\":23,\"_process\":51,\"fs\":41,\"jade\":41,\"path\":41}],21:[function(require,module,exports){\n(function (global){\n/* eslint-env browser */\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\nvar Progress = require('../browser/progress');\nvar escapeRe = require('escape-string-regexp');\nvar escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Expose `HTML`.\n */\n\nexports = module.exports = HTML;\n\n/**\n * Stats template.\n */\n\nvar statsTemplate = '<ul id=\"mocha-stats\">'\n  + '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>'\n  + '<li class=\"passes\"><a href=\"javascript:void(0);\">passes:</a> <em>0</em></li>'\n  + '<li class=\"failures\"><a href=\"javascript:void(0);\">failures:</a> <em>0</em></li>'\n  + '<li class=\"duration\">duration: <em>0</em>s</li>'\n  + '</ul>';\n\n/**\n * Initialize a new `HTML` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction HTML(runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var stats = this.stats;\n  var stat = fragment(statsTemplate);\n  var items = stat.getElementsByTagName('li');\n  var passes = items[1].getElementsByTagName('em')[0];\n  var passesLink = items[1].getElementsByTagName('a')[0];\n  var failures = items[2].getElementsByTagName('em')[0];\n  var failuresLink = items[2].getElementsByTagName('a')[0];\n  var duration = items[3].getElementsByTagName('em')[0];\n  var canvas = stat.getElementsByTagName('canvas')[0];\n  var report = fragment('<ul id=\"mocha-report\"></ul>');\n  var stack = [report];\n  var progress;\n  var ctx;\n  var root = document.getElementById('mocha');\n\n  if (canvas.getContext) {\n    var ratio = window.devicePixelRatio || 1;\n    canvas.style.width = canvas.width;\n    canvas.style.height = canvas.height;\n    canvas.width *= ratio;\n    canvas.height *= ratio;\n    ctx = canvas.getContext('2d');\n    ctx.scale(ratio, ratio);\n    progress = new Progress();\n  }\n\n  if (!root) {\n    return error('#mocha div missing, add it to your document');\n  }\n\n  // pass toggle\n  on(passesLink, 'click', function() {\n    unhide();\n    var name = (/pass/).test(report.className) ? '' : ' pass';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) {\n      hideSuitesWithout('test pass');\n    }\n  });\n\n  // failure toggle\n  on(failuresLink, 'click', function() {\n    unhide();\n    var name = (/fail/).test(report.className) ? '' : ' fail';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) {\n      hideSuitesWithout('test fail');\n    }\n  });\n\n  root.appendChild(stat);\n  root.appendChild(report);\n\n  if (progress) {\n    progress.size(40);\n  }\n\n  runner.on('suite', function(suite) {\n    if (suite.root) {\n      return;\n    }\n\n    // suite\n    var url = self.suiteURL(suite);\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title));\n\n    // container\n    stack[0].appendChild(el);\n    stack.unshift(document.createElement('ul'));\n    el.appendChild(stack[0]);\n  });\n\n  runner.on('suite end', function(suite) {\n    if (suite.root) {\n      return;\n    }\n    stack.shift();\n  });\n\n  runner.on('fail', function(test) {\n    if (test.type === 'hook') {\n      runner.emit('test end', test);\n    }\n  });\n\n  runner.on('test end', function(test) {\n    // TODO: add to stats\n    var percent = stats.tests / this.total * 100 | 0;\n    if (progress) {\n      progress.update(percent).draw(ctx);\n    }\n\n    // update stats\n    var ms = new Date() - stats.start;\n    text(passes, stats.passes);\n    text(failures, stats.failures);\n    text(duration, (ms / 1000).toFixed(2));\n\n    // test\n    var el;\n    if (test.state === 'passed') {\n      var url = self.testURL(test);\n      el = fragment('<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> <a href=\"%s\" class=\"replay\">‣</a></h2></li>', test.speed, test.title, test.duration, url);\n    } else if (test.pending) {\n      el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);\n    } else {\n      el = fragment('<li class=\"test fail\"><h2>%e <a href=\"%e\" class=\"replay\">‣</a></h2></li>', test.title, self.testURL(test));\n      var stackString; // Note: Includes leading newline\n      var message = test.err.toString();\n\n      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we\n      // check for the result of the stringifying.\n      if (message === '[object Error]') {\n        message = test.err.message;\n      }\n\n      if (test.err.stack) {\n        var indexOfMessage = test.err.stack.indexOf(test.err.message);\n        if (indexOfMessage === -1) {\n          stackString = test.err.stack;\n        } else {\n          stackString = test.err.stack.substr(test.err.message.length + indexOfMessage);\n        }\n      } else if (test.err.sourceURL && test.err.line !== undefined) {\n        // Safari doesn't give you a stack. Let's at least provide a source line.\n        stackString = '\\n(' + test.err.sourceURL + ':' + test.err.line + ')';\n      }\n\n      stackString = stackString || '';\n\n      if (test.err.htmlMessage && stackString) {\n        el.appendChild(fragment('<div class=\"html-error\">%s\\n<pre class=\"error\">%e</pre></div>', test.err.htmlMessage, stackString));\n      } else if (test.err.htmlMessage) {\n        el.appendChild(fragment('<div class=\"html-error\">%s</div>', test.err.htmlMessage));\n      } else {\n        el.appendChild(fragment('<pre class=\"error\">%e%e</pre>', message, stackString));\n      }\n    }\n\n    // toggle code\n    // TODO: defer\n    if (!test.pending) {\n      var h2 = el.getElementsByTagName('h2')[0];\n\n      on(h2, 'click', function() {\n        pre.style.display = pre.style.display === 'none' ? 'block' : 'none';\n      });\n\n      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.fn.toString()));\n      el.appendChild(pre);\n      pre.style.display = 'none';\n    }\n\n    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.\n    if (stack[0]) {\n      stack[0].appendChild(el);\n    }\n  });\n}\n\n/**\n * Makes a URL, preserving querystring (\"search\") parameters.\n *\n * @param {string} s\n * @return {string} A new URL.\n */\nfunction makeUrl(s) {\n  var search = window.location.search;\n\n  // Remove previous grep query parameter if present\n  if (search) {\n    search = search.replace(/[?&]grep=[^&\\s]*/g, '').replace(/^&/, '?');\n  }\n\n  return window.location.pathname + (search ? search + '&' : '?') + 'grep=' + encodeURIComponent(escapeRe(s));\n}\n\n/**\n * Provide suite URL.\n *\n * @param {Object} [suite]\n */\nHTML.prototype.suiteURL = function(suite) {\n  return makeUrl(suite.fullTitle());\n};\n\n/**\n * Provide test URL.\n *\n * @param {Object} [test]\n */\nHTML.prototype.testURL = function(test) {\n  return makeUrl(test.fullTitle());\n};\n\n/**\n * Display error `msg`.\n *\n * @param {string} msg\n */\nfunction error(msg) {\n  document.body.appendChild(fragment('<div id=\"mocha-error\">%s</div>', msg));\n}\n\n/**\n * Return a DOM fragment from `html`.\n *\n * @param {string} html\n */\nfunction fragment(html) {\n  var args = arguments;\n  var div = document.createElement('div');\n  var i = 1;\n\n  div.innerHTML = html.replace(/%([se])/g, function(_, type) {\n    switch (type) {\n      case 's': return String(args[i++]);\n      case 'e': return escape(args[i++]);\n      // no default\n    }\n  });\n\n  return div.firstChild;\n}\n\n/**\n * Check for suites that do not have elements\n * with `classname`, and hide them.\n *\n * @param {text} classname\n */\nfunction hideSuitesWithout(classname) {\n  var suites = document.getElementsByClassName('suite');\n  for (var i = 0; i < suites.length; i++) {\n    var els = suites[i].getElementsByClassName(classname);\n    if (!els.length) {\n      suites[i].className += ' hidden';\n    }\n  }\n}\n\n/**\n * Unhide .hidden suites.\n */\nfunction unhide() {\n  var els = document.getElementsByClassName('suite hidden');\n  for (var i = 0; i < els.length; ++i) {\n    els[i].className = els[i].className.replace('suite hidden', 'suite');\n  }\n}\n\n/**\n * Set an element's text contents.\n *\n * @param {HTMLElement} el\n * @param {string} contents\n */\nfunction text(el, contents) {\n  if (el.textContent) {\n    el.textContent = contents;\n  } else {\n    el.innerText = contents;\n  }\n}\n\n/**\n * Listen on `event` with callback `fn`.\n */\nfunction on(el, event, fn) {\n  if (el.addEventListener) {\n    el.addEventListener(event, fn, false);\n  } else {\n    el.attachEvent('on' + event, fn);\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../browser/progress\":4,\"../utils\":39,\"./base\":17,\"escape-string-regexp\":68}],22:[function(require,module,exports){\n// Alias exports to a their normalized format Mocha#reporter to prevent a need\n// for dynamic (try/catch) requires, which Browserify doesn't handle.\nexports.Base = exports.base = require('./base');\nexports.Dot = exports.dot = require('./dot');\nexports.Doc = exports.doc = require('./doc');\nexports.TAP = exports.tap = require('./tap');\nexports.JSON = exports.json = require('./json');\nexports.HTML = exports.html = require('./html');\nexports.List = exports.list = require('./list');\nexports.Min = exports.min = require('./min');\nexports.Spec = exports.spec = require('./spec');\nexports.Nyan = exports.nyan = require('./nyan');\nexports.XUnit = exports.xunit = require('./xunit');\nexports.Markdown = exports.markdown = require('./markdown');\nexports.Progress = exports.progress = require('./progress');\nexports.Landing = exports.landing = require('./landing');\nexports.JSONCov = exports['json-cov'] = require('./json-cov');\nexports.HTMLCov = exports['html-cov'] = require('./html-cov');\nexports.JSONStream = exports['json-stream'] = require('./json-stream');\n\n},{\"./base\":17,\"./doc\":18,\"./dot\":19,\"./html\":21,\"./html-cov\":20,\"./json\":25,\"./json-cov\":23,\"./json-stream\":24,\"./landing\":26,\"./list\":27,\"./markdown\":28,\"./min\":29,\"./nyan\":30,\"./progress\":31,\"./spec\":32,\"./tap\":33,\"./xunit\":34}],23:[function(require,module,exports){\n(function (process,global){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\n/**\n * Expose `JSONCov`.\n */\n\nexports = module.exports = JSONCov;\n\n/**\n * Initialize a new `JsCoverage` reporter.\n *\n * @api public\n * @param {Runner} runner\n * @param {boolean} output\n */\nfunction JSONCov(runner, output) {\n  Base.call(this, runner);\n\n  output = arguments.length === 1 || output;\n  var self = this;\n  var tests = [];\n  var failures = [];\n  var passes = [];\n\n  runner.on('test end', function(test) {\n    tests.push(test);\n  });\n\n  runner.on('pass', function(test) {\n    passes.push(test);\n  });\n\n  runner.on('fail', function(test) {\n    failures.push(test);\n  });\n\n  runner.on('end', function() {\n    var cov = global._$jscoverage || {};\n    var result = self.cov = map(cov);\n    result.stats = self.stats;\n    result.tests = tests.map(clean);\n    result.failures = failures.map(clean);\n    result.passes = passes.map(clean);\n    if (!output) {\n      return;\n    }\n    process.stdout.write(JSON.stringify(result, null, 2));\n  });\n}\n\n/**\n * Map jscoverage data to a JSON structure\n * suitable for reporting.\n *\n * @api private\n * @param {Object} cov\n * @return {Object}\n */\n\nfunction map(cov) {\n  var ret = {\n    instrumentation: 'node-jscoverage',\n    sloc: 0,\n    hits: 0,\n    misses: 0,\n    coverage: 0,\n    files: []\n  };\n\n  for (var filename in cov) {\n    if (Object.prototype.hasOwnProperty.call(cov, filename)) {\n      var data = coverage(filename, cov[filename]);\n      ret.files.push(data);\n      ret.hits += data.hits;\n      ret.misses += data.misses;\n      ret.sloc += data.sloc;\n    }\n  }\n\n  ret.files.sort(function(a, b) {\n    return a.filename.localeCompare(b.filename);\n  });\n\n  if (ret.sloc > 0) {\n    ret.coverage = (ret.hits / ret.sloc) * 100;\n  }\n\n  return ret;\n}\n\n/**\n * Map jscoverage data for a single source file\n * to a JSON structure suitable for reporting.\n *\n * @api private\n * @param {string} filename name of the source file\n * @param {Object} data jscoverage coverage data\n * @return {Object}\n */\nfunction coverage(filename, data) {\n  var ret = {\n    filename: filename,\n    coverage: 0,\n    hits: 0,\n    misses: 0,\n    sloc: 0,\n    source: {}\n  };\n\n  data.source.forEach(function(line, num) {\n    num++;\n\n    if (data[num] === 0) {\n      ret.misses++;\n      ret.sloc++;\n    } else if (data[num] !== undefined) {\n      ret.hits++;\n      ret.sloc++;\n    }\n\n    ret.source[num] = {\n      source: line,\n      coverage: data[num] === undefined ? '' : data[num]\n    };\n  });\n\n  ret.coverage = ret.hits / ret.sloc * 100;\n\n  return ret;\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @api private\n * @param {Object} test\n * @return {Object}\n */\nfunction clean(test) {\n  return {\n    duration: test.duration,\n    fullTitle: test.fullTitle(),\n    title: test.title\n  };\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./base\":17,\"_process\":51}],24:[function(require,module,exports){\n(function (process){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\n/**\n * Expose `List`.\n */\n\nexports = module.exports = List;\n\n/**\n * Initialize a new `List` test reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction List(runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var total = runner.total;\n\n  runner.on('start', function() {\n    console.log(JSON.stringify(['start', { total: total }]));\n  });\n\n  runner.on('pass', function(test) {\n    console.log(JSON.stringify(['pass', clean(test)]));\n  });\n\n  runner.on('fail', function(test, err) {\n    test = clean(test);\n    test.err = err.message;\n    test.stack = err.stack || null;\n    console.log(JSON.stringify(['fail', test]));\n  });\n\n  runner.on('end', function() {\n    process.stdout.write(JSON.stringify(['end', self.stats]));\n  });\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @api private\n * @param {Object} test\n * @return {Object}\n */\nfunction clean(test) {\n  return {\n    title: test.title,\n    fullTitle: test.fullTitle(),\n    duration: test.duration\n  };\n}\n\n}).call(this,require('_process'))\n},{\"./base\":17,\"_process\":51}],25:[function(require,module,exports){\n(function (process){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\n/**\n * Expose `JSON`.\n */\n\nexports = module.exports = JSONReporter;\n\n/**\n * Initialize a new `JSON` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction JSONReporter(runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var tests = [];\n  var pending = [];\n  var failures = [];\n  var passes = [];\n\n  runner.on('test end', function(test) {\n    tests.push(test);\n  });\n\n  runner.on('pass', function(test) {\n    passes.push(test);\n  });\n\n  runner.on('fail', function(test) {\n    failures.push(test);\n  });\n\n  runner.on('pending', function(test) {\n    pending.push(test);\n  });\n\n  runner.on('end', function() {\n    var obj = {\n      stats: self.stats,\n      tests: tests.map(clean),\n      pending: pending.map(clean),\n      failures: failures.map(clean),\n      passes: passes.map(clean)\n    };\n\n    runner.testResults = obj;\n\n    process.stdout.write(JSON.stringify(obj, null, 2));\n  });\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @api private\n * @param {Object} test\n * @return {Object}\n */\nfunction clean(test) {\n  return {\n    title: test.title,\n    fullTitle: test.fullTitle(),\n    duration: test.duration,\n    err: errorJSON(test.err || {})\n  };\n}\n\n/**\n * Transform `error` into a JSON object.\n *\n * @api private\n * @param {Error} err\n * @return {Object}\n */\nfunction errorJSON(err) {\n  var res = {};\n  Object.getOwnPropertyNames(err).forEach(function(key) {\n    res[key] = err[key];\n  }, err);\n  return res;\n}\n\n}).call(this,require('_process'))\n},{\"./base\":17,\"_process\":51}],26:[function(require,module,exports){\n(function (process){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar cursor = Base.cursor;\nvar color = Base.color;\n\n/**\n * Expose `Landing`.\n */\n\nexports = module.exports = Landing;\n\n/**\n * Airplane color.\n */\n\nBase.colors.plane = 0;\n\n/**\n * Airplane crash color.\n */\n\nBase.colors['plane crash'] = 31;\n\n/**\n * Runway color.\n */\n\nBase.colors.runway = 90;\n\n/**\n * Initialize a new `Landing` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction Landing(runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var width = Base.window.width * .75 | 0;\n  var total = runner.total;\n  var stream = process.stdout;\n  var plane = color('plane', '✈');\n  var crashed = -1;\n  var n = 0;\n\n  function runway() {\n    var buf = Array(width).join('-');\n    return '  ' + color('runway', buf);\n  }\n\n  runner.on('start', function() {\n    stream.write('\\n\\n\\n  ');\n    cursor.hide();\n  });\n\n  runner.on('test end', function(test) {\n    // check if the plane crashed\n    var col = crashed === -1 ? width * ++n / total | 0 : crashed;\n\n    // show the crash\n    if (test.state === 'failed') {\n      plane = color('plane crash', '✈');\n      crashed = col;\n    }\n\n    // render landing strip\n    stream.write('\\u001b[' + (width + 1) + 'D\\u001b[2A');\n    stream.write(runway());\n    stream.write('\\n  ');\n    stream.write(color('runway', Array(col).join('⋅')));\n    stream.write(plane);\n    stream.write(color('runway', Array(width - col).join('⋅') + '\\n'));\n    stream.write(runway());\n    stream.write('\\u001b[0m');\n  });\n\n  runner.on('end', function() {\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Landing, Base);\n\n}).call(this,require('_process'))\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],27:[function(require,module,exports){\n(function (process){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\nvar cursor = Base.cursor;\n\n/**\n * Expose `List`.\n */\n\nexports = module.exports = List;\n\n/**\n * Initialize a new `List` test reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction List(runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var n = 0;\n\n  runner.on('start', function() {\n    console.log();\n  });\n\n  runner.on('test', function(test) {\n    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));\n  });\n\n  runner.on('pending', function(test) {\n    var fmt = color('checkmark', '  -')\n      + color('pending', ' %s');\n    console.log(fmt, test.fullTitle());\n  });\n\n  runner.on('pass', function(test) {\n    var fmt = color('checkmark', '  ' + Base.symbols.dot)\n      + color('pass', ' %s: ')\n      + color(test.speed, '%dms');\n    cursor.CR();\n    console.log(fmt, test.fullTitle(), test.duration);\n  });\n\n  runner.on('fail', function(test) {\n    cursor.CR();\n    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());\n  });\n\n  runner.on('end', self.epilogue.bind(self));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(List, Base);\n\n}).call(this,require('_process'))\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],28:[function(require,module,exports){\n(function (process){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\n\n/**\n * Constants\n */\n\nvar SUITE_PREFIX = '$';\n\n/**\n * Expose `Markdown`.\n */\n\nexports = module.exports = Markdown;\n\n/**\n * Initialize a new `Markdown` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction Markdown(runner) {\n  Base.call(this, runner);\n\n  var level = 0;\n  var buf = '';\n\n  function title(str) {\n    return Array(level).join('#') + ' ' + str;\n  }\n\n  function mapTOC(suite, obj) {\n    var ret = obj;\n    var key = SUITE_PREFIX + suite.title;\n\n    obj = obj[key] = obj[key] || { suite: suite };\n    suite.suites.forEach(function(suite) {\n      mapTOC(suite, obj);\n    });\n\n    return ret;\n  }\n\n  function stringifyTOC(obj, level) {\n    ++level;\n    var buf = '';\n    var link;\n    for (var key in obj) {\n      if (key === 'suite') {\n        continue;\n      }\n      if (key !== SUITE_PREFIX) {\n        link = ' - [' + key.substring(1) + ']';\n        link += '(#' + utils.slug(obj[key].suite.fullTitle()) + ')\\n';\n        buf += Array(level).join('  ') + link;\n      }\n      buf += stringifyTOC(obj[key], level);\n    }\n    return buf;\n  }\n\n  function generateTOC(suite) {\n    var obj = mapTOC(suite, {});\n    return stringifyTOC(obj, 0);\n  }\n\n  generateTOC(runner.suite);\n\n  runner.on('suite', function(suite) {\n    ++level;\n    var slug = utils.slug(suite.fullTitle());\n    buf += '<a name=\"' + slug + '\"></a>' + '\\n';\n    buf += title(suite.title) + '\\n';\n  });\n\n  runner.on('suite end', function() {\n    --level;\n  });\n\n  runner.on('pass', function(test) {\n    var code = utils.clean(test.fn.toString());\n    buf += test.title + '.\\n';\n    buf += '\\n```js\\n';\n    buf += code + '\\n';\n    buf += '```\\n\\n';\n  });\n\n  runner.on('end', function() {\n    process.stdout.write('# TOC\\n');\n    process.stdout.write(generateTOC(runner.suite));\n    process.stdout.write(buf);\n  });\n}\n\n}).call(this,require('_process'))\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],29:[function(require,module,exports){\n(function (process){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\n\n/**\n * Expose `Min`.\n */\n\nexports = module.exports = Min;\n\n/**\n * Initialize a new `Min` minimal test reporter (best used with --watch).\n *\n * @api public\n * @param {Runner} runner\n */\nfunction Min(runner) {\n  Base.call(this, runner);\n\n  runner.on('start', function() {\n    // clear screen\n    process.stdout.write('\\u001b[2J');\n    // set cursor position\n    process.stdout.write('\\u001b[1;3H');\n  });\n\n  runner.on('end', this.epilogue.bind(this));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Min, Base);\n\n}).call(this,require('_process'))\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],30:[function(require,module,exports){\n(function (process){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\n\n/**\n * Expose `Dot`.\n */\n\nexports = module.exports = NyanCat;\n\n/**\n * Initialize a new `Dot` matrix test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction NyanCat(runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var width = Base.window.width * .75 | 0;\n  var nyanCatWidth = this.nyanCatWidth = 11;\n\n  this.colorIndex = 0;\n  this.numberOfLines = 4;\n  this.rainbowColors = self.generateColors();\n  this.scoreboardWidth = 5;\n  this.tick = 0;\n  this.trajectories = [[], [], [], []];\n  this.trajectoryWidthMax = (width - nyanCatWidth);\n\n  runner.on('start', function() {\n    Base.cursor.hide();\n    self.draw();\n  });\n\n  runner.on('pending', function() {\n    self.draw();\n  });\n\n  runner.on('pass', function() {\n    self.draw();\n  });\n\n  runner.on('fail', function() {\n    self.draw();\n  });\n\n  runner.on('end', function() {\n    Base.cursor.show();\n    for (var i = 0; i < self.numberOfLines; i++) {\n      write('\\n');\n    }\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(NyanCat, Base);\n\n/**\n * Draw the nyan cat\n *\n * @api private\n */\n\nNyanCat.prototype.draw = function() {\n  this.appendRainbow();\n  this.drawScoreboard();\n  this.drawRainbow();\n  this.drawNyanCat();\n  this.tick = !this.tick;\n};\n\n/**\n * Draw the \"scoreboard\" showing the number\n * of passes, failures and pending tests.\n *\n * @api private\n */\n\nNyanCat.prototype.drawScoreboard = function() {\n  var stats = this.stats;\n\n  function draw(type, n) {\n    write(' ');\n    write(Base.color(type, n));\n    write('\\n');\n  }\n\n  draw('green', stats.passes);\n  draw('fail', stats.failures);\n  draw('pending', stats.pending);\n  write('\\n');\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Append the rainbow.\n *\n * @api private\n */\n\nNyanCat.prototype.appendRainbow = function() {\n  var segment = this.tick ? '_' : '-';\n  var rainbowified = this.rainbowify(segment);\n\n  for (var index = 0; index < this.numberOfLines; index++) {\n    var trajectory = this.trajectories[index];\n    if (trajectory.length >= this.trajectoryWidthMax) {\n      trajectory.shift();\n    }\n    trajectory.push(rainbowified);\n  }\n};\n\n/**\n * Draw the rainbow.\n *\n * @api private\n */\n\nNyanCat.prototype.drawRainbow = function() {\n  var self = this;\n\n  this.trajectories.forEach(function(line) {\n    write('\\u001b[' + self.scoreboardWidth + 'C');\n    write(line.join(''));\n    write('\\n');\n  });\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Draw the nyan cat\n *\n * @api private\n */\nNyanCat.prototype.drawNyanCat = function() {\n  var self = this;\n  var startWidth = this.scoreboardWidth + this.trajectories[0].length;\n  var dist = '\\u001b[' + startWidth + 'C';\n  var padding = '';\n\n  write(dist);\n  write('_,------,');\n  write('\\n');\n\n  write(dist);\n  padding = self.tick ? '  ' : '   ';\n  write('_|' + padding + '/\\\\_/\\\\ ');\n  write('\\n');\n\n  write(dist);\n  padding = self.tick ? '_' : '__';\n  var tail = self.tick ? '~' : '^';\n  write(tail + '|' + padding + this.face() + ' ');\n  write('\\n');\n\n  write(dist);\n  padding = self.tick ? ' ' : '  ';\n  write(padding + '\"\"  \"\" ');\n  write('\\n');\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Draw nyan cat face.\n *\n * @api private\n * @return {string}\n */\n\nNyanCat.prototype.face = function() {\n  var stats = this.stats;\n  if (stats.failures) {\n    return '( x .x)';\n  } else if (stats.pending) {\n    return '( o .o)';\n  } else if (stats.passes) {\n    return '( ^ .^)';\n  }\n  return '( - .-)';\n};\n\n/**\n * Move cursor up `n`.\n *\n * @api private\n * @param {number} n\n */\n\nNyanCat.prototype.cursorUp = function(n) {\n  write('\\u001b[' + n + 'A');\n};\n\n/**\n * Move cursor down `n`.\n *\n * @api private\n * @param {number} n\n */\n\nNyanCat.prototype.cursorDown = function(n) {\n  write('\\u001b[' + n + 'B');\n};\n\n/**\n * Generate rainbow colors.\n *\n * @api private\n * @return {Array}\n */\nNyanCat.prototype.generateColors = function() {\n  var colors = [];\n\n  for (var i = 0; i < (6 * 7); i++) {\n    var pi3 = Math.floor(Math.PI / 3);\n    var n = (i * (1.0 / 6));\n    var r = Math.floor(3 * Math.sin(n) + 3);\n    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);\n    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);\n    colors.push(36 * r + 6 * g + b + 16);\n  }\n\n  return colors;\n};\n\n/**\n * Apply rainbow to the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nNyanCat.prototype.rainbowify = function(str) {\n  if (!Base.useColors) {\n    return str;\n  }\n  var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];\n  this.colorIndex += 1;\n  return '\\u001b[38;5;' + color + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Stdout helper.\n *\n * @param {string} string A message to write to stdout.\n */\nfunction write(string) {\n  process.stdout.write(string);\n}\n\n}).call(this,require('_process'))\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],31:[function(require,module,exports){\n(function (process){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\nvar cursor = Base.cursor;\n\n/**\n * Expose `Progress`.\n */\n\nexports = module.exports = Progress;\n\n/**\n * General progress bar color.\n */\n\nBase.colors.progress = 90;\n\n/**\n * Initialize a new `Progress` bar test reporter.\n *\n * @api public\n * @param {Runner} runner\n * @param {Object} options\n */\nfunction Progress(runner, options) {\n  Base.call(this, runner);\n\n  var self = this;\n  var width = Base.window.width * .50 | 0;\n  var total = runner.total;\n  var complete = 0;\n  var lastN = -1;\n\n  // default chars\n  options = options || {};\n  options.open = options.open || '[';\n  options.complete = options.complete || '▬';\n  options.incomplete = options.incomplete || Base.symbols.dot;\n  options.close = options.close || ']';\n  options.verbose = false;\n\n  // tests started\n  runner.on('start', function() {\n    console.log();\n    cursor.hide();\n  });\n\n  // tests complete\n  runner.on('test end', function() {\n    complete++;\n\n    var percent = complete / total;\n    var n = width * percent | 0;\n    var i = width - n;\n\n    if (n === lastN && !options.verbose) {\n      // Don't re-render the line if it hasn't changed\n      return;\n    }\n    lastN = n;\n\n    cursor.CR();\n    process.stdout.write('\\u001b[J');\n    process.stdout.write(color('progress', '  ' + options.open));\n    process.stdout.write(Array(n).join(options.complete));\n    process.stdout.write(Array(i).join(options.incomplete));\n    process.stdout.write(color('progress', options.close));\n    if (options.verbose) {\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));\n    }\n  });\n\n  // tests are complete, output some stats\n  // and the failures if any\n  runner.on('end', function() {\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Progress, Base);\n\n}).call(this,require('_process'))\n},{\"../utils\":39,\"./base\":17,\"_process\":51}],32:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\nvar cursor = Base.cursor;\n\n/**\n * Expose `Spec`.\n */\n\nexports = module.exports = Spec;\n\n/**\n * Initialize a new `Spec` test reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction Spec(runner) {\n  Base.call(this, runner);\n\n  var self = this;\n  var indents = 0;\n  var n = 0;\n\n  function indent() {\n    return Array(indents).join('  ');\n  }\n\n  runner.on('start', function() {\n    console.log();\n  });\n\n  runner.on('suite', function(suite) {\n    ++indents;\n    console.log(color('suite', '%s%s'), indent(), suite.title);\n  });\n\n  runner.on('suite end', function() {\n    --indents;\n    if (indents === 1) {\n      console.log();\n    }\n  });\n\n  runner.on('pending', function(test) {\n    var fmt = indent() + color('pending', '  - %s');\n    console.log(fmt, test.title);\n  });\n\n  runner.on('pass', function(test) {\n    var fmt;\n    if (test.speed === 'fast') {\n      fmt = indent()\n        + color('checkmark', '  ' + Base.symbols.ok)\n        + color('pass', ' %s');\n      cursor.CR();\n      console.log(fmt, test.title);\n    } else {\n      fmt = indent()\n        + color('checkmark', '  ' + Base.symbols.ok)\n        + color('pass', ' %s')\n        + color(test.speed, ' (%dms)');\n      cursor.CR();\n      console.log(fmt, test.title, test.duration);\n    }\n  });\n\n  runner.on('fail', function(test) {\n    cursor.CR();\n    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);\n  });\n\n  runner.on('end', self.epilogue.bind(self));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Spec, Base);\n\n},{\"../utils\":39,\"./base\":17}],33:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\n/**\n * Expose `TAP`.\n */\n\nexports = module.exports = TAP;\n\n/**\n * Initialize a new `TAP` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction TAP(runner) {\n  Base.call(this, runner);\n\n  var n = 1;\n  var passes = 0;\n  var failures = 0;\n\n  runner.on('start', function() {\n    var total = runner.grepTotal(runner.suite);\n    console.log('%d..%d', 1, total);\n  });\n\n  runner.on('test end', function() {\n    ++n;\n  });\n\n  runner.on('pending', function(test) {\n    console.log('ok %d %s # SKIP -', n, title(test));\n  });\n\n  runner.on('pass', function(test) {\n    passes++;\n    console.log('ok %d %s', n, title(test));\n  });\n\n  runner.on('fail', function(test, err) {\n    failures++;\n    console.log('not ok %d %s', n, title(test));\n    if (err.stack) {\n      console.log(err.stack.replace(/^/gm, '  '));\n    }\n  });\n\n  runner.on('end', function() {\n    console.log('# tests ' + (passes + failures));\n    console.log('# pass ' + passes);\n    console.log('# fail ' + failures);\n  });\n}\n\n/**\n * Return a TAP-safe title of `test`\n *\n * @api private\n * @param {Object} test\n * @return {String}\n */\nfunction title(test) {\n  return test.fullTitle().replace(/#/g, '');\n}\n\n},{\"./base\":17}],34:[function(require,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\nvar inherits = utils.inherits;\nvar fs = require('fs');\nvar escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Expose `XUnit`.\n */\n\nexports = module.exports = XUnit;\n\n/**\n * Initialize a new `XUnit` reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction XUnit(runner, options) {\n  Base.call(this, runner);\n\n  var stats = this.stats;\n  var tests = [];\n  var self = this;\n\n  if (options.reporterOptions && options.reporterOptions.output) {\n    if (!fs.createWriteStream) {\n      throw new Error('file output not supported in browser');\n    }\n    self.fileStream = fs.createWriteStream(options.reporterOptions.output);\n  }\n\n  runner.on('pending', function(test) {\n    tests.push(test);\n  });\n\n  runner.on('pass', function(test) {\n    tests.push(test);\n  });\n\n  runner.on('fail', function(test) {\n    tests.push(test);\n  });\n\n  runner.on('end', function() {\n    self.write(tag('testsuite', {\n      name: 'Mocha Tests',\n      tests: stats.tests,\n      failures: stats.failures,\n      errors: stats.failures,\n      skipped: stats.tests - stats.failures - stats.passes,\n      timestamp: (new Date()).toUTCString(),\n      time: (stats.duration / 1000) || 0\n    }, false));\n\n    tests.forEach(function(t) {\n      self.test(t);\n    });\n\n    self.write('</testsuite>');\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(XUnit, Base);\n\n/**\n * Override done to close the stream (if it's a file).\n *\n * @param failures\n * @param {Function} fn\n */\nXUnit.prototype.done = function(failures, fn) {\n  if (this.fileStream) {\n    this.fileStream.end(function() {\n      fn(failures);\n    });\n  } else {\n    fn(failures);\n  }\n};\n\n/**\n * Write out the given line.\n *\n * @param {string} line\n */\nXUnit.prototype.write = function(line) {\n  if (this.fileStream) {\n    this.fileStream.write(line + '\\n');\n  } else {\n    console.log(line);\n  }\n};\n\n/**\n * Output tag for the given `test.`\n *\n * @param {Test} test\n */\nXUnit.prototype.test = function(test) {\n  var attrs = {\n    classname: test.parent.fullTitle(),\n    name: test.title,\n    time: (test.duration / 1000) || 0\n  };\n\n  if (test.state === 'failed') {\n    var err = test.err;\n    this.write(tag('testcase', attrs, false, tag('failure', {}, false, cdata(escape(err.message) + '\\n' + err.stack))));\n  } else if (test.pending) {\n    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));\n  } else {\n    this.write(tag('testcase', attrs, true));\n  }\n};\n\n/**\n * HTML tag helper.\n *\n * @param name\n * @param attrs\n * @param close\n * @param content\n * @return {string}\n */\nfunction tag(name, attrs, close, content) {\n  var end = close ? '/>' : '>';\n  var pairs = [];\n  var tag;\n\n  for (var key in attrs) {\n    if (Object.prototype.hasOwnProperty.call(attrs, key)) {\n      pairs.push(key + '=\"' + escape(attrs[key]) + '\"');\n    }\n  }\n\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;\n  if (content) {\n    tag += content + '</' + name + end;\n  }\n  return tag;\n}\n\n/**\n * Return cdata escaped CDATA `str`.\n */\n\nfunction cdata(str) {\n  return '<![CDATA[' + escape(str) + ']]>';\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../utils\":39,\"./base\":17,\"fs\":41}],35:[function(require,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar Pending = require('./pending');\nvar debug = require('debug')('mocha:runnable');\nvar milliseconds = require('./ms');\nvar utils = require('./utils');\nvar inherits = utils.inherits;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\n/* eslint-disable no-unused-vars, no-native-reassign */\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n/* eslint-enable no-unused-vars, no-native-reassign */\n\n/**\n * Object#toString().\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Expose `Runnable`.\n */\n\nmodule.exports = Runnable;\n\n/**\n * Initialize a new `Runnable` with the given `title` and callback `fn`.\n *\n * @param {String} title\n * @param {Function} fn\n * @api private\n * @param {string} title\n * @param {Function} fn\n */\nfunction Runnable(title, fn) {\n  this.title = title;\n  this.fn = fn;\n  this.async = fn && fn.length;\n  this.sync = !this.async;\n  this._timeout = 2000;\n  this._slow = 75;\n  this._enableTimeouts = true;\n  this.timedOut = false;\n  this._trace = new Error('done() called multiple times');\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\ninherits(Runnable, EventEmitter);\n\n/**\n * Set & get timeout `ms`.\n *\n * @api private\n * @param {number|string} ms\n * @return {Runnable|number} ms or Runnable instance.\n */\nRunnable.prototype.timeout = function(ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (ms === 0) {\n    this._enableTimeouts = false;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('timeout %d', ms);\n  this._timeout = ms;\n  if (this.timer) {\n    this.resetTimeout();\n  }\n  return this;\n};\n\n/**\n * Set & get slow `ms`.\n *\n * @api private\n * @param {number|string} ms\n * @return {Runnable|number} ms or Runnable instance.\n */\nRunnable.prototype.slow = function(ms) {\n  if (!arguments.length) {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('timeout %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Set and get whether timeout is `enabled`.\n *\n * @api private\n * @param {boolean} enabled\n * @return {Runnable|boolean} enabled or Runnable instance.\n */\nRunnable.prototype.enableTimeouts = function(enabled) {\n  if (!arguments.length) {\n    return this._enableTimeouts;\n  }\n  debug('enableTimeouts %s', enabled);\n  this._enableTimeouts = enabled;\n  return this;\n};\n\n/**\n * Halt and mark as pending.\n *\n * @api private\n */\nRunnable.prototype.skip = function() {\n  throw new Pending();\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @api public\n * @return {string}\n */\nRunnable.prototype.fullTitle = function() {\n  return this.parent.fullTitle() + ' ' + this.title;\n};\n\n/**\n * Clear the timeout.\n *\n * @api private\n */\nRunnable.prototype.clearTimeout = function() {\n  clearTimeout(this.timer);\n};\n\n/**\n * Inspect the runnable void of private properties.\n *\n * @api private\n * @return {string}\n */\nRunnable.prototype.inspect = function() {\n  return JSON.stringify(this, function(key, val) {\n    if (key[0] === '_') {\n      return;\n    }\n    if (key === 'parent') {\n      return '#<Suite>';\n    }\n    if (key === 'ctx') {\n      return '#<Context>';\n    }\n    return val;\n  }, 2);\n};\n\n/**\n * Reset the timeout.\n *\n * @api private\n */\nRunnable.prototype.resetTimeout = function() {\n  var self = this;\n  var ms = this.timeout() || 1e9;\n\n  if (!this._enableTimeouts) {\n    return;\n  }\n  this.clearTimeout();\n  this.timer = setTimeout(function() {\n    if (!self._enableTimeouts) {\n      return;\n    }\n    self.callback(new Error('timeout of ' + ms + 'ms exceeded. Ensure the done() callback is being called in this test.'));\n    self.timedOut = true;\n  }, ms);\n};\n\n/**\n * Whitelist a list of globals for this test run.\n *\n * @api private\n * @param {string[]} globals\n */\nRunnable.prototype.globals = function(globals) {\n  this._allowedGlobals = globals;\n};\n\n/**\n * Run the test and invoke `fn(err)`.\n *\n * @param {Function} fn\n * @api private\n */\nRunnable.prototype.run = function(fn) {\n  var self = this;\n  var start = new Date();\n  var ctx = this.ctx;\n  var finished;\n  var emitted;\n\n  // Sometimes the ctx exists, but it is not runnable\n  if (ctx && ctx.runnable) {\n    ctx.runnable(this);\n  }\n\n  // called multiple times\n  function multiple(err) {\n    if (emitted) {\n      return;\n    }\n    emitted = true;\n    self.emit('error', err || new Error('done() called multiple times; stacktrace may be inaccurate'));\n  }\n\n  // finished\n  function done(err) {\n    var ms = self.timeout();\n    if (self.timedOut) {\n      return;\n    }\n    if (finished) {\n      return multiple(err || self._trace);\n    }\n\n    self.clearTimeout();\n    self.duration = new Date() - start;\n    finished = true;\n    if (!err && self.duration > ms && self._enableTimeouts) {\n      err = new Error('timeout of ' + ms + 'ms exceeded. Ensure the done() callback is being called in this test.');\n    }\n    fn(err);\n  }\n\n  // for .resetTimeout()\n  this.callback = done;\n\n  // explicit async with `done` argument\n  if (this.async) {\n    this.resetTimeout();\n\n    if (this.allowUncaught) {\n      return callFnAsync(this.fn);\n    }\n    try {\n      callFnAsync(this.fn);\n    } catch (err) {\n      done(utils.getError(err));\n    }\n    return;\n  }\n\n  if (this.allowUncaught) {\n    callFn(this.fn);\n    done();\n    return;\n  }\n\n  // sync or promise-returning\n  try {\n    if (this.pending) {\n      done();\n    } else {\n      callFn(this.fn);\n    }\n  } catch (err) {\n    done(utils.getError(err));\n  }\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result\n        .then(function() {\n          done();\n        },\n        function(reason) {\n          done(reason || new Error('Promise rejected with no or falsy reason'));\n        });\n    } else {\n      if (self.asyncOnly) {\n        return done(new Error('--async-only option in use without declaring `done()` or returning a promise'));\n      }\n\n      done();\n    }\n  }\n\n  function callFnAsync(fn) {\n    fn.call(ctx, function(err) {\n      if (err instanceof Error || toString.call(err) === '[object Error]') {\n        return done(err);\n      }\n      if (err) {\n        if (Object.prototype.toString.call(err) === '[object Object]') {\n          return done(new Error('done() invoked with non-Error: '\n            + JSON.stringify(err)));\n        }\n        return done(new Error('done() invoked with non-Error: ' + err));\n      }\n      done();\n    });\n  }\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ms\":15,\"./pending\":16,\"./utils\":39,\"debug\":2,\"events\":3}],36:[function(require,module,exports){\n(function (process,global){\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar Pending = require('./pending');\nvar utils = require('./utils');\nvar inherits = utils.inherits;\nvar debug = require('debug')('mocha:runner');\nvar Runnable = require('./runnable');\nvar filter = utils.filter;\nvar indexOf = utils.indexOf;\nvar keys = utils.keys;\nvar stackFilter = utils.stackTraceFilter();\nvar stringify = utils.stringify;\nvar type = utils.type;\nvar undefinedError = utils.undefinedError;\n\n/**\n * Non-enumerable globals.\n */\n\nvar globals = [\n  'setTimeout',\n  'clearTimeout',\n  'setInterval',\n  'clearInterval',\n  'XMLHttpRequest',\n  'Date',\n  'setImmediate',\n  'clearImmediate'\n];\n\n/**\n * Expose `Runner`.\n */\n\nmodule.exports = Runner;\n\n/**\n * Initialize a `Runner` for the given `suite`.\n *\n * Events:\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n *\n * @api public\n * @param {Suite} suite Root suite\n * @param {boolean} [delay] Whether or not to delay execution of root suite\n * until ready.\n */\nfunction Runner(suite, delay) {\n  var self = this;\n  this._globals = [];\n  this._abort = false;\n  this._delay = delay;\n  this.suite = suite;\n  this.started = false;\n  this.total = suite.total();\n  this.failures = 0;\n  this.on('test end', function(test) {\n    self.checkGlobals(test);\n  });\n  this.on('hook end', function(hook) {\n    self.checkGlobals(hook);\n  });\n  this._defaultGrep = /.*/;\n  this.grep(this._defaultGrep);\n  this.globals(this.globalProps().concat(extraGlobals()));\n}\n\n/**\n * Wrapper for setImmediate, process.nextTick, or browser polyfill.\n *\n * @param {Function} fn\n * @api private\n */\nRunner.immediately = global.setImmediate || process.nextTick;\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\ninherits(Runner, EventEmitter);\n\n/**\n * Run tests with full titles matching `re`. Updates runner.total\n * with number of tests matched.\n *\n * @param {RegExp} re\n * @param {Boolean} invert\n * @return {Runner} for chaining\n * @api public\n * @param {RegExp} re\n * @param {boolean} invert\n * @return {Runner} Runner instance.\n */\nRunner.prototype.grep = function(re, invert) {\n  debug('grep %s', re);\n  this._grep = re;\n  this._invert = invert;\n  this.total = this.grepTotal(this.suite);\n  return this;\n};\n\n/**\n * Returns the number of tests matching the grep search for the\n * given suite.\n *\n * @param {Suite} suite\n * @return {Number}\n * @api public\n * @param {Suite} suite\n * @return {number}\n */\nRunner.prototype.grepTotal = function(suite) {\n  var self = this;\n  var total = 0;\n\n  suite.eachTest(function(test) {\n    var match = self._grep.test(test.fullTitle());\n    if (self._invert) {\n      match = !match;\n    }\n    if (match) {\n      total++;\n    }\n  });\n\n  return total;\n};\n\n/**\n * Return a list of global properties.\n *\n * @return {Array}\n * @api private\n */\nRunner.prototype.globalProps = function() {\n  var props = keys(global);\n\n  // non-enumerables\n  for (var i = 0; i < globals.length; ++i) {\n    if (~indexOf(props, globals[i])) {\n      continue;\n    }\n    props.push(globals[i]);\n  }\n\n  return props;\n};\n\n/**\n * Allow the given `arr` of globals.\n *\n * @param {Array} arr\n * @return {Runner} for chaining\n * @api public\n * @param {Array} arr\n * @return {Runner} Runner instance.\n */\nRunner.prototype.globals = function(arr) {\n  if (!arguments.length) {\n    return this._globals;\n  }\n  debug('globals %j', arr);\n  this._globals = this._globals.concat(arr);\n  return this;\n};\n\n/**\n * Check for global variable leaks.\n *\n * @api private\n */\nRunner.prototype.checkGlobals = function(test) {\n  if (this.ignoreLeaks) {\n    return;\n  }\n  var ok = this._globals;\n\n  var globals = this.globalProps();\n  var leaks;\n\n  if (test) {\n    ok = ok.concat(test._allowedGlobals || []);\n  }\n\n  if (this.prevGlobalsLength === globals.length) {\n    return;\n  }\n  this.prevGlobalsLength = globals.length;\n\n  leaks = filterLeaks(ok, globals);\n  this._globals = this._globals.concat(leaks);\n\n  if (leaks.length > 1) {\n    this.fail(test, new Error('global leaks detected: ' + leaks.join(', ') + ''));\n  } else if (leaks.length) {\n    this.fail(test, new Error('global leak detected: ' + leaks[0]));\n  }\n};\n\n/**\n * Fail the given `test`.\n *\n * @api private\n * @param {Test} test\n * @param {Error} err\n */\nRunner.prototype.fail = function(test, err) {\n  ++this.failures;\n  test.state = 'failed';\n\n  if (!(err instanceof Error || err && typeof err.message === 'string')) {\n    err = new Error('the ' + type(err) + ' ' + stringify(err) + ' was thrown, throw an Error :)');\n  }\n\n  err.stack = (this.fullStackTrace || !err.stack)\n    ? err.stack\n    : stackFilter(err.stack);\n\n  this.emit('fail', test, err);\n};\n\n/**\n * Fail the given `hook` with `err`.\n *\n * Hook failures work in the following pattern:\n * - If bail, then exit\n * - Failed `before` hook skips all tests in a suite and subsuites,\n *   but jumps to corresponding `after` hook\n * - Failed `before each` hook skips remaining tests in a\n *   suite and jumps to corresponding `after each` hook,\n *   which is run only once\n * - Failed `after` hook does not alter\n *   execution order\n * - Failed `after each` hook skips remaining tests in a\n *   suite and subsuites, but executes other `after each`\n *   hooks\n *\n * @api private\n * @param {Hook} hook\n * @param {Error} err\n */\nRunner.prototype.failHook = function(hook, err) {\n  if (hook.ctx && hook.ctx.currentTest) {\n    hook.originalTitle = hook.originalTitle || hook.title;\n    hook.title = hook.originalTitle + ' for \"' + hook.ctx.currentTest.title + '\"';\n  }\n\n  this.fail(hook, err);\n  if (this.suite.bail()) {\n    this.emit('end');\n  }\n};\n\n/**\n * Run hook `name` callbacks and then invoke `fn()`.\n *\n * @api private\n * @param {string} name\n * @param {Function} fn\n */\n\nRunner.prototype.hook = function(name, fn) {\n  var suite = this.suite;\n  var hooks = suite['_' + name];\n  var self = this;\n\n  function next(i) {\n    var hook = hooks[i];\n    if (!hook) {\n      return fn();\n    }\n    self.currentRunnable = hook;\n\n    hook.ctx.currentTest = self.test;\n\n    self.emit('hook', hook);\n\n    if (!hook.listeners('error').length) {\n      hook.on('error', function(err) {\n        self.failHook(hook, err);\n      });\n    }\n\n    hook.run(function(err) {\n      var testError = hook.error();\n      if (testError) {\n        self.fail(self.test, testError);\n      }\n      if (err) {\n        if (err instanceof Pending) {\n          suite.pending = true;\n        } else {\n          self.failHook(hook, err);\n\n          // stop executing hooks, notify callee of hook err\n          return fn(err);\n        }\n      }\n      self.emit('hook end', hook);\n      delete hook.ctx.currentTest;\n      next(++i);\n    });\n  }\n\n  Runner.immediately(function() {\n    next(0);\n  });\n};\n\n/**\n * Run hook `name` for the given array of `suites`\n * in order, and callback `fn(err, errSuite)`.\n *\n * @api private\n * @param {string} name\n * @param {Array} suites\n * @param {Function} fn\n */\nRunner.prototype.hooks = function(name, suites, fn) {\n  var self = this;\n  var orig = this.suite;\n\n  function next(suite) {\n    self.suite = suite;\n\n    if (!suite) {\n      self.suite = orig;\n      return fn();\n    }\n\n    self.hook(name, function(err) {\n      if (err) {\n        var errSuite = self.suite;\n        self.suite = orig;\n        return fn(err, errSuite);\n      }\n\n      next(suites.pop());\n    });\n  }\n\n  next(suites.pop());\n};\n\n/**\n * Run hooks from the top level down.\n *\n * @param {String} name\n * @param {Function} fn\n * @api private\n */\nRunner.prototype.hookUp = function(name, fn) {\n  var suites = [this.suite].concat(this.parents()).reverse();\n  this.hooks(name, suites, fn);\n};\n\n/**\n * Run hooks from the bottom up.\n *\n * @param {String} name\n * @param {Function} fn\n * @api private\n */\nRunner.prototype.hookDown = function(name, fn) {\n  var suites = [this.suite].concat(this.parents());\n  this.hooks(name, suites, fn);\n};\n\n/**\n * Return an array of parent Suites from\n * closest to furthest.\n *\n * @return {Array}\n * @api private\n */\nRunner.prototype.parents = function() {\n  var suite = this.suite;\n  var suites = [];\n  while (suite.parent) {\n    suite = suite.parent;\n    suites.push(suite);\n  }\n  return suites;\n};\n\n/**\n * Run the current test and callback `fn(err)`.\n *\n * @param {Function} fn\n * @api private\n */\nRunner.prototype.runTest = function(fn) {\n  var self = this;\n  var test = this.test;\n\n  if (this.asyncOnly) {\n    test.asyncOnly = true;\n  }\n\n  if (this.allowUncaught) {\n    test.allowUncaught = true;\n    return test.run(fn);\n  }\n  try {\n    test.on('error', function(err) {\n      self.fail(test, err);\n    });\n    test.run(fn);\n  } catch (err) {\n    fn(err);\n  }\n};\n\n/**\n * Run tests in the given `suite` and invoke the callback `fn()` when complete.\n *\n * @api private\n * @param {Suite} suite\n * @param {Function} fn\n */\nRunner.prototype.runTests = function(suite, fn) {\n  var self = this;\n  var tests = suite.tests.slice();\n  var test;\n\n  function hookErr(_, errSuite, after) {\n    // before/after Each hook for errSuite failed:\n    var orig = self.suite;\n\n    // for failed 'after each' hook start from errSuite parent,\n    // otherwise start from errSuite itself\n    self.suite = after ? errSuite.parent : errSuite;\n\n    if (self.suite) {\n      // call hookUp afterEach\n      self.hookUp('afterEach', function(err2, errSuite2) {\n        self.suite = orig;\n        // some hooks may fail even now\n        if (err2) {\n          return hookErr(err2, errSuite2, true);\n        }\n        // report error suite\n        fn(errSuite);\n      });\n    } else {\n      // there is no need calling other 'after each' hooks\n      self.suite = orig;\n      fn(errSuite);\n    }\n  }\n\n  function next(err, errSuite) {\n    // if we bail after first err\n    if (self.failures && suite._bail) {\n      return fn();\n    }\n\n    if (self._abort) {\n      return fn();\n    }\n\n    if (err) {\n      return hookErr(err, errSuite, true);\n    }\n\n    // next test\n    test = tests.shift();\n\n    // all done\n    if (!test) {\n      return fn();\n    }\n\n    // grep\n    var match = self._grep.test(test.fullTitle());\n    if (self._invert) {\n      match = !match;\n    }\n    if (!match) {\n      // Run immediately only if we have defined a grep. When we\n      // define a grep — It can cause maximum callstack error if\n      // the grep is doing a large recursive loop by neglecting\n      // all tests. The run immediately function also comes with\n      // a performance cost. So we don't want to run immediately\n      // if we run the whole test suite, because running the whole\n      // test suite don't do any immediate recursive loops. Thus,\n      // allowing a JS runtime to breathe.\n      if (self._grep !== self._defaultGrep) {\n        Runner.immediately(next);\n      } else {\n        next();\n      }\n      return;\n    }\n\n    // pending\n    if (test.pending) {\n      self.emit('pending', test);\n      self.emit('test end', test);\n      return next();\n    }\n\n    // execute test and hook(s)\n    self.emit('test', self.test = test);\n    self.hookDown('beforeEach', function(err, errSuite) {\n      if (suite.pending) {\n        self.emit('pending', test);\n        self.emit('test end', test);\n        return next();\n      }\n      if (err) {\n        return hookErr(err, errSuite, false);\n      }\n      self.currentRunnable = self.test;\n      self.runTest(function(err) {\n        test = self.test;\n\n        if (err) {\n          if (err instanceof Pending) {\n            self.emit('pending', test);\n          } else {\n            self.fail(test, err);\n          }\n          self.emit('test end', test);\n\n          if (err instanceof Pending) {\n            return next();\n          }\n\n          return self.hookUp('afterEach', next);\n        }\n\n        test.state = 'passed';\n        self.emit('pass', test);\n        self.emit('test end', test);\n        self.hookUp('afterEach', next);\n      });\n    });\n  }\n\n  this.next = next;\n  this.hookErr = hookErr;\n  next();\n};\n\n/**\n * Run the given `suite` and invoke the callback `fn()` when complete.\n *\n * @api private\n * @param {Suite} suite\n * @param {Function} fn\n */\nRunner.prototype.runSuite = function(suite, fn) {\n  var i = 0;\n  var self = this;\n  var total = this.grepTotal(suite);\n  var afterAllHookCalled = false;\n\n  debug('run suite %s', suite.fullTitle());\n\n  if (!total || (self.failures && suite._bail)) {\n    return fn();\n  }\n\n  this.emit('suite', this.suite = suite);\n\n  function next(errSuite) {\n    if (errSuite) {\n      // current suite failed on a hook from errSuite\n      if (errSuite === suite) {\n        // if errSuite is current suite\n        // continue to the next sibling suite\n        return done();\n      }\n      // errSuite is among the parents of current suite\n      // stop execution of errSuite and all sub-suites\n      return done(errSuite);\n    }\n\n    if (self._abort) {\n      return done();\n    }\n\n    var curr = suite.suites[i++];\n    if (!curr) {\n      return done();\n    }\n\n    // Avoid grep neglecting large number of tests causing a\n    // huge recursive loop and thus a maximum call stack error.\n    // See comment in `this.runTests()` for more information.\n    if (self._grep !== self._defaultGrep) {\n      Runner.immediately(function() {\n        self.runSuite(curr, next);\n      });\n    } else {\n      self.runSuite(curr, next);\n    }\n  }\n\n  function done(errSuite) {\n    self.suite = suite;\n    self.nextSuite = next;\n\n    if (afterAllHookCalled) {\n      fn(errSuite);\n    } else {\n      // mark that the afterAll block has been called once\n      // and so can be skipped if there is an error in it.\n      afterAllHookCalled = true;\n      self.hook('afterAll', function() {\n        self.emit('suite end', suite);\n        fn(errSuite);\n      });\n    }\n  }\n\n  this.nextSuite = next;\n\n  this.hook('beforeAll', function(err) {\n    if (err) {\n      return done();\n    }\n    self.runTests(suite, next);\n  });\n};\n\n/**\n * Handle uncaught exceptions.\n *\n * @param {Error} err\n * @api private\n */\nRunner.prototype.uncaught = function(err) {\n  if (err) {\n    debug('uncaught exception %s', err !== function() {\n      return this;\n    }.call(err) ? err : (err.message || err));\n  } else {\n    debug('uncaught undefined exception');\n    err = undefinedError();\n  }\n  err.uncaught = true;\n\n  var runnable = this.currentRunnable;\n\n  if (!runnable) {\n    runnable = new Runnable('Uncaught error outside test suite');\n    runnable.parent = this.suite;\n\n    if (this.started) {\n      this.fail(runnable, err);\n    } else {\n      // Can't recover from this failure\n      this.emit('start');\n      this.fail(runnable, err);\n      this.emit('end');\n    }\n\n    return;\n  }\n\n  runnable.clearTimeout();\n\n  // Ignore errors if complete\n  if (runnable.state) {\n    return;\n  }\n  this.fail(runnable, err);\n\n  // recover from test\n  if (runnable.type === 'test') {\n    this.emit('test end', runnable);\n    this.hookUp('afterEach', this.next);\n    return;\n  }\n\n // recover from hooks\n  if (runnable.type === 'hook') {\n    var errSuite = this.suite;\n    // if hook failure is in afterEach block\n    if (runnable.fullTitle().indexOf('after each') > -1) {\n      return this.hookErr(err, errSuite, true);\n    }\n    // if hook failure is in beforeEach block\n    if (runnable.fullTitle().indexOf('before each') > -1) {\n      return this.hookErr(err, errSuite, false);\n    }\n    // if hook failure is in after or before blocks\n    return this.nextSuite(errSuite);\n  }\n\n  // bail\n  this.emit('end');\n};\n\n/**\n * Run the root suite and invoke `fn(failures)`\n * on completion.\n *\n * @param {Function} fn\n * @return {Runner} for chaining\n * @api public\n * @param {Function} fn\n * @return {Runner} Runner instance.\n */\nRunner.prototype.run = function(fn) {\n  var self = this;\n  var rootSuite = this.suite;\n\n  fn = fn || function() {};\n\n  function uncaught(err) {\n    self.uncaught(err);\n  }\n\n  function start() {\n    self.started = true;\n    self.emit('start');\n    self.runSuite(rootSuite, function() {\n      debug('finished running');\n      self.emit('end');\n    });\n  }\n\n  debug('start');\n\n  // callback\n  this.on('end', function() {\n    debug('end');\n    process.removeListener('uncaughtException', uncaught);\n    fn(self.failures);\n  });\n\n  // uncaught exception\n  process.on('uncaughtException', uncaught);\n\n  if (this._delay) {\n    // for reporters, I guess.\n    // might be nice to debounce some dots while we wait.\n    this.emit('waiting', rootSuite);\n    rootSuite.once('run', start);\n  } else {\n    start();\n  }\n\n  return this;\n};\n\n/**\n * Cleanly abort execution.\n *\n * @api public\n * @return {Runner} Runner instance.\n */\nRunner.prototype.abort = function() {\n  debug('aborting');\n  this._abort = true;\n\n  return this;\n};\n\n/**\n * Filter leaks with the given globals flagged as `ok`.\n *\n * @api private\n * @param {Array} ok\n * @param {Array} globals\n * @return {Array}\n */\nfunction filterLeaks(ok, globals) {\n  return filter(globals, function(key) {\n    // Firefox and Chrome exposes iframes as index inside the window object\n    if (/^d+/.test(key)) {\n      return false;\n    }\n\n    // in firefox\n    // if runner runs in an iframe, this iframe's window.getInterface method not init at first\n    // it is assigned in some seconds\n    if (global.navigator && (/^getInterface/).test(key)) {\n      return false;\n    }\n\n    // an iframe could be approached by window[iframeIndex]\n    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak\n    if (global.navigator && (/^\\d+/).test(key)) {\n      return false;\n    }\n\n    // Opera and IE expose global variables for HTML element IDs (issue #243)\n    if (/^mocha-/.test(key)) {\n      return false;\n    }\n\n    var matched = filter(ok, function(ok) {\n      if (~ok.indexOf('*')) {\n        return key.indexOf(ok.split('*')[0]) === 0;\n      }\n      return key === ok;\n    });\n    return !matched.length && (!global.navigator || key !== 'onerror');\n  });\n}\n\n/**\n * Array of globals dependent on the environment.\n *\n * @return {Array}\n * @api private\n */\nfunction extraGlobals() {\n  if (typeof process === 'object' && typeof process.version === 'string') {\n    var parts = process.version.split('.');\n    var nodeVersion = utils.reduce(parts, function(a, v) {\n      return a << 8 | v;\n    });\n\n    // 'errno' was renamed to process._errno in v0.9.11.\n\n    if (nodeVersion < 0x00090B) {\n      return ['errno'];\n    }\n  }\n\n  return [];\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./pending\":16,\"./runnable\":35,\"./utils\":39,\"_process\":51,\"debug\":2,\"events\":3}],37:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar Hook = require('./hook');\nvar utils = require('./utils');\nvar inherits = utils.inherits;\nvar debug = require('debug')('mocha:suite');\nvar milliseconds = require('./ms');\n\n/**\n * Expose `Suite`.\n */\n\nexports = module.exports = Suite;\n\n/**\n * Create a new `Suite` with the given `title` and parent `Suite`. When a suite\n * with the same title is already present, that suite is returned to provide\n * nicer reporter and more flexible meta-testing.\n *\n * @api public\n * @param {Suite} parent\n * @param {string} title\n * @return {Suite}\n */\nexports.create = function(parent, title) {\n  var suite = new Suite(title, parent.ctx);\n  suite.parent = parent;\n  if (parent.pending) {\n    suite.pending = true;\n  }\n  title = suite.fullTitle();\n  parent.addSuite(suite);\n  return suite;\n};\n\n/**\n * Initialize a new `Suite` with the given `title` and `ctx`.\n *\n * @api private\n * @param {string} title\n * @param {Context} parentContext\n */\nfunction Suite(title, parentContext) {\n  this.title = title;\n  function Context() {}\n  Context.prototype = parentContext;\n  this.ctx = new Context();\n  this.suites = [];\n  this.tests = [];\n  this.pending = false;\n  this._beforeEach = [];\n  this._beforeAll = [];\n  this._afterEach = [];\n  this._afterAll = [];\n  this.root = !title;\n  this._timeout = 2000;\n  this._enableTimeouts = true;\n  this._slow = 75;\n  this._bail = false;\n  this.delayed = false;\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\ninherits(Suite, EventEmitter);\n\n/**\n * Return a clone of this `Suite`.\n *\n * @api private\n * @return {Suite}\n */\nSuite.prototype.clone = function() {\n  var suite = new Suite(this.title);\n  debug('clone');\n  suite.ctx = this.ctx;\n  suite.timeout(this.timeout());\n  suite.enableTimeouts(this.enableTimeouts());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  return suite;\n};\n\n/**\n * Set timeout `ms` or short-hand such as \"2s\".\n *\n * @api private\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.timeout = function(ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (ms.toString() === '0') {\n    this._enableTimeouts = false;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('timeout %d', ms);\n  this._timeout = parseInt(ms, 10);\n  return this;\n};\n\n/**\n  * Set timeout to `enabled`.\n  *\n  * @api private\n  * @param {boolean} enabled\n  * @return {Suite|boolean} self or enabled\n  */\nSuite.prototype.enableTimeouts = function(enabled) {\n  if (!arguments.length) {\n    return this._enableTimeouts;\n  }\n  debug('enableTimeouts %s', enabled);\n  this._enableTimeouts = enabled;\n  return this;\n};\n\n/**\n * Set slow `ms` or short-hand such as \"2s\".\n *\n * @api private\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.slow = function(ms) {\n  if (!arguments.length) {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Sets whether to bail after first error.\n *\n * @api private\n * @param {boolean} bail\n * @return {Suite|number} for chaining\n */\nSuite.prototype.bail = function(bail) {\n  if (!arguments.length) {\n    return this._bail;\n  }\n  debug('bail %s', bail);\n  this._bail = bail;\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before running tests.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeAll = function(title, fn) {\n  if (this.pending) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before all\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._beforeAll.push(hook);\n  this.emit('beforeAll', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after running tests.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterAll = function(title, fn) {\n  if (this.pending) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after all\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._afterAll.push(hook);\n  this.emit('afterAll', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before each test case.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeEach = function(title, fn) {\n  if (this.pending) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before each\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._beforeEach.push(hook);\n  this.emit('beforeEach', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after each test case.\n *\n * @api private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterEach = function(title, fn) {\n  if (this.pending) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after each\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._afterEach.push(hook);\n  this.emit('afterEach', hook);\n  return this;\n};\n\n/**\n * Add a test `suite`.\n *\n * @api private\n * @param {Suite} suite\n * @return {Suite} for chaining\n */\nSuite.prototype.addSuite = function(suite) {\n  suite.parent = this;\n  suite.timeout(this.timeout());\n  suite.enableTimeouts(this.enableTimeouts());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  this.suites.push(suite);\n  this.emit('suite', suite);\n  return this;\n};\n\n/**\n * Add a `test` to this suite.\n *\n * @api private\n * @param {Test} test\n * @return {Suite} for chaining\n */\nSuite.prototype.addTest = function(test) {\n  test.parent = this;\n  test.timeout(this.timeout());\n  test.enableTimeouts(this.enableTimeouts());\n  test.slow(this.slow());\n  test.ctx = this.ctx;\n  this.tests.push(test);\n  this.emit('test', test);\n  return this;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @api public\n * @return {string}\n */\nSuite.prototype.fullTitle = function() {\n  if (this.parent) {\n    var full = this.parent.fullTitle();\n    if (full) {\n      return full + ' ' + this.title;\n    }\n  }\n  return this.title;\n};\n\n/**\n * Return the total number of tests.\n *\n * @api public\n * @return {number}\n */\nSuite.prototype.total = function() {\n  return utils.reduce(this.suites, function(sum, suite) {\n    return sum + suite.total();\n  }, 0) + this.tests.length;\n};\n\n/**\n * Iterates through each suite recursively to find all tests. Applies a\n * function in the format `fn(test)`.\n *\n * @api private\n * @param {Function} fn\n * @return {Suite}\n */\nSuite.prototype.eachTest = function(fn) {\n  utils.forEach(this.tests, fn);\n  utils.forEach(this.suites, function(suite) {\n    suite.eachTest(fn);\n  });\n  return this;\n};\n\n/**\n * This will run the root suite if we happen to be running in delayed mode.\n */\nSuite.prototype.run = function run() {\n  if (this.root) {\n    this.emit('run');\n  }\n};\n\n},{\"./hook\":7,\"./ms\":15,\"./utils\":39,\"debug\":2,\"events\":3}],38:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Runnable = require('./runnable');\nvar inherits = require('./utils').inherits;\n\n/**\n * Expose `Test`.\n */\n\nmodule.exports = Test;\n\n/**\n * Initialize a new `Test` with the given `title` and callback `fn`.\n *\n * @api private\n * @param {String} title\n * @param {Function} fn\n */\nfunction Test(title, fn) {\n  Runnable.call(this, title, fn);\n  this.pending = !fn;\n  this.type = 'test';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\ninherits(Test, Runnable);\n\n},{\"./runnable\":35,\"./utils\":39}],39:[function(require,module,exports){\n(function (process,Buffer){\n/* eslint-env browser */\n\n/**\n * Module dependencies.\n */\n\nvar basename = require('path').basename;\nvar debug = require('debug')('mocha:watch');\nvar exists = require('fs').existsSync || require('path').existsSync;\nvar glob = require('glob');\nvar join = require('path').join;\nvar readdirSync = require('fs').readdirSync;\nvar statSync = require('fs').statSync;\nvar watchFile = require('fs').watchFile;\n\n/**\n * Ignored directories.\n */\n\nvar ignore = ['node_modules', '.git'];\n\nexports.inherits = require('util').inherits;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @api private\n * @param  {string} html\n * @return {string}\n */\nexports.escape = function(html) {\n  return String(html)\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\n/**\n * Array#forEach (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} scope\n */\nexports.forEach = function(arr, fn, scope) {\n  for (var i = 0, l = arr.length; i < l; i++) {\n    fn.call(scope, arr[i], i);\n  }\n};\n\n/**\n * Test if the given obj is type of string.\n *\n * @api private\n * @param {Object} obj\n * @return {boolean}\n */\nexports.isString = function(obj) {\n  return typeof obj === 'string';\n};\n\n/**\n * Array#map (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} scope\n * @return {Array}\n */\nexports.map = function(arr, fn, scope) {\n  var result = [];\n  for (var i = 0, l = arr.length; i < l; i++) {\n    result.push(fn.call(scope, arr[i], i, arr));\n  }\n  return result;\n};\n\n/**\n * Array#indexOf (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Object} obj to find index of\n * @param {number} start\n * @return {number}\n */\nexports.indexOf = function(arr, obj, start) {\n  for (var i = start || 0, l = arr.length; i < l; i++) {\n    if (arr[i] === obj) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Array#reduce (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object} val Initial value.\n * @return {*}\n */\nexports.reduce = function(arr, fn, val) {\n  var rval = val;\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    rval = fn(rval, arr[i], i, arr);\n  }\n\n  return rval;\n};\n\n/**\n * Array#filter (<=IE8)\n *\n * @api private\n * @param {Array} arr\n * @param {Function} fn\n * @return {Array}\n */\nexports.filter = function(arr, fn) {\n  var ret = [];\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    var val = arr[i];\n    if (fn(val, i, arr)) {\n      ret.push(val);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Object.keys (<=IE8)\n *\n * @api private\n * @param {Object} obj\n * @return {Array} keys\n */\nexports.keys = typeof Object.keys === 'function' ? Object.keys : function(obj) {\n  var keys = [];\n  var has = Object.prototype.hasOwnProperty; // for `window` on <=IE8\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n};\n\n/**\n * Watch the given `files` for changes\n * and invoke `fn(file)` on modification.\n *\n * @api private\n * @param {Array} files\n * @param {Function} fn\n */\nexports.watch = function(files, fn) {\n  var options = { interval: 100 };\n  files.forEach(function(file) {\n    debug('file %s', file);\n    watchFile(file, options, function(curr, prev) {\n      if (prev.mtime < curr.mtime) {\n        fn(file);\n      }\n    });\n  });\n};\n\n/**\n * Array.isArray (<=IE8)\n *\n * @api private\n * @param {Object} obj\n * @return {Boolean}\n */\nvar isArray = typeof Array.isArray === 'function' ? Array.isArray : function(obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\n/**\n * Buffer.prototype.toJSON polyfill.\n *\n * @type {Function}\n */\nif (typeof Buffer !== 'undefined' && Buffer.prototype) {\n  Buffer.prototype.toJSON = Buffer.prototype.toJSON || function() {\n    return Array.prototype.slice.call(this, 0);\n  };\n}\n\n/**\n * Ignored files.\n *\n * @api private\n * @param {string} path\n * @return {boolean}\n */\nfunction ignored(path) {\n  return !~ignore.indexOf(path);\n}\n\n/**\n * Lookup files in the given `dir`.\n *\n * @api private\n * @param {string} dir\n * @param {string[]} [ext=['.js']]\n * @param {Array} [ret=[]]\n * @return {Array}\n */\nexports.files = function(dir, ext, ret) {\n  ret = ret || [];\n  ext = ext || ['js'];\n\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');\n\n  readdirSync(dir)\n    .filter(ignored)\n    .forEach(function(path) {\n      path = join(dir, path);\n      if (statSync(path).isDirectory()) {\n        exports.files(path, ext, ret);\n      } else if (path.match(re)) {\n        ret.push(path);\n      }\n    });\n\n  return ret;\n};\n\n/**\n * Compute a slug from the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nexports.slug = function(str) {\n  return str\n    .toLowerCase()\n    .replace(/ +/g, '-')\n    .replace(/[^-\\w]/g, '');\n};\n\n/**\n * Strip the function definition from `str`, and re-indent for pre whitespace.\n *\n * @param {string} str\n * @return {string}\n */\nexports.clean = function(str) {\n  str = str\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '')\n    .replace(/^function *\\(.*\\)\\s*{|\\(.*\\) *=> *{?/, '')\n    .replace(/\\s+\\}$/, '');\n\n  var spaces = str.match(/^\\n?( *)/)[1].length;\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;\n  var re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');\n\n  str = str.replace(re, '');\n\n  return exports.trim(str);\n};\n\n/**\n * Trim the given `str`.\n *\n * @api private\n * @param {string} str\n * @return {string}\n */\nexports.trim = function(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n * Parse the given `qs`.\n *\n * @api private\n * @param {string} qs\n * @return {Object}\n */\nexports.parseQuery = function(qs) {\n  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair) {\n    var i = pair.indexOf('=');\n    var key = pair.slice(0, i);\n    var val = pair.slice(++i);\n\n    obj[key] = decodeURIComponent(val);\n    return obj;\n  }, {});\n};\n\n/**\n * Highlight the given string of `js`.\n *\n * @api private\n * @param {string} js\n * @return {string}\n */\nfunction highlight(js) {\n  return js\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>');\n}\n\n/**\n * Highlight the contents of tag `name`.\n *\n * @api private\n * @param {string} name\n */\nexports.highlightTags = function(name) {\n  var code = document.getElementById('mocha').getElementsByTagName(name);\n  for (var i = 0, len = code.length; i < len; ++i) {\n    code[i].innerHTML = highlight(code[i].innerHTML);\n  }\n};\n\n/**\n * If a value could have properties, and has none, this function is called,\n * which returns a string representation of the empty value.\n *\n * Functions w/ no properties return `'[Function]'`\n * Arrays w/ length === 0 return `'[]'`\n * Objects w/ no properties return `'{}'`\n * All else: return result of `value.toString()`\n *\n * @api private\n * @param {*} value The value to inspect.\n * @param {string} [type] The type of the value, if known.\n * @returns {string}\n */\nfunction emptyRepresentation(value, type) {\n  type = type || exports.type(value);\n\n  switch (type) {\n    case 'function':\n      return '[Function]';\n    case 'object':\n      return '{}';\n    case 'array':\n      return '[]';\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Takes some variable and asks `Object.prototype.toString()` what it thinks it\n * is.\n *\n * @api private\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n * @param {*} value The value to test.\n * @returns {string}\n * @example\n * type({}) // 'object'\n * type([]) // 'array'\n * type(1) // 'number'\n * type(false) // 'boolean'\n * type(Infinity) // 'number'\n * type(null) // 'null'\n * type(new Date()) // 'date'\n * type(/foo/) // 'regexp'\n * type('type') // 'string'\n * type(global) // 'global'\n */\nexports.type = function type(value) {\n  if (value === undefined) {\n    return 'undefined';\n  } else if (value === null) {\n    return 'null';\n  } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n    return 'buffer';\n  }\n  return Object.prototype.toString.call(value)\n    .replace(/^\\[.+\\s(.+?)\\]$/, '$1')\n    .toLowerCase();\n};\n\n/**\n * Stringify `value`. Different behavior depending on type of value:\n *\n * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.\n * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.\n * - If `value` is an *empty* object, function, or array, return result of function\n *   {@link emptyRepresentation}.\n * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of\n *   JSON.stringify().\n *\n * @api private\n * @see exports.type\n * @param {*} value\n * @return {string}\n */\nexports.stringify = function(value) {\n  var type = exports.type(value);\n\n  if (!~exports.indexOf(['object', 'array', 'function'], type)) {\n    if (type !== 'buffer') {\n      return jsonStringify(value);\n    }\n    var json = value.toJSON();\n    // Based on the toJSON result\n    return jsonStringify(json.data && json.type ? json.data : json, 2)\n      .replace(/,(\\n|$)/g, '$1');\n  }\n\n  for (var prop in value) {\n    if (Object.prototype.hasOwnProperty.call(value, prop)) {\n      return jsonStringify(exports.canonicalize(value), 2).replace(/,(\\n|$)/g, '$1');\n    }\n  }\n\n  return emptyRepresentation(value, type);\n};\n\n/**\n * like JSON.stringify but more sense.\n *\n * @api private\n * @param {Object}  object\n * @param {number=} spaces\n * @param {number=} depth\n * @returns {*}\n */\nfunction jsonStringify(object, spaces, depth) {\n  if (typeof spaces === 'undefined') {\n    // primitive types\n    return _stringify(object);\n  }\n\n  depth = depth || 1;\n  var space = spaces * depth;\n  var str = isArray(object) ? '[' : '{';\n  var end = isArray(object) ? ']' : '}';\n  var length = object.length || exports.keys(object).length;\n  // `.repeat()` polyfill\n  function repeat(s, n) {\n    return new Array(n).join(s);\n  }\n\n  function _stringify(val) {\n    switch (exports.type(val)) {\n      case 'null':\n      case 'undefined':\n        val = '[' + val + ']';\n        break;\n      case 'array':\n      case 'object':\n        val = jsonStringify(val, spaces, depth + 1);\n        break;\n      case 'boolean':\n      case 'regexp':\n      case 'number':\n        val = val === 0 && (1 / val) === -Infinity // `-0`\n          ? '-0'\n          : val.toString();\n        break;\n      case 'date':\n        var sDate = isNaN(val.getTime())        // Invalid date\n          ? val.toString()\n          : val.toISOString();\n        val = '[Date: ' + sDate + ']';\n        break;\n      case 'buffer':\n        var json = val.toJSON();\n        // Based on the toJSON result\n        json = json.data && json.type ? json.data : json;\n        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';\n        break;\n      default:\n        val = (val === '[Function]' || val === '[Circular]')\n          ? val\n          : JSON.stringify(val); // string\n    }\n    return val;\n  }\n\n  for (var i in object) {\n    if (!object.hasOwnProperty(i)) {\n      continue; // not my business\n    }\n    --length;\n    str += '\\n ' + repeat(' ', space)\n      + (isArray(object) ? '' : '\"' + i + '\": ') // key\n      + _stringify(object[i])                     // value\n      + (length ? ',' : '');                     // comma\n  }\n\n  return str\n    // [], {}\n    + (str.length !== 1 ? '\\n' + repeat(' ', --space) + end : end);\n}\n\n/**\n * Test if a value is a buffer.\n *\n * @api private\n * @param {*} value The value to test.\n * @return {boolean} True if `value` is a buffer, otherwise false\n */\nexports.isBuffer = function(value) {\n  return typeof Buffer !== 'undefined' && Buffer.isBuffer(value);\n};\n\n/**\n * Return a new Thing that has the keys in sorted order. Recursive.\n *\n * If the Thing...\n * - has already been seen, return string `'[Circular]'`\n * - is `undefined`, return string `'[undefined]'`\n * - is `null`, return value `null`\n * - is some other primitive, return the value\n * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method\n * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.\n * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`\n *\n * @api private\n * @see {@link exports.stringify}\n * @param {*} value Thing to inspect.  May or may not have properties.\n * @param {Array} [stack=[]] Stack of seen values\n * @return {(Object|Array|Function|string|undefined)}\n */\nexports.canonicalize = function(value, stack) {\n  var canonicalizedObj;\n  /* eslint-disable no-unused-vars */\n  var prop;\n  /* eslint-enable no-unused-vars */\n  var type = exports.type(value);\n  function withStack(value, fn) {\n    stack.push(value);\n    fn();\n    stack.pop();\n  }\n\n  stack = stack || [];\n\n  if (exports.indexOf(stack, value) !== -1) {\n    return '[Circular]';\n  }\n\n  switch (type) {\n    case 'undefined':\n    case 'buffer':\n    case 'null':\n      canonicalizedObj = value;\n      break;\n    case 'array':\n      withStack(value, function() {\n        canonicalizedObj = exports.map(value, function(item) {\n          return exports.canonicalize(item, stack);\n        });\n      });\n      break;\n    case 'function':\n      /* eslint-disable guard-for-in */\n      for (prop in value) {\n        canonicalizedObj = {};\n        break;\n      }\n      /* eslint-enable guard-for-in */\n      if (!canonicalizedObj) {\n        canonicalizedObj = emptyRepresentation(value, type);\n        break;\n      }\n    /* falls through */\n    case 'object':\n      canonicalizedObj = canonicalizedObj || {};\n      withStack(value, function() {\n        exports.forEach(exports.keys(value).sort(), function(key) {\n          canonicalizedObj[key] = exports.canonicalize(value[key], stack);\n        });\n      });\n      break;\n    case 'date':\n    case 'number':\n    case 'regexp':\n    case 'boolean':\n      canonicalizedObj = value;\n      break;\n    default:\n      canonicalizedObj = value.toString();\n  }\n\n  return canonicalizedObj;\n};\n\n/**\n * Lookup file names at the given `path`.\n *\n * @api public\n * @param {string} path Base path to start searching from.\n * @param {string[]} extensions File extensions to look for.\n * @param {boolean} recursive Whether or not to recurse into subdirectories.\n * @return {string[]} An array of paths.\n */\nexports.lookupFiles = function lookupFiles(path, extensions, recursive) {\n  var files = [];\n  var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');\n\n  if (!exists(path)) {\n    if (exists(path + '.js')) {\n      path += '.js';\n    } else {\n      files = glob.sync(path);\n      if (!files.length) {\n        throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");\n      }\n      return files;\n    }\n  }\n\n  try {\n    var stat = statSync(path);\n    if (stat.isFile()) {\n      return path;\n    }\n  } catch (err) {\n    // ignore error\n    return;\n  }\n\n  readdirSync(path).forEach(function(file) {\n    file = join(path, file);\n    try {\n      var stat = statSync(file);\n      if (stat.isDirectory()) {\n        if (recursive) {\n          files = files.concat(lookupFiles(file, extensions, recursive));\n        }\n        return;\n      }\n    } catch (err) {\n      // ignore error\n      return;\n    }\n    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') {\n      return;\n    }\n    files.push(file);\n  });\n\n  return files;\n};\n\n/**\n * Generate an undefined error with a message warning the user.\n *\n * @return {Error}\n */\n\nexports.undefinedError = function() {\n  return new Error('Caught undefined error, did you throw without specifying what?');\n};\n\n/**\n * Generate an undefined error if `err` is not defined.\n *\n * @param {Error} err\n * @return {Error}\n */\n\nexports.getError = function(err) {\n  return err || exports.undefinedError();\n};\n\n/**\n * @summary\n * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)\n * @description\n * When invoking this function you get a filter function that get the Error.stack as an input,\n * and return a prettify output.\n * (i.e: strip Mocha and internal node functions from stack trace).\n * @returns {Function}\n */\nexports.stackTraceFilter = function() {\n  // TODO: Replace with `process.browser`\n  var slash = '/';\n  var is = typeof document === 'undefined' ? { node: true } : { browser: true };\n  var cwd = is.node\n      ? process.cwd() + slash\n      : (typeof location === 'undefined' ? window.location : location).href.replace(/\\/[^\\/]*$/, '/');\n\n  function isMochaInternal(line) {\n    return (~line.indexOf('node_modules' + slash + 'mocha' + slash))\n      || (~line.indexOf('components' + slash + 'mochajs' + slash))\n      || (~line.indexOf('components' + slash + 'mocha' + slash))\n      || (~line.indexOf(slash + 'mocha.js'));\n  }\n\n  function isNodeInternal(line) {\n    return (~line.indexOf('(timers.js:'))\n      || (~line.indexOf('(events.js:'))\n      || (~line.indexOf('(node.js:'))\n      || (~line.indexOf('(module.js:'))\n      || (~line.indexOf('GeneratorFunctionPrototype.next (native)'))\n      || false;\n  }\n\n  return function(stack) {\n    stack = stack.split('\\n');\n\n    stack = exports.reduce(stack, function(list, line) {\n      if (isMochaInternal(line)) {\n        return list;\n      }\n\n      if (is.node && isNodeInternal(line)) {\n        return list;\n      }\n\n      // Clean up cwd(absolute)\n      list.push(line.replace(cwd, ''));\n      return list;\n    }, []);\n\n    return stack.join('\\n');\n  };\n};\n\n}).call(this,require('_process'),require(\"buffer\").Buffer)\n},{\"_process\":51,\"buffer\":43,\"debug\":2,\"fs\":41,\"glob\":41,\"path\":41,\"util\":66}],40:[function(require,module,exports){\n(function (process){\nvar WritableStream = require('stream').Writable\nvar inherits = require('util').inherits\n\nmodule.exports = BrowserStdout\n\n\ninherits(BrowserStdout, WritableStream)\n\nfunction BrowserStdout(opts) {\n  if (!(this instanceof BrowserStdout)) return new BrowserStdout(opts)\n\n  opts = opts || {}\n  WritableStream.call(this, opts)\n  this.label = (opts.label !== undefined) ? opts.label : 'stdout'\n}\n\nBrowserStdout.prototype._write = function(chunks, encoding, cb) {\n  var output = chunks.toString ? chunks.toString() : chunks\n  if (this.label === false) {\n    console.log(output)\n  } else {\n    console.log(this.label+':', output)\n  }\n  process.nextTick(cb)\n}\n\n}).call(this,require('_process'))\n},{\"_process\":51,\"stream\":63,\"util\":66}],41:[function(require,module,exports){\n\n},{}],42:[function(require,module,exports){\narguments[4][41][0].apply(exports,arguments)\n},{\"dup\":41}],43:[function(require,module,exports){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('is-array')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n *     on objects.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = (function () {\n  function Bar () {}\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    arr.constructor = Bar\n    return arr.foo() === 42 && // typed array instances can be augmented\n        arr.constructor === Bar && // constructor can be set\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n})()\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  this.length = 0\n  this.parent = undefined\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    array.byteLength\n    that = Buffer._augment(new Uint8Array(array))\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = Buffer._augment(new Uint8Array(length))\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n    that._isBuffer = true\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  var i = 0\n  var len = Math.min(x, y)\n  while (i < len) {\n    if (a[i] !== b[i]) break\n\n    ++i\n  }\n\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\n// pre-set for values that may exist in the future\nBuffer.prototype.length = undefined\nBuffer.prototype.parent = undefined\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return 0\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\n// `get` is deprecated\nBuffer.prototype.get = function get (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` is deprecated\nBuffer.prototype.set = function set (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = value\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = value\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = value\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    target._set(this.subarray(start, start + len), targetStart)\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1) {\n        buf[i] = this[i]\n      }\n      return buf.buffer\n    }\n  } else {\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function _augment (arr) {\n  arr.constructor = Buffer\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array set method before overwriting\n  arr._set = arr.set\n\n  // deprecated\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.equals = BP.equals\n  arr.compare = BP.compare\n  arr.indexOf = BP.indexOf\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUIntLE = BP.readUIntLE\n  arr.readUIntBE = BP.readUIntBE\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readIntLE = BP.readIntLE\n  arr.readIntBE = BP.readIntBE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUIntLE = BP.writeUIntLE\n  arr.writeUIntBE = BP.writeUIntBE\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeIntLE = BP.writeIntLE\n  arr.writeIntBE = BP.writeIntBE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n},{\"base64-js\":44,\"ieee754\":45,\"is-array\":46}],44:[function(require,module,exports){\nvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n\n},{}],45:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],46:[function(require,module,exports){\n\n/**\n * isArray\n */\n\nvar isArray = Array.isArray;\n\n/**\n * toString\n */\n\nvar str = Object.prototype.toString;\n\n/**\n * Whether or not the given `val`\n * is an array.\n *\n * example:\n *\n *        isArray([]);\n *        // > true\n *        isArray(arguments);\n *        // > false\n *        isArray('');\n *        // > false\n *\n * @param {mixed} val\n * @return {bool}\n */\n\nmodule.exports = isArray || function (val) {\n  return !! val && '[object Array]' == str.call(val);\n};\n\n},{}],47:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],48:[function(require,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],49:[function(require,module,exports){\nmodule.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n},{}],50:[function(require,module,exports){\nexports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\n},{}],51:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],52:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_duplex.js\")\n\n},{\"./lib/_stream_duplex.js\":53}],53:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nforEach(objectKeys(Writable.prototype), function(method) {\n  if (!Duplex.prototype[method])\n    Duplex.prototype[method] = Writable.prototype[method];\n});\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex))\n    return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false)\n    this.readable = false;\n\n  if (options && options.writable === false)\n    this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false)\n    this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended)\n    return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  process.nextTick(this.end.bind(this));\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\n}).call(this,require('_process'))\n},{\"./_stream_readable\":55,\"./_stream_writable\":57,\"_process\":51,\"core-util-is\":58,\"inherits\":48}],54:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough))\n    return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n},{\"./_stream_transform\":56,\"core-util-is\":58,\"inherits\":48}],55:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\n\n\n/*<replacement>*/\nvar debug = require('util');\nif (debug && debug.debuglog) {\n  debug = debug.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n  var state = this._readableState;\n\n  if (util.isString(chunk) && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (util.isNullOrUndefined(chunk)) {\n    state.reading = false;\n    if (!state.ended)\n      onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding)\n        chunk = state.decoder.write(chunk);\n\n      if (!addToFront)\n        state.reading = false;\n\n      // if we want the data now, just emit it.\n      if (state.flowing && state.length === 0 && !state.sync) {\n        stream.emit('data', chunk);\n        stream.read(0);\n      } else {\n        // update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended &&\n         (state.needReadable ||\n          state.length < state.highWaterMark ||\n          state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended)\n    return 0;\n\n  if (state.objectMode)\n    return n === 0 ? 0 : 1;\n\n  if (isNaN(n) || util.isNull(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length)\n      return state.buffer[0].length;\n    else\n      return state.length;\n  }\n\n  if (n <= 0)\n    return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark)\n    state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else\n      return state.length;\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (!util.isNumber(n) || n > 0)\n    state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 &&\n      state.needReadable &&\n      (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended)\n      endReadable(this);\n    else\n      emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0)\n      endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading)\n    n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (util.isNull(ret)) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended)\n    state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0)\n    endReadable(this);\n\n  if (!util.isNull(ret))\n    this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync)\n      process.nextTick(function() {\n        emitReadable_(stream);\n      });\n    else\n      emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function() {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended &&\n         state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n    else\n      len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&\n              dest !== process.stdout &&\n              dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted)\n    process.nextTick(endFn);\n  else\n    src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain &&\n        (!dest._writableState || dest._writableState.needDrain))\n      ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      debug('false write response, pause',\n            src._readableState.awaitDrain);\n      src._readableState.awaitDrain++;\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0)\n      dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error)\n    dest.on('error', onerror);\n  else if (isArray(dest._events.error))\n    dest._events.error.unshift(onerror);\n  else\n    dest._events.error = [onerror, dest._events.error];\n\n\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain)\n      state.awaitDrain--;\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1)\n    return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        var self = this;\n        process.nextTick(function() {\n          debug('readable nexttick read 0');\n          self.read(0);\n        });\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    if (!state.reading) {\n      debug('resume read 0');\n      this.read(0);\n    }\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(function() {\n      resume_(stream, state);\n    });\n  }\n}\n\nfunction resume_(stream, state) {\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading)\n    stream.read(0);\n}\n\nReadable.prototype.pause = function() {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    debug('wrapped data');\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n    if (!chunk || !state.objectMode && !chunk.length)\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {\n      this[i] = function(method) { return function() {\n        return stream[method].apply(stream, arguments);\n      }}(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0)\n    return null;\n\n  if (length === 0)\n    ret = null;\n  else if (objectMode)\n    ret = list.shift();\n  else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode)\n      ret = list.join('');\n    else\n      ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode)\n        ret = '';\n      else\n        ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode)\n          ret += buf.slice(0, cpy);\n        else\n          buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length)\n          list[0] = buf.slice(cpy);\n        else\n          list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(function() {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf (xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n\n}).call(this,require('_process'))\n},{\"./_stream_duplex\":53,\"_process\":51,\"buffer\":43,\"core-util-is\":58,\"events\":47,\"inherits\":48,\"isarray\":49,\"stream\":63,\"string_decoder/\":64,\"util\":42}],56:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\n\nfunction TransformState(options, stream) {\n  this.afterTransform = function(er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb)\n    return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (!util.isNullOrUndefined(data))\n    stream.push(data);\n\n  if (cb)\n    cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\n\nfunction Transform(options) {\n  if (!(this instanceof Transform))\n    return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(options, this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  this.once('prefinish', function() {\n    if (util.isFunction(this._flush))\n      this._flush(function(er) {\n        done(stream, er);\n      });\n    else\n      done(stream);\n  });\n}\n\nTransform.prototype.push = function(chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function(chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function(chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform ||\n        rs.needReadable ||\n        rs.length < rs.highWaterMark)\n      this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function(n) {\n  var ts = this._transformState;\n\n  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\n\nfunction done(stream, er) {\n  if (er)\n    return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length)\n    throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming)\n    throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n},{\"./_stream_duplex\":53,\"core-util-is\":58,\"inherits\":48}],57:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Stream = require('stream');\n\nutil.inherits(Writable, Stream);\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n}\n\nfunction WritableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function(er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.buffer = [];\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n}\n\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex))\n    return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\n\nfunction writeAfterEnd(stream, state, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  process.nextTick(function() {\n    cb(er);\n  });\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    process.nextTick(function() {\n      cb(er);\n    });\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function(chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  else if (!encoding)\n    encoding = state.defaultEncoding;\n\n  if (!util.isFunction(cb))\n    cb = function() {};\n\n  if (state.ended)\n    writeAfterEnd(this, state, cb);\n  else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function() {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function() {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing &&\n        !state.corked &&\n        !state.finished &&\n        !state.bufferProcessing &&\n        state.buffer.length)\n      clearBuffer(this, state);\n  }\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode &&\n      state.decodeStrings !== false &&\n      util.isString(chunk)) {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret)\n    state.needDrain = true;\n\n  if (state.writing || state.corked)\n    state.buffer.push(new WriteReq(chunk, encoding, cb));\n  else\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev)\n    stream._writev(chunk, state.onwrite);\n  else\n    stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  if (sync)\n    process.nextTick(function() {\n      state.pendingcb--;\n      cb(er);\n    });\n  else {\n    state.pendingcb--;\n    cb(er);\n  }\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er)\n    onwriteError(stream, state, sync, er, cb);\n  else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(stream, state);\n\n    if (!finished &&\n        !state.corked &&\n        !state.bufferProcessing &&\n        state.buffer.length) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(function() {\n        afterWrite(stream, state, finished, cb);\n      });\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished)\n    onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n\n  if (stream._writev && state.buffer.length > 1) {\n    // Fast case, write everything using _writev()\n    var cbs = [];\n    for (var c = 0; c < state.buffer.length; c++)\n      cbs.push(state.buffer[c].callback);\n\n    // count the one we are adding, as well.\n    // TODO(isaacs) clean this up\n    state.pendingcb++;\n    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {\n      for (var i = 0; i < cbs.length; i++) {\n        state.pendingcb--;\n        cbs[i](err);\n      }\n    });\n\n    // Clear buffer\n    state.buffer = [];\n  } else {\n    // Slow case, write chunks one-by-one\n    for (var c = 0; c < state.buffer.length; c++) {\n      var entry = state.buffer[c];\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        c++;\n        break;\n      }\n    }\n\n    if (c < state.buffer.length)\n      state.buffer = state.buffer.slice(c);\n    else\n      state.buffer.length = 0;\n  }\n\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function(chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function(chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (util.isFunction(chunk)) {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (!util.isNullOrUndefined(chunk))\n    this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished)\n    endWritable(this, state, cb);\n};\n\n\nfunction needFinish(stream, state) {\n  return (state.ending &&\n          state.length === 0 &&\n          !state.finished &&\n          !state.writing);\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(stream, state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else\n      prefinish(stream, state);\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished)\n      process.nextTick(cb);\n    else\n      stream.once('finish', cb);\n  }\n  state.ended = true;\n}\n\n}).call(this,require('_process'))\n},{\"./_stream_duplex\":53,\"_process\":51,\"buffer\":43,\"core-util-is\":58,\"inherits\":48,\"stream\":63}],58:[function(require,module,exports){\n(function (Buffer){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nfunction isBuffer(arg) {\n  return Buffer.isBuffer(arg);\n}\nexports.isBuffer = isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n}).call(this,require(\"buffer\").Buffer)\n},{\"buffer\":43}],59:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_passthrough.js\")\n\n},{\"./lib/_stream_passthrough.js\":54}],60:[function(require,module,exports){\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = require('stream');\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\n},{\"./lib/_stream_duplex.js\":53,\"./lib/_stream_passthrough.js\":54,\"./lib/_stream_readable.js\":55,\"./lib/_stream_transform.js\":56,\"./lib/_stream_writable.js\":57,\"stream\":63}],61:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_transform.js\")\n\n},{\"./lib/_stream_transform.js\":56}],62:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_writable.js\")\n\n},{\"./lib/_stream_writable.js\":57}],63:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n},{\"events\":47,\"inherits\":48,\"readable-stream/duplex.js\":52,\"readable-stream/passthrough.js\":59,\"readable-stream/readable.js\":60,\"readable-stream/transform.js\":61,\"readable-stream/writable.js\":62}],64:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n\n},{\"buffer\":43}],65:[function(require,module,exports){\nmodule.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n},{}],66:[function(require,module,exports){\n(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./support/isBuffer\":65,\"_process\":51,\"inherits\":48}],67:[function(require,module,exports){\n/* See LICENSE file for terms of use */\n\n/*\n * Text diff implementation.\n *\n * This library supports the following APIS:\n * JsDiff.diffChars: Character by character diff\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace\n * JsDiff.diffLines: Line based diff\n *\n * JsDiff.diffCss: Diff targeted at CSS content\n *\n * These methods are based on the implementation proposed in\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927\n */\n(function(global, undefined) {\n  var objectPrototypeToString = Object.prototype.toString;\n\n  /*istanbul ignore next*/\n  function map(arr, mapper, that) {\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, mapper, that);\n    }\n\n    var other = new Array(arr.length);\n\n    for (var i = 0, n = arr.length; i < n; i++) {\n      other[i] = mapper.call(that, arr[i], i, arr);\n    }\n    return other;\n  }\n  function clonePath(path) {\n    return { newPos: path.newPos, components: path.components.slice(0) };\n  }\n  function removeEmpty(array) {\n    var ret = [];\n    for (var i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n    return ret;\n  }\n  function escapeHTML(s) {\n    var n = s;\n    n = n.replace(/&/g, '&amp;');\n    n = n.replace(/</g, '&lt;');\n    n = n.replace(/>/g, '&gt;');\n    n = n.replace(/\"/g, '&quot;');\n\n    return n;\n  }\n\n  // This function handles the presence of circular references by bailing out when encountering an\n  // object that is already on the \"stack\" of items being processed.\n  function canonicalize(obj, stack, replacementStack) {\n    stack = stack || [];\n    replacementStack = replacementStack || [];\n\n    var i;\n\n    for (i = 0; i < stack.length; i += 1) {\n      if (stack[i] === obj) {\n        return replacementStack[i];\n      }\n    }\n\n    var canonicalizedObj;\n\n    if ('[object Array]' === objectPrototypeToString.call(obj)) {\n      stack.push(obj);\n      canonicalizedObj = new Array(obj.length);\n      replacementStack.push(canonicalizedObj);\n      for (i = 0; i < obj.length; i += 1) {\n        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack);\n      }\n      stack.pop();\n      replacementStack.pop();\n    } else if (typeof obj === 'object' && obj !== null) {\n      stack.push(obj);\n      canonicalizedObj = {};\n      replacementStack.push(canonicalizedObj);\n      var sortedKeys = [],\n          key;\n      for (key in obj) {\n        sortedKeys.push(key);\n      }\n      sortedKeys.sort();\n      for (i = 0; i < sortedKeys.length; i += 1) {\n        key = sortedKeys[i];\n        canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack);\n      }\n      stack.pop();\n      replacementStack.pop();\n    } else {\n      canonicalizedObj = obj;\n    }\n    return canonicalizedObj;\n  }\n\n  function buildValues(components, newString, oldString, useLongestToken) {\n    var componentPos = 0,\n        componentLen = components.length,\n        newPos = 0,\n        oldPos = 0;\n\n    for (; componentPos < componentLen; componentPos++) {\n      var component = components[componentPos];\n      if (!component.removed) {\n        if (!component.added && useLongestToken) {\n          var value = newString.slice(newPos, newPos + component.count);\n          value = map(value, function(value, i) {\n            var oldValue = oldString[oldPos + i];\n            return oldValue.length > value.length ? oldValue : value;\n          });\n\n          component.value = value.join('');\n        } else {\n          component.value = newString.slice(newPos, newPos + component.count).join('');\n        }\n        newPos += component.count;\n\n        // Common case\n        if (!component.added) {\n          oldPos += component.count;\n        }\n      } else {\n        component.value = oldString.slice(oldPos, oldPos + component.count).join('');\n        oldPos += component.count;\n\n        // Reverse add and remove so removes are output first to match common convention\n        // The diffing algorithm is tied to add then remove output and this is the simplest\n        // route to get the desired output with minimal overhead.\n        if (componentPos && components[componentPos - 1].added) {\n          var tmp = components[componentPos - 1];\n          components[componentPos - 1] = components[componentPos];\n          components[componentPos] = tmp;\n        }\n      }\n    }\n\n    return components;\n  }\n\n  function Diff(ignoreWhitespace) {\n    this.ignoreWhitespace = ignoreWhitespace;\n  }\n  Diff.prototype = {\n    diff: function(oldString, newString, callback) {\n      var self = this;\n\n      function done(value) {\n        if (callback) {\n          setTimeout(function() { callback(undefined, value); }, 0);\n          return true;\n        } else {\n          return value;\n        }\n      }\n\n      // Handle the identity case (this is due to unrolling editLength == 0\n      if (newString === oldString) {\n        return done([{ value: newString }]);\n      }\n      if (!newString) {\n        return done([{ value: oldString, removed: true }]);\n      }\n      if (!oldString) {\n        return done([{ value: newString, added: true }]);\n      }\n\n      newString = this.tokenize(newString);\n      oldString = this.tokenize(oldString);\n\n      var newLen = newString.length, oldLen = oldString.length;\n      var editLength = 1;\n      var maxEditLength = newLen + oldLen;\n      var bestPath = [{ newPos: -1, components: [] }];\n\n      // Seed editLength = 0, i.e. the content starts with the same values\n      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n        // Identity per the equality and tokenizer\n        return done([{value: newString.join('')}]);\n      }\n\n      // Main worker method. checks all permutations of a given edit length for acceptance.\n      function execEditLength() {\n        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n          var basePath;\n          var addPath = bestPath[diagonalPath - 1],\n              removePath = bestPath[diagonalPath + 1],\n              oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n          if (addPath) {\n            // No one else is going to attempt to use this value, clear it\n            bestPath[diagonalPath - 1] = undefined;\n          }\n\n          var canAdd = addPath && addPath.newPos + 1 < newLen,\n              canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n          if (!canAdd && !canRemove) {\n            // If this path is a terminal then prune\n            bestPath[diagonalPath] = undefined;\n            continue;\n          }\n\n          // Select the diagonal that we want to branch from. We select the prior\n          // path whose position in the new string is the farthest from the origin\n          // and does not pass the bounds of the diff graph\n          if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {\n            basePath = clonePath(removePath);\n            self.pushComponent(basePath.components, undefined, true);\n          } else {\n            basePath = addPath;   // No need to clone, we've pulled it from the list\n            basePath.newPos++;\n            self.pushComponent(basePath.components, true, undefined);\n          }\n\n          oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);\n\n          // If we have hit the end of both strings, then we are done\n          if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n            return done(buildValues(basePath.components, newString, oldString, self.useLongestToken));\n          } else {\n            // Otherwise track this path as a potential candidate and continue.\n            bestPath[diagonalPath] = basePath;\n          }\n        }\n\n        editLength++;\n      }\n\n      // Performs the length of edit iteration. Is a bit fugly as this has to support the\n      // sync and async mode which is never fun. Loops over execEditLength until a value\n      // is produced.\n      if (callback) {\n        (function exec() {\n          setTimeout(function() {\n            // This should not happen, but we want to be safe.\n            /*istanbul ignore next */\n            if (editLength > maxEditLength) {\n              return callback();\n            }\n\n            if (!execEditLength()) {\n              exec();\n            }\n          }, 0);\n        }());\n      } else {\n        while (editLength <= maxEditLength) {\n          var ret = execEditLength();\n          if (ret) {\n            return ret;\n          }\n        }\n      }\n    },\n\n    pushComponent: function(components, added, removed) {\n      var last = components[components.length - 1];\n      if (last && last.added === added && last.removed === removed) {\n        // We need to clone here as the component clone operation is just\n        // as shallow array clone\n        components[components.length - 1] = {count: last.count + 1, added: added, removed: removed };\n      } else {\n        components.push({count: 1, added: added, removed: removed });\n      }\n    },\n    extractCommon: function(basePath, newString, oldString, diagonalPath) {\n      var newLen = newString.length,\n          oldLen = oldString.length,\n          newPos = basePath.newPos,\n          oldPos = newPos - diagonalPath,\n\n          commonCount = 0;\n      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n        newPos++;\n        oldPos++;\n        commonCount++;\n      }\n\n      if (commonCount) {\n        basePath.components.push({count: commonCount});\n      }\n\n      basePath.newPos = newPos;\n      return oldPos;\n    },\n\n    equals: function(left, right) {\n      var reWhitespace = /\\S/;\n      return left === right || (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right));\n    },\n    tokenize: function(value) {\n      return value.split('');\n    }\n  };\n\n  var CharDiff = new Diff();\n\n  var WordDiff = new Diff(true);\n  var WordWithSpaceDiff = new Diff();\n  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/(\\s+|\\b)/));\n  };\n\n  var CssDiff = new Diff(true);\n  CssDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/([{}:;,]|\\s+)/));\n  };\n\n  var LineDiff = new Diff();\n\n  var TrimmedLineDiff = new Diff();\n  TrimmedLineDiff.ignoreTrim = true;\n\n  LineDiff.tokenize = TrimmedLineDiff.tokenize = function(value) {\n    var retLines = [],\n        lines = value.split(/^/m);\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i],\n          lastLine = lines[i - 1],\n          lastLineLastChar = lastLine && lastLine[lastLine.length - 1];\n\n      // Merge lines that may contain windows new lines\n      if (line === '\\n' && lastLineLastChar === '\\r') {\n          retLines[retLines.length - 1] = retLines[retLines.length - 1].slice(0, -1) + '\\r\\n';\n      } else {\n        if (this.ignoreTrim) {\n          line = line.trim();\n          // add a newline unless this is the last line.\n          if (i < lines.length - 1) {\n            line += '\\n';\n          }\n        }\n        retLines.push(line);\n      }\n    }\n\n    return retLines;\n  };\n\n  var PatchDiff = new Diff();\n  PatchDiff.tokenize = function(value) {\n    var ret = [],\n        linesAndNewlines = value.split(/(\\n|\\r\\n)/);\n\n    // Ignore the final empty token that occurs if the string ends with a new line\n    if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n      linesAndNewlines.pop();\n    }\n\n    // Merge the content and line separators into single tokens\n    for (var i = 0; i < linesAndNewlines.length; i++) {\n      var line = linesAndNewlines[i];\n\n      if (i % 2) {\n        ret[ret.length - 1] += line;\n      } else {\n        ret.push(line);\n      }\n    }\n    return ret;\n  };\n\n  var SentenceDiff = new Diff();\n  SentenceDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/(\\S.+?[.!?])(?=\\s+|$)/));\n  };\n\n  var JsonDiff = new Diff();\n  // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n  // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\n  JsonDiff.useLongestToken = true;\n  JsonDiff.tokenize = LineDiff.tokenize;\n  JsonDiff.equals = function(left, right) {\n    return LineDiff.equals(left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\n  };\n\n  var JsDiff = {\n    Diff: Diff,\n\n    diffChars: function(oldStr, newStr, callback) { return CharDiff.diff(oldStr, newStr, callback); },\n    diffWords: function(oldStr, newStr, callback) { return WordDiff.diff(oldStr, newStr, callback); },\n    diffWordsWithSpace: function(oldStr, newStr, callback) { return WordWithSpaceDiff.diff(oldStr, newStr, callback); },\n    diffLines: function(oldStr, newStr, callback) { return LineDiff.diff(oldStr, newStr, callback); },\n    diffTrimmedLines: function(oldStr, newStr, callback) { return TrimmedLineDiff.diff(oldStr, newStr, callback); },\n\n    diffSentences: function(oldStr, newStr, callback) { return SentenceDiff.diff(oldStr, newStr, callback); },\n\n    diffCss: function(oldStr, newStr, callback) { return CssDiff.diff(oldStr, newStr, callback); },\n    diffJson: function(oldObj, newObj, callback) {\n      return JsonDiff.diff(\n        typeof oldObj === 'string' ? oldObj : JSON.stringify(canonicalize(oldObj), undefined, '  '),\n        typeof newObj === 'string' ? newObj : JSON.stringify(canonicalize(newObj), undefined, '  '),\n        callback\n      );\n    },\n\n    createTwoFilesPatch: function(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader) {\n      var ret = [];\n\n      if (oldFileName == newFileName) {\n        ret.push('Index: ' + oldFileName);\n      }\n      ret.push('===================================================================');\n      ret.push('--- ' + oldFileName + (typeof oldHeader === 'undefined' ? '' : '\\t' + oldHeader));\n      ret.push('+++ ' + newFileName + (typeof newHeader === 'undefined' ? '' : '\\t' + newHeader));\n\n      var diff = PatchDiff.diff(oldStr, newStr);\n      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier\n\n      // Formats a given set of lines for printing as context lines in a patch\n      function contextLines(lines) {\n        return map(lines, function(entry) { return ' ' + entry; });\n      }\n\n      // Outputs the no newline at end of file warning if needed\n      function eofNL(curRange, i, current) {\n        var last = diff[diff.length - 2],\n            isLast = i === diff.length - 2,\n            isLastOfType = i === diff.length - 3 && current.added !== last.added;\n\n        // Figure out if this is the last line for the given file and missing NL\n        if (!(/\\n$/.test(current.value)) && (isLast || isLastOfType)) {\n          curRange.push('\\\\ No newline at end of file');\n        }\n      }\n\n      var oldRangeStart = 0, newRangeStart = 0, curRange = [],\n          oldLine = 1, newLine = 1;\n      for (var i = 0; i < diff.length; i++) {\n        var current = diff[i],\n            lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n        current.lines = lines;\n\n        if (current.added || current.removed) {\n          // If we have previous context, start with that\n          if (!oldRangeStart) {\n            var prev = diff[i - 1];\n            oldRangeStart = oldLine;\n            newRangeStart = newLine;\n\n            if (prev) {\n              curRange = contextLines(prev.lines.slice(-4));\n              oldRangeStart -= curRange.length;\n              newRangeStart -= curRange.length;\n            }\n          }\n\n          // Output our changes\n          curRange.push.apply(curRange, map(lines, function(entry) {\n            return (current.added ? '+' : '-') + entry;\n          }));\n          eofNL(curRange, i, current);\n\n          // Track the updated file position\n          if (current.added) {\n            newLine += lines.length;\n          } else {\n            oldLine += lines.length;\n          }\n        } else {\n          // Identical context lines. Track line changes\n          if (oldRangeStart) {\n            // Close out any changes that have been output (or join overlapping)\n            if (lines.length <= 8 && i < diff.length - 2) {\n              // Overlapping\n              curRange.push.apply(curRange, contextLines(lines));\n            } else {\n              // end the range and output\n              var contextSize = Math.min(lines.length, 4);\n              ret.push(\n                  '@@ -' + oldRangeStart + ',' + (oldLine - oldRangeStart + contextSize)\n                  + ' +' + newRangeStart + ',' + (newLine - newRangeStart + contextSize)\n                  + ' @@');\n              ret.push.apply(ret, curRange);\n              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));\n              if (lines.length <= 4) {\n                eofNL(ret, i, current);\n              }\n\n              oldRangeStart = 0;\n              newRangeStart = 0;\n              curRange = [];\n            }\n          }\n          oldLine += lines.length;\n          newLine += lines.length;\n        }\n      }\n\n      return ret.join('\\n') + '\\n';\n    },\n\n    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {\n      return JsDiff.createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader);\n    },\n\n    applyPatch: function(oldStr, uniDiff) {\n      var diffstr = uniDiff.split('\\n'),\n          hunks = [],\n          i = 0,\n          remEOFNL = false,\n          addEOFNL = false;\n\n      // Skip to the first change hunk\n      while (i < diffstr.length && !(/^@@/.test(diffstr[i]))) {\n        i++;\n      }\n\n      // Parse the unified diff\n      for (; i < diffstr.length; i++) {\n        if (diffstr[i][0] === '@') {\n          var chnukHeader = diffstr[i].split(/@@ -(\\d+),(\\d+) \\+(\\d+),(\\d+) @@/);\n          hunks.unshift({\n            start: chnukHeader[3],\n            oldlength: +chnukHeader[2],\n            removed: [],\n            newlength: chnukHeader[4],\n            added: []\n          });\n        } else if (diffstr[i][0] === '+') {\n          hunks[0].added.push(diffstr[i].substr(1));\n        } else if (diffstr[i][0] === '-') {\n          hunks[0].removed.push(diffstr[i].substr(1));\n        } else if (diffstr[i][0] === ' ') {\n          hunks[0].added.push(diffstr[i].substr(1));\n          hunks[0].removed.push(diffstr[i].substr(1));\n        } else if (diffstr[i][0] === '\\\\') {\n          if (diffstr[i - 1][0] === '+') {\n            remEOFNL = true;\n          } else if (diffstr[i - 1][0] === '-') {\n            addEOFNL = true;\n          }\n        }\n      }\n\n      // Apply the diff to the input\n      var lines = oldStr.split('\\n');\n      for (i = hunks.length - 1; i >= 0; i--) {\n        var hunk = hunks[i];\n        // Sanity check the input string. Bail if we don't match.\n        for (var j = 0; j < hunk.oldlength; j++) {\n          if (lines[hunk.start - 1 + j] !== hunk.removed[j]) {\n            return false;\n          }\n        }\n        Array.prototype.splice.apply(lines, [hunk.start - 1, hunk.oldlength].concat(hunk.added));\n      }\n\n      // Handle EOFNL insertion/removal\n      if (remEOFNL) {\n        while (!lines[lines.length - 1]) {\n          lines.pop();\n        }\n      } else if (addEOFNL) {\n        lines.push('');\n      }\n      return lines.join('\\n');\n    },\n\n    convertChangesToXML: function(changes) {\n      var ret = [];\n      for (var i = 0; i < changes.length; i++) {\n        var change = changes[i];\n        if (change.added) {\n          ret.push('<ins>');\n        } else if (change.removed) {\n          ret.push('<del>');\n        }\n\n        ret.push(escapeHTML(change.value));\n\n        if (change.added) {\n          ret.push('</ins>');\n        } else if (change.removed) {\n          ret.push('</del>');\n        }\n      }\n      return ret.join('');\n    },\n\n    // See: http://code.google.com/p/google-diff-match-patch/wiki/API\n    convertChangesToDMP: function(changes) {\n      var ret = [],\n          change,\n          operation;\n      for (var i = 0; i < changes.length; i++) {\n        change = changes[i];\n        if (change.added) {\n          operation = 1;\n        } else if (change.removed) {\n          operation = -1;\n        } else {\n          operation = 0;\n        }\n\n        ret.push([operation, change.value]);\n      }\n      return ret;\n    },\n\n    canonicalize: canonicalize\n  };\n\n  /*istanbul ignore next */\n  /*global module */\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = JsDiff;\n  } else if (typeof define === 'function' && define.amd) {\n    /*global define */\n    define([], function() { return JsDiff; });\n  } else if (typeof global.JsDiff === 'undefined') {\n    global.JsDiff = JsDiff;\n  }\n}(this));\n\n},{}],68:[function(require,module,exports){\n'use strict';\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe,  '\\\\$&');\n};\n\n},{}],69:[function(require,module,exports){\n(function (process){\n// Growl - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)\n\n/**\n * Module dependencies.\n */\n\nvar exec = require('child_process').exec\n  , fs = require('fs')\n  , path = require('path')\n  , exists = fs.existsSync || path.existsSync\n  , os = require('os')\n  , quote = JSON.stringify\n  , cmd;\n\nfunction which(name) {\n  var paths = process.env.PATH.split(':');\n  var loc;\n  \n  for (var i = 0, len = paths.length; i < len; ++i) {\n    loc = path.join(paths[i], name);\n    if (exists(loc)) return loc;\n  }\n}\n\nswitch(os.type()) {\n  case 'Darwin':\n    if (which('terminal-notifier')) {\n      cmd = {\n          type: \"Darwin-NotificationCenter\"\n        , pkg: \"terminal-notifier\"\n        , msg: '-message'\n        , title: '-title'\n        , subtitle: '-subtitle'\n        , priority: {\n              cmd: '-execute'\n            , range: []\n          }\n      };\n    } else {\n      cmd = {\n          type: \"Darwin-Growl\"\n        , pkg: \"growlnotify\"\n        , msg: '-m'\n        , sticky: '--sticky'\n        , priority: {\n              cmd: '--priority'\n            , range: [\n                -2\n              , -1\n              , 0\n              , 1\n              , 2\n              , \"Very Low\"\n              , \"Moderate\"\n              , \"Normal\"\n              , \"High\"\n              , \"Emergency\"\n            ]\n          }\n      };\n    }\n    break;\n  case 'Linux':\n    cmd = {\n        type: \"Linux\"\n      , pkg: \"notify-send\"\n      , msg: ''\n      , sticky: '-t 0'\n      , icon: '-i'\n      , priority: {\n          cmd: '-u'\n        , range: [\n            \"low\"\n          , \"normal\"\n          , \"critical\"\n        ]\n      }\n    };\n    break;\n  case 'Windows_NT':\n    cmd = {\n        type: \"Windows\"\n      , pkg: \"growlnotify\"\n      , msg: ''\n      , sticky: '/s:true'\n      , title: '/t:'\n      , icon: '/i:'\n      , priority: {\n            cmd: '/p:'\n          , range: [\n              -2\n            , -1\n            , 0\n            , 1\n            , 2\n          ]\n        }\n    };\n    break;\n}\n\n/**\n * Expose `growl`.\n */\n\nexports = module.exports = growl;\n\n/**\n * Node-growl version.\n */\n\nexports.version = '1.4.1'\n\n/**\n * Send growl notification _msg_ with _options_.\n *\n * Options:\n *\n *  - title   Notification title\n *  - sticky  Make the notification stick (defaults to false)\n *  - priority  Specify an int or named key (default is 0)\n *  - name    Application name (defaults to growlnotify)\n *  - image\n *    - path to an icon sets --iconpath\n *    - path to an image sets --image\n *    - capitalized word sets --appIcon\n *    - filename uses extname as --icon\n *    - otherwise treated as --icon\n *\n * Examples:\n *\n *   growl('New email')\n *   growl('5 new emails', { title: 'Thunderbird' })\n *   growl('Email sent', function(){\n *     // ... notification sent\n *   })\n *\n * @param {string} msg\n * @param {object} options\n * @param {function} fn\n * @api public\n */\n\nfunction growl(msg, options, fn) {\n  var image\n    , args\n    , options = options || {}\n    , fn = fn || function(){};\n\n  // noop\n  if (!cmd) return fn(new Error('growl not supported on this platform'));\n  args = [cmd.pkg];\n\n  // image\n  if (image = options.image) {\n    switch(cmd.type) {\n      case 'Darwin-Growl':\n        var flag, ext = path.extname(image).substr(1)\n        flag = flag || ext == 'icns' && 'iconpath'\n        flag = flag || /^[A-Z]/.test(image) && 'appIcon'\n        flag = flag || /^png|gif|jpe?g$/.test(ext) && 'image'\n        flag = flag || ext && (image = ext) && 'icon'\n        flag = flag || 'icon'\n        args.push('--' + flag, quote(image))\n        break;\n      case 'Linux':\n        args.push(cmd.icon, quote(image));\n        // libnotify defaults to sticky, set a hint for transient notifications\n        if (!options.sticky) args.push('--hint=int:transient:1');\n        break;\n      case 'Windows':\n        args.push(cmd.icon + quote(image));\n        break;\n    }\n  }\n\n  // sticky\n  if (options.sticky) args.push(cmd.sticky);\n\n  // priority\n  if (options.priority) {\n    var priority = options.priority + '';\n    var checkindexOf = cmd.priority.range.indexOf(priority);\n    if (~cmd.priority.range.indexOf(priority)) {\n      args.push(cmd.priority, options.priority);\n    }\n  }\n\n  // name\n  if (options.name && cmd.type === \"Darwin-Growl\") {\n    args.push('--name', options.name);\n  }\n\n  switch(cmd.type) {\n    case 'Darwin-Growl':\n      args.push(cmd.msg);\n      args.push(quote(msg));\n      if (options.title) args.push(quote(options.title));\n      break;\n    case 'Darwin-NotificationCenter':\n      args.push(cmd.msg);\n      args.push(quote(msg));\n      if (options.title) {\n        args.push(cmd.title);\n        args.push(quote(options.title));\n      }\n      if (options.subtitle) {\n        args.push(cmd.subtitle);\n        args.push(quote(options.subtitle));\n      }\n      break;\n    case 'Darwin-Growl':\n      args.push(cmd.msg);\n      args.push(quote(msg));\n      if (options.title) args.push(quote(options.title));\n      break;\n    case 'Linux':\n      if (options.title) {\n        args.push(quote(options.title));\n        args.push(cmd.msg);\n        args.push(quote(msg));\n      } else {\n        args.push(quote(msg));\n      }\n      break;\n    case 'Windows':\n      args.push(quote(msg));\n      if (options.title) args.push(cmd.title + quote(options.title));\n      break;\n  }\n\n  // execute\n  exec(args.join(' '), fn);\n};\n\n}).call(this,require('_process'))\n},{\"_process\":51,\"child_process\":41,\"fs\":41,\"os\":50,\"path\":41}],70:[function(require,module,exports){\n(function (process,global){\n/**\n * Shim process.stdout.\n */\n\nprocess.stdout = require('browser-stdout')();\n\nvar Mocha = require('../');\n\n/**\n * Create a Mocha instance.\n *\n * @return {undefined}\n */\n\nvar mocha = new Mocha({ reporter: 'html' });\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n\nvar uncaughtExceptionHandlers = [];\n\nvar originalOnerrorHandler = global.onerror;\n\n/**\n * Remove uncaughtException listener.\n * Revert to original onerror handler if previously defined.\n */\n\nprocess.removeListener = function(e, fn){\n  if ('uncaughtException' == e) {\n    if (originalOnerrorHandler) {\n      global.onerror = originalOnerrorHandler;\n    } else {\n      global.onerror = function() {};\n    }\n    var i = Mocha.utils.indexOf(uncaughtExceptionHandlers, fn);\n    if (i != -1) { uncaughtExceptionHandlers.splice(i, 1); }\n  }\n};\n\n/**\n * Implements uncaughtException listener.\n */\n\nprocess.on = function(e, fn){\n  if ('uncaughtException' == e) {\n    global.onerror = function(err, url, line){\n      fn(new Error(err + ' (' + url + ':' + line + ')'));\n      return !mocha.allowUncaught;\n    };\n    uncaughtExceptionHandlers.push(fn);\n  }\n};\n\n// The BDD UI is registered by default, but no UI will be functional in the\n// browser without an explicit call to the overridden `mocha.ui` (see below).\n// Ensure that this default UI does not expose its methods to the global scope.\nmocha.suite.removeAllListeners('pre-require');\n\nvar immediateQueue = []\n  , immediateTimeout;\n\nfunction timeslice() {\n  var immediateStart = new Date().getTime();\n  while (immediateQueue.length && (new Date().getTime() - immediateStart) < 100) {\n    immediateQueue.shift()();\n  }\n  if (immediateQueue.length) {\n    immediateTimeout = setTimeout(timeslice, 0);\n  } else {\n    immediateTimeout = null;\n  }\n}\n\n/**\n * High-performance override of Runner.immediately.\n */\n\nMocha.Runner.immediately = function(callback) {\n  immediateQueue.push(callback);\n  if (!immediateTimeout) {\n    immediateTimeout = setTimeout(timeslice, 0);\n  }\n};\n\n/**\n * Function to allow assertion libraries to throw errors directly into mocha.\n * This is useful when running tests in a browser because window.onerror will\n * only receive the 'message' attribute of the Error.\n */\nmocha.throwError = function(err) {\n  Mocha.utils.forEach(uncaughtExceptionHandlers, function (fn) {\n    fn(err);\n  });\n  throw err;\n};\n\n/**\n * Override ui to ensure that the ui functions are initialized.\n * Normally this would happen in Mocha.prototype.loadFiles.\n */\n\nmocha.ui = function(ui){\n  Mocha.prototype.ui.call(this, ui);\n  this.suite.emit('pre-require', global, null, this);\n  return this;\n};\n\n/**\n * Setup mocha with the given setting options.\n */\n\nmocha.setup = function(opts){\n  if ('string' == typeof opts) opts = { ui: opts };\n  for (var opt in opts) this[opt](opts[opt]);\n  return this;\n};\n\n/**\n * Run mocha, returning the Runner.\n */\n\nmocha.run = function(fn){\n  var options = mocha.options;\n  mocha.globals('location');\n\n  var query = Mocha.utils.parseQuery(global.location.search || '');\n  if (query.grep) mocha.grep(new RegExp(query.grep));\n  if (query.fgrep) mocha.grep(query.fgrep);\n  if (query.invert) mocha.invert();\n\n  return Mocha.prototype.run.call(mocha, function(err){\n    // The DOM Document is not available in Web Workers.\n    var document = global.document;\n    if (document && document.getElementById('mocha') && options.noHighlighting !== true) {\n      Mocha.utils.highlightTags('code');\n    }\n    if (fn) fn(err);\n  });\n};\n\n/**\n * Expose the process shim.\n * https://github.com/mochajs/mocha/pull/916\n */\n\nMocha.process = process;\n\n/**\n * Expose mocha.\n */\n\nwindow.Mocha = Mocha;\nwindow.mocha = mocha;\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../\":1,\"_process\":51,\"browser-stdout\":40}]},{},[70]);\n"

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	var Elements;

	module.exports = Elements = __webpack_require__(246);

	Elements.Filters = __webpack_require__(247);

	Elements.Shapes = __webpack_require__(253);

	Elements.All = __webpack_require__(258);

	Elements.Base = __webpack_require__(251);

	Elements.Bitmap = __webpack_require__(260);

	Elements.Fill = __webpack_require__(261);

	Elements.FillableBase = __webpack_require__(256);

	Elements.Outline = __webpack_require__(262);

	Elements.PagingScrollElement = __webpack_require__(263);

	Elements.RectangleShadow = __webpack_require__(264);

	Elements.ScrollElement = __webpack_require__(259);

	Elements.TextElement = __webpack_require__(265);

	Elements.finishLoad(["All", "Base", "Bitmap", "Fill", "FillableBase", "Outline", "PagingScrollElement", "RectangleShadow", "ScrollElement", "TextElement"]);


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Elements || (Engine.Elements = (function(superClass) {
	  extend(Elements, superClass);

	  function Elements() {
	    return Elements.__super__.constructor.apply(this, arguments);
	  }

	  Elements.namespace = Engine;

	  Elements.namespacePath = "Neptune.Art.Engine.Elements";

	  return Elements;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Elements);


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var Filters;

	module.exports = Filters = __webpack_require__(248);

	Filters.Blur = __webpack_require__(249);

	Filters.Filter = __webpack_require__(250);

	Filters.Shadow = __webpack_require__(252);

	Filters.finishLoad(["Blur", "Filter", "Shadow"]);


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	var Elements,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Elements = __webpack_require__(246);

	module.exports = Elements.Filters || (Elements.Filters = (function(superClass) {
	  extend(Filters, superClass);

	  function Filters() {
	    return Filters.__super__.constructor.apply(this, arguments);
	  }

	  Filters.namespace = Elements;

	  Filters.namespacePath = "Neptune.Art.Engine.Elements.Filters";

	  return Filters;

	})(Neptune.Base));

	Elements.addNamespace(Elements.Filters);


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(250)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Filter) {
	  var Blur, Color, Matrix, Point, Rectangle, color, createWithPostCreate, matrix, point, rect;
	  createWithPostCreate = Foundation.createWithPostCreate;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  return createWithPostCreate(Blur = (function(superClass) {
	    extend(Blur, superClass);

	    function Blur() {
	      return Blur.__super__.constructor.apply(this, arguments);
	    }

	    Blur.prototype.defaultRadius = 10;

	    Blur.prototype.defaultCompositeMode = "replace";

	    Blur.prototype.filter = function(elementSpaceTarget, scale) {
	      return elementSpaceTarget.blur(this.radius * scale);
	    };

	    return Blur;

	  })(Filter));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(251)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, CoreElementsBase) {
	  var Color, Filter, Matrix, Point, Rectangle, color, createWithPostCreate, isString, log, matrix, point, rect;
	  log = Foundation.log, isString = Foundation.isString, createWithPostCreate = Foundation.createWithPostCreate;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;

	  /*
	  A Filter is any Element with a draw method that takes uses "target's" pixels as input to its own draw computations.
	  
	  Ex: Blur and Shadow
	  
	  TODO - Fully implelement Blur and Shadow's new semantics:
	  
	    Each has a sourceArea, in parent-space, default: rect @parent.size
	   */
	  return createWithPostCreate(Filter = (function(superClass) {
	    extend(Filter, superClass);

	    function Filter() {
	      return Filter.__super__.constructor.apply(this, arguments);
	    }

	    Filter.registerWithElementFactory = function() {
	      return this !== Filter;
	    };

	    Filter.virtualProperty({
	      baseDrawArea: {
	        getter: function(o) {
	          return rect(o._currentSize).grow(o._radius);
	        }
	      }
	    });

	    Filter.drawProperty({
	      parentSourceArea: {
	        "default": null,
	        preprocess: function(v) {
	          if (v) {
	            return rect(v);
	          } else {
	            return null;
	          }
	        }
	      }
	    });

	    Filter.drawAreaProperty({
	      radius: {
	        "default": 0,
	        validate: function(v) {
	          return typeof v === "number";
	        }
	      }
	    });

	    Filter.getter({
	      requiresParentStagingBitmap: function() {
	        return true;
	      },
	      isFilter: function() {
	        return true;
	      },
	      parentSourceLocation: function() {
	        var ref;
	        return ((ref = this._parentSourceArea) != null ? ref.location : void 0) || point();
	      },
	      parentSourceSize: function() {
	        var ref, ref1;
	        return ((ref = this._parentSourceArea) != null ? ref.getSize() : void 0) || ((ref1 = this.parent) != null ? ref1.getCurrentSize() : void 0);
	      },
	      parentSourceArea: function() {
	        return this._parentSourceArea || (this.parent && rect(this.parent.getCurrentSize()));
	      }
	    });

	    Filter.prototype.parentToElementDrawSpaceMatrix = function(scale) {
	      var m;
	      m = Matrix.scale(this._currentSize.mul(scale).div(this.parentSourceSize));
	      m = m.translate(this.radius * scale);
	      if (this._parentSourceArea) {
	        return Matrix.translate(this.parentSourceLocation.neg).mul(m);
	      } else {
	        return m;
	      }
	    };

	    Filter.prototype.elementAreaToParentSourceArea = function(r) {
	      var psa, sx, sy;
	      if (this._parentSourceArea) {
	        psa = this._parentSourceArea;
	        sx = psa.w / this._currentSize.x;
	        sy = psa.h / this._currentSize.y;
	        return rect(-psa.x, -psa.y, sx * r.w, sy * r.h);
	      } else {
	        return r;
	      }
	    };

	    Filter.prototype.overDraw = function(proposedTargetSpaceDrawArea, parentToTargetMatrix) {
	      var minimumElementSpaceDrawArea, propsedElementSpaceDrawArea, requiredTargetSpaceDrawArea, targetToElementMatrix;
	      targetToElementMatrix = parentToTargetMatrix.inv.mul(this.parentToElementMatrix);
	      propsedElementSpaceDrawArea = targetToElementMatrix.transformBoundingRect(proposedTargetSpaceDrawArea);
	      minimumElementSpaceDrawArea = propsedElementSpaceDrawArea.grow(this.radius).intersection(this.elementSpaceDrawArea);
	      requiredTargetSpaceDrawArea = parentToTargetMatrix.transformBoundingRect(this.elementAreaToParentSourceArea(minimumElementSpaceDrawArea));
	      return proposedTargetSpaceDrawArea.union(requiredTargetSpaceDrawArea);
	    };

	    Filter.prototype.filterPixelData = function(elementSpaceTarget, pixelData, scale) {
	      return pixelData;
	    };

	    Filter.prototype.filter = function(elementSpaceTarget, scale) {
	      var imageData;
	      imageData = elementSpaceTarget.getImageData();
	      this.filterPixelData(elementSpaceTarget, imageData.data, scale);
	      elementSpaceTarget.putImageData(imageData);
	      return elementSpaceTarget;
	    };

	    Filter.drawProperty({
	      filterSource: {
	        "default": null,
	        validate: function(v) {
	          return !v || isString(v);
	        }
	      }
	    });

	    Filter.getter({
	      filterSourceElement: function() {
	        var filterSource, p;
	        filterSource = this.getFilterSource();
	        if (filterSource) {
	          p = this.getParent();
	          while (p && p.name !== filterSource) {
	            p = p.getParent();
	          }
	          if (p) {
	            return p;
	          } else {
	            console.warn(this.inspectedName + ": no ancestor's name matches filterSource:" + (inspect(filterSource)));
	          }
	        }
	        return this.getParent();
	      }
	    });

	    Filter.prototype.drawBasic = function(target, elementToTargetMatrix, compositeMode, opacity) {
	      var clipRect, elementSpaceDrawArea, filterScratch, filterSource, m, scale;
	      filterSource = this.getFilterSourceElement();
	      elementSpaceDrawArea = this.elementSpaceDrawArea;
	      scale = elementToTargetMatrix.exactScaler;
	      filterScratch = this.bitmapFactory.newBitmap(elementSpaceDrawArea.size.mul(scale));
	      clipRect = rect(-elementSpaceDrawArea.x * scale, -elementSpaceDrawArea.y * scale, this._currentSize.x * scale, this._currentSize.y * scale);
	      filterScratch.clippedTo(clipRect, (function(_this) {
	        return function() {
	          var drawMatrix, targetToParentMatrix;
	          targetToParentMatrix = filterSource._currentToTargetMatrix.inv;
	          drawMatrix = targetToParentMatrix.mul(_this.parentToElementDrawSpaceMatrix(scale));
	          return filterScratch.drawBitmap(drawMatrix, filterSource._currentDrawTarget);
	        };
	      })(this));
	      filterScratch = this.filter(filterScratch, scale);
	      m = Matrix.scale(1 / scale).translate(-this.radius).mul(elementToTargetMatrix);
	      return target.drawBitmap(m, filterScratch, {
	        compositeMode: compositeMode,
	        opacity: opacity
	      });
	    };

	    return Filter;

	  })(CoreElementsBase));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(150)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Element) {
	  var Base, color, createWithPostCreate, inspect;
	  inspect = Foundation.inspect, createWithPostCreate = Foundation.createWithPostCreate;
	  color = Atomic.color;
	  return createWithPostCreate(Base = (function(superClass) {
	    extend(Base, superClass);

	    Base.registerWithElementFactory = function() {
	      return this !== Base;
	    };

	    function Base() {
	      Base.__super__.constructor.apply(this, arguments);
	      this._drawOptions = {};
	    }

	    Base.drawProperty({
	      color: {
	        "default": null,
	        preprocess: function(v) {
	          if (v) {
	            return color(v);
	          } else {
	            return null;
	          }
	        }
	      }
	    });

	    Base.prototype.drawBasic = function(target, elementToTargetMatrix, compositeMode, opacity) {
	      this._prepareDrawOptions(compositeMode, opacity);
	      return this.fillShape(target, elementToTargetMatrix, this._drawOptions);
	    };

	    Base.prototype._useStagingBitmap = function() {
	      if (this.getHasChildren()) {
	        return Base.__super__._useStagingBitmap.apply(this, arguments);
	      }
	      return this.getChildRequiresParentStagingBitmap() || this.getIsMask();
	    };

	    Base.prototype._drawChildren = function(target, elementToTargetMatrix, usingStagingBitmap) {
	      if (this.hasChildren) {
	        return Base.__super__._drawChildren.apply(this, arguments);
	      }
	      if (usingStagingBitmap) {
	        return this.drawBasic(target, elementToTargetMatrix);
	      } else {
	        return this.drawBasic(target, elementToTargetMatrix, this.getCompositeMode(), this.getOpacity());
	      }
	    };


	    /*
	    Either fillShape or drawBasic must be overridden by each inheriting class
	     */

	    Base.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	      throw new Error("fillShape or drawBasic must be overridden");
	    };


	    /*
	    _prepareDrawOptions
	    Inheriting classes can override & extend to add additional options
	    purpose: to re-use the plain-object for draw options instead of creating a new one every time.
	     */

	    Base.prototype._prepareDrawOptions = function(compositeMode, opacity) {
	      this._drawOptions.compositeMode = compositeMode;
	      this._drawOptions.opacity = opacity;
	      return this._drawOptions.color = this._color;
	    };

	    return Base;

	  })(Element));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(250)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Filter) {
	  var Color, Matrix, Point, Rectangle, Shadow, color, createWithPostCreate, matrix, point, rect;
	  createWithPostCreate = Foundation.createWithPostCreate;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  return createWithPostCreate(Shadow = (function(superClass) {
	    extend(Shadow, superClass);

	    function Shadow(options) {
	      if (options == null) {
	        options = {};
	      }
	      if (options.radius == null) {
	        options.radius = 10;
	      }
	      options.compositeMode || (options.compositeMode = "destover");
	      this.inverted = options.inverted;
	      Shadow.__super__.constructor.apply(this, arguments);
	    }

	    Shadow.drawProperty({
	      radius: {
	        "default": 0,
	        validate: function(v) {
	          return typeof v === "number";
	        }
	      }
	    });

	    Shadow.prototype.filter = function(elementSpaceTarget, scale) {
	      elementSpaceTarget.blurAlpha(this._radius * scale, {
	        inverted: this.inverted
	      });
	      return elementSpaceTarget.drawRectangle(null, elementSpaceTarget.size, {
	        color: this._color,
	        compositeMode: "target_alphamask"
	      });
	    };

	    return Shadow;

	  })(Filter));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var Shapes;

	module.exports = Shapes = __webpack_require__(254);

	Shapes.CustomShapeElement = __webpack_require__(255);

	Shapes.Rectangle = __webpack_require__(257);

	Shapes.finishLoad(["CustomShapeElement", "Rectangle"]);


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	var Elements,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Elements = __webpack_require__(246);

	module.exports = Elements.Shapes || (Elements.Shapes = (function(superClass) {
	  extend(Shapes, superClass);

	  function Shapes() {
	    return Shapes.__super__.constructor.apply(this, arguments);
	  }

	  Shapes.namespace = Elements;

	  Shapes.namespacePath = "Neptune.Art.Engine.Elements.Shapes";

	  return Shapes;

	})(Neptune.Base));

	Elements.addNamespace(Elements.Shapes);


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(142), __webpack_require__(256)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, arg, FillableBase) {
	  var CustomShapeElement, Paths, createWithPostCreate, isFunction, pureMerge;
	  Paths = arg.Paths;
	  pureMerge = Foundation.pureMerge, isFunction = Foundation.isFunction, createWithPostCreate = Foundation.createWithPostCreate;
	  return createWithPostCreate(CustomShapeElement = (function(superClass) {
	    extend(CustomShapeElement, superClass);

	    function CustomShapeElement() {
	      CustomShapeElement.__super__.constructor.apply(this, arguments);
	      this._lastPathFunction = null;
	      this._curriedPathFunction = null;
	    }

	    CustomShapeElement.drawProperty({
	      fillRule: {
	        "default": "nonzero",
	        validate: function(r) {
	          return r === "nonzero" || r === "evenodd";
	        }
	      },
	      path: {
	        "default": function(context, size) {
	          var h, w;
	          w = size.w, h = size.h;
	          context.beginPath();
	          context.moveTo(0, 0);
	          conext.lineTo(0, h);
	          conext.lineTo(w, h);
	          conext.lineTo(w, 0);
	          conext.lineTo(0, 0);
	          return context.closePath();
	        },
	        validate: function(f) {
	          return isFunction(f);
	        }
	      }
	    });

	    CustomShapeElement.getter({
	      curriedPathFunction: function() {
	        var pathFunction;
	        pathFunction = this.getPath();
	        if (this._lastPathFunction !== pathFunction) {
	          this._lastPathFunction = pathFunction;
	          return this._curriedPathFunction = (function(_this) {
	            return function(context) {
	              return pathFunction(context, _this.currentSize);
	            };
	          })(this);
	        } else {
	          return this._curriedPathFunction;
	        }
	      }
	    });

	    CustomShapeElement.prototype.drawBasic = function(target, elementToTargetMatrix, compositeMode, opacity) {
	      this._prepareDrawOptions(compositeMode, opacity);
	      return this.fillShape(target, elementToTargetMatrix, this._drawOptions);
	    };

	    CustomShapeElement.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	      options.color || (options.color = this._color);
	      options.fillRule = this._fillRule;
	      return target.fillShape(elementToTargetMatrix, options, this.getCurriedPathFunction());
	    };

	    CustomShapeElement.prototype.strokeShape = function(target, elementToTargetMatrix, options) {
	      options.color || (options.color = this._color);
	      return target.strokeShape(elementToTargetMatrix, options, this.getCurriedPathFunction());
	    };

	    return CustomShapeElement;

	  })(FillableBase));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(142), __webpack_require__(251)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Base) {
	  var Color, FillableBase, GradientFillStyle, Matrix, Point, Rectangle, color, createWithPostCreate, isPlainObject, log, matrix, max, min, point, point0, point1, rect;
	  log = Foundation.log, isPlainObject = Foundation.isPlainObject, min = Foundation.min, max = Foundation.max, createWithPostCreate = Foundation.createWithPostCreate;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, point0 = Atomic.point0, point1 = Atomic.point1;
	  GradientFillStyle = Canvas.GradientFillStyle;
	  return createWithPostCreate(FillableBase = (function(superClass) {
	    var _expandRectangleByShadow;

	    extend(FillableBase, superClass);

	    function FillableBase() {
	      return FillableBase.__super__.constructor.apply(this, arguments);
	    }

	    FillableBase.registerWithElementFactory = function() {
	      return this !== FillableBase;
	    };

	    FillableBase.getter({
	      cacheable: function() {
	        return this.getHasChildren();
	      }
	    });

	    FillableBase.drawProperty({
	      gradient: {
	        "default": null,
	        validate: function(v) {
	          return !v || v instanceof GradientFillStyle;
	        }
	      },
	      from: {
	        "default": "topLeft",
	        preprocess: function(v) {
	          return point(v);
	        }
	      },
	      to: {
	        "default": "bottomLeft",
	        preprocess: function(v) {
	          return point(v);
	        }
	      },
	      shadow: {
	        "default": null,
	        validate: function(v) {
	          return !v || isPlainObject(v);
	        }
	      }
	    });

	    FillableBase.prototype._expandRectangleByShadow = _expandRectangleByShadow = function(r, shadow) {
	      var blur, expandBottom, expandLeft, expandRight, expandTop, h, offsetX, offsetY, w, x, y;
	      if (!shadow) {
	        return r;
	      }
	      x = r.x, y = r.y, w = r.w, h = r.h;
	      blur = shadow.blur, offsetX = shadow.offsetX, offsetY = shadow.offsetY;
	      offsetX || (offsetX = 0);
	      offsetY || (offsetY = 0);
	      blur || (blur = 0);
	      expandLeft = max(0, blur - offsetX);
	      expandTop = max(0, blur - offsetY);
	      expandRight = max(0, blur + offsetX);
	      expandBottom = max(0, blur + offsetY);
	      return r["with"](x - expandLeft, y - expandTop, w + expandLeft + expandRight, h + expandTop + expandBottom);
	    };

	    FillableBase.prototype.getBaseDrawArea = function() {
	      return _expandRectangleByShadow(FillableBase.__super__.getBaseDrawArea.apply(this, arguments), this.getShadow());
	    };

	    FillableBase.prototype.getPendingBaseDrawArea = function() {
	      return _expandRectangleByShadow(FillableBase.__super__.getPendingBaseDrawArea.apply(this, arguments), this.getPendingShadow());
	    };

	    FillableBase.virtualProperty({
	      colors: {
	        setter: function(v) {
	          return this.setGradient(v && new GradientFillStyle(point0, point1, v));
	        },
	        getter: function(o) {
	          var ref;
	          return (ref = o.gradient) != null ? ref.colors : void 0;
	        }
	      }
	    });

	    FillableBase.prototype._prepareDrawOptions = function(compositeMode, opacity) {
	      FillableBase.__super__._prepareDrawOptions.apply(this, arguments);
	      this._drawOptions.fillStyle = this._gradient;
	      this._drawOptions.shadow = this._shadow;
	      if (this._gradient) {
	        this._gradient.from = this._from.mul(this._currentSize);
	        return this._gradient.to = this._to.mul(this._currentSize);
	      }
	    };

	    return FillableBase;

	  })(Base));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(142), __webpack_require__(256)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, arg, FillableBase) {
	  var Color, Matrix, Paths, Point, Rectangle, base, color, createWithPostCreate, curriedRoundedRectangle, floatEq, matrix, point, pureMerge, rect;
	  Paths = arg.Paths;
	  pureMerge = Foundation.pureMerge, floatEq = Foundation.floatEq, base = Foundation.base, createWithPostCreate = Foundation.createWithPostCreate;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  curriedRoundedRectangle = Paths.curriedRoundedRectangle;
	  return createWithPostCreate(Rectangle = (function(superClass) {
	    extend(Rectangle, superClass);

	    function Rectangle() {
	      return Rectangle.__super__.constructor.apply(this, arguments);
	    }

	    Rectangle.drawProperty({
	      radius: {
	        "default": 0,
	        validate: function(v) {
	          return !v || typeof v === "number";
	        },
	        preprocess: function(v) {
	          return v || 0;
	        }
	      }
	    });

	    Rectangle.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	      options.radius = this._radius;
	      options.color || (options.color = this._color);
	      return target.drawRectangle(elementToTargetMatrix, this.getPaddedArea(), options);
	    };

	    Rectangle.prototype.strokeShape = function(target, elementToTargetMatrix, options) {
	      options.radius = this._radius;
	      options.color || (options.color = this._color);
	      return target.strokeRectangle(elementToTargetMatrix, this.getPaddedArea(), options);
	    };

	    Rectangle.prototype._clipDraw = function(clipArea, target, elementToTargetMatrix) {
	      if (floatEq(this._radius, 0)) {
	        return Rectangle.__super__._clipDraw.apply(this, arguments);
	      } else {
	        return target.clippedTo(curriedRoundedRectangle(target.pixelSnapRectangle(elementToTargetMatrix, this.getPaddedArea()), this._radius), (function(_this) {
	          return function() {
	            return _this._drawChildren(target, elementToTargetMatrix);
	          };
	        })(this), elementToTargetMatrix);
	      }
	    };

	    Rectangle.getter({
	      hasCustomClipping: function() {
	        return this._radius > 0;
	      }
	    });

	    return Rectangle;

	  })(FillableBase));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(113), __webpack_require__(246), __webpack_require__(253), __webpack_require__(247), __webpack_require__(259)], __WEBPACK_AMD_DEFINE_RESULT__ = function(arg, Core, Elements, Shapes, Filters, ScrollElement) {
	  var createAllClass;
	  createAllClass = arg.createAllClass;
	  return createAllClass(Elements, Shapes, Filters, {
	    Element: Core.Element,
	    CanvasElement: Core.CanvasElement,
	    ScrollElement: ScrollElement
	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Element, EventEpoch, Foundation, GestureRecognizer, Matrix, Point, Rectangle, ScrollElement, abs, bound, brakingFactor, createGestureRecognizer, createWithPostCreate, currentSecond, eventEpoch, inspect, log, matrix, max, maximumMomentum, merge, min, peek, point, point0, pointNearInfinity, rect, round, scrollProperties,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(8);

	Atomic = __webpack_require__(89);

	EventEpoch = __webpack_require__(100).EventEpoch;

	Element = __webpack_require__(150);

	GestureRecognizer = __webpack_require__(145);

	log = Foundation.log, inspect = Foundation.inspect, currentSecond = Foundation.currentSecond, bound = Foundation.bound, round = Foundation.round, min = Foundation.min, max = Foundation.max, abs = Foundation.abs, merge = Foundation.merge, peek = Foundation.peek, createWithPostCreate = Foundation.createWithPostCreate;

	point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;

	point0 = Point.point0, pointNearInfinity = Point.pointNearInfinity;

	eventEpoch = EventEpoch.eventEpoch;

	createGestureRecognizer = GestureRecognizer.createGestureRecognizer;

	brakingFactor = 2;

	maximumMomentum = 10000;


	/*
	usage: expects at least one child with arbitrary grandchildren
	The LAST child is the scrollContent, if bigger than ScrollElement, will be scrollable.
	scrollContent is scrolled by changing its location.
	scrollContent's size is examined to determine the extent of the scrollable area.
	The user will be able to scroll over scrollContent's full logicalArea.

	NOTE: currently only "vertical" and "horizontal" scrollers are supported, not BOTH.
	  The scroll type selected will determine the direction scrolling is possible.
	  Ex: if scroll is "vertical" and scrollContent is wider than ScollElement, there
	    will still be no horizontal scrolling.

	Ex:
	  new ScrollElement
	    scroll: "vertical" # default, or "horizontal" ("both" NOT SUPPORTED - yet)
	     * ... any "normal" children
	    new Element # scrollContent
	      layout: ww:1, hch:1
	      [children]
	 */

	scrollProperties = {
	  vertical: "y",
	  horizontal: "x"
	};

	module.exports = createWithPostCreate(ScrollElement = (function(superClass) {
	  extend(ScrollElement, superClass);

	  function ScrollElement(o) {
	    ScrollElement.__super__.constructor.apply(this, arguments);
	    this._scrollContentLocationOnDown = null;
	    this._flickSpeed = this._lastPointerEventTime = this._momentumPosition = this._momentumDirection = this._momentum = 0;
	    if (!(o != null ? o.scroll : void 0)) {
	      this.setScroll("vertical");
	    }
	    this.setupGestureRecognizer();
	  }

	  ScrollElement.layoutProperty({
	    scroll: {
	      "default": null,
	      validate: function(v) {
	        return v === null || v === "vertical" || v === "horizontal";
	      },
	      preprocess: function(v, oldValue) {
	        if (oldValue && v !== oldValue) {
	          throw new Error("ScrollElement: scroll property cannot change once set: " + (inspect({
	            oldValue: oldValue,
	            newValue: v
	          })));
	        }
	        return v;
	      }
	    }
	  });

	  ScrollElement.getter({
	    scrollContent: function() {
	      return peek(this.getChildren());
	    },
	    scrollProperty: function() {
	      return scrollProperties[this._scroll];
	    },
	    overScrolledAmount: function() {
	      var boundedL, l, prop;
	      prop = this.getScrollProperty();
	      l = this.getScrollContent().currentLocation;
	      boundedL = this.boundedLocation(l);
	      return l[prop] - boundedL[prop];
	    }
	  });

	  ScrollElement.prototype.setupGestureRecognizer = function() {
	    var gestureRecognizerOptions;
	    gestureRecognizerOptions = {
	      pointerDown: (function(_this) {
	        return function() {
	          return _this.getScrollContent().abortAnimations();
	        };
	      })(this),
	      pointerUp: (function(_this) {
	        return function() {
	          return _this.startRecoveryAnimation();
	        };
	      })(this)
	    };
	    gestureRecognizerOptions[this.getPendingScroll()] = {
	      resume: (function(_this) {
	        return function(e) {
	          return _this._momentum !== 0;
	        };
	      })(this),
	      begin: (function(_this) {
	        return function(e) {
	          _this.getScrollContent().abortAnimations();
	          _this._momentum = 0;
	          _this._scrollContentLocationOnDown = _this.getScrollContent().currentLocation;
	          return _this._lastPointerEventTime = e.timeStamp;
	        };
	      })(this),
	      move: (function(_this) {
	        return function(e) {
	          var timeStamp;
	          timeStamp = e.timeStamp;
	          _this.setScrollLocation(_this._scrollContentLocationOnDown.add(e.totalDelta));
	          _this._flickSpeed = e.delta[_this.getScrollProperty()] / (timeStamp - _this._lastPointerEventTime);
	          return _this._lastPointerEventTime = timeStamp;
	        };
	      })(this),
	      end: (function(_this) {
	        return function(e) {
	          var time, timeStamp;
	          timeStamp = e.timeStamp;
	          time = timeStamp - _this._lastPointerEventTime;
	          if (time < 1 / 30 && _this.overScrolledAmount * _this._flickSpeed <= 0) {
	            return _this.startMomentumSimulator(_this._flickSpeed);
	          } else {
	            return _this.startRecoveryAnimation();
	          }
	        };
	      })(this)
	    };
	    return this.on = createGestureRecognizer(gestureRecognizerOptions);
	  };

	  ScrollElement.prototype.boundedLocationX = function(l) {
	    return bound(min(0, this.paddedWidth - this.getScrollContent().getCurrentSize().x), l.x, 0);
	  };

	  ScrollElement.prototype.boundedLocationY = function(l) {
	    return bound(min(0, this.paddedHeight - this.getScrollContent().getCurrentSize().y), l.y, 0);
	  };

	  ScrollElement.prototype.startMomentumSimulator = function(speed) {
	    this._momentumPosition = this.getScrollContent().getPendingCurrentLocation();
	    this._momentum = speed;
	    this._momentumDirection = this._momentum < 0 ? (this._momentum = -this._momentum, -1) : 1;
	    this._momentum = min(maximumMomentum, this._momentum);
	    return this.scheduleMomentumFrame();
	  };

	  ScrollElement.prototype.startRecoveryAnimation = function() {
	    var boundedL, l;
	    l = this.getScrollContent().getPendingCurrentLocation();
	    boundedL = this.boundedLocation(l);
	    if (!l.eq(boundedL)) {
	      return this.getScrollContent().setAnimate({
	        f: "easeInQuad",
	        to: {
	          location: boundedL
	        }
	      });
	    }
	  };

	  ScrollElement.prototype.scheduleMomentumFrame = function() {
	    if (!this._momentumActive) {
	      this._momentumActive = true;
	      this.lastMomentumFrameTime = currentSecond();
	      return eventEpoch.queue((function(_this) {
	        return function() {
	          return _this.processMomentumFrame();
	        };
	      })(this));
	    }
	  };

	  ScrollElement.prototype.processMomentumFrame = function() {
	    var bf, boundedDelta, boundedMP, frameTime, md, mft, mp, newX, newY, now, prop;
	    now = currentSecond();
	    frameTime = now - this.lastMomentumFrameTime;
	    mp = this._momentumPosition;
	    md = this._momentumDirection;
	    mft = this._momentum * frameTime;
	    newX = mp.x + md * mft;
	    newY = mp.y + md * mft;
	    this._momentumPosition = point(newX, newY);
	    boundedMP = this.boundedLocation(this._momentumPosition);
	    this.setScrollLocation(this._momentumPosition);
	    bf = brakingFactor;
	    prop = this.getScrollProperty();
	    boundedDelta = abs(boundedMP[prop] - this._momentumPosition[prop]);
	    if (boundedDelta > 10) {
	      bf *= boundedDelta / 10;
	    }
	    this._momentum -= bf * this._momentum * frameTime;
	    if (this._momentum > 10) {
	      this.lastMomentumFrameTime = now;
	      return eventEpoch.queue((function(_this) {
	        return function() {
	          return _this.processMomentumFrame();
	        };
	      })(this));
	    } else {
	      this._momentum = 0;
	      this._momentumActive = false;
	      return this.startRecoveryAnimation();
	    }
	  };

	  ScrollElement.prototype.setScrollLocation = function(offset) {
	    if (this._scroll === "horizontal") {
	      return this.getScrollContent().setLocation({
	        x: round((offset.x + this.boundedLocationX(offset)) * .5)
	      });
	    } else {
	      return this.getScrollContent().setLocation({
	        y: round((offset.y + this.boundedLocationY(offset)) * .5)
	      });
	    }
	  };

	  ScrollElement.prototype.scrollToEnd = function() {
	    return this.setScrollLocation(this.boundedLocation(this.getScrollContent().currentSize.neg));
	  };

	  ScrollElement.prototype.scrollToBeginning = function() {
	    return this.setScrollLocation(point0);
	  };

	  ScrollElement.prototype.animateToEnd = function(animationOptions) {
	    var content;
	    content = this.getScrollContent();
	    return content.animate = merge({
	      to: {
	        location: this.boundedLocation(content.currentSize.neg)
	      },
	      f: "easeInQuad",
	      duration: .5
	    }, animationOptions);
	  };

	  ScrollElement.prototype.animateToBeginning = function(animationOptions) {
	    var content;
	    content = this.getScrollContent();
	    return content.animate = merge({
	      to: {
	        location: point0
	      },
	      f: "easeInQuad",
	      duration: .5
	    }, animationOptions);
	  };

	  ScrollElement.prototype.boundedLocation = function(l) {
	    if (this._scroll === "horizontal") {
	      return point(this.boundedLocationX(l), 0);
	    } else {
	      return point(0, this.boundedLocationY(l));
	    }
	  };

	  return ScrollElement;

	})(Element));


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(142), __webpack_require__(256)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, FillableBase) {
	  var BaseObject, Bitmap, Color, Matrix, Point, Rectangle, SimpleUrlToBitmapCache, bound, ceil, color, createWithPostCreate, inspect, isString, log, matrix, max, min, point, point0, point1, rect, round;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, point0 = Atomic.point0, point1 = Atomic.point1;
	  inspect = Foundation.inspect, min = Foundation.min, max = Foundation.max, bound = Foundation.bound, log = Foundation.log, createWithPostCreate = Foundation.createWithPostCreate, isString = Foundation.isString;
	  ceil = Math.ceil, round = Math.round;
	  BaseObject = Foundation.BaseObject;
	  SimpleUrlToBitmapCache = (function(superClass) {
	    extend(SimpleUrlToBitmapCache, superClass);

	    SimpleUrlToBitmapCache.singletonClass();

	    function SimpleUrlToBitmapCache() {
	      this._cache = {};
	      this._referenceCounts = {};
	    }

	    SimpleUrlToBitmapCache.prototype.get = function(url) {
	      var base;
	      this._referenceCounts[url] = (this._referenceCounts[url] || 0) + 1;
	      return (base = this._cache)[url] || (base[url] = Canvas.Bitmap.get(url));
	    };

	    SimpleUrlToBitmapCache.prototype.release = function(url) {
	      if (!isNumber(this._referenceCounts[url])) {
	        throw new Error("no references for " + url);
	      }
	      if (this._referenceCounts[url] === 0) {
	        throw new Error("reference count already 0 for " + url);
	      }
	      return this._referenceCounts[url]--;
	    };

	    return SimpleUrlToBitmapCache;

	  })(FillableBase);
	  return createWithPostCreate(Bitmap = (function(superClass) {
	    extend(Bitmap, superClass);

	    function Bitmap(options) {
	      Bitmap.__super__.constructor.apply(this, arguments);
	      this._bitmapToElementMatrix = new Matrix;
	    }

	    Bitmap.getter({
	      cacheable: function() {
	        return false;
	      }
	    });

	    Bitmap.prototype.customLayoutChildrenFirstPass = function(size) {
	      var bitmap, dPPP, p;
	      if (this.getPendingSize().getChildrenRelative() && (bitmap = this.getPendingBitmap())) {
	        p = this.getPendingBitmap().size;
	        if ((dPPP = this.devicePixelsPerPoint) !== 1) {
	          return p = p.div(dPPP);
	        } else {
	          return p;
	        }
	      } else {
	        return point0;
	      }
	    };

	    Bitmap.prototype.customLayoutChildrenSecondPass = function(size) {};

	    Bitmap.prototype.inspectStructure = function() {
	      var ref;
	      return [
	        this.inspectLocal(), {
	          bitmapSize: (ref = this._bitmap) != null ? ref.size : void 0
	        }
	      ].concat(this._children);
	    };

	    Bitmap.drawProperty({
	      focus: {
	        "default": null,
	        preprocess: function(v) {
	          if (v != null) {
	            return point(v).bound(point0, point1);
	          } else {
	            return null;
	          }
	        }
	      },
	      mode: {
	        "default": "stretch",
	        preprocess: function(v) {
	          return (v != null ? v.toString() : void 0) || null;
	        }
	      },
	      sourceArea: {
	        "default": null,
	        preprocess: function(v) {
	          if (v != null) {
	            return rect(v);
	          } else {
	            return null;
	          }
	        }
	      }
	    });

	    Bitmap.inertProperty({

	      /*
	      This works pretty-much like the HTMLImageElement's "src" field.
	      It will fetch a bitmap from the specified URL.
	      It will fire off the following events: onLoad and onError
	      It will set the @bitmap property on success.
	      If it changes, it will attempt to load the new URL and fire another onLoad or onError.
	      
	      NOTE on naming vs HTMLImageElement:
	        The naming choices here are for consistency and full-words.
	        The DOM is inconsistent uses shortend words like "src."
	      
	        DOM     Art.Engine
	        src     source
	        onload  load
	        onerror error
	       */
	      source: {
	        "default": null,
	        validate: function(v) {
	          return !v || isString(v);
	        },
	        postSetter: function(v) {
	          return this._loadBitmapFromSource(v);
	        }
	      }
	    });

	    Bitmap.prototype._loadBitmapFromSource = function(source) {
	      return Canvas.Bitmap.get(source).then((function(_this) {
	        return function(bitmap) {
	          _this.onNextReady(function() {
	            return _this.queueEvent("load", function() {
	              return {
	                bitmap: bitmap
	              };
	            });
	          });
	          return _this.setBitmap(bitmap);
	        };
	      })(this), (function(_this) {
	        return function(error) {
	          return _this.onNextReady(function() {
	            return _this.queueEvent("error", function() {
	              return {
	                error: e
	              };
	            });
	          });
	        };
	      })(this));
	    };

	    Bitmap.drawLayoutProperty({
	      bitmap: {
	        "default": null,
	        validate: function(v) {
	          return !v || v instanceof Canvas.BitmapBase;
	        }
	      }
	    });

	    Bitmap.prototype._drawPropertiesChanged = function() {
	      var bitmapSize, currentSize, desiredSourceX, desiredSourceY, effectiveSourceLoc, effectiveSourceSize, effectiveSourceSizeX, effectiveSourceSizeY, scale, sourceLoc, sourceSize, sourceX, sourceY;
	      Bitmap.__super__._drawPropertiesChanged.apply(this, arguments);
	      if (!this._bitmap) {
	        return;
	      }
	      bitmapSize = this._bitmap.size;
	      this._drawOptions.sourceArea = this._sourceArea ? this._sourceArea.mul(this._bitmap.pixelsPerPoint) : null;
	      sourceSize = this._drawOptions.sourceArea ? this._drawOptions.sourceArea.size : bitmapSize;
	      sourceLoc = this._drawOptions.sourceArea ? this._drawOptions.sourceArea.location : point();
	      currentSize = this.currentSize;
	      return this._bitmapToElementMatrix = (function() {
	        switch (this._mode) {
	          case "stretch":
	            return Matrix.scale(currentSize.div(sourceSize));
	          case "zoom":
	            scale = max(currentSize.x / sourceSize.x, currentSize.y / sourceSize.y);
	            effectiveSourceSizeX = min(bitmapSize.x, ceil(currentSize.x / scale));
	            effectiveSourceSizeY = min(bitmapSize.y, ceil(currentSize.y / scale));
	            if (this._focus) {
	              desiredSourceX = sourceSize.x * this._focus.x - effectiveSourceSizeX * .5;
	              desiredSourceY = sourceSize.y * this._focus.y - effectiveSourceSizeY * .5;
	            } else {
	              desiredSourceX = sourceLoc.x + sourceSize.x * .5 - round(effectiveSourceSizeX * .5);
	              desiredSourceY = sourceLoc.y + sourceSize.y * .5 - round(effectiveSourceSizeY * .5);
	            }
	            sourceX = bound(0, desiredSourceX, bitmapSize.x - effectiveSourceSizeX);
	            sourceY = bound(0, desiredSourceY, bitmapSize.y - effectiveSourceSizeY);
	            this._drawOptions.sourceArea = rect(sourceX, sourceY, effectiveSourceSizeX, effectiveSourceSizeY);
	            return Matrix.scale(scale);
	          case "center":
	            effectiveSourceSize = currentSize.roundOut();
	            effectiveSourceLoc = sourceLoc.add(sourceSize.cc.sub(effectiveSourceSize.cc.round()));
	            this._drawOptions.sourceArea = rect(effectiveSourceLoc, effectiveSourceSize);
	            return new Matrix;
	          case "fit":
	            scale = currentSize.div(sourceSize).min();
	            return Matrix.translate(sourceSize.cc.neg).scale(scale).translate(currentSize.cc);
	          case "min":
	            scale = min(1 / this.devicePixelsPerPoint, currentSize.div(sourceSize).min());
	            return Matrix.translate(sourceSize.cc.neg).scale(scale).translate(currentSize.cc);
	          default:
	            throw new Error("unknown mode: " + this._mode);
	        }
	      }).call(this);
	    };

	    Bitmap.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	      return this._bitmap && target.drawBitmap(this._bitmapToElementMatrix.mul(elementToTargetMatrix), this._bitmap, options);
	    };

	    return Bitmap;

	  })(FillableBase));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(142), __webpack_require__(256)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, FillableBase) {
	  var Color, Fill, GradientFillStyle, Matrix, Point, Rectangle, color, createWithPostCreate, log, matrix, point, point0, point1, rect;
	  log = Foundation.log, createWithPostCreate = Foundation.createWithPostCreate;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, point0 = Atomic.point0, point1 = Atomic.point1;
	  GradientFillStyle = Canvas.GradientFillStyle;
	  return createWithPostCreate(Fill = (function(superClass) {
	    extend(Fill, superClass);

	    function Fill() {
	      return Fill.__super__.constructor.apply(this, arguments);
	    }

	    Fill.prototype.getBaseDrawArea = function() {
	      return this.getParent().getBaseDrawArea();
	    };

	    Fill.prototype.getPendingBaseDrawArea = function() {
	      return this.getPendingParent().getPendingBaseDrawArea();
	    };

	    Fill.prototype.drawBasic = function(target, elementToTargetMatrix, compositeMode, opacity) {
	      this._prepareDrawOptions(compositeMode, opacity);
	      return this._parent.fillShape(target, elementToTargetMatrix, this._drawOptions);
	    };

	    return Fill;

	  })(FillableBase));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(251)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Base) {
	  var Color, Matrix, Outline, Point, Rectangle, color, createWithPostCreate, matrix, merge, point, rect;
	  merge = Foundation.merge, createWithPostCreate = Foundation.createWithPostCreate;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  return createWithPostCreate(Outline = (function(superClass) {
	    var validLineCaps, validLineJoins;

	    extend(Outline, superClass);

	    function Outline(options) {
	      if (options == null) {
	        options = {};
	      }
	      Outline.__super__.constructor.apply(this, arguments);
	      this._drawOptions = {};
	    }

	    validLineCaps = ["butt", "round", "square"];

	    validLineJoins = ["round", "bevel", "miter"];

	    Outline.drawProperty({
	      lineWidth: {
	        "default": 1,
	        validate: function(v) {
	          return typeof v === "number";
	        }
	      },
	      lineCap: {
	        "default": "butt",
	        validate: function(v) {
	          return indexOf.call(validLineCaps, v) >= 0;
	        }
	      },
	      lineJoin: {
	        "default": "miter",
	        validate: function(v) {
	          return indexOf.call(validLineJoins, v) >= 0;
	        }
	      },
	      miterLimit: {
	        "default": 10,
	        validate: function(v) {
	          return !v || typeof v === "number";
	        },
	        preprocess: function(v) {
	          if (v != null) {
	            return v;
	          } else {
	            return 10;
	          }
	        }
	      }
	    });

	    Outline.virtualProperty({
	      drawAreaPadding: {
	        getter: function(o) {
	          return o._lineWidth * (o._lineJoin === "miter" ? o._miterLimit / 2 : .5);
	        }
	      },
	      baseDrawArea: {
	        getter: function() {
	          return this._parent.getBaseDrawArea().grow(this.getDrawAreaPadding());
	        },
	        pendingGetter: function() {
	          return this.getPendingParent().getPendingBaseDrawArea().grow(this.getPendingDrawAreaPadding());
	        }
	      }
	    });

	    Outline.getter({
	      cacheable: function() {
	        return this.getHasChildren();
	      }
	    });

	    Outline.prototype.drawBasic = function(target, elementToTargetMatrix, compositeMode, opacity) {
	      this._prepareDrawOptions(compositeMode, opacity);
	      return this._parent.strokeShape(target, elementToTargetMatrix, this._drawOptions);
	    };

	    Outline.prototype._prepareDrawOptions = function(compositeMode, opacity) {
	      this._drawOptions.compositeMode = compositeMode;
	      this._drawOptions.opacity = opacity;
	      this._drawOptions.color = this._color;
	      this._drawOptions.lineWidth = this._lineWidth;
	      this._drawOptions.lineCap = this._lineCap;
	      this._drawOptions.lineJoin = this._lineJoin;
	      return this._drawOptions.miterLimit = this._miterLimit;
	    };

	    return Outline;

	  })(Base));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	var AnimatorSupport, Atomic, BaseModule, BaseObject, Element, EventEpoch, Foundation, GestureRecognizer, Matrix, PagingScrollElement, Point, Rectangle, ScrollAnimator, abs, absGt, absGte, absLt, absLte, animatorSpringConstant, animatorSpringFriction, bound, brakingFactor, ceil, createGestureRecognizer, createWithPostCreate, crossScrollProperties, currentSecond, eventEpoch, first, flickSpeedMultiplier, inspect, isPlainArray, isPoint, last, log, matrix, max, maxChange, maxMagnitude, merge, min, minMagnitude, minimumFlickVelocity, peek, point, point0, pointNearInfinity, rect, requestAnimationFrame, round, scrollProperties, timeout,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(8);

	Atomic = __webpack_require__(89);

	EventEpoch = __webpack_require__(100).EventEpoch;

	Element = __webpack_require__(150);

	GestureRecognizer = __webpack_require__(145);

	log = Foundation.log, inspect = Foundation.inspect, currentSecond = Foundation.currentSecond, bound = Foundation.bound, round = Foundation.round, first = Foundation.first, last = Foundation.last, peek = Foundation.peek, min = Foundation.min, max = Foundation.max, abs = Foundation.abs, merge = Foundation.merge, createWithPostCreate = Foundation.createWithPostCreate, BaseObject = Foundation.BaseObject, timeout = Foundation.timeout, ceil = Foundation.ceil, round = Foundation.round, isPlainArray = Foundation.isPlainArray, BaseModule = Foundation.BaseModule, absLt = Foundation.absLt, absLte = Foundation.absLte, absGt = Foundation.absGt, absGte = Foundation.absGte, minMagnitude = Foundation.minMagnitude, maxMagnitude = Foundation.maxMagnitude, maxChange = Foundation.maxChange, absLt = Foundation.absLt, requestAnimationFrame = Foundation.requestAnimationFrame;

	point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, isPoint = Atomic.isPoint;

	point0 = Point.point0, pointNearInfinity = Point.pointNearInfinity;

	eventEpoch = EventEpoch.eventEpoch;

	createGestureRecognizer = GestureRecognizer.createGestureRecognizer;

	scrollProperties = {
	  vertical: "y",
	  horizontal: "x"
	};

	crossScrollProperties = {
	  vertical: "x",
	  horizontal: "y"
	};

	brakingFactor = 3;

	minimumFlickVelocity = 300;

	animatorSpringConstant = 300;

	animatorSpringFriction = 25;

	flickSpeedMultiplier = 1;


	/*
	PagingScrollElement

	guarantee:
	  Will never scroll more than one "windowSize" per frame.
	  That means you need at least as many "pages" as it will take to display one more window-full of content
	  above or below the current displayed content.

	margins:
	  Margins on paging elements are currently not supported.
	  We could relatively easilly support constant margins.
	  Anything more complex gets a little tedious.
	  Recomendation: Use Padding instead of Margins.

	events:
	  currentPageChanged:
	    oldCurrentPage: element
	    currentPage:    element
	  scrollUpdate:
	    currentPage:          element           - @currentPage
	    currentGeometry:      plain object      - @currentGeometry
	    pagesBeforeBaseline:  array of elements - @pagesBeforeBaseline
	    pagesAfterBaseline:   array of elements - @pagesAfterBaseline

	naming:

	  All "positions" are scalers.
	  All "positions" are relative to the top/left of the PagingScrollElement.
	  Positive values indicate more to the bottom/right of the PagingScrollElement.

	  "scrollPosition" is the main geometry value for the PagingScrollElement.

	  I chose "scrollPosition" over just "position" or "location".
	  location vs position: http://www.eng-tips.com/viewthread.cfm?qid=180516
	    position can be used to refer to internal configuration, which scrollPosition is,
	    but location cannot. This avoids confusion with Element's currentLocations.

	Implementation Notes:

	  When to use "pending" property values:
	    - use pending values only as inputs to computation that results in setting another property
	    - use current (non-pending) poperty values for all getters
	 */


	/*
	ScrollAnimator

	scrollElement api:
	  @getter
	    minScrollPosition:
	    maxScrollPosition:
	    scrollPosition:

	  @setter
	    scrollPosition: (scrollPosition) ->

	onIdle is called when all animations and gestures have stopped.
	 */

	ScrollAnimator = (function(superClass) {
	  var frameCount, missCount;

	  extend(ScrollAnimator, superClass);

	  function ScrollAnimator(scrollElement, maximumVelocity1) {
	    this.scrollElement = scrollElement;
	    this.maximumVelocity = maximumVelocity1;
	    ScrollAnimator.__super__.constructor.apply(this, arguments);
	    this._referenceFrame = this.scrollElement.getPendingReferenceFrame();
	    this._velocity = 0;
	    this._mode = "tracking";

	    /*
	    modes:
	      braking:      friction only
	      spring:       spring
	      tracking:     direct tracking, no physics
	     */
	  }

	  ScrollAnimator.getter({
	    mode: function() {
	      return this._mode;
	    },
	    minScrollPosition: function() {
	      return this.scrollElement.getMinScrollPositionInReferenceFrame(this._referenceFrame);
	    },
	    maxScrollPosition: function() {
	      return this.scrollElement.getMaxScrollPositionInReferenceFrame(this._referenceFrame);
	    },
	    scrollPosition: function() {
	      return this.scrollElement.getScrollPositionInReferenceFrame(this._referenceFrame);
	    },
	    animationDone: function() {
	      switch (this.mode) {
	        case "spring":
	          return this.velocityIsSlow() && this._desiredScrollPosition === this.getScrollPosition();
	        case "braking":
	          return this.velocityIsSlow();
	        default:
	          return !this._activeTouch;
	      }
	    },
	    animationContinues: function() {
	      return !this.getAnimationDone();
	    }
	  });

	  ScrollAnimator.setter({
	    mode: function(v) {
	      return this._mode = v;
	    },
	    referenceFrame: function(v) {
	      return this._referenceFrame = v;
	    },
	    scrollPosition: function(l) {
	      return this.scrollElement.setScrollPositionInReferenceFrame(round(l), this._referenceFrame);
	    },
	    activeTouch: function(v) {
	      if (!(this._activeTouch = !!v)) {
	        this.mode = "spring";
	        return this._desiredScrollPosition = this.boundLocation(this._desiredScrollPosition);
	      }
	    },
	    desiredScrollPosition: function(l) {
	      return this._desiredScrollPosition = l;
	    }
	  });

	  ScrollAnimator.prototype.addToDesiredScrollPosition = function(delta) {
	    return this._desiredScrollPosition += delta;
	  };

	  ScrollAnimator.prototype.animateToLocation = function(desiredScrollPosition) {
	    this.mode = "spring";
	    return this._desiredScrollPosition = desiredScrollPosition;
	  };

	  ScrollAnimator.prototype.boundLocation = function(scrollPosition) {
	    return bound(this.getMinScrollPosition(), scrollPosition, this.getMaxScrollPosition());
	  };

	  ScrollAnimator.prototype.startTracking = function(desiredScrollPosition, referenceFrame) {
	    this._referenceFrame = referenceFrame;
	    this.mode = "tracking";
	    this._velocity = 0;
	    this.setDesiredScrollPosition(desiredScrollPosition);
	    return this._activeTouch = true;
	  };

	  ScrollAnimator.prototype.addVelocity = function(v) {
	    this._velocity = v;
	    return this.mode = "braking";
	  };

	  ScrollAnimator.prototype.velocityIsSlow = function() {
	    return absLte(this._velocity, 60);
	  };

	  frameCount = 0;

	  missCount = 0;

	  ScrollAnimator.prototype.frameUpdate = function(frameTime) {
	    var acceleration, boundedLocation, boundedTargetLocation, currentToTargetVector, distanceSquared, frictionAcceleration, frictionConstant, scrollPosition, springAcceleration, springConstant, targetScrollPosition, tookFrames;
	    tookFrames = Math.round(frameTime * 60);
	    frameCount++;
	    if (absLt(frameTime * 60 - 1, .25)) {

	    } else {
	      if (tookFrames > 1) {
	        missCount++;
	      }
	      console.log("frameUpdate " + this._mode + ": took " + (frameTime * 60) + " frames (miss rate: " + missCount + " / " + frameCount + ")");
	    }
	    scrollPosition = this.getScrollPosition();
	    targetScrollPosition = this._desiredScrollPosition;
	    this._velocity = maxMagnitude(this._velocity, this.maximumVelocity);
	    switch (this._mode) {
	      case "tracking":
	        boundedTargetLocation = this.boundLocation(targetScrollPosition);
	        targetScrollPosition = (targetScrollPosition + boundedTargetLocation) / 2;
	        this._velocity = 0;
	        this.setScrollPosition(targetScrollPosition);
	        break;
	      case "braking":
	        this._activeTouch = false;
	        frictionConstant = brakingFactor;
	        frictionAcceleration = this._velocity * -frictionConstant;
	        acceleration = frictionAcceleration;
	        this._velocity += acceleration * frameTime;
	        scrollPosition = scrollPosition + this._velocity * frameTime;
	        this.setScrollPosition(scrollPosition);
	        if (scrollPosition !== (boundedLocation = this.boundLocation(scrollPosition))) {
	          this.mode = "spring";
	          this._desiredScrollPosition = boundedLocation;
	        }
	        break;
	      case "spring":
	        currentToTargetVector = targetScrollPosition - scrollPosition;
	        distanceSquared = currentToTargetVector * currentToTargetVector;
	        springConstant = animatorSpringConstant;
	        frictionConstant = animatorSpringFriction;
	        springAcceleration = currentToTargetVector * springConstant;
	        frictionAcceleration = this._velocity * -frictionConstant;
	        acceleration = springAcceleration + frictionAcceleration;
	        this._velocity = this._velocity + acceleration * frameTime;
	        this.setScrollPosition(this.velocityIsSlow() && abs(scrollPosition - targetScrollPosition) <= 1 ? targetScrollPosition : scrollPosition + minMagnitude(this._velocity * frameTime, 1));
	    }
	    if (!this.getAnimationContinues()) {
	      console.log("frameUpdate " + this._mode + ": DONE (miss rate: " + missCount + " / " + frameCount + ")");
	    }
	    return this.getAnimationContinues();
	  };

	  return ScrollAnimator;

	})(BaseObject);

	AnimatorSupport = (function(superClass) {
	  extend(AnimatorSupport, superClass);

	  function AnimatorSupport() {
	    return AnimatorSupport.__super__.constructor.apply(this, arguments);
	  }

	  AnimatorSupport.getter({
	    animatorsActive: function() {
	      return !!this._activeAnimators;
	    }
	  });

	  AnimatorSupport.prototype.initAnimatorSupport = function() {
	    this._lastTime = 0;
	    this._activeAnimators = null;
	    return this._frameUpdateQueued = false;
	  };

	  AnimatorSupport.prototype.startAnimator = function(animator) {
	    if (this.getAnimatorsActive()) {
	      this._activeAnimators.push(animator);
	    } else {
	      this._activeAnimators = [animator];
	      this._lastTime = currentSecond();
	      this.getAnimatorsActive();
	    }
	    this._startAnimatorLoop();
	    return animator;
	  };


	  /*
	  OUT: newAnimator
	  SIDE-EFFECT:
	    if oldAnimator is in @_activeAnimators
	    then: replaced it with newAnimator
	    else: @startAnimator newAnimator
	  
	  POST ASSERTIONS
	    newAnimator is in @_activeAnimators
	    oldAnimator is NOT in @_activeAnimators
	   */

	  AnimatorSupport.prototype.replaceAnimator = function(newAnimator, oldAnimator) {
	    var index;
	    if (!(this._activeAnimators && oldAnimator)) {
	      return this.startAnimator(newAnimator);
	    }
	    index = this._activeAnimators.indexOf(oldAnimator);
	    if (!(index >= 0)) {
	      return this.startAnimator(newAnimator);
	    }
	    return this._activeAnimators[index] = newAnimator;
	  };

	  AnimatorSupport.prototype.stopAllAnimators = function() {
	    return this._activeAnimators = null;
	  };

	  AnimatorSupport.prototype._frameUpdate = function(frameTime) {
	    var animator, i, j, len, nextAnimators, now, ref;
	    if (!this._activeAnimators) {
	      return;
	    }
	    now = frameTime;
	    frameTime = now - this._lastTime;
	    nextAnimators = null;
	    ref = this._activeAnimators;
	    for (i = j = 0, len = ref.length; j < len; i = ++j) {
	      animator = ref[i];
	      if (animator.frameUpdate(frameTime)) {
	        if (nextAnimators != null) {
	          nextAnimators.push(animator);
	        }
	      } else {
	        this.queueEvent("animatorDone", {
	          animator: animator
	        });
	        nextAnimators || (nextAnimators = this._activeAnimators.slice(0, i));
	      }
	    }
	    if (nextAnimators) {
	      if (nextAnimators.length === 0) {
	        this._activeAnimators = null;
	        this.queueEvent("allAnimatorsDone");
	      } else {
	        this._activeAnimators = nextAnimators;
	      }
	    }
	    return this._lastTime = now;
	  };

	  AnimatorSupport.prototype._startAnimatorLoop = function() {
	    if (this._frameUpdateQueued) {
	      return;
	    }
	    return requestAnimationFrame((function(_this) {
	      return function(frameTimeMs) {
	        var queueNextFrameUpdate;
	        _this._lastTime = frameTimeMs / 1000;
	        queueNextFrameUpdate = function() {
	          if (!_this.getAnimatorsActive()) {
	            return;
	          }
	          _this._frameUpdateQueued = true;
	          return requestAnimationFrame(function(frameTimeMs) {
	            _this._frameUpdateQueued = false;
	            _this._frameUpdate(frameTimeMs / 1000);
	            return queueNextFrameUpdate();
	          });
	        };
	        return queueNextFrameUpdate();
	      };
	    })(this));
	  };

	  return AnimatorSupport;

	})(BaseModule);

	module.exports = createWithPostCreate(PagingScrollElement = (function(superClass) {
	  var defaultReferenceFrame;

	  extend(PagingScrollElement, superClass);

	  PagingScrollElement.include(AnimatorSupport);

	  function PagingScrollElement() {
	    this.initAnimatorSupport();
	    this._initGestureProps();
	    this._pages = null;
	    this._currentPage = null;
	    this._atEnd = false;
	    this._atStart = true;
	    this._scrollContents = this._pagesBeforeBaselineWrapper = this._pagesAfterBaselineWrapper = null;
	    this._setVerticalAxis();
	    PagingScrollElement.__super__.constructor.apply(this, arguments);
	    self.pagingScrollElement = this;
	    this._updateHiddenChildren();
	  }

	  PagingScrollElement.prototype.preprocessEventHandlers = function(handlerMap) {
	    return merge(this._externalHandlerMap = handlerMap, {
	      animatorDone: (function(_this) {
	        return function(arg) {
	          var animator;
	          animator = arg.animator;
	          if (animator === _this._scrollAnimator) {
	            return _this._scrollAnimator = null;
	          }
	        };
	      })(this)
	    }, createGestureRecognizer({
	      custom: {
	        resume: this.gestureResume.bind(this),
	        recognize: this.gestureRecognize.bind(this),
	        begin: this.gestureBegin.bind(this),
	        move: this.gestureMove.bind(this),
	        end: this.gestureEnd.bind(this)
	      }
	    }));
	  };

	  PagingScrollElement.prototype._setVerticalAxis = function() {
	    this.newPoint = function(mainV, crossV) {
	      if (crossV == null) {
	        crossV = 0;
	      }
	      return point(crossV, mainV);
	    };
	    this.getPagePosition = function(page) {
	      return (page != null ? page.transformToAncestorSpaceY(0, this) : void 0) || 0;
	    };
	    return this.getMainCoordinate = function(pnt) {
	      return pnt.y;
	    };
	  };

	  PagingScrollElement.prototype._setHorizontalAxis = function() {
	    this.newPoint = function(mainV, crossV) {
	      if (crossV == null) {
	        crossV = 0;
	      }
	      return point(mainV, crossV);
	    };
	    this.getPagePosition = function(page) {
	      return (page != null ? page.transformToAncestorSpaceX(0, this) : void 0) || 0;
	    };
	    return this.getMainCoordinate = function(pnt) {
	      return pnt.x;
	    };
	  };

	  PagingScrollElement.prototype.getPageSize = function(page) {
	    if (!page) {
	      return 0;
	    } else {
	      return this.getMainCoordinate(page.getCurrentSize());
	    }
	  };

	  PagingScrollElement.prototype.getPageEdgeOffset = function(arg) {
	    var atEndEdge, page;
	    page = arg.page, atEndEdge = arg.atEndEdge;
	    if (atEndEdge) {
	      return this.getPageSize(page);
	    } else {
	      return 0;
	    }
	  };

	  PagingScrollElement.prototype.getPageCenter = function(page) {
	    return this.getPagePosition(page) + this.getPageSize(page) / 2;
	  };

	  defaultReferenceFrame = {
	    page: null,
	    atEndEdge: false
	  };

	  PagingScrollElement.inertProperty({
	    referenceFrame: {
	      "default": defaultReferenceFrame,
	      postSetter: function(newReferenceFrame, previousReferenceFrame) {
	        var delta;
	        if (newReferenceFrame === previousReferenceFrame) {
	          console.warn("referenceFrame_postSetter - frame didnt' change");
	        }
	        this._addToScrollPosition(delta = this.getReferenceFrameDelta(newReferenceFrame, previousReferenceFrame));
	        this._updatePointerReferenceFrame(newReferenceFrame);
	        this._queueUpdateEvent(newReferenceFrame, previousReferenceFrame);
	        return this._updatePagesSplit();
	      }
	    },
	    pages: {
	      "default": [],
	      validate: function(pages) {
	        return isPlainArray(pages);
	      },
	      postSetter: function(pages, oldPages) {
	        var atEndEdge, page, ref, referenceFrame;
	        ref = referenceFrame = this.getPendingReferenceFrame(), page = ref.page, atEndEdge = ref.atEndEdge;
	        if (this._atEnd) {
	          atEndEdge = true;
	          page = last(pages);
	        }
	        if (this._atStart || !page) {
	          atEndEdge = false;
	          page = first(pages);
	        }
	        if (referenceFrame.page && 0 > pages.indexOf(referenceFrame.page)) {
	          console.warn("PagingScrollElement#pages setter: New page list does not contain the current referenceFrame. ALWAYS include the current referenceFrame when setting pages. Screen will jump!");
	        }
	        if (referenceFrame.page !== page || referenceFrame.atEndEdge !== atEndEdge) {
	          this.setReferenceFrame({
	            page: page,
	            atEndEdge: atEndEdge
	          });
	        } else {
	          this._updatePagesSplit();
	        }
	        if (oldPages.length > 0) {
	          return this.onNextReady((function(_this) {
	            return function() {
	              return _this._updateAtStartAndAtEnd();
	            };
	          })(this));
	        }
	      }
	    },
	    scrollPosition: {
	      "default": 0,
	      postSetter: function(position) {
	        this.onNextReady((function(_this) {
	          return function() {
	            return _this._updateAtStartAndAtEnd();
	          };
	        })(this));
	        return this._scrollContents.setLocation(this.newPoint(position));
	      }
	    }
	  });

	  PagingScrollElement.prototype._updatePagesSplit = function(pages, referenceFrame) {
	    var atEndEdge, page, splitIndex;
	    if (pages == null) {
	      pages = this.getPendingPages();
	    }
	    if (referenceFrame == null) {
	      referenceFrame = this.getPendingReferenceFrame();
	    }
	    page = referenceFrame.page, atEndEdge = referenceFrame.atEndEdge;
	    splitIndex = pages.indexOf(page);
	    if (splitIndex < 0) {
	      if (page) {
	        console.warn("PagingScrollElement#_updatePagesSplit: could not find the old referenceFrame.page(key: " + (page.key || page.inspectedName) + ") in the new children. New current page picked; display WILL jump.");
	      }
	      splitIndex = 0;
	    }
	    if (atEndEdge) {
	      splitIndex++;
	    }
	    this._pagesBeforeBaselineWrapper.setChildren(pages.slice(0, splitIndex));
	    return this._pagesAfterBaselineWrapper.setChildren(pages.slice(splitIndex));
	  };

	  PagingScrollElement.layoutProperty({
	    scroll: {
	      "default": "vertical",
	      validate: function(v) {
	        return v === "vertical" || v === "horizontal";
	      },
	      postSetter: function(newV, oldValue) {
	        if (newV === "vertical") {
	          this._setVerticalAxis();
	        } else {
	          this._setHorizontalAxis();
	        }
	        return this._updateHiddenChildren(newV);
	      }
	    }
	  });

	  PagingScrollElement.prototype.getReferenceFrameDelta = function(toReferenceFrame, fromReferenceFrame) {
	    var edgeDelta, positionDelta;
	    if (toReferenceFrame == null) {
	      toReferenceFrame = defaultReferenceFrame;
	    }
	    if (fromReferenceFrame == null) {
	      fromReferenceFrame = defaultReferenceFrame;
	    }
	    if (toReferenceFrame === fromReferenceFrame) {
	      return 0;
	    }
	    positionDelta = toReferenceFrame.page === fromReferenceFrame.page ? 0 : this.getPagePosition(toReferenceFrame.page) - this.getPagePosition(fromReferenceFrame.page);
	    edgeDelta = this.getPageEdgeOffset(toReferenceFrame) - this.getPageEdgeOffset(fromReferenceFrame);
	    return positionDelta + edgeDelta;
	  };

	  PagingScrollElement.prototype.getScrollPositionInReferenceFrame = function(targetReferenceFrame) {
	    return this.getScrollPosition() + this.getReferenceFrameDelta(targetReferenceFrame, this.getReferenceFrame());
	  };

	  PagingScrollElement.prototype.setScrollPositionInReferenceFrame = function(scrollPosition, referenceFrame) {
	    var pendingReferenceFrame;
	    this.onNextReady((function(_this) {
	      return function() {
	        return _this._updateReferenceFrame();
	      };
	    })(this));
	    pendingReferenceFrame = this.getPendingReferenceFrame();
	    scrollPosition += this.getReferenceFrameDelta(pendingReferenceFrame, referenceFrame);
	    return this.setScrollPosition(scrollPosition);
	  };

	  PagingScrollElement.prototype.getMinScrollPosition = function() {
	    return this.getMinScrollPositionInReferenceFrame(this.getReferenceFrame());
	  };

	  PagingScrollElement.prototype.getMaxScrollPosition = function() {
	    return this.getMaxScrollPositionInReferenceFrame(this.getReferenceFrame());
	  };

	  PagingScrollElement.prototype.getMinScrollPositionInReferenceFrame = function(referenceFrame) {
	    var afterSize, beforeSize, windowSize;
	    windowSize = this.getWindowSize();
	    beforeSize = this.getPagesBeforeBaselineSize();
	    afterSize = this.getPagesAfterBaselineSize();
	    if (beforeSize + afterSize <= windowSize) {
	      return 0;
	    }
	    return windowSize - afterSize + this.getReferenceFrameDelta(referenceFrame, this.getReferenceFrame());
	  };

	  PagingScrollElement.prototype.getMaxScrollPositionInReferenceFrame = function(referenceFrame) {
	    var afterSize, beforeSize, delta, windowSize;
	    windowSize = this.getWindowSize();
	    beforeSize = this.getPagesBeforeBaselineSize();
	    afterSize = this.getPagesAfterBaselineSize();
	    delta = this.getReferenceFrameDelta(referenceFrame, this.getReferenceFrame());
	    if (beforeSize + afterSize <= windowSize) {
	      return 0;
	    }
	    return beforeSize + delta;
	  };

	  PagingScrollElement.prototype.jumpToStart = function() {
	    return this.setScrollPositionInReferenceFrame(0, {
	      page: first(this.getPendingPages()),
	      atEndEdge: false
	    });
	  };

	  PagingScrollElement.prototype.jumpToEnd = function() {
	    if (this.getPagesFitInWindow()) {
	      return this.jumpToStart();
	    } else {
	      return this.setScrollPositionInReferenceFrame(this.getWindowSize(), {
	        page: last(this.getPendingPages()),
	        atEndEdge: true
	      });
	    }
	  };

	  PagingScrollElement.getter({
	    atEnd: function() {
	      return this._atEnd;
	    },
	    atStart: function() {
	      return this._atStart;
	    },
	    inMiddle: function() {
	      return !this._atEnd && !this._atStart;
	    },
	    pagesFitInWindow: function() {
	      return this.getWindowSize() >= this.getTotalPageSize();
	    },
	    windowSize: function() {
	      return this.getMainCoordinate(this.getCurrentSize());
	    },
	    currentPagePosition: function() {
	      return this.getMainCoordinate(this._scrollContents.getCurrentLocation());
	    },
	    pagesBeforeBaselineSize: function() {
	      return this.getMainCoordinate(this._pagesBeforeBaselineWrapper.getCurrentSize());
	    },
	    pagesAfterBaselineSize: function() {
	      return this.getMainCoordinate(this._pagesAfterBaselineWrapper.getCurrentSize());
	    },
	    pagesBeforeBaseline: function() {
	      return this._pagesBeforeBaselineWrapper.getChildren();
	    },
	    pagesAfterBaseline: function() {
	      return this._pagesAfterBaselineWrapper.getChildren();
	    },
	    totalPageSize: function() {
	      return this.getPagesBeforeBaselineSize() + this.getPagesAfterBaselineSize();
	    },
	    pagesOnScreenBeforeBaseline: function() {
	      var averagePageSize, count, j, page, pages, pixelsLeft, pixelsOnScreen, ref, totalSize;
	      pixelsOnScreen = this.getScrollPosition();
	      totalSize = 0;
	      count = 0;
	      ref = pages = this._pagesBeforeBaselineWrapper.getChildren();
	      for (j = ref.length - 1; j >= 0; j += -1) {
	        page = ref[j];
	        count++;
	        totalSize += this.getMainCoordinate(page.getCurrentSize());
	        if (totalSize >= pixelsOnScreen) {
	          break;
	        }
	      }
	      if (totalSize < pixelsOnScreen) {
	        averagePageSize = totalSize / pages.length;
	        pixelsLeft = pixelsOnScreen - totalSize;
	        count += ceil(pixelsLeft / averagePageSize);
	      }
	      return count;
	    },
	    pagesOnScreenAfterBaseline: function() {
	      var averagePageSize, count, j, len, page, pages, pixelsLeft, pixelsOnScreen, ref, totalSize;
	      pixelsOnScreen = this.getWindowSize() - this.getScrollPosition();
	      totalSize = 0;
	      count = 0;
	      ref = pages = this._pagesAfterBaselineWrapper.getChildren();
	      for (j = 0, len = ref.length; j < len; j++) {
	        page = ref[j];
	        count++;
	        totalSize += this.getMainCoordinate(page.getCurrentSize());
	        if (totalSize >= pixelsOnScreen) {
	          break;
	        }
	      }
	      if (totalSize < pixelsOnScreen) {
	        averagePageSize = totalSize / pages.length;
	        pixelsLeft = pixelsOnScreen - totalSize;
	        count += ceil(pixelsLeft / averagePageSize);
	      }
	      return count;
	    },
	    currentGeometry: function() {
	      var currentPos, numPages, pixelsAfter, pixelsBefore, suggestedPageSpread, totalPageSize, windowSize;
	      windowSize = this.getWindowSize();
	      currentPos = this.getCurrentPagePosition();
	      pixelsBefore = this.getPagesBeforeBaselineSize();
	      pixelsAfter = this.getPagesAfterBaselineSize();
	      numPages = this._pages.length;
	      totalPageSize = pixelsBefore + pixelsAfter;
	      suggestedPageSpread = this.getPagesOnScreenBeforeBaseline() + this.getPagesOnScreenAfterBaseline();
	      return {
	        currentPagePosition: currentPos,
	        windowSize: windowSize,
	        numPages: numPages,
	        numPagesBeforeBaseline: this._pagesBeforeBaselineWrapper.getChildren().length,
	        numPagesAfterBaseline: this._pagesAfterBaselineWrapper.getChildren().length,
	        totalPageSize: totalPageSize,
	        focusedPageBeforeBaseline: this.getReferenceFrame().atEndEdge,
	        suggestedPageSpread: suggestedPageSpread,
	        pixelsOffscreenBeforeWindow: pixelsBefore - currentPos,
	        pixelsOffscreenAfterWindow: pixelsAfter - windowSize + currentPos,
	        pagesBeforeBaselineSize: pixelsBefore,
	        pagesAfterBaselineSize: pixelsAfter
	      };
	    }
	  });

	  PagingScrollElement.prototype._initGestureProps = function() {
	    this._flicked = false;
	    this._pointerStartPosition = 0;
	    this._pointerReferenceFrame = null;
	    this._lastPointerEventTime = null;
	    this._flickSpeed = 0;
	    this._gestureActive = false;
	    return this._scrollAnimator = null;
	  };

	  PagingScrollElement.getter({
	    activeScrollAnimator: function() {
	      return this._scrollAnimator;
	    },
	    scrollAnimator: function() {
	      var maximumVelocity;
	      maximumVelocity = this.getWindowSize() * 60 / 2;
	      return this._scrollAnimator || (this._scrollAnimator = this.startAnimator(new ScrollAnimator(this, maximumVelocity)));
	    },
	    debugState: function() {
	      var child, ref, referenceFrame;
	      referenceFrame = this.referenceFrame;
	      return {
	        referenceFrame: {
	          page: (ref = referenceFrame.page) != null ? ref.inspectedName : void 0,
	          atEndEdge: referenceFrame.atEndEdge
	        },
	        pagesBefore: (function() {
	          var j, len, ref1, results;
	          ref1 = this._pagesBeforeBaselineWrapper.children;
	          results = [];
	          for (j = 0, len = ref1.length; j < len; j++) {
	            child = ref1[j];
	            results.push(child.inspectedName + " " + ((this.getMainCoordinate(child.currentSize)) | 0));
	          }
	          return results;
	        }).call(this),
	        pagesAfter: (function() {
	          var j, len, ref1, results;
	          ref1 = this._pagesAfterBaselineWrapper.children;
	          results = [];
	          for (j = 0, len = ref1.length; j < len; j++) {
	            child = ref1[j];
	            results.push(child.inspectedName + " " + ((this.getMainCoordinate(child.currentSize)) | 0));
	          }
	          return results;
	        }).call(this),
	        geometry: this.currentGeometry
	      };
	    }
	  });

	  PagingScrollElement.prototype.gestureRecognize = function(arg) {
	    var delta;
	    delta = arg.delta;
	    if (this._scroll === "vertical") {
	      return 1 > delta.absoluteAspectRatio;
	    } else {
	      return 1 < delta.absoluteAspectRatio;
	    }
	  };

	  PagingScrollElement.prototype.gestureBegin = function(e) {
	    var location, timeStamp;
	    location = e.location, timeStamp = e.timeStamp;
	    this._flickSpeed = 0;
	    this._gestureActive = true;
	    location = this.getMainCoordinate(location);
	    this._pointerReferenceFrame = this._referenceFrame;
	    this._pointerStartPosition = location - this._scrollPosition;
	    this._lastPointerEventTime = timeStamp;
	    if (this.getActiveScrollAnimator()) {
	      this._flicked = false;
	      return timeout(60, (function(_this) {
	        return function() {
	          var referenceFrame, scrollPosition;
	          if (!_this._flicked && _this._gestureActive) {
	            _this._pointerReferenceFrame = _this._referenceFrame;
	            scrollPosition = _this.getPendingScrollPosition();
	            referenceFrame = _this.getPendingReferenceFrame();
	            _this._pointerStartPosition = location - scrollPosition;
	            return _this.getScrollAnimator().startTracking(scrollPosition, referenceFrame);
	          }
	        };
	      })(this));
	    } else {
	      return this.getScrollAnimator().startTracking(this._scrollPosition, this._referenceFrame);
	    }
	  };

	  PagingScrollElement.prototype.gestureResume = function(e) {
	    return !!this.getActiveScrollAnimator();
	  };

	  PagingScrollElement.prototype.gestureMove = function(e) {
	    var delta, deltaV, location, scrollAnimator, timeStamp;
	    timeStamp = e.timeStamp, delta = e.delta, location = e.location;
	    location = this.getMainCoordinate(location);
	    delta = this.getMainCoordinate(deltaV = delta);
	    scrollAnimator = this.getScrollAnimator();
	    if (timeStamp > this._lastPointerEventTime) {
	      this._flickSpeed = deltaV.getMagnitude() / (timeStamp - this._lastPointerEventTime);
	      this._flickDirection = (delta / abs(delta)) || 1;
	      this._lastPointerEventTime = timeStamp;
	    }
	    return scrollAnimator.setDesiredScrollPosition(location - this._pointerStartPosition);
	  };

	  PagingScrollElement.prototype.gestureEnd = function(e) {
	    var scrollAnimator;
	    this._gestureActive = false;
	    if (absGt(this._flickSpeed, minimumFlickVelocity)) {
	      scrollAnimator = this.getScrollAnimator();
	      scrollAnimator.addVelocity(this._flickSpeed * this._flickDirection * flickSpeedMultiplier);
	      return this._flicked = true;
	    } else {
	      if (scrollAnimator = this.getActiveScrollAnimator()) {
	        scrollAnimator.setReferenceFrame(this.getReferenceFrame());
	        scrollAnimator.setDesiredScrollPosition(this.getScrollPosition());
	        return scrollAnimator.setActiveTouch(false);
	      }
	    }
	  };


	  /*
	  When children are set "from outside", we split them based on the @_currentPage and set then as
	  grandchildren - children of the direct, but hidden children:
	    _pagesBeforeBaselineWrapper or
	    _pagesAfterBaselineWrapper
	  
	  Why? This allows us to leverage existing row and column layouts to do most of
	  the heavy lifting for actual element layout.
	   */

	  PagingScrollElement.prototype.setChildren = function(newPages, oldChildren) {
	    var newChildren;
	    if (oldChildren == null) {
	      oldChildren = this.getPendingChildren();
	    }
	    newChildren = !((oldChildren != null ? oldChildren.length : void 0) > 0) ? (this._updateHiddenChildren(), [this._scrollContents]) : oldChildren;
	    this.setPages(newPages);
	    return PagingScrollElement.__super__.setChildren.call(this, newChildren);
	  };

	  PagingScrollElement.prototype._updatePointerReferenceFrame = function(newReferenceFrame) {
	    var delta, ref, ref1;
	    if (!this._pointerReferenceFrame) {
	      return;
	    }
	    delta = this.getReferenceFrameDelta(newReferenceFrame, this._pointerReferenceFrame);
	    this._pointerStartPosition -= delta;
	    if ((ref = this.getActiveScrollAnimator()) != null) {
	      ref.addToDesiredScrollPosition(delta);
	    }
	    return (ref1 = this.getActiveScrollAnimator()) != null ? ref1.setReferenceFrame(this._pointerReferenceFrame = newReferenceFrame) : void 0;
	  };

	  PagingScrollElement.prototype._getPageUnderPosition = function(testPosition) {
	    var child, j, len, ref, relativeTestPosition, size, wrapper;
	    relativeTestPosition = testPosition - this.getScrollPosition();
	    wrapper = relativeTestPosition < 0 ? (relativeTestPosition += this.getMainCoordinate(this._pagesBeforeBaselineWrapper.getCurrentSize()), this._pagesBeforeBaselineWrapper) : this._pagesAfterBaselineWrapper;
	    ref = wrapper.getChildren();
	    for (j = 0, len = ref.length; j < len; j++) {
	      child = ref[j];
	      size = this.getMainCoordinate(child.getCurrentSize());
	      if (relativeTestPosition < size) {
	        return child;
	      }
	      relativeTestPosition -= size;
	    }
	    console.warn("PagingScrollElement#_getPageUnderPosition: could not find page under position");
	    return null;
	  };

	  PagingScrollElement.prototype._updateAtStartAndAtEnd = function() {
	    var newAtEnd, newAtStart, pages, scrollPosition;
	    scrollPosition = this.getScrollPosition();
	    if (this.getTotalPageSize() <= this.getWindowSize()) {
	      newAtStart = true;
	      newAtEnd = false;
	    } else {
	      newAtEnd = scrollPosition <= this.getMinScrollPosition();
	      newAtStart = scrollPosition >= this.getMaxScrollPosition();
	    }
	    pages = this.getPages();
	    if (newAtStart && newAtStart !== this._atStart) {
	      this.setReferenceFrame({
	        page: first(pages)
	      });
	    } else if (newAtEnd && newAtEnd !== this._atEnd) {
	      this.setReferenceFrame({
	        atEndEdge: true,
	        page: last(pages)
	      });
	    }
	    this._atEnd = newAtEnd;
	    this._atStart = newAtStart;
	    return newAtEnd || newAtStart;
	  };

	  PagingScrollElement.prototype._addToScrollPosition = function(delta) {
	    return this.setScrollPosition(this.getPendingScrollPosition() + delta);
	  };


	  /*
	  update currentPage to be the page that overlaps the center-line of the view-window
	  
	  need to:
	    update scrollPosition
	    need to @_setChildren
	   */

	  PagingScrollElement.prototype._updateReferenceFrame = function() {
	    var atEndEdge, centerPosition, newCurrentPage, pageCenterPosition, referenceFrame, scrollPosition;
	    if (this._updateAtStartAndAtEnd()) {
	      return;
	    }
	    scrollPosition = this.getScrollPosition();
	    centerPosition = this.getWindowSize() / 2;
	    newCurrentPage = this._getPageUnderPosition(centerPosition);
	    if (!newCurrentPage) {
	      console.warn("_updateReferenceFrame: no newCurrentPage");
	    }
	    pageCenterPosition = this.getPageCenter(newCurrentPage);
	    atEndEdge = centerPosition > pageCenterPosition;
	    referenceFrame = this.getReferenceFrame();
	    if (referenceFrame.page !== newCurrentPage || referenceFrame.atEndEdge !== atEndEdge) {
	      return this.setReferenceFrame({
	        page: newCurrentPage,
	        atEndEdge: atEndEdge
	      });
	    }
	  };

	  PagingScrollElement.prototype._queueUpdateEvent = function(newReferenceFrame, previousReferenceFrame) {
	    return this.onNextReady((function(_this) {
	      return function() {
	        var referenceFrame;
	        referenceFrame = _this.getReferenceFrame();
	        return _this.queueEvent("scrollUpdate", {
	          previousReferenceFrame: previousReferenceFrame,
	          referenceFrame: referenceFrame,
	          focusedPage: referenceFrame.page,
	          currentGeometry: _this.getCurrentGeometry(),
	          pagesBeforeBaseline: _this.getPagesBeforeBaseline(),
	          pagesAfterBaseline: _this.getPagesAfterBaseline()
	        });
	      };
	    })(this));
	  };

	  PagingScrollElement.prototype._sizeChanged = function(newSize, oldSize) {
	    this._queueUpdateEvent();
	    return PagingScrollElement.__super__._sizeChanged.apply(this, arguments);
	  };

	  PagingScrollElement.prototype._updateHiddenChildren = function(scrollMode) {
	    var commonSizeLayout;
	    if (scrollMode == null) {
	      scrollMode = this.getPendingScroll();
	    }
	    this._scrollContents || (this._scrollContents = new Element({
	      key: "scrollContents",
	      receivePointerEvents: "passToChildren"
	    }, this._pagesBeforeBaselineWrapper = new Element({
	      key: "pagesBeforeBaseline"
	    }), this._pagesAfterBaselineWrapper = new Element({
	      key: "pagesAfterBaseline"
	    })));
	    if (scrollMode === "horizontal") {
	      commonSizeLayout = {
	        hh: 1,
	        wcw: 1
	      };
	      this._pagesBeforeBaselineWrapper.setAxis("topRight");
	      this._pagesBeforeBaselineWrapper.setChildrenLayout("row");
	      this._pagesAfterBaselineWrapper.setChildrenLayout("row");
	    } else {
	      commonSizeLayout = {
	        ww: 1,
	        hch: 1
	      };
	      this._pagesBeforeBaselineWrapper.setAxis("bottomLeft");
	      this._pagesBeforeBaselineWrapper.setChildrenLayout("column");
	      this._pagesAfterBaselineWrapper.setChildrenLayout("column");
	    }
	    this._scrollContents.setSize(commonSizeLayout);
	    this._pagesBeforeBaselineWrapper.setSize(commonSizeLayout);
	    return this._pagesAfterBaselineWrapper.setSize(commonSizeLayout);
	  };

	  return PagingScrollElement;

	})(Element));


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(142), __webpack_require__(251)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Base) {
	  var Color, Matrix, Point, Rectangle, RectangleShadow, color, createWithPostCreate, currentSecond, isPlainObject, log, matrix, point, rect;
	  log = Foundation.log, currentSecond = Foundation.currentSecond, isPlainObject = Foundation.isPlainObject, createWithPostCreate = Foundation.createWithPostCreate;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  return createWithPostCreate(RectangleShadow = (function(superClass) {
	    var generateShadowBitmap, generateShadowCanvasBitmap, sourceShadowRadius;

	    extend(RectangleShadow, superClass);

	    RectangleShadow.generateShadowCanvasBitmap = generateShadowCanvasBitmap = function(radius) {
	      var centerWidth, margin, shadowBitmap, shadowSourceArea, width;
	      centerWidth = Math.ceil(radius * 2) + 1;
	      margin = Math.ceil(radius);
	      width = margin * 2 + centerWidth;
	      shadowBitmap = new Canvas.Bitmap(point(width));
	      shadowBitmap.drawRectangle(null, rect(margin, margin, centerWidth, centerWidth), {
	        color: "black"
	      });
	      shadowBitmap.blur(radius);
	      shadowSourceArea = rect(shadowBitmap.size).grow(-margin * 2);
	      return {
	        shadowRadius: radius,
	        shadowBitmap: shadowBitmap,
	        shadowSourceArea: shadowSourceArea
	      };
	    };

	    RectangleShadow.generateShadowBitmap = generateShadowBitmap = function(bitmapFactory, radius) {
	      var bitmap, canvasBitmap, ret;
	      ret = generateShadowCanvasBitmap(radius);
	      if (bitmapFactory.bitmapClass !== Canvas.Bitmap) {
	        canvasBitmap = ret.shadowBitmap;
	        bitmap = bitmapFactory.newBitmap(canvasBitmap.size);
	        bitmap.drawBitmap(null, canvasBitmap);
	        ret.shadowBitmap = bitmap;
	      }
	      return ret;
	    };

	    sourceShadowRadius = 32;

	    RectangleShadow.getShadowBitmapAndSourceArea = function(bitmapFactory) {
	      var endTime, startTime;
	      if (!this._shadowBitmapAndSourceArea) {
	        startTime = currentSecond();
	        this._shadowBitmapAndSourceArea = generateShadowBitmap(bitmapFactory, sourceShadowRadius);
	        endTime = currentSecond();
	      }
	      return this._shadowBitmapAndSourceArea;
	    };

	    function RectangleShadow(options) {
	      RectangleShadow.__super__.constructor.apply(this, arguments);
	      this._drawOptions = {};
	    }

	    RectangleShadow.getter({
	      cacheable: function() {
	        return false;
	      }
	    });

	    RectangleShadow.drawProperty({
	      show: {
	        "default": null,
	        validate: function(v) {
	          return !v || isPlainObject(v);
	        },
	        preprocess: function(v) {
	          if (v) {
	            return v;
	          } else {
	            return null;
	          }
	        }
	      },
	      hide: {
	        "default": null,
	        validate: function(v) {
	          return !v || isPlainObject(v);
	        },
	        preprocess: function(v) {
	          if (v) {
	            return v;
	          } else {
	            return null;
	          }
	        }
	      },
	      radius: {
	        "default": 0,
	        validate: function(v) {
	          return !v || typeof v === "number";
	        },
	        preprocess: function(v) {
	          return v || 0;
	        }
	      }
	    });

	    RectangleShadow.virtualProperty({
	      distance: {
	        setter: function(distance) {
	          this.setRadius(distance);
	          this.setPadding(-distance);
	          this.setSize({
	            ps: 1
	          });
	          return this.setLocation({
	            y: distance * .65 - 1
	          });
	        },
	        getter: function(o) {
	          return o._radius;
	        }
	      }
	    });

	    RectangleShadow.prototype.invalidateDrawBitmap = function() {
	      if (this.drawBitmap && (this.radius !== this.drawRadius || !this.drawBitmap.size.eq(this.size))) {
	        return this.drawBitmap = null;
	      }
	    };

	    RectangleShadow.prototype.generateDrawBitmap = function() {
	      this.drawBitmap = this.bitmapFactory.newBitmap(this.size);
	      this.drawRadius = this.radius;
	      this._drawOptions.opacity = null;
	      this._drawOptions.compositeMode = "normal";
	      return this.drawBitmap.drawStretchedBorderBitmap(rect(this.size), this.shadowBitmap, this.shadowSourceArea, this._drawOptions);
	    };

	    RectangleShadow.prototype.drawBasic = function(target, elementToTargetMatrix, compositeMode, opacity) {
	      var ref, shadowBitmap, shadowSourceArea;
	      ref = RectangleShadow.getShadowBitmapAndSourceArea(this.bitmapFactory), shadowSourceArea = ref.shadowSourceArea, shadowBitmap = ref.shadowBitmap;
	      this._drawOptions.opacity = opacity;
	      this._drawOptions.compositeMode = compositeMode;
	      this._drawOptions.hide = this._hide;
	      this._drawOptions.show = this._show;
	      if (elementToTargetMatrix.isTranslateAndScaleOnly) {
	        this._drawOptions.borderScale = this.radius / sourceShadowRadius;
	        return target.drawStretchedBorderBitmap(elementToTargetMatrix, this.paddedSize, shadowBitmap, shadowSourceArea, this._drawOptions);
	      } else {
	        this.invalidateDrawBitmap();
	        if (!this.drawBitmap) {
	          this.generateDrawBitmap();
	        }
	        return target.drawBitmap(elementToTargetMatrix, this.drawBitmap, this._drawOptions);
	      }
	    };

	    return RectangleShadow;

	  })(Base));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(266), __webpack_require__(251), __webpack_require__(165)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Text, Base, GlobalEpochCycle) {
	  var BaseObject, Color, Matrix, Point, Rectangle, TextElement, color, createWithPostCreate, globalEpochCycle, log, matrix, merge, normalizeFontOptions, point, propInternalName, propSetterName, pureMerge, rect, shallowClone;
	  log = Foundation.log, BaseObject = Foundation.BaseObject, shallowClone = Foundation.shallowClone, pureMerge = Foundation.pureMerge, merge = Foundation.merge, createWithPostCreate = Foundation.createWithPostCreate;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  normalizeFontOptions = Text.Metrics.normalizeFontOptions;
	  globalEpochCycle = GlobalEpochCycle.globalEpochCycle;
	  propInternalName = BaseObject._propInternalName;
	  propSetterName = BaseObject._propSetterName;
	  return createWithPostCreate(TextElement = (function(superClass) {
	    var validLayoutModes, validOverflows;

	    extend(TextElement, superClass);

	    TextElement.prototype.defaultSize = {
	      cs: 1
	    };

	    function TextElement() {
	      TextElement.__super__.constructor.apply(this, arguments);
	      this._textLayout = null;
	    }

	    TextElement.propertySet = function(set) {
	      var results, setName, setOptions;
	      results = [];
	      for (setName in set) {
	        setOptions = set[setName];
	        results.push((function(_this) {
	          return function(setName, setOptions) {
	            var defaultValue, definePropertyFunctionName, fn, internalName, propDefault, propDefinition, ref, setSetterName, subPropName, virtualProperties;
	            definePropertyFunctionName = setOptions.definePropertyFunctionName;
	            propDefinition = {};
	            propDefault = setOptions["default"] || {};
	            propDefinition[setName] = {
	              "default": setOptions["default"],
	              preprocess: setOptions.preprocess,
	              validate: setOptions.validate
	            };
	            _this[definePropertyFunctionName](propDefinition);
	            internalName = propInternalName(setName);
	            setSetterName = propSetterName(setName);
	            virtualProperties = {};
	            ref = setOptions["default"];
	            fn = function(subPropName) {
	              return virtualProperties[subPropName] = {
	                getter: function(o) {
	                  var ref1;
	                  return (ref1 = this[internalName]) != null ? ref1[subPropName] : void 0;
	                },
	                setter: function(v) {
	                  var newOptions, oldOptions;
	                  if ((oldOptions = this[internalName]) === (newOptions = this._pendingState[internalName])) {
	                    newOptions = shallowClone(oldOptions);
	                    newOptions[subPropName] = v;
	                    return this[setSetterName](newOptions);
	                  } else {
	                    return newOptions[subPropName] = v;
	                  }
	                }
	              };
	            };
	            for (subPropName in ref) {
	              defaultValue = ref[subPropName];
	              fn(subPropName);
	            }
	            return _this.virtualProperty(virtualProperties);
	          };
	        })(this)(setName, setOptions));
	      }
	      return results;
	    };

	    validLayoutModes = Text.Layout.validLayoutOptions.layoutMode;

	    validOverflows = Text.Layout.validLayoutOptions.overflow;

	    TextElement.propertySet({
	      font: {
	        definePropertyFunctionName: "drawLayoutProperty",
	        preprocess: function(v) {
	          return normalizeFontOptions(v);
	        },
	        "default": Text.Metrics.defaultFontOptions
	      },
	      format: {
	        definePropertyFunctionName: "drawLayoutProperty",
	        "default": Text.Layout.defaultLayoutOptions,
	        validate: function(layoutOptions) {
	          var layoutMode, overflow;
	          layoutMode = layoutOptions.layoutMode, overflow = layoutOptions.overflow;
	          return (!layoutMode || validLayoutModes[layoutMode]) && (!overflow || validOverflows[overflow]);
	        }
	      }
	    });

	    TextElement.drawLayoutProperty({
	      text: {
	        "default": Text.Layout.defaultText,
	        preprocess: function(t) {
	          return "" + t;
	        }
	      },
	      fontOptions: {
	        validate: function(v) {
	          return !v;
	        }
	      },
	      layoutOptions: {
	        validate: function(v) {
	          return !v;
	        }
	      }
	    });

	    TextElement.prototype.getBaseDrawArea = function() {
	      var ref;
	      return ((ref = this._textLayout) != null ? ref.getDrawArea() : void 0) || rect();
	    };

	    TextElement.prototype.getPendingBaseDrawArea = function() {
	      var ref;
	      return ((ref = this._textLayout) != null ? ref.getDrawArea() : void 0) || rect();
	    };

	    TextElement.prototype.customLayoutChildrenFirstPass = function(size) {
	      var ret;
	      ret = null;
	      globalEpochCycle.timePerformance("aimTL", (function(_this) {
	        return function() {
	          _this._textLayout = new Text.Layout(_this.getPendingText(), _this.getPendingFont(), _this.getPendingFormat(), size.x, size.y);
	          return ret = _this._textLayout.getSize();
	        };
	      })(this));
	      return ret;
	    };

	    TextElement.prototype.customLayoutChildrenSecondPass = function(size) {
	      this._textLayout.setWidth(size.x);
	      return this._textLayout.size;
	    };

	    TextElement.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	      return this._textLayout.draw(target, elementToTargetMatrix, pureMerge(options, {
	        layoutSize: this.getCurrentSize(),
	        color: (options != null ? options.color : void 0) || this._color
	      }));
	    };

	    TextElement.prototype.strokeShape = function(target, elementToTargetMatrix, options) {
	      return this._textLayout.stroke(target, elementToTargetMatrix, pureMerge(options, {
	        layoutSize: this.getCurrentSize(),
	        color: (options != null ? options.color : void 0) || this._color
	      }));
	    };

	    return TextElement;

	  })(Base));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(267);


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	var Text;

	module.exports = Text = __webpack_require__(268);

	Text.Layout = __webpack_require__(270);

	Text.Metrics = __webpack_require__(271);

	Text.TextLayoutFragment = __webpack_require__(272);

	Text.finishLoad(["Layout", "Metrics", "TextLayoutFragment"]);


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(269);

	module.exports = Art.Text || (Art.Text = (function(superClass) {
	  extend(Text, superClass);

	  function Text() {
	    return Text.__super__.constructor.apply(this, arguments);
	  }

	  Text.namespace = Art;

	  Text.namespacePath = "Neptune.Art.Text";

	  return Text;

	})(Neptune.Base));

	Art.addNamespace(Art.Text);


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, BaseObject, Bitmap, Foundation, Layout, Matrix, Metrics, Rectangle, ceil, emptyOptions, flatten, float32Eq, float32Eq0, floor, inspect, isNumber, log, matrix, max, merge, min, nearInfinity, nearInfinityResult, peek, point, pureMerge, rect, time, toFontCss,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(8);

	Bitmap = __webpack_require__(142).Bitmap;

	Atomic = __webpack_require__(89);

	Metrics = __webpack_require__(271);

	rect = Atomic.rect, matrix = Atomic.matrix, Matrix = Atomic.Matrix, Rectangle = Atomic.Rectangle, point = Atomic.point;

	floor = Math.floor, ceil = Math.ceil;

	log = Foundation.log, inspect = Foundation.inspect, pureMerge = Foundation.pureMerge, flatten = Foundation.flatten, BaseObject = Foundation.BaseObject, nearInfinity = Foundation.nearInfinity, nearInfinityResult = Foundation.nearInfinityResult, peek = Foundation.peek, min = Foundation.min, max = Foundation.max, merge = Foundation.merge, time = Foundation.time, isNumber = Foundation.isNumber, float32Eq = Foundation.float32Eq, float32Eq0 = Foundation.float32Eq0;

	toFontCss = Metrics.toFontCss;

	emptyOptions = {};

	module.exports = Layout = (function(superClass) {
	  var defaultLayoutOptions, defaultText, wordStringToHash;

	  extend(Layout, superClass);

	  Layout.defaultText = defaultText = "";

	  Layout.defaultLayoutOptions = defaultLayoutOptions = {
	    leading: 1.25,
	    align: point("left"),
	    layoutMode: "textualBaseline",
	    overflow: "ellipsis",
	    maxLines: void 0
	  };

	  wordStringToHash = function(wordString) {
	    var j, len, ref, ret, word;
	    ret = {};
	    ref = log(wordString.split(/\s+/));
	    for (j = 0, len = ref.length; j < len; j++) {
	      word = ref[j];
	      ret[word] = true;
	    }
	    return ret;
	  };

	  Layout.validLayoutOptions = {
	    layoutMode: wordStringToHash("textual textualBaseline tight tight0"),
	    overflow: wordStringToHash("ellipsis visible clipped")
	  };

	  function Layout(text, fontOptions, layoutOptions, layoutAreaWidth, layoutAreaHeight) {
	    if (layoutAreaWidth == null) {
	      layoutAreaWidth = nearInfinity;
	    }
	    if (layoutAreaHeight == null) {
	      layoutAreaHeight = nearInfinity;
	    }
	    if (!(isNumber(layoutAreaWidth) && isNumber(layoutAreaHeight))) {
	      throw new Error("layoutAreaWidth, layoutAreaHeight must be numbers: " + (inspect(layoutAreaHeight)));
	    }
	    this._layoutAreaWidth = layoutAreaWidth;
	    this._layoutAreaHeight = layoutAreaHeight;
	    this._fontOptions = Metrics.normalizeFontOptions(fontOptions || {});
	    this._layoutOptions = layoutOptions = pureMerge(defaultLayoutOptions, layoutOptions);
	    this._text = text || defaultText;
	    this._textLines = text.split("\n");
	    if (layoutOptions.wordWrapWidth) {
	      console.error("Art.Text.Layout#wordWrapWidth is depricated. Pass layoutAreaWidth and layoutAreaHeight into constructor.");
	    }
	    this._maxHeight = layoutOptions.maxHeight;
	    this._overflow = layoutOptions.overflow;
	    this._clipped = this._overflow === "clipped";
	    this._ellipsis = this._overflow === "ellipsis";
	    this._align = point(layoutOptions.align);
	    this._leading = layoutOptions.leading;
	    this._maxLines = layoutOptions.maxLines;
	    this._layoutMode = layoutOptions.layoutMode;
	    this._resetLayout();
	    this._left = this._right = this._top = this._bottom = 0;
	  }

	  Layout.propGetter("text", "align", "leading");

	  Layout.getter({
	    fontStyle: function() {
	      return this._fontOptions.fontStyle;
	    },
	    fontVariant: function() {
	      return this._fontOptions.fontVariant;
	    },
	    fontWeight: function() {
	      return this._fontOptions.fontWeight;
	    },
	    fontFamily: function() {
	      return this._fontOptions.fontFamily;
	    },
	    fontSize: function() {
	      return this._fontOptions.fontSize;
	    },
	    leading: function() {
	      return this._leading;
	    },
	    align: function() {
	      return this._align;
	    },
	    layoutMode: function() {
	      return this._layoutMode;
	    },
	    fragments: function() {
	      this._updateLayout();
	      return this._fragments;
	    },
	    size: function() {
	      this._updateLayout();
	      return this._size || (this._size = point(this._right - this._left, this._bottom - this._top));
	    },
	    area: function() {
	      this._updateLayout();
	      return this._area || (this._area = rect(this._left, this._top, this._right - this._left, this._bottom - this._top));
	    },
	    drawArea: function() {
	      this._updateLayout();
	      return this._drawArea || (this._drawArea = this._computeDrawArea());
	    },
	    fontCss: function() {
	      return this._fontCss || (this._fontCss = toFontCss(this._fontOptions));
	    },
	    lineCount: function() {
	      this._updateLayout();
	      return this._fragments.length;
	    }
	  });

	  Layout.prototype._getFragmentLogicalAreas = function(layoutHeight) {
	    var j, layoutArea, len, ref, results;
	    ref = this.fragments;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      layoutArea = ref[j].layoutArea;
	      results.push(layoutArea);
	    }
	    return results;
	  };

	  Layout.prototype.draw = function(target, where, options) {
	    var context;
	    if (options == null) {
	      options = emptyOptions;
	    }
	    context = target.context2D;
	    if (!context) {
	      return this.drawToNonArtBitmap(target, where, options);
	    }
	    this._updateLayout();
	    if (target._setupDraw(where, options)) {
	      context.font = this.getFontCss();
	      context.textAlign = 'left';
	      context.textBaseline = 'alphabetic';
	      if (options.stroke) {
	        this._strokeAllFragments(context);
	      } else {
	        this._fillAllFragments(context);
	      }
	      return target._cleanupDraw(options);
	    }
	  };

	  Layout.prototype.stroke = function(target, where, options) {
	    if (options == null) {
	      options = emptyOptions;
	    }
	    return this.draw(target, where, merge(options, {
	      stroke: true
	    }));
	  };

	  Layout.prototype.drawToNonArtBitmap = function(target, where, options) {
	    var bitmap2D, scale;
	    if (options == null) {
	      options = emptyOptions;
	    }
	    scale = where.exactScale;
	    bitmap2D = new Bitmap(this.getSize().mul(scale));
	    this.draw(bitmap2D, Matrix.scale(scale), options);
	    return target.drawBitmap(Matrix.scale(scale.inv).mul(where), bitmap2D);
	  };

	  Layout.prototype.newBitmap = function(options) {
	    var scale, size;
	    if (options == null) {
	      options = emptyOptions;
	    }
	    size = options.size || this.getSize();
	    if (scale = options.scale) {
	      size = size.mul(scale);
	    }
	    return new Bitmap(size);
	  };

	  Layout.prototype.toBitmap = function(options) {
	    var bitmap, drawMatrix, scale;
	    if (options == null) {
	      options = emptyOptions;
	    }
	    drawMatrix = options.drawMatrix || new Matrix;
	    if (scale = options.scale) {
	      drawMatrix = drawMatrix.mul(Matrix.scale(scale));
	    }
	    bitmap = this.newBitmap(options);
	    this.draw(bitmap, drawMatrix, options);
	    return bitmap;
	  };

	  Layout.prototype._fillAllFragments = function(context) {
	    var frag, j, len, ref, results;
	    ref = this.fragments;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      frag = ref[j];
	      results.push(context.fillText(frag.text, frag.getTextX(), frag.getTextY()));
	    }
	    return results;
	  };

	  Layout.prototype._strokeAllFragments = function(context) {
	    var frag, j, len, ref, results;
	    ref = this.fragments;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      frag = ref[j];
	      results.push(context.strokeText(frag.text, frag.getTextX(), frag.getTextY()));
	    }
	    return results;
	  };

	  Layout.prototype._drawFragmentAreas = function(context) {
	    var fontSize, frag, j, layoutArea, len, ref, results;
	    fontSize = this.getFontSize();
	    ref = this.fragments;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      frag = ref[j];
	      layoutArea = frag.layoutArea;
	      results.push(context.fillRect(layoutArea.x, layoutArea.y, layoutArea.w, layoutArea.h));
	    }
	    return results;
	  };

	  Layout.prototype._computeDrawArea = function() {
	    var bottom, fragment, fragments, i, j, left, len, right, top;
	    fragments = this.fragments;
	    if (fragments.length === 1) {
	      return fragments[0].alignedDrawArea;
	    } else {
	      left = top = right = bottom = 0;
	      for (i = j = 0, len = fragments.length; j < len; i = ++j) {
	        fragment = fragments[i];
	        if (i === 0) {
	          left = fragment.getAlignedDrawAreaLeft();
	          top = fragment.getAlignedDrawAreaTop();
	          right = fragment.getAlignedDrawAreaRight();
	          bottom = fragment.getAlignedDrawAreaBottom();
	        } else {
	          left = min(left, fragment.getAlignedDrawAreaLeft());
	          top = min(top, fragment.getAlignedDrawAreaTop());
	          right = max(right, fragment.getAlignedDrawAreaRight());
	          bottom = max(bottom, fragment.getAlignedDrawAreaBottom());
	        }
	      }
	      return new Rectangle(left, top, right - left, bottom - top);
	    }
	  };

	  Layout.prototype._alignFragments = function() {
	    var _align, _layoutAreaHeight, _layoutAreaWidth, area, frag, j, len, offsetY, ref, results, xAlign, yAlign;
	    _layoutAreaWidth = this._layoutAreaWidth, _layoutAreaHeight = this._layoutAreaHeight, _align = this._align, area = this.area;
	    xAlign = _align.x;
	    yAlign = _align.y;
	    if (_layoutAreaWidth >= nearInfinityResult) {
	      xAlign = 0;
	    }
	    if (_layoutAreaHeight >= nearInfinityResult) {
	      yAlign = 0;
	    }
	    offsetY = (_layoutAreaHeight - area.h) * yAlign;
	    if (float32Eq0(offsetY) && float32Eq0(xAlign)) {
	      return;
	    }
	    ref = this.fragments;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      frag = ref[j];
	      frag.alignmentOffsetX = (_layoutAreaWidth - frag.layoutW) * xAlign;
	      results.push(frag.alignmentOffsetY = offsetY);
	    }
	    return results;
	  };

	  Layout.prototype._setArea = function(fragment) {
	    this._top = fragment.getTop();
	    this._left = fragment.getLeft();
	    this._bottom = fragment.getBottom();
	    return this._right = fragment.getRight();
	  };

	  Layout.prototype._expandArea = function(fragment) {
	    this._top = min(this._top, fragment.getTop());
	    this._left = min(this._left, fragment.getLeft());
	    this._bottom = max(this._bottom, fragment.getBottom());
	    return this._right = max(this._right, fragment.getRight());
	  };

	  Layout.prototype._generateFragments = function() {
	    var _fontOptions, _layoutAreaWidth, _layoutMode, _textLines, fontCss, fragment, fragments, text, wrappedFragments;
	    _fontOptions = this._fontOptions, _layoutAreaWidth = this._layoutAreaWidth, _layoutMode = this._layoutMode, _textLines = this._textLines, _fontOptions = this._fontOptions;
	    fontCss = this.getFontCss();
	    return this._fragments = (function() {
	      var j, k, l, len, len1, len2, results;
	      if (_layoutAreaWidth < nearInfinityResult && (_layoutMode === "textual" || _layoutMode === "textualBaseline")) {
	        fragments = [];
	        for (j = 0, len = _textLines.length; j < len; j++) {
	          text = _textLines[j];
	          wrappedFragments = Metrics.wrap(text, _fontOptions, _layoutAreaWidth, fontCss, _layoutMode);
	          for (k = 0, len1 = wrappedFragments.length; k < len1; k++) {
	            fragment = wrappedFragments[k];
	            fragments.push(fragment);
	          }
	        }
	        return fragments;
	      } else {
	        results = [];
	        for (l = 0, len2 = _textLines.length; l < len2; l++) {
	          text = _textLines[l];
	          results.push(Metrics.get(text, _fontOptions, _layoutMode, fontCss));
	        }
	        return results;
	      }
	    })();
	  };

	  Layout.prototype._layoutFragments = function() {
	    var _clipped, _ellipsis, _layoutAreaHeight, _layoutAreaWidth, _maxLines, allFragments, effectiveLeading, fragment, i, j, len, m, offsetX, offsetY, ref, text, textWithEllipsis;
	    _layoutAreaWidth = this._layoutAreaWidth, _layoutAreaHeight = this._layoutAreaHeight, _maxLines = this._maxLines, _clipped = this._clipped, _ellipsis = this._ellipsis;
	    offsetX = 0;
	    offsetY = 0;
	    effectiveLeading = this.getFontSize() * this.getLeading();
	    allFragments = this._fragments;
	    if (_maxLines && _maxLines < this._fragments.length) {
	      this._fragments = this._fragments.slice(0, _maxLines);
	    }
	    ref = this._fragments;
	    for (i = j = 0, len = ref.length; j < len; i = ++j) {
	      fragment = ref[i];
	      fragment.move(offsetX, offsetY);
	      if (i === 0) {
	        this._setArea(fragment);
	      } else {
	        if (_clipped) {
	          if (fragment.getTop() - this._top > _layoutAreaHeight) {
	            this._fragments = this._fragments.slice(0, i);
	            break;
	          }
	        } else if (_ellipsis) {
	          if (fragment.getBottom() - this._top > _layoutAreaHeight) {
	            this._fragments = this._fragments.slice(0, i);
	            break;
	          }
	        }
	        this._expandArea(fragment);
	      }
	      offsetY += effectiveLeading;
	    }
	    if (_ellipsis && this._fragments.length < allFragments.length) {
	      text = peek(this._fragments).text;
	      if (text[text.length - 1] === ".") {
	        text = text.slice(0, text.length - 1);
	      }
	      textWithEllipsis = text + "…";
	      while (text.length > 0 && (m = Metrics.get(textWithEllipsis, this._fontOptions, this._layoutMode, this.getFontCss())).layoutW > _layoutAreaWidth) {
	        text = text.slice(0, text.length - 1);
	        textWithEllipsis = text + "…";
	      }
	      m.setLayoutLocationFrom(peek(this._fragments));
	      this._fragments[this._fragments.length - 1] = m;
	      return this._expandArea(m);
	    }
	  };

	  Layout.prototype._resetLayout = function() {
	    return this._fragments = this._area = this._size = this._drawArea = null;
	  };

	  Layout.prototype._updateLayout = function() {
	    if (this._fragments) {
	      return;
	    }
	    this._resetLayout();
	    this._generateFragments();
	    this._layoutFragments();
	    return this._alignFragments();
	  };

	  Layout.setter({
	    width: function(width) {
	      this._updateLayout();
	      if (!float32Eq(width, this._layoutAreaWidth)) {
	        this._layoutAreaWidth = width;
	        this._area = null;
	        this._size = null;
	        this._drawArea = null;
	        this._alignFragments();
	      }
	      return null;
	    }
	  });

	  return Layout;

	})(BaseObject);


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	#TODO

	refactor to an object you create
	if either tight or tight0 are requested, calculate both
	for textual, have two areas:
	  textualArea - the current area we compute based on font-size and glyph width
	  textualDrawArea - a pessimistic, but always true, area that covers all pixels
	    since we have no concrete information on this, we'll just make it something like 2x textualArea - or more
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(142), __webpack_require__(272)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, TextLayoutFragment) {
	  var Rectangle, allIndexes, ceil, clone, eachMatch, floor, inspect, isObject, isString, log, logL, max, min, pixelChannel, pixelStep, point, point0, rect, tightThreshold;
	  point = Atomic.point, rect = Atomic.rect, point0 = Atomic.point0, Rectangle = Atomic.Rectangle;
	  log = Foundation.log, logL = Foundation.logL, inspect = Foundation.inspect, max = Foundation.max, min = Foundation.min, isObject = Foundation.isObject, isString = Foundation.isString, allIndexes = Foundation.allIndexes, eachMatch = Foundation.eachMatch, clone = Foundation.clone;
	  floor = Math.floor, ceil = Math.ceil;
	  pixelChannel = 3;
	  pixelStep = 4;
	  tightThreshold = 127;
	  return Text.Metrics = (function(superClass) {
	    var blankString, defaultFontOptions, noBreaksWrapIndex, tempRectangleToCapturePessimisticDrawArea, toFontCss;

	    extend(Metrics, superClass);

	    function Metrics() {
	      return Metrics.__super__.constructor.apply(this, arguments);
	    }

	    Metrics.defaultFontSizeProportionalDrawAreaPadding = .45;

	    Metrics.defaultFontOptions = defaultFontOptions = {
	      fontStyle: 'normal',
	      fontVariant: 'normal',
	      fontWeight: 'normal',
	      fontSize: 16,
	      fontFamily: 'Times'
	    };

	    Metrics.toFontCss = toFontCss = function(fontOptions) {
	      return (fontOptions.fontStyle || 'normal') + " " + (fontOptions.fontVariant || 'normal') + " " + (fontOptions.fontWeight || 'normal') + " " + (fontOptions.fontSize || 16) + "px " + (fontOptions.fontFamily || 'Times') + ", Times";
	    };

	    Metrics.normalizeFontOptions = function(fontOptions) {
	      fontOptions.fontStyle || (fontOptions.fontStyle = defaultFontOptions.fontStyle);
	      fontOptions.fontVariant || (fontOptions.fontVariant = defaultFontOptions.fontVariant);
	      fontOptions.fontWeight || (fontOptions.fontWeight = defaultFontOptions.fontWeight);
	      fontOptions.fontSize || (fontOptions.fontSize = defaultFontOptions.fontSize);
	      fontOptions.fontFamily || (fontOptions.fontFamily = defaultFontOptions.fontFamily);
	      return fontOptions;
	    };

	    Metrics.get = function(text, fontOptions, layoutMode, fontCss) {
	      if (fontOptions == null) {
	        fontOptions = {};
	      }
	      switch (layoutMode) {
	        case null:
	        case void 0:
	        case "textual":
	          return this._getTextualFontMetrics(text, fontOptions, null, fontCss);
	        case "textualBaseline":
	          return this._getTextualFontMetrics(text, fontOptions, null, fontCss, false);
	        case "tight":
	          return this._getTightFontMetrics(text, 127, fontOptions, fontCss);
	        case "tight0":
	          return this._getTightFontMetrics(text, 0, fontOptions, fontCss);
	        default:
	          throw new Error("invalid layoutMode: " + (inspect(layoutMode)));
	      }
	    };

	    Metrics.getWidth = function(text, fontOptions, fontCss) {
	      var context;
	      context = Metrics.getScratchCanvasBitmap().context;
	      context.font = fontCss || toFontCss(fontOptions);
	      return context.measureText(text).width;
	    };

	    Metrics._wrapOnce = function(context, text, wordWrapWidth) {
	      if (context.measureText(text).width <= wordWrapWidth) {
	        return [text, null];
	      }
	    };

	    Metrics._noBreaksWrapIndex = noBreaksWrapIndex = function(context, text, wordWrapWidth) {
	      var left, leftPixelWidth, leftSlice, m, right, sliced, width;
	      left = 0;
	      leftPixelWidth = 0;
	      leftSlice = null;
	      right = text.length;
	      while (right - left > 1) {
	        m = (left + right) / 2 | 0;
	        if ((width = context.measureText(sliced = text.slice(0, m)).width) > wordWrapWidth) {
	          right = m;
	        } else {
	          leftSlice = sliced;
	          leftPixelWidth = width;
	          left = m;
	        }
	      }
	      if (!leftSlice) {
	        leftSlice = text.slice(0, 1);
	        leftPixelWidth = context.measureText(leftSlice).width;
	      }
	      return [leftPixelWidth, leftSlice];
	    };

	    blankString = "";

	    Metrics.wrap = function(text, fontOptions, wordWrapWidth, fontCss, layoutMode) {
	      var areaIncludesDescender, context, line, linePixelWidth, lines, nextLine, trailingSpace, trailingSpacePixelWidth;
	      if (layoutMode == null) {
	        layoutMode = "textual";
	      }
	      if (text === "") {
	        return [this._getTextualFontMetrics("", fontOptions, 0, fontCss)];
	      }
	      if (wordWrapWidth < 0) {
	        wordWrapWidth = 0;
	      }
	      areaIncludesDescender = layoutMode === "textual";
	      context = this.getScratchCanvasBitmap().context;
	      context.font = fontCss;
	      linePixelWidth = 0;
	      lines = [];
	      line = blankString;
	      trailingSpace = blankString;
	      trailingSpacePixelWidth = 0;
	      nextLine = (function(_this) {
	        return function() {
	          if (linePixelWidth > 0) {
	            lines.push(_this._getTextualFontMetrics(line, fontOptions, linePixelWidth, fontCss, areaIncludesDescender));
	            line = blankString;
	            linePixelWidth = 0;
	            trailingSpace = blankString;
	            return trailingSpacePixelWidth = 0;
	          }
	        };
	      })(this);
	      eachMatch(text, /(\s*[^\s]+)(\s*)/g, function(result) {
	        var _, firstHalfText, pixelWidth, ref, space, whiteSpaceLength, whiteSpacePixelWidth, word, wordLength, wordPixelWidth, wordStart;
	        wordStart = result.index;
	        _ = result[0], word = result[1], space = result[2];
	        wordLength = word.length;
	        whiteSpaceLength = space.length;
	        whiteSpacePixelWidth = context.measureText(space).width;
	        wordPixelWidth = context.measureText(word).width;
	        if (wordPixelWidth > wordWrapWidth) {
	          while (wordPixelWidth > wordWrapWidth) {
	            nextLine();
	            ref = noBreaksWrapIndex(context, word, wordWrapWidth), pixelWidth = ref[0], firstHalfText = ref[1];
	            line = firstHalfText;
	            linePixelWidth = pixelWidth;
	            word = word.slice(firstHalfText.length, word.length);
	            wordPixelWidth = context.measureText(word).width;
	          }
	          nextLine();
	          line = word;
	          linePixelWidth = wordPixelWidth;
	        } else if (trailingSpacePixelWidth + linePixelWidth + wordPixelWidth > wordWrapWidth) {
	          nextLine();
	          line = word;
	          linePixelWidth = wordPixelWidth;
	        } else {
	          line += trailingSpace + word;
	          linePixelWidth += trailingSpacePixelWidth + wordPixelWidth;
	        }
	        trailingSpace = space;
	        return trailingSpacePixelWidth = whiteSpacePixelWidth;
	      });
	      nextLine();
	      return lines;
	    };

	    Metrics._tightFontMetricCache = {};

	    Metrics._getTightFontMetrics = function(text, tightThreshold, fontOptions, fontCss) {
	      var base, previousResult, tightFontMetricCacheKey;
	      tightFontMetricCacheKey = text + ":" + tightThreshold + ":" + (fontCss || toFontCss(fontOptions));
	      previousResult = (base = this._tightFontMetricCache)[tightFontMetricCacheKey] || (base[tightFontMetricCacheKey] = this._generateTightFontMetrics(text, tightThreshold, fontOptions, fontCss));
	      return previousResult.clone();
	    };

	    tempRectangleToCapturePessimisticDrawArea = new Rectangle;

	    Metrics._generateTightFontMetrics = function(text, tightThreshold, fontOptions, fontCss) {
	      var area, ascender, bottom, data, descender, layoutAreaIsDrawArea, layoutH, layoutW, left, location, padding, ref, ref1, right, scratchBitmap, size, textOffsetX, textOffsetY, top;
	      padding = Metrics.defaultFontSizeProportionalDrawAreaPadding * 2;
	      ref = this.renderTextToScratchBitmap(text, fontOptions, padding), scratchBitmap = ref[0], size = ref[1], location = ref[2];
	      data = scratchBitmap.context.getImageData(0, 0, size.x, size.y).data;
	      while (!this.checkBorder(data, size)) {
	        this.log("Art.Text.Metrics#_generateTightFontMetrics: " + (inspect(fontOptions, 1)) + ", padding: " + padding + " too small. scratchBitmap.size: " + scratchBitmap.size);
	        padding *= 2;
	        ref1 = this.renderTextToScratchBitmap(text, fontOptions, padding), scratchBitmap = ref1[0], size = ref1[1], location = ref1[2];
	        data = scratchBitmap.context.getImageData(0, 0, size.x, size.y).data;
	      }
	      top = this.calculateTop(data, size, tightThreshold);
	      left = this.calculateLeft(data, size, tightThreshold);
	      right = this.calculateRight(data, size, tightThreshold);
	      bottom = this.calculateBottom(data, size, tightThreshold);
	      textOffsetX = location.x - left;
	      textOffsetY = location.y - top;
	      layoutW = right - left + 1;
	      layoutH = bottom - top + 1;
	      area = rect(left - location.x, top - location.y, right - left + 1, bottom - top + 1);
	      ascender = location.y - top + 1;
	      descender = bottom - location.y;
	      layoutAreaIsDrawArea = false;
	      if (tightThreshold === 0) {
	        layoutAreaIsDrawArea = true;
	      } else {
	        this.pessimisticDrawArea(layoutW, fontOptions, tempRectangleToCapturePessimisticDrawArea);
	      }
	      return new TextLayoutFragment(text, fontOptions, ascender, descender, textOffsetX, textOffsetY, layoutW, layoutH, layoutAreaIsDrawArea ? 0 : tempRectangleToCapturePessimisticDrawArea.x, layoutAreaIsDrawArea ? 0 : tempRectangleToCapturePessimisticDrawArea.y, layoutAreaIsDrawArea ? layoutW : tempRectangleToCapturePessimisticDrawArea.w, layoutAreaIsDrawArea ? layoutH : tempRectangleToCapturePessimisticDrawArea.h);
	    };

	    Metrics._getTextualFontMetrics = function(text, fontOptions, alreadyComputedTextWidth, fontCss, areaIncludesDescender) {
	      var area, ascender, descender, fontSize, width;
	      if (areaIncludesDescender == null) {
	        areaIncludesDescender = true;
	      }
	      fontSize = fontOptions.fontSize - 0;
	      ascender = .75 * fontSize;
	      descender = .25 * fontSize;
	      width = alreadyComputedTextWidth != null ? alreadyComputedTextWidth : this.getWidth(text, fontOptions, fontCss);
	      area = rect(0, descender - fontSize, width, fontSize - (areaIncludesDescender ? 0 : descender));
	      this.pessimisticDrawArea(width, fontOptions, tempRectangleToCapturePessimisticDrawArea);
	      return new TextLayoutFragment(text, fontOptions, ascender, descender, -area.x, -area.y, area.w, area.h, tempRectangleToCapturePessimisticDrawArea.x, tempRectangleToCapturePessimisticDrawArea.y, tempRectangleToCapturePessimisticDrawArea.w, tempRectangleToCapturePessimisticDrawArea.h);
	    };

	    Metrics.classGetter({
	      scratchCanvasBitmap: function() {
	        return this._scratchCanvasBitmap || (this._scratchCanvasBitmap = new Canvas.Bitmap(point(10, 10)));
	      }
	    });

	    Metrics.calculateTop = function(data, size, tightThreshold) {
	      var lineStep, pos;
	      lineStep = size.x * pixelStep;
	      pos = pixelChannel;
	      while (pos < data.length && data[pos] <= tightThreshold) {
	        pos += pixelStep;
	      }
	      return floor(pos / lineStep);
	    };

	    Metrics.calculateBottom = function(data, size, tightThreshold) {
	      var lineStep, pos;
	      lineStep = size.x * pixelStep;
	      pos = data.length + pixelChannel - pixelStep;
	      while (pos > 0 && data[pos] <= tightThreshold) {
	        pos -= pixelStep;
	      }
	      return floor(pos / lineStep);
	    };

	    Metrics.calculateLeft = function(data, size, tightThreshold) {
	      var length, lineStep, pos, posX;
	      lineStep = size.x * pixelStep;
	      length = data.length;
	      posX = pixelStep + pixelChannel;
	      while (posX < lineStep) {
	        pos = posX;
	        while (pos < length) {
	          if (data[pos] > tightThreshold) {
	            return floor(posX / pixelStep);
	          }
	          pos += lineStep;
	        }
	        posX += pixelStep;
	      }
	    };

	    Metrics.calculateRight = function(data, size, tightThreshold) {
	      var length, lineStep, pos, posX;
	      lineStep = size.x * pixelStep;
	      length = data.length;
	      posX = lineStep - 2 * pixelStep + pixelChannel;
	      while (posX > 0) {
	        pos = posX;
	        while (pos < length) {
	          if (data[pos] > tightThreshold) {
	            return floor(posX / pixelStep);
	          }
	          pos += lineStep;
	        }
	        posX -= pixelStep;
	      }
	    };

	    Metrics.topAndBottomCheck = function(data, size) {
	      var lineStep, posX, topBottomStep;
	      lineStep = size.x * pixelStep;
	      posX = pixelChannel;
	      topBottomStep = (size.y - 1) * lineStep;
	      while (posX < lineStep) {
	        if (data[posX] || data[posX + topBottomStep]) {
	          return false;
	        }
	        posX += pixelStep;
	      }
	      return true;
	    };

	    Metrics.leftAndRightCheck = function(data, size) {
	      var leftRightStep, lineStep, posY;
	      lineStep = size.x * pixelStep;
	      posY = pixelChannel + lineStep;
	      leftRightStep = lineStep - pixelStep;
	      while (posY < data.length) {
	        if (data[posY] || data[posY + leftRightStep]) {
	          return false;
	        }
	        posY += lineStep;
	      }
	      return true;
	    };

	    Metrics.checkBorder = function(data, size) {
	      return this.topAndBottomCheck(data, size) && this.leftAndRightCheck(data, size);
	    };

	    Metrics.pessimisticDrawArea = function(textWidth, fontOptions, intoRectangle, increasedFontSizeProportionalDrawAreaPadding) {
	      var fontSize, h, padding, w, x, y;
	      fontSize = fontOptions.fontSize;
	      padding = fontSize * (increasedFontSizeProportionalDrawAreaPadding || fontOptions.padding || Metrics.defaultFontSizeProportionalDrawAreaPadding);
	      x = Math.floor(-padding);
	      y = Math.floor(-padding);
	      w = Math.ceil(x + textWidth + padding * 2) - x;
	      h = Math.ceil(y + fontSize + padding * 2) - y;
	      if (intoRectangle) {
	        intoRectangle.x = x;
	        intoRectangle.y = y;
	        intoRectangle.w = w;
	        intoRectangle.h = h;
	        return intoRectangle;
	      } else {
	        return rect(x, y, w, h);
	      }
	    };

	    Metrics._scratchBitmap = null;

	    Metrics.renderTextToScratchBitmap = function(text, fontOptions, padding) {
	      var context, drawArea, ref, scratchBitmapSize, size, x, y;
	      drawArea = this.pessimisticDrawArea(this.getWidth(text, fontOptions), fontOptions, null, padding);
	      size = drawArea.size.size;
	      scratchBitmapSize = ((ref = this._scratchBitmap) != null ? ref.size : void 0) || point0;
	      if (!scratchBitmapSize.gt(size)) {
	        this._scratchBitmap = new Canvas.Bitmap(scratchBitmapSize.max(size));
	      } else {
	        this._scratchBitmap.clear();
	      }
	      context = this._scratchBitmap.context;
	      context.textAlign = 'left';
	      context.textBaseline = 'alphabetic';
	      context.font = toFontCss(fontOptions);
	      context.fillText(text, x = -drawArea.x, y = -drawArea.y);
	      return [this._scratchBitmap, size, point(x, y)];
	    };

	    Metrics.debug = function(area, bitmap, location, options) {
	      var image;
	      image = new Canvas.Bitmap(bitmap.size);
	      image.clear("white");
	      image.drawRectangle(location, area, "#ddf");
	      image.drawRectangle(location, rect(area.location.x, 0, area.size.x, 1), "red");
	      image.drawRectangle(location, rect(0, area.location.y, 1, area.size.y), "green");
	      image.drawBitmap(point(), bitmap);
	      return this.log(image, {
	        layoutMode: options.layoutMode
	      });
	    };

	    return Metrics;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	#TODO

	refactor to an object you create
	if either tight or tight0 are requested, calculate both
	for textual, have two areas:
	  textualArea - the current area we compute based on font-size and glyph width
	  textualDrawArea - a pessimistic, but always true, area that covers all pixels
	    since we have no concrete information on this, we'll just make it something like 2x textualArea - or more
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(142)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas) {
	  var BaseObject, TextLayoutFragment, inspect, log, point, point0, rect;
	  point = Atomic.point, rect = Atomic.rect, point0 = Atomic.point0;
	  log = Foundation.log, BaseObject = Foundation.BaseObject, inspect = Foundation.inspect;
	  return TextLayoutFragment = (function(superClass) {
	    extend(TextLayoutFragment, superClass);

	    function TextLayoutFragment(text, font, ascender, descender, textOffsetX, textOffsetY, layoutW, layoutH, drawAreaX, drawAreaY, drawAreaW, drawAreaH) {
	      this.text = text;
	      this.font = font;
	      this.ascender = ascender;
	      this.descender = descender;
	      this.textOffsetX = textOffsetX;
	      this.textOffsetY = textOffsetY;
	      this.layoutW = layoutW;
	      this.layoutH = layoutH;
	      this.drawAreaX = drawAreaX;
	      this.drawAreaY = drawAreaY;
	      this.drawAreaW = drawAreaW;
	      this.drawAreaH = drawAreaH;
	      this.layoutX = this.layoutY = 0;
	      this.alignmentOffsetX = 0;
	      this.alignmentOffsetY = 0;
	    }

	    TextLayoutFragment.prototype.toString = function() {
	      return inspect(this.toPlainObject());
	    };

	    TextLayoutFragment.prototype.toPlainObject = function() {
	      return {
	        text: this.text,
	        font: this.font,
	        ascender: this.ascender,
	        descender: this.descender,
	        textOffsetX: this.textOffsetX,
	        textOffsetY: this.textOffsetY,
	        layoutX: this.layoutX,
	        layoutY: this.layoutY,
	        layoutW: this.layoutW,
	        layoutH: this.layoutH,
	        drawAreaX: this.drawAreaX,
	        drawAreaY: this.drawAreaY,
	        drawAreaW: this.drawAreaW,
	        drawAreaH: this.drawAreaH,
	        alignmentOffsetX: this.alignmentOffsetX,
	        alignmentOffsetY: this.alignmentOffsetY
	      };
	    };

	    TextLayoutFragment.prototype.clone = function() {
	      return new TextLayoutFragment(this.text, this.font, this.ascender, this.descender, this.textOffsetX, this.textOffsetY, this.layoutW, this.layoutH, this.drawAreaX, this.drawAreaY, this.drawAreaW, this.drawAreaH);
	    };

	    TextLayoutFragment.prototype.move = function(x, y) {
	      this.moveX(x);
	      return this.moveY(y);
	    };

	    TextLayoutFragment.prototype.moveX = function(x) {
	      this.layoutX += x;
	      return this.drawAreaX += x;
	    };

	    TextLayoutFragment.prototype.moveY = function(y) {
	      this.layoutY += y;
	      return this.drawAreaY += y;
	    };

	    TextLayoutFragment.prototype.setLayoutLocationFrom = function(fragment) {
	      this.layoutX = fragment.layoutX;
	      return this.layoutY = fragment.layoutY;
	    };

	    TextLayoutFragment.getter({
	      left: function() {
	        return this.getAlignedLayoutX();
	      },
	      top: function() {
	        return this.getAlignedLayoutY();
	      },
	      bottom: function() {
	        return this.getAlignedLayoutY() + this.layoutH;
	      },
	      right: function() {
	        return this.getAlignedLayoutX() + this.layoutW;
	      },
	      alignedLayoutX: function() {
	        return this.layoutX + this.alignmentOffsetX;
	      },
	      alignedLayoutY: function() {
	        return this.layoutY + this.alignmentOffsetY;
	      },
	      alignedDrawAreaX: function() {
	        return this.drawAreaX + this.alignmentOffsetX;
	      },
	      alignedDrawAreaY: function() {
	        return this.drawAreaY + this.alignmentOffsetY;
	      },
	      layoutArea: function() {
	        return rect(this.layoutX, this.layoutY, this.layoutW, this.layoutH);
	      },
	      alignedLayoutArea: function() {
	        return rect(this.getAlignedLayoutX(), this.getAlignedLayoutY(), this.layoutW, this.layoutH);
	      },
	      alignedDrawArea: function() {
	        return rect(this.getAlignedDrawAreaX(), this.getAlignedDrawAreaY(), this.drawAreaW, this.drawAreaH);
	      },
	      alignedDrawAreaLeft: function() {
	        return this.getAlignedDrawAreaX();
	      },
	      alignedDrawAreaTop: function() {
	        return this.getAlignedDrawAreaY();
	      },
	      alignedDrawAreaRight: function() {
	        return this.getAlignedDrawAreaX() + this.drawAreaW;
	      },
	      alignedDrawAreaBottom: function() {
	        return this.getAlignedDrawAreaY() + this.drawAreaH;
	      },
	      area: function() {
	        console.error("TextLayoutFragment.area is DEPRICATED. Use: TextLayoutFragment#layoutArea");
	        return rect(this.layoutX - this.textOffsetX, this.layoutY - this.textOffsetY, this.layoutW, this.layoutH);
	      },
	      textX: function() {
	        return this.layoutX + this.textOffsetX + this.alignmentOffsetX;
	      },
	      textY: function() {
	        return this.layoutY + this.textOffsetY + this.alignmentOffsetY;
	      }
	    });

	    return TextLayoutFragment;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	var File;

	module.exports = File = __webpack_require__(274);

	File.Model = __webpack_require__(275);

	File.V1Loader = __webpack_require__(276);

	File.finishLoad(["Model", "V1Loader"]);


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.File || (Engine.File = (function(superClass) {
	  extend(File, superClass);

	  function File() {
	    return File.__super__.constructor.apply(this, arguments);
	  }

	  File.namespace = Engine;

	  File.namespacePath = "Neptune.Art.Engine.File";

	  return File;

	})(Neptune.Base));

	Engine.addNamespace(Engine.File);


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	var Model,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	module.exports = Model = (function(superClass) {
	  extend(Model, superClass);

	  function Model() {
	    return Model.__super__.constructor.apply(this, arguments);
	  }

	  return Model;

	})(__webpack_require__(150));


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(89), __webpack_require__(142), __webpack_require__(277), __webpack_require__(113), __webpack_require__(245), __webpack_require__(275)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Xbd, Core, Elements, Model) {
	  var BaseObject, Binary, Element, EncodedImage, StateEpoch, V1Loader, compositeModes, inspect, layoutModes, matrix, point, rect, stateEpoch, supportedCompositeModes;
	  Binary = Foundation.Binary, inspect = Foundation.inspect, BaseObject = Foundation.BaseObject;
	  point = Atomic.point, rect = Atomic.rect, matrix = Atomic.matrix;
	  EncodedImage = Binary.EncodedImage;
	  Element = Core.Element, StateEpoch = Core.StateEpoch;
	  stateEpoch = StateEpoch.stateEpoch;
	  compositeModes = {
	    normal: 0,
	    add: 1,
	    sub: 2,
	    mul: 3,
	    destOver: 4,
	    replace: 5,
	    alphaMask: 6,
	    inverseAlphaMask: 7,
	    erase: 8,
	    0: "normal",
	    1: "add",
	    2: "sub",
	    3: "mul",
	    4: "destOver",
	    5: "replace",
	    6: "alphaMask",
	    7: "inverseAlphaMask",
	    8: "erase"
	  };
	  supportedCompositeModes = {
	    normal: "normal",
	    add: "add"
	  };
	  layoutModes = {
	    leftAddWidthFixed: 0,
	    rightAddWidthFixed: 1,
	    centeredWidthFixed: 2,
	    leftAddWidthChildren: 3,
	    rightAddWidthChildren: 4,
	    centeredWidthChildren: 5,
	    bothAdd: 6,
	    bothMul: 7,
	    bothStretch: 8,
	    0: "leftAddWidthFixed",
	    1: "rightAddWidthFixed",
	    2: "centeredWidthFixed",
	    3: "leftAddWidthChildren",
	    4: "rightAddWidthChildren",
	    5: "centeredWidthChildren",
	    6: "bothAdd",
	    7: "bothMul",
	    8: "bothStretch"
	  };
	  return V1Loader = (function(superClass) {
	    extend(V1Loader, superClass);

	    function V1Loader(bitmapFactory) {
	      this.bitmapFactory = bitmapFactory;
	    }

	    V1Loader.prototype.load = function(data, callBack) {
	      var topTag, xbd;
	      xbd = Xbd.parse(data);
	      topTag = xbd.tag("art_file");
	      return this.decodeTopTag(topTag, (function(_this) {
	        return function(artFile) {
	          var child;
	          artFile.axis = point();
	          artFile.location = point();
	          artFile.children = (function() {
	            var i, len, ref, results;
	            ref = artFile.getPendingChildren();
	            results = [];
	            for (i = 0, len = ref.length; i < len; i++) {
	              child = ref[i];
	              if (!child.getPendingIsMask()) {
	                results.push(child);
	              }
	            }
	            return results;
	          })();
	          artFile.bitmapFactory = _this.bitmapFactory;
	          return stateEpoch.onNextReady(function() {
	            return callBack(artFile);
	          });
	        };
	      })(this));
	    };

	    V1Loader.objectFactory = {
	      art_file: function() {
	        return new Model;
	      },
	      pego: function() {
	        return new Element;
	      },
	      art_stencil_shape: function() {
	        return new Element;
	      },
	      art_bitmap: function(tag, loader) {
	        var bitmap, bitmap_id;
	        bitmap_id = tag.attributes["bitmap_id"];
	        bitmap = loader.bitmaps[bitmap_id];
	        return new Elements.Bitmap({
	          bitmap: bitmap
	        });
	      }
	    };

	    V1Loader.prototype.decodeBitmaps = function(bitmaps, keys, index, callBack) {
	      var key;
	      if (index >= keys.length) {
	        return callBack(bitmaps);
	      }
	      key = keys[index];
	      return EncodedImage.toImage(bitmaps[key], (function(_this) {
	        return function(decodedBitmap) {
	          bitmaps[key] = _this.bitmapFactory ? _this.bitmapFactory.newBitmap(decodedBitmap) : new Canvas.Bitmap(decodedBitmap);
	          return _this.decodeBitmaps(bitmaps, keys, index + 1, callBack);
	        };
	      })(this));
	    };

	    V1Loader.prototype.decodeBitmapsTag = function(bitmapsTag, callBack) {
	      var bitmapData, bitmaps, i, id, len, ref, tag;
	      bitmaps = {};
	      ref = bitmapsTag.tags;
	      for (i = 0, len = ref.length; i < len; i++) {
	        tag = ref[i];
	        id = tag.attributes["bitmap_id"] | 0;
	        bitmapData = tag.attributes["pixel_data"];
	        bitmaps[id] = bitmapData;
	      }
	      return this.decodeBitmaps(bitmaps, Object.keys(bitmaps), 0, callBack);
	    };

	    V1Loader.prototype.decodeContext = function(topTag, callBack) {
	      var bitmapsTag, postDecodeBitmaps;
	      bitmapsTag = topTag.tag("bitmaps");
	      postDecodeBitmaps = (function(_this) {
	        return function(bitmaps) {
	          _this.bitmaps = bitmaps;
	          return callBack();
	        };
	      })(this);
	      if (bitmapsTag) {
	        return this.decodeBitmapsTag(bitmapsTag, postDecodeBitmaps);
	      } else {
	        return postDecodeBitmaps(null);
	      }
	    };

	    V1Loader.prototype.decodeTopTag = function(topTag, callBack) {
	      return this.decodeContext(topTag, (function(_this) {
	        return function() {
	          var topElement;
	          topElement = _this.createElementFromTag(topTag);
	          return callBack(topElement);
	        };
	      })(this));
	    };

	    V1Loader.prototype.createElement = function(tag) {
	      var constructor;
	      constructor = V1Loader.objectFactory[tag.name];
	      if (!constructor) {
	        this.log("WARNING: unknown object type: " + tag.name + ". Defaulting to Art.Engine.Core.Element");
	        return new Element;
	      } else {
	        return constructor(tag, this);
	      }
	    };

	    V1Loader.prototype.populateChildrenFromTag = function(parent, childrenTag) {
	      var child, children, i, j, len, len1, postChildren, ref, results, route, shapeChildren;
	      shapeChildren = [];
	      children = [];
	      postChildren = [];
	      route = {
	        "-stencil": shapeChildren,
	        "+stencil": shapeChildren,
	        "stencil": shapeChildren,
	        "normal": children,
	        "post": postChildren
	      };
	      ref = childrenTag.tags;
	      for (i = 0, len = ref.length; i < len; i++) {
	        child = ref[i];
	        route[child.attributes.stack_mode || "normal"].push(this.createElementFromTag(child, parent));
	      }
	      parent.setChildren(children);
	      if (shapeChildren.length > 0) {
	        shapeChildren[0].isMask = true;
	        parent.addChild(shapeChildren[0]);
	        if (shapeChildren.length > 1) {
	          this.log("WARNING - loading more than one mask (shape/stencil) child not currently supported! (using first one only)");
	        }
	      }
	      results = [];
	      for (j = 0, len1 = postChildren.length; j < len1; j++) {
	        child = postChildren[j];
	        results.push(parent.addChild(child));
	      }
	      return results;
	    };

	    V1Loader.prototype.decodeHorizontalLinearLayout = function(object, layout, l, s) {
	      switch (layout) {
	        case layoutModes.leftAddWidthFixed:
	          object.location = {
	            x: l
	          };
	          return object.size = {
	            w: s
	          };
	        case layoutModes.rightAddWidthFixed:
	          object.location = {
	            x: l,
	            xpw: 1
	          };
	          return object.size = {
	            w: s
	          };
	        case layoutModes.centeredWidthFixed:
	          object.location = {
	            xpw: l
	          };
	          return object.size = {
	            w: s
	          };
	        case layoutModes.bothAdd:
	          object.location = {
	            x: l
	          };
	          return object.size = {
	            w: s,
	            wpw: 1
	          };
	        case layoutModes.bothMul:
	          object.location = {
	            xpw: l
	          };
	          return object.size = {
	            wpw: s
	          };
	        case layoutModes.bothStretch:
	        case layoutModes.centeredWidthChildren:
	        case layoutModes.rightAddWidthChildren:
	        case layoutModes.leftAddWidthChildren:
	          return this.log("WARNING: unsupported layout " + layoutModes[layout] + " for " + channel + " loc=" + location + " size=" + size);
	      }
	    };

	    V1Loader.prototype.decodeVerticalLinearLayout = function(object, layout, l, s) {
	      switch (layout) {
	        case layoutModes.leftAddWidthFixed:
	          object.location = {
	            y: l
	          };
	          return object.size = {
	            h: s
	          };
	        case layoutModes.rightAddWidthFixed:
	          object.location = {
	            y: l,
	            yph: 1
	          };
	          return object.size = {
	            h: s
	          };
	        case layoutModes.centeredWidthFixed:
	          object.location = {
	            yph: l
	          };
	          return object.size = {
	            h: s
	          };
	        case layoutModes.bothAdd:
	          object.location = {
	            y: l
	          };
	          return object.size = {
	            h: s,
	            hph: 1
	          };
	        case layoutModes.bothMul:
	          object.location = {
	            yph: l
	          };
	          return object.size = {
	            hph: s
	          };
	        case layoutModes.bothStretch:
	        case layoutModes.centeredWidthChildren:
	        case layoutModes.rightAddWidthChildren:
	        case layoutModes.leftAddWidthChildren:
	          return this.log("WARNING: unsupported layout " + layoutModes[layout] + " for " + channel + " loc=" + location + " size=" + size);
	      }
	    };

	    V1Loader.prototype.decodeLayout = function(object, tag, parent) {
	      var hVal, wVal, xLayout, xVal, yLayout, yVal;
	      xLayout = (tag.attributes.x_layout_mode || layoutModes.leftAddWidthFixed) | 0;
	      yLayout = (tag.attributes.y_layout_mode || layoutModes.leftAddWidthFixed) | 0;
	      xVal = (tag.attributes.x_val || 0) - 0;
	      yVal = (tag.attributes.y_val || 0) - 0;
	      wVal = (tag.attributes.w_val || 0) - 0;
	      hVal = (tag.attributes.h_val || 0) - 0;
	      this.decodeHorizontalLinearLayout(object, xLayout, xVal, wVal);
	      return this.decodeVerticalLinearLayout(object, yLayout, yVal, hVal);
	    };

	    V1Loader.prototype.setCompositeMode = function(object, mode) {
	      if (!supportedCompositeModes[compositeModes[mode]]) {
	        this.log("WARNING: unknown composite mode: " + mode);
	      }
	      return object.compositeMode = supportedCompositeModes[compositeModes[mode]] || "normal";
	    };

	    V1Loader.prototype.createElementFromTag = function(tag, parent) {
	      var children, k, object, ref, tagKey, v;
	      if (parent == null) {
	        parent = null;
	      }
	      object = this.createElement(tag);
	      object.axis = point(tag.attributes.handle || point(.5, .5));
	      this.decodeLayout(object, tag, parent);
	      ref = tag.attributes;
	      for (k in ref) {
	        v = ref[k];
	        switch (k) {
	          case "name":
	            object.name = v;
	            break;
	          case "matrix":
	            object.elementToParentMatrix = matrix(v);
	            break;
	          case "art_engine_version":
	            break;
	          case "kimi_editor_version":
	            break;
	          case "composite_mode":
	            this.setCompositeMode(object, v);
	            break;
	          case "drop_in_enabled":
	            object.userProperties.drop_in_enabled = true;
	            break;
	          case "lock_mode":
	            break;
	          case "handle":
	          case "w_val":
	          case "h_val":
	          case "x_val":
	          case "y_val":
	          case "x_layout_mode":
	          case "y_layout_mode":
	          case "stack_mode":
	            break;
	          default:
	            tagKey = tag.name + ":" + k;
	            switch (tagKey) {
	              case "art_file:bitmaps":
	              case "art_bitmap:bitmap_id":
	                break;
	              default:
	                object.userProperties[k] = v.toString();
	                this.log("WARNING: unknown tag:attribute: " + tagKey + " (ignored)");
	            }
	        }
	      }
	      if (children = tag.tags.children) {
	        this.populateChildrenFromTag(object, children);
	      }
	      return object;
	    };

	    return V1Loader;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(278);


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var Xbd;

	module.exports = Xbd = __webpack_require__(279);

	Xbd.Dictionary = __webpack_require__(281);

	Xbd.Tag = __webpack_require__(282);

	Xbd.Xbd = __webpack_require__(283);

	Xbd.finishLoad(["Dictionary", "Tag", "Xbd"]);


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(280);

	module.exports = Art.Xbd || (Art.Xbd = (function(superClass) {
	  extend(Xbd, superClass);

	  function Xbd() {
	    return Xbd.__super__.constructor.apply(this, arguments);
	  }

	  Xbd.namespace = Art;

	  Xbd.namespacePath = "Neptune.Art.Xbd";

	  return Xbd;

	})(Neptune.Base));

	Art.addNamespace(Art.Xbd);


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	var Binary, Dictionary, binary, stream;

	Binary = __webpack_require__(8).Binary;

	binary = Binary.binary;

	stream = Binary.stream;

	module.exports = Dictionary = (function() {
	  Dictionary.parse = function(stream, name) {
	    var encoded_dictionary, lengths, num_entries, strings;
	    encoded_dictionary = stream.read_asi_string();
	    num_entries = encoded_dictionary.read_asi();
	    lengths = [];
	    while (num_entries--) {
	      lengths.push(encoded_dictionary.read_asi());
	    }
	    strings = lengths.map(function(len) {
	      return encoded_dictionary.read(len);
	    });
	    return new Dictionary(strings, name);
	  };

	  function Dictionary(strings, name) {
	    this.strings = strings;
	    this.name = name;
	  }

	  Dictionary.prototype.read_string = function(stream) {
	    var id, string;
	    id = stream.read_asi();
	    string = this.strings[id];
	    if (!string) {
	      throw "string id(" + id + ") not in " + this.name + " dictionary. keys = '" + (Element.keys(this.strings)) + "'";
	    }
	    return string;
	  };

	  return Dictionary;

	})();


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var Binary, Tag, Xbd, binary, stream,
	  slice = [].slice;

	Binary = __webpack_require__(8).Binary;

	Xbd = __webpack_require__(279);

	binary = Binary.binary;

	stream = Binary.stream;

	module.exports = Tag = (function() {
	  Tag.parse = function(stream, tagsd, attrsd, valuesd) {
	    var attr_data, attributes, n, name, name1, subTag, tag_data, tags, v;
	    tag_data = stream.read_asi_string();
	    name = tagsd.read_string(tag_data).toString();
	    attr_data = tag_data.read_asi_string();
	    attributes = null;
	    while (!attr_data.done()) {
	      if (!attributes) {
	        attributes = {};
	      }
	      n = attrsd.read_string(attr_data).toString();
	      v = valuesd.read_string(attr_data);
	      attributes[n] = v;
	    }
	    tags = [];
	    while (!tag_data.done()) {
	      subTag = Xbd.Tag.parse(tag_data, tagsd, attrsd, valuesd);
	      tags.push(subTag);
	      tags[name1 = subTag.name] || (tags[name1] = subTag);
	    }
	    return new Xbd.Tag(name, attributes, tags);
	  };

	  function Tag(name, attributes, tags) {
	    if (attributes == null) {
	      attributes = {};
	    }
	    if (tags == null) {
	      tags = [];
	    }
	    this.name = name;
	    this.attributes = attributes;
	    if (tags instanceof Function) {
	      this.tags = [];
	      tags(this);
	    } else {
	      this.tags = tags;
	    }
	  }

	  Tag.prototype.add = function() {
	    var args;
	    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return this.tags.push((function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Xbd.Tag, args, function(){}));
	  };

	  Tag.prototype.tag = function(name) {
	    var i, len, ref, tag;
	    ref = this.tags;
	    for (i = 0, len = ref.length; i < len; i++) {
	      tag = ref[i];
	      if (tag.name === name) {
	        return tag;
	      }
	    }
	    return null;
	  };

	  Tag.prototype.decode_attribute_values = function(func) {
	    var i, k, len, ref, ref1, results, t, v;
	    ref = this.attributes;
	    for (k in ref) {
	      v = ref[k];
	      this.attributes[k] = func(v, k, this.name);
	    }
	    ref1 = this.tags;
	    results = [];
	    for (i = 0, len = ref1.length; i < len; i++) {
	      t = ref1[i];
	      results.push(t.decode_attribute_values(func));
	    }
	    return results;
	  };

	  Tag.prototype.toString = function() {
	    return this.toXml("  ");
	  };

	  Tag.prototype.attributesXml = function() {
	    var k, out, v;
	    out = (function() {
	      var ref, results;
	      ref = this.attributes;
	      results = [];
	      for (k in ref) {
	        v = ref[k];
	        results.push(k + "='" + v + "'");
	      }
	      return results;
	    }).call(this);
	    return out.join(" ");
	  };

	  Tag.prototype.tagsXml = function(indent) {
	    var out;
	    out = this.tags.map(function(tag) {
	      return tag.toXml(indent);
	    });
	    return Xbd.indent(out.join("\n"), indent);
	  };

	  Tag.prototype.toXml = function(indent) {
	    var attr_xml;
	    if (indent == null) {
	      indent = "";
	    }
	    attr_xml = "";
	    if (this.attributes && (attr_xml = this.attributesXml())) {
	      attr_xml = " " + attr_xml;
	    }
	    if (this.tags.length === 0) {
	      return "<" + this.name + attr_xml + "/>";
	    } else {
	      return "<" + this.name + attr_xml + ">\n" + (this.tagsXml(indent)) + "\n</" + this.name + ">";
	    }
	  };

	  return Tag;

	})();


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	var Binary, Dictionary, Tag, Xbd, stream;

	Binary = __webpack_require__(8).Binary;

	stream = Binary.stream;

	Tag = __webpack_require__(282);

	Dictionary = __webpack_require__(281);

	module.exports = Xbd = __webpack_require__(279);

	Xbd.indent = function(str, indentStr) {
	  return indentStr + str.split("\n").join("\n" + indentStr);
	};

	Xbd.parse = function(input) {
	  var attrsd, header, header_should_match, tagsd, valuesd;
	  input = stream(input);
	  header_should_match = "SBDXML\x01\x00";
	  header = input.read(header_should_match.length);
	  tagsd = Xbd.Dictionary.parse(input, "tag names");
	  attrsd = Xbd.Dictionary.parse(input, "attribute names");
	  valuesd = Xbd.Dictionary.parse(input, "attribute values");
	  return Xbd.Tag.parse(input, tagsd, attrsd, valuesd);
	};


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	var Forms;

	module.exports = Forms = __webpack_require__(285);

	Forms.SynchronizedDomOverlay = __webpack_require__(286);

	Forms.TextInput = __webpack_require__(287);

	Forms.finishLoad(["SynchronizedDomOverlay", "TextInput"]);


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Forms || (Engine.Forms = (function(superClass) {
	  extend(Forms, superClass);

	  function Forms() {
	    return Forms.__super__.constructor.apply(this, arguments);
	  }

	  Forms.namespace = Engine;

	  Forms.namespacePath = "Neptune.Art.Engine.Forms";

	  return Forms;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Forms);


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(50), __webpack_require__(8), __webpack_require__(89), __webpack_require__(113)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, Foundation, Atomic, EngineCore) {
	  var Element, StateEpoch, SynchronizedDomOverlay, log, merge, rect, stateEpoch;
	  log = Foundation.log, merge = Foundation.merge;
	  rect = Atomic.rect;
	  StateEpoch = EngineCore.StateEpoch, Element = EngineCore.Element;
	  stateEpoch = StateEpoch.stateEpoch;
	  return SynchronizedDomOverlay = (function(superClass) {
	    extend(SynchronizedDomOverlay, superClass);

	    function SynchronizedDomOverlay(options) {
	      if (options == null) {
	        options = {};
	      }
	      SynchronizedDomOverlay.__super__.constructor.apply(this, arguments);
	      this.setupDomElement(options.domElement);
	    }

	    SynchronizedDomOverlay.prototype.preprocessEventHandlers = function(handlerMap) {
	      return SynchronizedDomOverlay.__super__.preprocessEventHandlers.call(this, merge(handlerMap, {
	        rootElementChanged: (function(_this) {
	          return function(e) {
	            var canvasElement;
	            canvasElement = _this.canvasElement;
	            if (canvasElement && !_this._attachedCanvasElement) {
	              return stateEpoch.onNextReady(function() {
	                _this.attachDomElement();
	                return _this.updateDomLayout();
	              });
	            } else if (_this._attachedCanvasElement && !canvasElement) {
	              return _this.detachDomElement();
	            }
	          };
	        })(this),
	        absMatriciesChanged: (function(_this) {
	          return function(e) {
	            return _this.updateDomLayout();
	          };
	        })(this)
	      }));
	    };

	    SynchronizedDomOverlay.getter({
	      domElement: function() {
	        return this.$domElement;
	      }
	    });

	    SynchronizedDomOverlay.prototype.setupDomElement = function(domElement) {
	      this.$domElement = $(domElement);
	      this.$domElement.css("position", "absolute");
	      return this.$domElement.css("top", "0");
	    };

	    SynchronizedDomOverlay.prototype.updateDomLayout = function() {
	      var loc, m, r, size;
	      if (!this.canvasElement) {
	        return;
	      }
	      m = this.getElementToDocumentMatrix();
	      loc = m.location;
	      size = this.paddedSize.mul(m.getS());
	      r = rect(loc, size).round();
	      this.$domElement.css("left", r.x);
	      this.$domElement.css("top", r.y);
	      this.$domElement.width(r.w);
	      return this.$domElement.height(r.h);
	    };

	    SynchronizedDomOverlay.prototype.detachDomElement = function() {
	      return this.$domElement.detach();
	    };

	    SynchronizedDomOverlay.prototype.attachDomElement = function() {
	      var canvasElement, zIndex;
	      if (!(canvasElement = this.canvasElement)) {
	        return;
	      }
	      this._attachedCanvasElement = this.canvasElement;
	      this._needToAttachDomElement = false;
	      zIndex = Foundation.Browser.Dom.zIndex(this.canvasElement.$canvas) + 1;
	      this.$domElement.css("z-index", zIndex);
	      return this.$domElement.appendTo($('body'));
	    };

	    return SynchronizedDomOverlay;

	  })(Element);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(50), __webpack_require__(8), __webpack_require__(89), __webpack_require__(286)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, Foundation, Atomic, SynchronizedDomOverlay) {
	  var TextInput, color, createWithPostCreate, inspect, merge, select;
	  color = Atomic.color;
	  merge = Foundation.merge, select = Foundation.select, inspect = Foundation.inspect, createWithPostCreate = Foundation.createWithPostCreate;
	  return createWithPostCreate(TextInput = (function(superClass) {
	    extend(TextInput, superClass);

	    function TextInput(options) {
	      var k, props, propsString, ref, tagType, v;
	      if (options == null) {
	        options = {};
	      }
	      props = select(options, "placeholder", "type", "autocapitalize", "autocomplete", "autocorrect");
	      tagType = props.type === "textarea" ? (delete props.type, "textarea") : (props.type || (props.type = 'text'), "input");
	      propsString = ((function() {
	        var results;
	        results = [];
	        for (k in props) {
	          v = props[k];
	          results.push(k + "=" + (inspect(v)));
	        }
	        return results;
	      })()).join(" ");
	      options.domElement = $("<" + tagType + " " + propsString + "'></input>").val(options.value || "").css(merge(options.style, {
	        padding: (options.padding || 5) + "px",
	        border: '0px',
	        color: color(options.color || "black").toString(),
	        padding: "0",
	        margin: "0",
	        "vertical-align": "bottom",
	        'text-align': options.align || "left",
	        'font-size': (options.fontSize || 16) + "px",
	        'background-color': 'transparent',
	        'font-family': options.fontFamily || "Arial"
	      }));
	      if (options.attrs) {
	        ref = options.attrs;
	        for (k in ref) {
	          v = ref[k];
	          options.domElement.attr(k, v);
	        }
	      }
	      TextInput.__super__.constructor.apply(this, arguments);
	      this.lastValue = this.value;
	      this.domElement.change((function(_this) {
	        return function(event) {
	          return _this.checkIfValueChanged();
	        };
	      })(this));
	      this.domElement.on('input', (function(_this) {
	        return function(event) {
	          return _this.checkIfValueChanged();
	        };
	      })(this));
	      this.domElement.select((function(_this) {
	        return function(event) {
	          return _this.queueEvent("selectionChanged");
	        };
	      })(this));
	      this.domElement.blur((function(_this) {
	        return function(event) {
	          return _this.blur();
	        };
	      })(this));
	      this.domElement.focus((function(_this) {
	        return function(event) {
	          return _this.focus();
	        };
	      })(this));
	    }

	    TextInput.prototype.preprocessEventHandlers = function(handlerMap) {
	      return merge(TextInput.__super__.preprocessEventHandlers.apply(this, arguments), {
	        focus: (function(_this) {
	          return function() {
	            return _this.domElement.focus();
	          };
	        })(this),
	        blur: (function(_this) {
	          return function() {
	            return _this.domElement.blur();
	          };
	        })(this),
	        keyUp: (function(_this) {
	          return function(e) {
	            if (e.key === "enter") {
	              return _this.handleEvent("enter", {
	                value: _this.value
	              });
	            }
	          };
	        })(this)
	      });
	    };

	    TextInput.prototype.checkIfValueChanged = function() {
	      if (this.lastValue !== this.value) {
	        this.lastValue = this.value;
	        return this.queueEvent("valueChanged", {
	          value: this.value,
	          lastValue: this.lastValue
	        });
	      }
	    };

	    TextInput.getter({
	      value: function() {
	        return this.domElement.val();
	      },
	      color: function() {
	        return color(this.domElement.css("color"));
	      }
	    });

	    TextInput.setter({
	      value: function(v) {
	        return this.domElement.val(v);
	      },
	      color: function(c) {
	        return this.domElement.css("color", c);
	      }
	    });

	    TextInput.prototype.selectAll = function() {
	      return this.domElement.select();
	    };

	    return TextInput;

	  })(SynchronizedDomOverlay));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./aim": 7,
		"./aim.coffee": 7,
		"./all": 289,
		"./all.coffee": 289,
		"./component": 290,
		"./component.coffee": 290,
		"./index": 2,
		"./index.coffee": 2,
		"./namespace": 3,
		"./namespace.coffee": 3,
		"./react_art_engine_epoch": 81,
		"./react_art_engine_epoch.coffee": 81,
		"./virtual_element": 79,
		"./virtual_element.coffee": 79,
		"./virtual_node": 80,
		"./virtual_node.coffee": 80
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 288;


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(3), __webpack_require__(290), __webpack_require__(81), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, React, Component, ReactArtEngineEpoch, Aim) {
	  var createAllClass, log, reactArtEngineEpoch, select;
	  log = Foundation.log, createAllClass = Foundation.createAllClass, select = Foundation.select;
	  reactArtEngineEpoch = ReactArtEngineEpoch.reactArtEngineEpoch;
	  return createAllClass(React, select(Component, "createAndInstantiateTopComponent", "createComponentFactory"), {
	    instantiateTopComponent: function(componentInstance, bindToElementOrNewCanvasElementProps) {
	      console.warn("React.instantiateTopComponent is DEPRICATED. Use: componentInstance.instantiateAsTopComponent");
	      return componentInstance.instantiateAsTopComponent(bindToElementOrNewCanvasElementProps);
	    },
	    onNextReady: function(callback) {
	      return reactArtEngineEpoch.onNextReady(callback);
	    }
	  }, Aim);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(80), __webpack_require__(81), !self.isWebWorker ? __webpack_require__(82) : __webpack_require__(288)(void 0), self.isWebWorker ? !(function webpackMissingModule() { var e = new Error("Cannot find module \"lib/art/engine_remote/remote\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()) : __webpack_require__(288)(void 0)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, VirtualNode, ReactArtEngineEpoch, Engine, EngineRemote) {
	  var BaseObject, Component, GlobalEpochCycle, StateEpoch, clone, compactFlatten, countStep, createWithPostCreate, fastBind, globalCount, globalEpochCycle, inspect, isArray, isFunction, isObject, isString, keepIfRubyTrue, log, merge, mergeInto, onNextStateEpochReady, reactArtEngineEpoch, ref, shallowClone, slice, stackTime, stateEpoch, time, timePerformance;
	  log = Foundation.log, merge = Foundation.merge, mergeInto = Foundation.mergeInto, clone = Foundation.clone, shallowClone = Foundation.shallowClone, inspect = Foundation.inspect, compactFlatten = Foundation.compactFlatten, keepIfRubyTrue = Foundation.keepIfRubyTrue, BaseObject = Foundation.BaseObject, fastBind = Foundation.fastBind, slice = Foundation.slice, isObject = Foundation.isObject, isString = Foundation.isString, isArray = Foundation.isArray, isFunction = Foundation.isFunction, globalCount = Foundation.globalCount, time = Foundation.time, stackTime = Foundation.stackTime, countStep = Foundation.countStep, createWithPostCreate = Foundation.createWithPostCreate;
	  reactArtEngineEpoch = ReactArtEngineEpoch.reactArtEngineEpoch;
	  if (EngineRemote) {
	    EngineRemote.getRemote();
	  }
	  if (Engine) {
	    ref = Engine.Core, StateEpoch = ref.StateEpoch, GlobalEpochCycle = ref.GlobalEpochCycle;
	    stateEpoch = StateEpoch.stateEpoch;
	    globalEpochCycle = GlobalEpochCycle.globalEpochCycle;
	    onNextStateEpochReady = function(f) {
	      return stateEpoch.onNextReady(f);
	    };
	    timePerformance = function(name, f) {
	      return globalEpochCycle.timePerformance(name, f);
	    };
	  } else {
	    onNextStateEpochReady = function(f) {
	      return reactArtEngineEpoch.onNextReady(f);
	    };
	    timePerformance = function(name, f) {
	      return f();
	    };
	  }

	  /*
	  React.js vs ReactArtEngine
	  --------------------------
	  
	  Generaly, ReactArtEngine is designed to work just like React.js. There is
	  some evolution, though, which I try to note below. -SBD
	  
	  ReactArtEngine: "Instantiation"
	  -------------------------------
	  
	  This is not a concept in React.js. It isn't important to the client, but it
	  is useful to understand in the implementation.
	  
	  In-short: an non-instantiated component only has properties. It doesn't have
	  state and it isn't rendered. An instantiated component has state and gets
	  rendered at least once.
	  
	  When a component is used in a render function, and with every re-render, it
	  an instance-object is created with standard javascript "new ComponentType."
	  However, that component instance is only a shell - it contains the
	  properties passed into the constructor and nothing else.
	  
	  Once the entire render is done, the result is diffed against the current
	  Virtual-AIM. The component instance is compared against existing components
	  via the diff rules. If an existing, matching component exists, that
	  component is updated and the new instance is discard. However, if an
	  existing match doesn't exist, then the new component instance is
	  "instantiated" and added to the virtual-Aim.
	  
	  TODO
	  ----
	  
	  I think I want to add a "lifecycle" method that Facebook.React doesn't have:
	  
	    preprocessProps: (props) -> props
	  
	  This will allow us to apply default props and normalize props instead of the current
	  method of storing normalized props in the state object. The current method is really awkward since
	  you have to do this in two places - will receive props and getInitialState.
	   */
	  return Component = (function(superClass) {
	    var defaultComponentDidMount, defaultComponentDidUpdate, defaultComponentWillMount, defaultComponentWillReceiveProps, defaultComponentWillUnmount, defaultComponentWillUpdate, defaultPreprocessProps, defaultPreprocessState, emptyArray, emptyProps, nonBindingFunctions;

	    extend(Component, superClass);

	    Component.created = 0;

	    Component.topComponentInstances = [];

	    Component.createAndInstantiateTopComponent = function(spec) {
	      return Component.createComponentFactory(spec).instantiateAsTopComponent();
	    };

	    Component.createComponentFactory = function(spec) {
	      var AnonymousComponent, componentClass;
	      componentClass = (function() {
	        if ((spec != null ? spec.prototype : void 0) instanceof Component) {
	          return spec;
	        } else if ((spec != null ? spec.constructor : void 0) === Object) {
	          if (!isFunction(spec.render)) {
	            throw new Error("Component must have a render function.");
	          }
	          return AnonymousComponent = (function(superClass1) {
	            var k, v;

	            extend(AnonymousComponent, superClass1);

	            function AnonymousComponent() {
	              return AnonymousComponent.__super__.constructor.apply(this, arguments);
	            }

	            for (k in spec) {
	              v = spec[k];
	              AnonymousComponent.prototype[k] = v;
	            }

	            return AnonymousComponent;

	          })(Component);
	        } else {
	          throw new Error("Specification Object or class inheriting from Component required.");
	        }
	      }).call(this);
	      return createWithPostCreate(componentClass);
	    };

	    Component.postCreate = function() {
	      return this.toComponentFactory();
	    };

	    nonBindingFunctions = "getInitialState componentWillReceiveProps componentWillMount componentWillUnmount componentWillUpdate componentDidMount componentDidUpdate render".split(/\s+/);

	    Component.detectBindList = function() {
	      var k, prototype, results, v;
	      prototype = this.prototype;
	      results = [];
	      for (k in prototype) {
	        v = prototype[k];
	        if (k !== "constructor" && isFunction(v) && prototype.hasOwnProperty(k) && indexOf.call(nonBindingFunctions, k) < 0) {
	          results.push(k);
	        }
	      }
	      return results;
	    };

	    Component.toComponentFactory = function() {
	      var bindList;
	      bindList = this.detectBindList();
	      return VirtualNode.factoryFactory((function(_this) {
	        return function(props, children) {
	          var instance, j, k, len;
	          if (children.length > 0) {
	            props.children = children;
	          }
	          instance = new _this(props);
	          instance._validateChildren(props != null ? props.children : void 0);
	          for (j = 0, len = bindList.length; j < len; j++) {
	            k = bindList[j];
	            instance[k] = fastBind(instance[k], instance);
	          }
	          return instance;
	        };
	      })(this));
	    };

	    Component.createdComponents = null;

	    Component.pushCreatedComponent = function(c) {
	      this.createdComponents || (this.createdComponents = []);
	      return this.createdComponents.push(c);
	    };

	    Component.resetCreatedComponents = function() {
	      return this.createdComponents = null;
	    };

	    emptyProps = {};

	    function Component(props) {
	      if (props == null) {
	        props = emptyProps;
	      }
	      Component.created++;
	      globalCount("ReactComponent_Created");
	      Component.__super__.constructor.call(this, props);
	      this.state = {};
	      this.refs = null;
	      this._pendingState = null;
	      this._virtualAimBranch = null;
	      this._mounted = false;
	      this._applyingPendingState = false;
	      Component.pushCreatedComponent(this);
	    }

	    Component.prototype.instantiateAsTopComponent = function(bindToElementOrNewCanvasElementProps) {
	      Component.topComponentInstances.push(this);
	      return this._instantiate(null, bindToElementOrNewCanvasElementProps);
	    };

	    Component.getter({
	      inspectedName: function() {
	        return "" + this.className + (this.key ? "-" + this.key : '');
	      },
	      mounted: function() {
	        return this._mounted;
	      }
	    });

	    Component.prototype.onNextReady = function(callback) {
	      return reactArtEngineEpoch.onNextReady(callback);
	    };

	    Component.prototype.setState = function(newState, callback, callbackB) {
	      var _state, k, testState, v;
	      if (isString(newState)) {
	        return this._setSingleState(newState, callback, callbackB);
	      }
	      this.onNextReady(callback);
	      if (newState) {
	        testState = this._pendingState || this.state;
	        _state = null;
	        for (k in newState) {
	          v = newState[k];
	          if (!(testState[k] !== v)) {
	            continue;
	          }
	          _state || (_state = this._getStateToSet());
	          _state[k] = v;
	        }
	      }
	      return newState;
	    };

	    Component.prototype.replaceState = function(newState, callback) {
	      this._setPendingState(newState);
	      return this.onNextReady(callback);
	    };

	    Component.prototype.forceUpdate = function(callback) {
	      this._getPendingState();
	      return this.onNextReady(callback);
	    };

	    Component.prototype.getInitialState = function() {
	      return {};
	    };

	    Component.prototype.render = function() {
	      throw new Error("render must be overridden in component: " + this.className);
	    };

	    Component.prototype.componentWillReceiveProps = defaultComponentWillReceiveProps = function(newProps) {};


	    /*
	    Function:     preprocessProps
	    
	    When:         Called on component instantiation and any time props are updated
	    
	    Inputs:
	      newProps:   The props received from the render call which created/updated this component
	    
	    Return:       plain Object
	    
	    Requirements:
	      Must return a plain Object
	      Must not modify newProps passed in.
	      Shouldn't have any side effects.
	      Shouldn't read any external state.
	    
	    Description:
	      Either return exactly newProps which were passed in OR create a new, plain object.
	      The returned object can contain anything you want.
	      These are the props the component will see in any subsequent lifecycle calls.
	    
	    NOTE: Unique to Art.React. Not in Facebook's React.
	    
	    NOTES RE Facebook.React:
	      Why add this? Well, often you want to apply a transformation to @props whenever its set OR it changes.
	      With Facebook.React there is no one lifecycle place for this. Component instantiation/mounting
	      and component updating are kept separate. I have found it is very error-prone to implement
	      this common functionality manually on each component that needs it.
	     */

	    Component.prototype.preprocessProps = defaultPreprocessProps = function(newProps) {
	      return newProps;
	    };


	    /*
	    preprocessState is called:
	      immediatly after getInitialState
	      after preprocessProps
	      after componentWillUpdate
	      before rendering
	    
	    Your code will never see a @state that hasen't been preprocessed.
	    
	    NOTES RE Facebook.React:
	      Why add this? Well, often you want to apply a transformation to @state whenever it is initialized OR it changes.
	      With Facebook.React there is no one lifecycle place for this. Component instantiation/mounting
	      and component updating are kept separate. I have found it is very error-prone to implement
	      this common functionality manually on each component that needs it.
	    
	      An example of this is FluxComponents. They alter state implicitly as the subscription data comes in, and
	      and component instantiation. preprocessState makes it easy to transform any data written via FluxComponents
	      into a standard form.
	    
	    SBD NOTES TO SELF:
	      I think:
	        - it is OK to directly mutate newState.
	        - calls to @setState will be applied next epoch.
	        - could make getInitialState obsolete, but I think we'll keep it around for convenience and consistency
	     */

	    Component.prototype.preprocessState = defaultPreprocessState = function(newState) {
	      return newState;
	    };

	    Component.prototype.componentWillMount = defaultComponentWillMount = function() {};

	    Component.prototype.componentWillUnmount = defaultComponentWillUnmount = function() {};

	    Component.prototype.componentWillUpdate = defaultComponentWillUpdate = function(newProps, newState) {};

	    Component.prototype.componentDidMount = defaultComponentDidMount = function() {};

	    Component.prototype.componentDidUpdate = defaultComponentDidUpdate = function(oldProps, oldState) {};

	    Component.prototype.find = function(pattern, arg, matches, path) {
	      var child, findAll, functionResult, j, len, matchFound, pathString, ref1, ref2, usedFunction, verbose;
	      ref1 = arg != null ? arg : {}, findAll = ref1.findAll, verbose = ref1.verbose;
	      if (matches == null) {
	        matches = [];
	      }
	      pathString = path ? path + "/" + this.inspectedName : this.inspectedName;
	      matchFound = (usedFunction = isFunction(pattern)) ? !!(functionResult = pattern(this)) : pathString.match(pattern);
	      if (matchFound) {
	        if (verbose) {
	          this.log(usedFunction ? {
	            matched: pathString,
	            functionResult: functionResult
	          } : {
	            matched: pathString
	          });
	        }
	        matches.push(this);
	      } else if (verbose === "all") {
	        this.log(usedFunction ? {
	          notMatched: pathString,
	          functionResult: functionResult
	        } : {
	          notMatched: pathString
	        });
	      }
	      if ((!matchFound || findAll) && this.subComponents) {
	        ref2 = this.subComponents;
	        for (j = 0, len = ref2.length; j < len; j++) {
	          child = ref2[j];
	          child.find(pattern, arguments[1], matches);
	        }
	      }
	      return matches;
	    };

	    Component.prototype.toCoffeescript = function(indent) {
	      return this._virtualAimBranch.toCoffeescript(indent);
	    };

	    Component.prototype.getPendingState = function() {
	      return this._pendingState || this.state;
	    };

	    Component.prototype._getStateToSet = function() {
	      if (this._mounted) {
	        return this._getPendingState();
	      } else {
	        return this.state;
	      }
	    };

	    Component.prototype._setSingleState = function(stateKey, stateValue, callback) {
	      this.onNextReady(callback);
	      if (this._pendingState || this.state[stateKey] !== stateValue) {
	        this._getStateToSet()[stateKey] = stateValue;
	      }
	      return stateValue;
	    };

	    Component.prototype._setPendingState = function(state) {
	      if (!(this._pendingState || this._applyingPendingState)) {
	        reactArtEngineEpoch.addChangingComponent(this);
	      }
	      return this._pendingState = state ? shallowClone(state) : {};
	    };

	    Component.prototype._getPendingState = function() {
	      return this._pendingState || this._setPendingState(this.state);
	    };

	    Component.prototype._unmount = function() {
	      var ref1;
	      this._componentWillUnmount();
	      if ((ref1 = this._virtualAimBranch) != null) {
	        ref1._unmount();
	      }
	      return this._mounted = false;
	    };

	    Component.prototype._instantiate = function(parentComponent, bindToElementOrNewCanvasElementProps) {
	      Component.__super__._instantiate.apply(this, arguments);
	      globalCount("ReactComponent_Instantiated");
	      this.props = this._preprocessProps(this.props);
	      this._componentWillMount();
	      this.setState(this._preprocessState(this.getInitialState()));
	      this._virtualAimBranch = this._renderCaptureRefs();
	      this._virtualAimBranch._instantiate(this, bindToElementOrNewCanvasElementProps);
	      this.element = this._virtualAimBranch.element;
	      this._componentDidMount();
	      this._mounted = true;
	      return this;
	    };

	    emptyArray = [];

	    Component.prototype._renderCaptureRefs = function() {
	      var ret;
	      ret = null;
	      timePerformance("reactRender", (function(_this) {
	        return function() {
	          globalCount("ReactComponent_Rendered");
	          VirtualNode.assignRefsTo = _this.refs = {};
	          Component.resetCreatedComponents();
	          ret = _this.render();
	          if (!(ret instanceof VirtualNode)) {
	            throw new Error(_this.className + ": render must return a VirtualNode. Got: " + (inspect(ret)));
	          }
	          _this.subComponents = Component.createdComponents || emptyArray;
	          return VirtualNode.assignRefsTo = null;
	        };
	      })(this));
	      return ret;
	    };

	    Component.prototype._updateRefsAfterReRender = function() {
	      var _updateTarget, c, i, j, k, len, ref1, ref2, results, update, v;
	      ref1 = this.refs;
	      for (k in ref1) {
	        v = ref1[k];
	        if (_updateTarget = this.refs[k]._updateTarget) {
	          this.refs[k] = _updateTarget;
	        }
	      }
	      ref2 = this.subComponents;
	      results = [];
	      for (i = j = 0, len = ref2.length; j < len; i = ++j) {
	        c = ref2[i];
	        if (update = c._updateTarget) {
	          results.push(this.subComponents[i] = update);
	        }
	      }
	      return results;
	    };

	    Component.prototype._canUpdateFrom = function(b) {
	      return this["class"] === b["class"] && this.key === b.key;
	    };

	    Component.prototype._shouldReRenderComponent = function(componentInstance) {
	      return this._propsChanged(componentInstance) || this._pendingState;
	    };

	    Component.prototype._reRenderComponent = function() {
	      var newRenderResult, ref1;
	      newRenderResult = this._renderCaptureRefs();
	      if (this._virtualAimBranch._canUpdateFrom(newRenderResult)) {
	        this._virtualAimBranch._updateFrom(newRenderResult);
	        this._updateRefsAfterReRender();
	      } else {
	        console.error("REACT-ART-ENGINE ERROR - The render function's top-level Component/VirtualElement changed 'too much.' The VirtualNode returned by a component's render function cannot change its Type or Key.\n\nSolution: Wrap your changing VirtualNode with a non-changing VirtualElement.\n\nOffending component: " + this.classPathName);
	        if ((ref1 = this._virtualAimBranch) != null) {
	          ref1._unmount();
	        }
	        (this._virtualAimBranch = newRenderResult)._instantiate(this);
	      }
	      return this.element = this._virtualAimBranch.element;
	    };

	    Component.prototype._updateFrom = function(componentInstance) {
	      Component.__super__._updateFrom.apply(this, arguments);
	      if (this._shouldReRenderComponent(componentInstance)) {
	        globalCount("ReactComponent_UpdateFromTemporaryComponent_Changed");
	        this._applyPendingState(componentInstance.props);
	      } else {
	        globalCount("ReactComponent_UpdateFromTemporaryComponent_NoChange");
	      }
	      return this;
	    };

	    Component.prototype._applyPendingState = function(newProps) {
	      var newState, oldProps, oldState;
	      if (!(this._pendingState || newProps)) {
	        return;
	      }
	      this._applyingPendingState = true;
	      if (newProps) {
	        newProps = this._preprocessProps(newProps);
	        this._componentWillReceiveProps(newProps);
	      }
	      oldProps = this.props;
	      oldState = this.state;
	      newProps || (newProps = oldProps);
	      newState = this._pendingState || oldState;
	      this._componentWillUpdate(newProps, newState);

	      /*
	      React.js forbids calling setState from componentWillUpdate, but I see no reason for this.
	      This next line safely supports state updates in componentWillUpdate in a pure-functionalish way:
	        after a setState in @componentWillUpdate,
	        the new state will not be visible in the remainder of that @componetWillUpdate call
	        but it will be visible in any subsquent lifecycle call such as @render
	       */
	      newState = this._pendingState || oldState;
	      this._pendingState = null;
	      this.props = newProps;
	      this.state = this._preprocessState(newState);
	      this._applyingPendingState = false;
	      this._reRenderComponent();
	      return this._componentDidUpdate(oldProps, oldState);
	    };

	    Component.prototype._componentWillReceiveProps = function(newProps) {
	      if (defaultComponentWillReceiveProps === this.componentWillReceiveProps) {
	        return;
	      }
	      return timePerformance("reactLC", (function(_this) {
	        return function() {
	          return _this.componentWillReceiveProps(newProps);
	        };
	      })(this));
	    };

	    Component.prototype._preprocessProps = function(props) {
	      if (defaultPreprocessProps === this.preprocessProps) {
	        return props;
	      }
	      timePerformance("reactLC", (function(_this) {
	        return function() {
	          return props = _this.preprocessProps(props);
	        };
	      })(this));
	      return props;
	    };

	    Component.prototype._preprocessState = function(state) {
	      if (defaultPreprocessState === this.preprocessState) {
	        return state;
	      }
	      timePerformance("reactLC", (function(_this) {
	        return function() {
	          return state = _this.preprocessState(state);
	        };
	      })(this));
	      return state;
	    };

	    Component.prototype._componentWillMount = function() {
	      if (defaultComponentWillMount === this.componentWillMount) {
	        return;
	      }
	      return timePerformance("reactLC", (function(_this) {
	        return function() {
	          return _this.componentWillMount();
	        };
	      })(this));
	    };

	    Component.prototype._componentWillUnmount = function() {
	      if (defaultComponentWillUnmount === this.componentWillUnmount) {
	        return;
	      }
	      return timePerformance("reactLC", (function(_this) {
	        return function() {
	          return _this.componentWillUnmount();
	        };
	      })(this));
	    };

	    Component.prototype._componentWillUpdate = function(newProps, newState) {
	      if (!defaultComponentWillUpdate) {
	        return;
	      }
	      return timePerformance("reactLC", (function(_this) {
	        return function() {
	          return _this.componentWillUpdate(newProps, newState);
	        };
	      })(this));
	    };

	    Component.prototype._componentDidMount = function() {
	      if (defaultComponentDidMount === this.componentDidMount) {
	        return;
	      }
	      return this.onNextReady((function(_this) {
	        return function() {
	          return timePerformance("reactLC", function() {
	            return _this.componentDidMount();
	          });
	        };
	      })(this));
	    };

	    Component.prototype._componentDidUpdate = function(oldProps, oldState) {
	      if (defaultComponentDidUpdate === this.componentDidUpdate) {
	        return;
	      }
	      return this.onNextReady((function(_this) {
	        return function() {
	          return timePerformance("reactLC", function() {
	            return _this.componentDidUpdate(oldProps, oldState);
	          });
	        };
	      })(this));
	    };

	    Component.prototype.onNextReady = function(f) {
	      if (stateEpoch) {
	        return stateEpoch != null ? stateEpoch.onNextReady(f) : void 0;
	      } else {
	        return Component.__super__.onNextReady.apply(this, arguments);
	      }
	    };

	    return Component;

	  })(VirtualNode);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }
/******/ ]);