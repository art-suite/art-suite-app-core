import &StandardImport

class Lib

  @deMarkdown: (text) =>
    text.replace @_findMarkdownBlockRegExp, ''

  @markdownBlockDefaults:
    align: :left
    level: 0
    style: :paragraph

  @_findTitleMarkdownRegExp:
    ///
      ^
      (?:[\n\s]*\n)?
      [#*>]+
      -*
      \s+
      ([^\n]+)

  @getPlainTextTitle: (string, maxLength = 50) ->
    out = if present string
      if m = string.match /[^\.!\?\n]+[\.!\?\n]+(?=[\s\n]|$)/g
        [string] = m
        [string] = string.split /\.*\s*$/
      string.trim()
    else ''

    if out.length > maxLength
      [first] = out.split /[-=|]/
      if first?.length > 0
         out = first

    if out.length > maxLength
      [first] = out.split /["'[{(]/
      if first?.length > 0
         out = first

    if out.length > maxLength
      words = out.split /\s+/
      out = null
      each word in words when !out || out.length < maxLength
        out = if out
          "" #{out} #{word}
        else
          word
    out

  @getMarkdownTitle: (text, maxLength = 50) =>
    if matched = text?.match @_findTitleMarkdownRegExp
      @getPlainTextTitle matched[1], maxLength

  @hasMarkdownCodeBlocks: (text) =>
    @_markdownCodeBlockDelimiterRegExp.test text

  @_codeBlockStart: /// \^* ```

  @hasAlignmentMarkdown: (text) ->
    ///
      (^|\n)

      (
        (?=-) |

        \#+ |

        \^+ |

        >+ |

        \d\.+ |

        \*+ |

        #{@_codeBlockStart.source}
      )

      (-+)
    .test text

  @_markdownCodeBlockDelimiterRegExp:           /// #{@_codeBlockStart.source}
  @markdownCodeBlockLineStartRegExp:            /// ^         #{@_markdownCodeBlockDelimiterRegExp.source}
  @markdownCodeOrHeaderBlockLineStartRegExp:    /// ^ (#{@_markdownCodeBlockDelimiterRegExp.source} | \#+\s+[^\s])
  @_findMarkdownCodeBlockDelimiterRegExp:       /// (^|\n\ *) #{@_markdownCodeBlockDelimiterRegExp.source}
  @_findAllMarkdownImageRegExp:
    ///g
      !?

      \[ [^\]]* \]

      \(

      [^\ ]*

      \)

  @_subparseMarkdownImageRegExp:
    ///
      (!)?

      \[ ([^\]]*) \]

      \(

      ( [^\ ]* )

      \)

  @_markdownBlockStartRegexp:
    ///
      (?:
        # plain paragraphs can start with - or -- for alignment
        (?=-) |

        \#+ |

        \^+ |

        >+ |

        \d\.+ |

        \*+ |

        #{@_codeBlockStart.source}
      )

      # any block-start can end with - or -- for alignment
      # NOTE - lists/bullets ignore alignment
      (?:-*)

      (?:\ +|\n|$)

  @_markdownBlockStartWithSubmatchesRegexp:
    ///
      (
        # plain paragraphs can start with - or -- for alignment
        (?=-) |

        \#+ |

        \^+ |

        >+ |

        \d\.+ |

        \*+ |

        #{@_codeBlockStart.source}
      )

      # any block-start can end with - or -- for alignment
      # NOTE - lists/bullets ignore alignment
      (-*)

      (?:\ +|\n|$)

  @_findMarkdownBlockRegExp:                    /// (^|\n) \s* #{@_markdownBlockStartRegexp.source}
  @_markdownBlockLineStartRegExp:               ///  ^     \s* #{@_markdownBlockStartRegexp.source}
  @_markdownBlockLineStartWithSubmatchesRegexp: ///  ^     \s* #{@_markdownBlockStartWithSubmatchesRegexp.source} ((?:.|\n)+)

  @removeMarkdownCodeBlocks: (str) =>
    if str? && @_findMarkdownCodeBlockDelimiterRegExp.test str
      codeContents = false
      array line in str.split /\s*\n/g when
        if @markdownCodeBlockLineStartRegExp.test line
          codeContents = !codeContents
          false
        else !codeContents
      .join "\n"

    else
      str

  @isMarkdown: (text) => @_findMarkdownBlockRegExp.test text

  @splitMarkdownParagraphs: (text) =>
    lines = text.split /\ *\n/g

    out = []
    codeStart = null
    codeContents = null
    each line, i in lines
      if match = line.match @markdownCodeBlockLineStartRegExp
        if codeContents
          out.push codeContents + "" \n```
          codeContents = null

        else
          [codeContents] = match

      else if codeContents
        codeContents += "\n" + line

      else
        line = line.trim()
        if @_markdownBlockLineStartRegExp.test line
          out.push line

        else if present line
          last = peek out
          switch
          when last? && !@markdownCodeBlockLineStartRegExp.test last
            out[out.length-1] = "" #{last} #{line}

          when last?.length == 0
            out[out.length-1] = line

          else out.push line

        else
          out.push null

    if codeContents
      out.push codeContents + "" \n```

    compactFlatten out

  @parseParagraphText: (text, forHtml) ->
    {images, text, links} = @extractMarkdownImages text
    {}
      images
      links
      text:
        if forHtml
          text
        else
          text.replace /\<br\>/g, "\n"

  @extractMarkdownImages: (text) =>
    if matches = text.match @_findAllMarkdownImageRegExp
      out =
        text:
          text
          .replace @_findAllMarkdownImageRegExp, (found) ->
            [__, isImage, text, source] = subMatch = found.match @_subparseMarkdownImageRegExp
            unless isImage
              text
            ? ''

          .trim()
          .replace /\ \ +/g ''

      images = null
      links = null
      each match in matches
        [__, isImage, text, source] = subMatch = match.match @_subparseMarkdownImageRegExp
        if present(source) || present(text)
          item = {}
          item.source = source  if present source
          item.text   = text    if present text
          if isImage
            images ?= []
            .push item
          else
            links ?= []
            .push item

      out.images = images if images
      out.links  = links  if links
      out

    else
      {} text

  ##
    changes from old parseMarkdown
      renamed: depth  >> level
      renamed: bullet >> unorderedList
      renamed: list   >> orderedList

      level is almost the same, except headings. H1 is now -2, H2 is now -1.
  @parseMarkdown: (text, forHtml) =>
    paragraphs = @splitMarkdownParagraphs text
    array p in paragraphs
      if matched = p.match @_markdownBlockLineStartWithSubmatchesRegexp
        [__, type, align, text] = matched
        if /^\d+/.test type
          type = type.replace /^\d+/, ''

        if matched = type.match /(\^*)`+/
          [__, depth] = matched
          text:   text = text.replace /\n```[\s\n]*$/, ''
          level:  min 2 depth.length
          style:  :code
          align:  :left

        else
          {text, images, links} = @parseParagraphText text, forHtml
          images: images
          text:   text
          links:  links

          style: style = switch type[0]
            when "^" then :indented
            when ">" then :quote
            when "#" then :heading
            when "*" then :unorderedList
            when "." then :orderedList
            else          :paragraph

          ## level
            replaces depth:
            -2: # Heading
            -1: ## subheading
            0:  paragraph
            1:  >, ^, *, 1.
            2:  >>, ^^, **, 1..
          level: switch style
            when :paragraph then 0
            when :heading then min(2 type.length) - 3
            else min 2 type.length

          align: switch align.length
            when 0 then :left
            when 1 then :center
            else        :right

      else
        {text, images, links} = @parseParagraphText p, forHtml
        images: images
        text:   text
        links:  links
        level:  0
        align:  :left
        style:  :paragraph
