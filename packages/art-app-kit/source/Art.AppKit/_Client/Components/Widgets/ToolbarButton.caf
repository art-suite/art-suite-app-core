import &StandardImport,
  &WidgetLib
  {} &ActivityBadge, &Icon

&ArtEngine.Element extract getSizePointLayout

class ToolbarButton extends ViewStateComponent

  @propFields
    :selected

  @getter
    color: ->
      if @selected
        if @props.lightColor
          :white
        else
          AppPalette.primary
      else
        @props.color ? TextPalette.black.primary

  renderIcon: ->
    @props extract iconSize, badgeBorder, icon, shadow, iconShadow, iconColor, iconScale = 1, badge, customIcon
    color = iconColor ? @color
    size = iconSize ? 25 * iconScale
    []
      customIcon
      ? icon &&
        Icon {}
          icon, color, size
          animators:  :size :fontSize
          shadow:     iconShadow ? shadow

      badge > 0 && ActivityBadge
        axis: .5
        location: xw: .75, yh: .22
        count: badge
        border: badgeBorder

      if @selected && !present @label
        Element
          key: :iconUnderline
          location: xw: .5 yh: .5, y: (size.y ? size) / 2
          axis: x: .5
          inFlow: false
          size: h: 1, ww: 1, w: -10
          draw: color
          animators:
            size:
              d: .1
              toFrom: w: 0, h: 1

  preprocessProps: (props) ->
    props extract color, dimText, brightText, lightColor

    color ||= if lightColor
      TextPalette.white.primary
    else
      if dimText
            TextPalette.black.tertiary
      else  TextPalette.black.secondary

    merge props, {} color

  # icon required
  renderIconWithCount: ->
    @props extract count, color

    if count?
      Element
        :row
        :childrenCenterLeft
        :childrenSize
        childrenMargins: @margin
        count > 0 && TextElement
          TextStyles.smallText
          :childrenSize
          animators: size: toFromVoid: hch:1, w:0
          clip:   true
          color:  color
          text:   formatted3DigitCount count

        @renderIcon()

    else
      @renderIcon()

  @getter
    margin: -> @gridSize / 2
    label:  -> @props.label ? @props.text

  render: ->
    @props extract
      palette, maxLines, iconRight, childrenMargins, shadow, labelStyle
      textPadding, innerPadding, size, hoverAction, align
      maxLargeLabelLength = 8
      lightColor
      tight
      hidden
      action, disabled, selected, lightColor, count, badge, labelBottom

    @ extract gridSize, color, label
    margin = gridSize / 2

    if tight
      size = if labelBottom
        @buttonSize
      else
        :childrenWidthParentHeight

    size = getSizePointLayout size if size

    AppKitButtonWrapper
      if @props.children
        objectWithout @props, :children
      else @props
      {}
        hidden
        size
        drawPadding:  2
        draw: drawButton
        lightColor

        hoverAction:  hoverAction

      Element
        if labelBottom then :column else :row
        size: if size?.childrenRelative then size else :parentSize
        padding: innerPadding ?
          if !labelBottom || maxLines?
            if label
              h: gridSize / 2
            else
              h: margin / 2
        childrenAlignment:  align || :centerCenter
        childrenMargins:    childrenMargins ?
          if labelBottom
            TextStyles.smallText.fontSize / 4
          else @gridSize / 2

        @props.children

        @renderIconWithCount() unless iconRight

        if label
          textProps = merge
            switch
            when labelStyle then labelStyle
            when labelBottom
              if selected && lightColor && !tight
                TextStyles.tinyBoldText
              else
                TextStyles.tinyText
            else
              if selected && lightColor && !tight
                TextStyles.smallBoldText
              else
                TextStyles.smallText
            maxLines: maxLines
            if labelBottom
              if maxLines
                size:   :parentWidthChildrenHeight
                align:  :centerCenter
              else
                size:     :childrenSize
                axis:     :topCenter
                location: :topCenter

            else
              size: cs: 1, max: ps: 1.5
              maxLines: 2
            scale: (ps, cs) -> min 1, ps.minRatio cs

            padding:  textPadding
            text:     label
            color:    color
            animators: :color

          Element
            if labelBottom then :parentWidthChildrenHeight
            else :childrenSizeMaxParentWidth
            # opacity: .9

            if selected && tight && !labelBottom
              Element
                location: yh: 1, y: 2
                inFlow: false
                size: h: 1
                draw: color
                animators:
                  color:    true
                  opacity:  toFrom: 0

            if true
              TextElement
                textProps

                key: :subtractor
                compositeMode: :targetWithoutSource
                animators: opacity: toFrom: .99

                OutlineElement
                  lineWidth: 2
                  color: :white

            TextElement textProps

        @renderIconWithCount() if iconRight
