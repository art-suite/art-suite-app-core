import &StandardImport

class PageStack extends ApplicationState

  @stateFields
    currentPageStackId: null
    stacks:             null
    maxPageStackSize:   20

  init: (stacks) ->
    @stacks = array stackEntry in stacks
      @normalizeStackEntry stackEntry

  normalizeStackEntry: (stackEntry) ->
    unless present stackEntry.title
      merge
        stackEntry
        title: @getTitle stackEntry

    else
      stackEntry

  getTitle: (stackEntry) ->
    unless stackEntry extract component
      throw new Error "component required"

    stackEntry.title
    ? upperCamelCase stackEntry.component.class.getName()

  @getter
    currentPageStack: -> @state[@currentPageStackId]
    showBackButton:   -> @currentPageStack.length > 1

  @setter
    stacks: (stacks) ->
      @setState {} stacks
      @currentPageStackId ?= stacks[0].id
      each rootStackEntry in stacks
        @setState rootStackEntry.id, [] @normalizeStackEntry rootStackEntry

  push: (stackEntry) ->
    stackEntry = @normalizeStackEntry stackEntry
    @setState (state) ->
      state extract currentPageStackId, maxPageStackSize

      currentPageStack = state[currentPageStackId]

      objectWith
        state
        currentPageStackId
        if currentPageStack.length + 1 >= maxPageStackSize
          compactFlattenFast []
            currentPageStack[0]
            currentPageStack.slice currentPageStack.length - maxPageStackSize + 1, currentPageStack.length
            stackEntry

        else
          arrayWith currentPageStack, stackEntry

  pop: ->
    @setState (state) ->
      state extract currentPageStackId
      objectWith
        state
        currentPageStackId
        state[currentPageStackId].slice 0, -1
