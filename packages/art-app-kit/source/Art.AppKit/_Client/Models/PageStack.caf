import &StandardImport


getComponentTitle = (component) ->
  upperCamelCase component.class.getName(), ' '

class PageStack extends ApplicationState

  @stateFields
    currentPageStackId: null
    stacks:             null
    maxPageStackSize:   20

  init: ({pageStacks, pages}) ->
    @_pages = pages
    @stacks = array stackEntry in pageStacks
      @_normalizeStackEntry stackEntry

  showStack: (id) ->
    @validateStackId id
    if @currentPageStackId == id
      @resetStack id
    else @currentPageStackId = id

  validateStackId: (id) ->
    throw new Error "showStack - `#{id}` not found" unless @state[id] is Array

  @getter
    currentPageStack: -> @state[@currentPageStackId]
    showBackButton:   -> @currentPageStack.length > 1

  @setter
    stacks: (stacks) ->
      @setState {} stacks
      @currentPageStackId ?= stacks[0].id
      each rootStackEntry in stacks
        @setState rootStackEntry.id, [] @_normalizeStackEntry rootStackEntry

  resetStack: (stackId) ->
    @validateStackId stackId
    @setState (state) ->
      objectWith state, stackId, state[stackId].slice 0, 1

  push: (stackEntry) ->
    stackEntry = @_normalizeStackEntry stackEntry
    @setState (state) ->
      state extract currentPageStackId, maxPageStackSize

      currentPageStack = state[currentPageStackId]

      objectWith
        state
        currentPageStackId
        if currentPageStack.length + 1 >= maxPageStackSize
          compactFlattenFast []
            currentPageStack[0]
            currentPageStack.slice currentPageStack.length - maxPageStackSize + 1, currentPageStack.length
            stackEntry

        else
          arrayWith currentPageStack, stackEntry

  pop: ->
    @setState (state) ->
      state extract currentPageStackId
      objectWith
        state
        currentPageStackId
        state[currentPageStackId].slice 0, -1

  #################
    PRIVATE
  #################
  _normalizeStackEntry: (stackEntry) ->
    unless component = stackEntry.component ? @_pages?[upperCamelCase stackEntry.id]
      throw new Error "" component not found for stackEntry: #{formattedInspect stackEntry}

    merge stackEntry, {}
      component
      title: stackEntry.title ? getComponentTitle component
