import &StandardImport, &ArtBrowserTools

class AppKitViewState extends ApplicationState

  touchButtonSize    = 48
  desktopButtonSize  = 38

  computeViewState: computeViewState = (viewSize) ->
    phoneWidth = min 420, viewSize.w
    gridSize = phoneWidth / 27

    simpleBrowserInfo = getSimpleBrowserInfo()

    isPhone = isTablet = isDesktop = false
    switch simpleBrowserInfo.deviceType
      when :phone   then isPhone = true
      when :tablet  then isTablet = true
      when :desktop then isDesktop = true

    {}
      touchButtonSize
      desktopButtonSize

      viewSize
      buttonSize = if isDesktop then desktopButtonSize else touchButtonSize
      phoneWidth
      gridSize
      isPhone
      isTablet
      isDesktop
      screenWidth  = screen.availWidth
      screenHeight = screen.availHeight
      deviceLayoutMode: deviceLayoutMode =
        if isPhone
          if getOrientationIsPortrait viewSize
            :phonePortrait
          else
            :phoneLandscape
        else if viewSize.x < 600
          :narrow
        else
          :wide
      wide:           deviceLayoutMode == :wide
      narrow:         deviceLayoutMode == :narrow
      phonePortrait:  deviceLayoutMode == :phonePortrait
      phoneLandscape: deviceLayoutMode == :phoneLandscape

      simpleBrowserInfo
      notchInfo:          getNotchInfo()
      safePadding:        safePadding = getCssSafeAreaInset()
      suggestedPadding:   suggestedPadding =
        object v in safePadding
          max v, gridSize
      safeToSuggestedPaddingDelta:
        object v, k in safePadding
          suggestedPadding[k] - v

  @stateFields computeViewState point
    screen.availWidth
    screen.availHeight

  # Use as "on: {} @models.viewState.ready" handler
  ready: ({target:{currentSize}}) -> @setState @computeViewState currentSize
