import &StandardImport, &ArtBrowserTools

class AppKitViewState extends ApplicationState

  computeViewState: computeViewState = (viewSize) ->

    {}
      # core info
      viewSize
      simpleBrowserInfo =           getSimpleBrowserInfo()
      notchInfo:                    getNotchInfo()
      isTouchScreen:                simpleBrowserInfo.touch

      # grid layout
      majorGridSize     =           min 420, viewSize.w
      gridSize          =           majorGridSize / 27

      # safePadding
      safePadding       =           getCssSafeAreaInset()
      suggestedPadding  =           object v    in safePadding with max v, gridSize
      safeToSuggestedPaddingDelta:  object v, k in safePadding with suggestedPadding[k] - v

      # deviceTypes
      isPhone           =           simpleBrowserInfo extract deviceType == :phone
      isTablet          =           deviceType == :tablet
      isDesktop         =           deviceType == :desktop

      # deviceLayoutMode
      deviceLayoutMode =
        if isPhone
          if getOrientationIsPortrait viewSize
                :phonePortraitLayout
          else  :phoneLandscapeLayout
        else if viewSize.x < 600
                :narrowLayout
        else    :wideLayout

      phonePortraitLayout:  false
      phoneLandscapeLayout: false
      wideLayout:           false
      narrowLayout:         false
      [deviceLayoutMode]:   true

      # button sizes
      smallButtonSize   =           35
      desktopButtonSize =           38
      reducedButtonSize =           40
      touchButtonSize   =           48
      buttonSize        =           if isDesktop then desktopButtonSize else touchButtonSize
      heightAdjustedButtonSize:     if deviceLayoutMode == :phoneLandscape then smallButtonSize else buttonSize

  @stateFields computeViewState point
    screen.availWidth
    screen.availHeight

  # Use as "on: {} @models.viewState.ready" handler
  ready: ({target:{currentSize}}) -> @setState @computeViewState currentSize
